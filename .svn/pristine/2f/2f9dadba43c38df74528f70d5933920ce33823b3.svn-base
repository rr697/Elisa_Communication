
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800200  00008668  000086fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008668  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000370  0080021c  0080021c  00008718  2**0
                  ALLOC
  3 .stab         00003714  00000000  00000000  00008718  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eb9  00000000  00000000  0000be2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000218  00000000  00000000  0000cce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000019ba  00000000  00000000  0000cefd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004ba0  00000000  00000000  0000e8b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010e1  00000000  00000000  00013457  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000060d8  00000000  00000000  00014538  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000800  00000000  00000000  0001a610  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000012e3  00000000  00000000  0001ae10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002374  00000000  00000000  0001c0f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000278  00000000  00000000  0001e467  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000128  00000000  00000000  0001e6df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__vector_10>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 8c 1d 	jmp	0x3b18	; 0x3b18 <__vector_15>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <__vector_25>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <__vector_29>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 36 34 	jmp	0x686c	; 0x686c <__vector_32>
      84:	0c 94 4c 34 	jmp	0x6898	; 0x6898 <__vector_33>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 a9 33 	jmp	0x6752	; 0x6752 <__vector_35>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a8:	0c 94 7d 33 	jmp	0x66fa	; 0x66fa <__vector_42>
      ac:	0c 94 93 33 	jmp	0x6726	; 0x6726 <__vector_43>
      b0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b4:	0c 94 e6 32 	jmp	0x65cc	; 0x65cc <__vector_45>
      b8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      bc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      dc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e4:	b8 14       	cp	r11, r8
      e6:	9c 14       	cp	r9, r12
      e8:	6a 14       	cp	r6, r10
      ea:	55 14       	cp	r5, r5
      ec:	2c 14       	cp	r2, r12
      ee:	1a 14       	cp	r1, r10
      f0:	f1 13       	cpse	r31, r17
      f2:	d5 13       	cpse	r29, r21
      f4:	9c 13       	cpse	r25, r28
      f6:	84 13       	cpse	r24, r20
      f8:	1d 13       	cpse	r17, r29
      fa:	1d 13       	cpse	r17, r29
      fc:	1d 13       	cpse	r17, r29
      fe:	1d 13       	cpse	r17, r29
     100:	1d 13       	cpse	r17, r29
     102:	1d 13       	cpse	r17, r29
     104:	c9 13       	cpse	r28, r25
     106:	79 13       	cpse	r23, r25
     108:	1d 13       	cpse	r17, r29
     10a:	1d 13       	cpse	r17, r29
     10c:	1d 13       	cpse	r17, r29
     10e:	1d 13       	cpse	r17, r29
     110:	1d 13       	cpse	r17, r29
     112:	1d 13       	cpse	r17, r29
     114:	1d 13       	cpse	r17, r29
     116:	1d 13       	cpse	r17, r29
     118:	1d 13       	cpse	r17, r29
     11a:	1d 13       	cpse	r17, r29
     11c:	1d 13       	cpse	r17, r29
     11e:	1d 13       	cpse	r17, r29
     120:	9c 13       	cpse	r25, r28
     122:	6a 14       	cp	r6, r10
     124:	51 13       	cpse	r21, r17
     126:	44 13       	cpse	r20, r20
     128:	1d 13       	cpse	r17, r29
     12a:	1d 13       	cpse	r17, r29
     12c:	1d 13       	cpse	r17, r29
     12e:	1d 13       	cpse	r17, r29
     130:	1d 13       	cpse	r17, r29
     132:	1d 13       	cpse	r17, r29
     134:	1d 13       	cpse	r17, r29
     136:	1d 13       	cpse	r17, r29
     138:	1d 13       	cpse	r17, r29
     13a:	1d 13       	cpse	r17, r29
     13c:	1d 13       	cpse	r17, r29
     13e:	1d 13       	cpse	r17, r29
     140:	2c 14       	cp	r2, r12
     142:	f1 13       	cpse	r31, r17
     144:	1d 13       	cpse	r17, r29
     146:	1d 13       	cpse	r17, r29
     148:	b8 14       	cp	r11, r8
     14a:	1a 14       	cp	r1, r10
     14c:	5d 13       	cpse	r21, r29
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	e8 e6       	ldi	r30, 0x68	; 104
     1b2:	f6 e8       	ldi	r31, 0x86	; 134
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <.do_copy_data_start>

000001b6 <.do_copy_data_loop>:
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0

000001ba <.do_copy_data_start>:
     1ba:	ac 31       	cpi	r26, 0x1C	; 28
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <.do_copy_data_loop>

000001c0 <__do_clear_bss>:
     1c0:	15 e0       	ldi	r17, 0x05	; 5
     1c2:	ac e1       	ldi	r26, 0x1C	; 28
     1c4:	b2 e0       	ldi	r27, 0x02	; 2
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	ac 38       	cpi	r26, 0x8C	; 140
     1cc:	b1 07       	cpc	r27, r17
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
     1d4:	0c 94 33 43 	jmp	0x8666	; 0x8666 <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1dc:	2f 92       	push	r2
     1de:	3f 92       	push	r3
     1e0:	4f 92       	push	r4
     1e2:	5f 92       	push	r5
     1e4:	6f 92       	push	r6
     1e6:	7f 92       	push	r7
     1e8:	8f 92       	push	r8
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	00 d0       	rcall	.+0      	; 0x202 <main+0x26>
     202:	0f 92       	push	r0
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;

	initPeripherals();
     208:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <initPeripherals>

	calibrateSensors();
     20c:	0e 94 e2 39 	call	0x73c4	; 0x73c4 <calibrateSensors>

	initBehaviors();
     210:	0e 94 62 34 	call	0x68c4	; 0x68c4 <initBehaviors>

	startTime = getTime100MicroSec();
     214:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     218:	6b 01       	movw	r12, r22
     21a:	7c 01       	movw	r14, r24

	speedStepCounter = getTime100MicroSec();
     21c:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     220:	9b 01       	movw	r18, r22
     222:	ac 01       	movw	r20, r24
     224:	60 93 5c 04 	sts	0x045C, r22
     228:	30 93 5d 04 	sts	0x045D, r19
     22c:	40 93 5e 04 	sts	0x045E, r20
     230:	50 93 5f 04 	sts	0x045F, r21
     234:	10 92 60 04 	sts	0x0460, r1
     238:	10 92 61 04 	sts	0x0461, r1
     23c:	10 92 62 04 	sts	0x0462, r1
     240:	10 92 63 04 	sts	0x0463, r1
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     244:	aa 24       	eor	r10, r10
     246:	bb 24       	eor	r11, r11


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     248:	00 e0       	ldi	r16, 0x00	; 0
#include "sensors.h"


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     24a:	19 82       	std	Y+1, r1	; 0x01
     24c:	1a 82       	std	Y+2, r1	; 0x02
     24e:	1b 82       	std	Y+3, r1	; 0x03
     250:	1c 82       	std	Y+4, r1	; 0x04
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     252:	1f ef       	ldi	r17, 0xFF	; 255
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     254:	22 24       	eor	r2, r2
     256:	23 94       	inc	r2
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
*/

	while(1) {

		currentSelector = getSelector();	// update selector position
     258:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <getSelector>
     25c:	80 93 48 04 	sts	0x0448, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     260:	0e 94 22 39 	call	0x7244	; 0x7244 <readAccelXYZ>

		computeAngle();
     264:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     268:	80 91 48 04 	lds	r24, 0x0448
     26c:	87 30       	cpi	r24, 0x07	; 7
     26e:	09 f4       	brne	.+2      	; 0x272 <main+0x96>
     270:	b9 c1       	rjmp	.+882    	; 0x5e4 <main+0x408>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     272:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     276:	6c 19       	sub	r22, r12
     278:	7d 09       	sbc	r23, r13
     27a:	8e 09       	sbc	r24, r14
     27c:	9f 09       	sbc	r25, r15
     27e:	6e 31       	cpi	r22, 0x1E	; 30
     280:	4b e4       	ldi	r20, 0x4B	; 75
     282:	74 07       	cpc	r23, r20
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	84 07       	cpc	r24, r20
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	94 07       	cpc	r25, r20
     28c:	08 f0       	brcs	.+2      	; 0x290 <main+0xb4>
     28e:	96 c1       	rjmp	.+812    	; 0x5bc <main+0x3e0>
			startTime = getTime100MicroSec();
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     290:	0e 94 0b 13 	call	0x2616	; 0x2616 <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     294:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <handleRFCommands>
		//}


		if(calibrateOdomFlag==0) {
     298:	80 91 c7 04 	lds	r24, 0x04C7
     29c:	88 23       	and	r24, r24
     29e:	09 f4       	brne	.+2      	; 0x2a2 <main+0xc6>
     2a0:	76 c0       	rjmp	.+236    	; 0x38e <main+0x1b2>
				}

			}
		}

		if(currentSelector!=6 && currentSelector!=15) {
     2a2:	80 91 48 04 	lds	r24, 0x0448
     2a6:	86 30       	cpi	r24, 0x06	; 6
     2a8:	09 f4       	brne	.+2      	; 0x2ac <main+0xd0>
     2aa:	62 c1       	rjmp	.+708    	; 0x570 <main+0x394>
     2ac:	8f 30       	cpi	r24, 0x0F	; 15
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <main+0xd6>
     2b0:	4e c0       	rjmp	.+156    	; 0x34e <main+0x172>
					break;

		}

		if(currentSelector!=0) {
			handleMotorsWithSpeedController();  
     2b2:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <handleMotorsWithSpeedController>
     2b6:	80 91 48 04 	lds	r24, 0x0448
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     2ba:	08 17       	cp	r16, r24
     2bc:	69 f2       	breq	.-102    	; 0x258 <main+0x7c>
			disableObstacleAvoidance();
     2be:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <disableObstacleAvoidance>
			disableCliffAvoidance();
     2c2:	0e 94 aa 36 	call	0x6d54	; 0x6d54 <disableCliffAvoidance>
			GREEN_LED0_OFF;
     2c6:	80 91 0b 01 	lds	r24, 0x010B
     2ca:	81 60       	ori	r24, 0x01	; 1
     2cc:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     2d0:	80 91 0b 01 	lds	r24, 0x010B
     2d4:	82 60       	ori	r24, 0x02	; 2
     2d6:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     2da:	80 91 0b 01 	lds	r24, 0x010B
     2de:	84 60       	ori	r24, 0x04	; 4
     2e0:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     2e4:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     2e6:	80 91 0b 01 	lds	r24, 0x010B
     2ea:	80 61       	ori	r24, 0x10	; 16
     2ec:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     2f0:	80 91 0b 01 	lds	r24, 0x010B
     2f4:	80 62       	ori	r24, 0x20	; 32
     2f6:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     2fa:	80 91 0b 01 	lds	r24, 0x010B
     2fe:	80 64       	ori	r24, 0x40	; 64
     300:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     304:	80 91 0b 01 	lds	r24, 0x010B
     308:	80 68       	ori	r24, 0x80	; 128
     30a:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     30e:	10 93 0c 02 	sts	0x020C, r17
			pwm_green = 255;
     312:	10 93 0d 02 	sts	0x020D, r17
			pwm_blue = 255;
     316:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <updateRedLed>
			updateGreenLed(pwm_green);
     320:	80 91 0d 02 	lds	r24, 0x020D
     324:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <updateGreenLed>
			updateBlueLed(pwm_blue);
     328:	80 91 0e 02 	lds	r24, 0x020E
     32c:	0e 94 12 37 	call	0x6e24	; 0x6e24 <updateBlueLed>
			setRightSpeed(0);
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
			setLeftSpeed(0);
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
			rgbState = 0;
     33c:	10 92 18 03 	sts	0x0318, r1
			calibrationWritten = 0;
     340:	10 92 65 04 	sts	0x0465, r1
			demoState = 0;
     344:	10 92 4c 04 	sts	0x044C, r1
     348:	00 91 48 04 	lds	r16, 0x0448
     34c:	85 cf       	rjmp	.-246    	; 0x258 <main+0x7c>

			}
		}

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
		}

		switch(currentSelector) {
     354:	90 91 48 04 	lds	r25, 0x0448
     358:	89 2f       	mov	r24, r25
     35a:	96 30       	cpi	r25, 0x06	; 6
     35c:	09 f4       	brne	.+2      	; 0x360 <main+0x184>
     35e:	08 c1       	rjmp	.+528    	; 0x570 <main+0x394>
     360:	97 30       	cpi	r25, 0x07	; 7
     362:	08 f0       	brcs	.+2      	; 0x366 <main+0x18a>
     364:	60 c1       	rjmp	.+704    	; 0x626 <main+0x44a>
     366:	92 30       	cpi	r25, 0x02	; 2
     368:	09 f4       	brne	.+2      	; 0x36c <main+0x190>
     36a:	58 c1       	rjmp	.+688    	; 0x61c <main+0x440>
     36c:	93 30       	cpi	r25, 0x03	; 3
     36e:	08 f0       	brcs	.+2      	; 0x372 <main+0x196>
     370:	b7 c2       	rjmp	.+1390   	; 0x8e0 <main+0x704>
     372:	99 23       	and	r25, r25
     374:	09 f4       	brne	.+2      	; 0x378 <main+0x19c>
     376:	6e c1       	rjmp	.+732    	; 0x654 <main+0x478>
     378:	91 30       	cpi	r25, 0x01	; 1
     37a:	21 f4       	brne	.+8      	; 0x384 <main+0x1a8>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     37c:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <enableObstacleAvoidance>
     380:	90 91 48 04 	lds	r25, 0x0448
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     384:	99 23       	and	r25, r25
     386:	09 f0       	breq	.+2      	; 0x38a <main+0x1ae>
     388:	94 cf       	rjmp	.-216    	; 0x2b2 <main+0xd6>
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	96 cf       	rjmp	.-212    	; 0x2ba <main+0xde>
			handleRFCommands();
		//}


		if(calibrateOdomFlag==0) {
			if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     38e:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     392:	9b 01       	movw	r18, r22
     394:	ac 01       	movw	r20, r24
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	cb 01       	movw	r24, r22
     39c:	f0 91 5c 04 	lds	r31, 0x045C
     3a0:	e0 91 5d 04 	lds	r30, 0x045D
     3a4:	80 90 5e 04 	lds	r8, 0x045E
     3a8:	40 90 5f 04 	lds	r4, 0x045F
     3ac:	30 90 60 04 	lds	r3, 0x0460
     3b0:	50 90 61 04 	lds	r5, 0x0461
     3b4:	60 90 62 04 	lds	r6, 0x0462
     3b8:	70 90 63 04 	lds	r7, 0x0463
     3bc:	b2 2f       	mov	r27, r18
     3be:	bf 1b       	sub	r27, r31
     3c0:	a1 e0       	ldi	r26, 0x01	; 1
     3c2:	2b 17       	cp	r18, r27
     3c4:	08 f0       	brcs	.+2      	; 0x3c8 <main+0x1ec>
     3c6:	a0 e0       	ldi	r26, 0x00	; 0
     3c8:	f3 2f       	mov	r31, r19
     3ca:	fe 1b       	sub	r31, r30
     3cc:	ef 2f       	mov	r30, r31
     3ce:	f1 e0       	ldi	r31, 0x01	; 1
     3d0:	3e 17       	cp	r19, r30
     3d2:	08 f0       	brcs	.+2      	; 0x3d6 <main+0x1fa>
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	9e 2e       	mov	r9, r30
     3d8:	9a 1a       	sub	r9, r26
     3da:	a9 2d       	mov	r26, r9
     3dc:	99 24       	eor	r9, r9
     3de:	93 94       	inc	r9
     3e0:	ea 17       	cp	r30, r26
     3e2:	08 f0       	brcs	.+2      	; 0x3e6 <main+0x20a>
     3e4:	99 24       	eor	r9, r9
     3e6:	f9 29       	or	r31, r9
     3e8:	e4 2f       	mov	r30, r20
     3ea:	e8 19       	sub	r30, r8
     3ec:	8e 2e       	mov	r8, r30
     3ee:	e1 e0       	ldi	r30, 0x01	; 1
     3f0:	48 15       	cp	r20, r8
     3f2:	08 f0       	brcs	.+2      	; 0x3f6 <main+0x21a>
     3f4:	e0 e0       	ldi	r30, 0x00	; 0
     3f6:	98 2c       	mov	r9, r8
     3f8:	9f 1a       	sub	r9, r31
     3fa:	f1 e0       	ldi	r31, 0x01	; 1
     3fc:	89 14       	cp	r8, r9
     3fe:	08 f0       	brcs	.+2      	; 0x402 <main+0x226>
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	ef 2b       	or	r30, r31
     404:	f5 2f       	mov	r31, r21
     406:	f4 19       	sub	r31, r4
     408:	4f 2e       	mov	r4, r31
     40a:	f1 e0       	ldi	r31, 0x01	; 1
     40c:	54 15       	cp	r21, r4
     40e:	08 f0       	brcs	.+2      	; 0x412 <main+0x236>
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	84 2c       	mov	r8, r4
     414:	8e 1a       	sub	r8, r30
     416:	e1 e0       	ldi	r30, 0x01	; 1
     418:	48 14       	cp	r4, r8
     41a:	08 f0       	brcs	.+2      	; 0x41e <main+0x242>
     41c:	e0 e0       	ldi	r30, 0x00	; 0
     41e:	fe 2b       	or	r31, r30
     420:	31 94       	neg	r3
     422:	e1 e0       	ldi	r30, 0x01	; 1
     424:	63 15       	cp	r22, r3
     426:	08 f0       	brcs	.+2      	; 0x42a <main+0x24e>
     428:	e0 e0       	ldi	r30, 0x00	; 0
     42a:	43 2c       	mov	r4, r3
     42c:	4f 1a       	sub	r4, r31
     42e:	f1 e0       	ldi	r31, 0x01	; 1
     430:	34 14       	cp	r3, r4
     432:	08 f0       	brcs	.+2      	; 0x436 <main+0x25a>
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	ef 2b       	or	r30, r31
     438:	51 94       	neg	r5
     43a:	f1 e0       	ldi	r31, 0x01	; 1
     43c:	75 15       	cp	r23, r5
     43e:	08 f0       	brcs	.+2      	; 0x442 <main+0x266>
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	35 2c       	mov	r3, r5
     444:	3e 1a       	sub	r3, r30
     446:	e1 e0       	ldi	r30, 0x01	; 1
     448:	53 14       	cp	r5, r3
     44a:	08 f0       	brcs	.+2      	; 0x44e <main+0x272>
     44c:	e0 e0       	ldi	r30, 0x00	; 0
     44e:	fe 2b       	or	r31, r30
     450:	61 94       	neg	r6
     452:	e1 e0       	ldi	r30, 0x01	; 1
     454:	86 15       	cp	r24, r6
     456:	08 f0       	brcs	.+2      	; 0x45a <main+0x27e>
     458:	e0 e0       	ldi	r30, 0x00	; 0
     45a:	96 2d       	mov	r25, r6
     45c:	9f 1b       	sub	r25, r31
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	69 16       	cp	r6, r25
     462:	08 f0       	brcs	.+2      	; 0x466 <main+0x28a>
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	e8 2b       	or	r30, r24
     468:	71 94       	neg	r7
     46a:	7e 16       	cp	r7, r30
     46c:	91 f4       	brne	.+36     	; 0x492 <main+0x2b6>
     46e:	99 23       	and	r25, r25
     470:	81 f4       	brne	.+32     	; 0x492 <main+0x2b6>
     472:	33 20       	and	r3, r3
     474:	71 f4       	brne	.+28     	; 0x492 <main+0x2b6>
     476:	44 20       	and	r4, r4
     478:	61 f4       	brne	.+24     	; 0x492 <main+0x2b6>
     47a:	88 20       	and	r8, r8
     47c:	51 f4       	brne	.+20     	; 0x492 <main+0x2b6>
     47e:	99 20       	and	r9, r9
     480:	41 f4       	brne	.+16     	; 0x492 <main+0x2b6>
     482:	a2 30       	cpi	r26, 0x02	; 2
     484:	30 f4       	brcc	.+12     	; 0x492 <main+0x2b6>
     486:	a1 30       	cpi	r26, 0x01	; 1
     488:	09 f0       	breq	.+2      	; 0x48c <main+0x2b0>
     48a:	0b cf       	rjmp	.-490    	; 0x2a2 <main+0xc6>
     48c:	b0 39       	cpi	r27, 0x90	; 144
     48e:	08 f4       	brcc	.+2      	; 0x492 <main+0x2b6>
     490:	08 cf       	rjmp	.-496    	; 0x2a2 <main+0xc6>
				speedStepCounter = getTime100MicroSec();
     492:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     496:	9b 01       	movw	r18, r22
     498:	ac 01       	movw	r20, r24
     49a:	60 93 5c 04 	sts	0x045C, r22
     49e:	30 93 5d 04 	sts	0x045D, r19
     4a2:	40 93 5e 04 	sts	0x045E, r20
     4a6:	50 93 5f 04 	sts	0x045F, r21
     4aa:	10 92 60 04 	sts	0x0460, r1
     4ae:	10 92 61 04 	sts	0x0461, r1
     4b2:	10 92 62 04 	sts	0x0462, r1
     4b6:	10 92 63 04 	sts	0x0463, r1

				if(softAccEnabled) {
     4ba:	80 91 64 04 	lds	r24, 0x0464
     4be:	88 23       	and	r24, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <main+0x2e8>
     4c2:	4f c2       	rjmp	.+1182   	; 0x962 <main+0x786>
					if(pwm_right_desired == 0) {
     4c4:	80 91 f7 02 	lds	r24, 0x02F7
     4c8:	90 91 f8 02 	lds	r25, 0x02F8
     4cc:	00 97       	sbiw	r24, 0x00	; 0
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <main+0x2f6>
     4d0:	e0 c2       	rjmp	.+1472   	; 0xa92 <main+0x8b6>
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
     4d2:	20 91 fb 02 	lds	r18, 0x02FB
     4d6:	30 91 fc 02 	lds	r19, 0x02FC
     4da:	28 9f       	mul	r18, r24
     4dc:	a0 01       	movw	r20, r0
     4de:	29 9f       	mul	r18, r25
     4e0:	50 0d       	add	r21, r0
     4e2:	38 9f       	mul	r19, r24
     4e4:	50 0d       	add	r21, r0
     4e6:	11 24       	eor	r1, r1
     4e8:	57 fd       	sbrc	r21, 7
     4ea:	d3 c2       	rjmp	.+1446   	; 0xa92 <main+0x8b6>
						pwm_intermediate_right_desired = 0;
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
     4ec:	28 17       	cp	r18, r24
     4ee:	39 07       	cpc	r19, r25
     4f0:	14 f0       	brlt	.+4      	; 0x4f6 <main+0x31a>
     4f2:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <main+0x136e>
						pwm_intermediate_right_desired += speedStep;
     4f6:	40 91 17 02 	lds	r20, 0x0217
     4fa:	24 0f       	add	r18, r20
     4fc:	31 1d       	adc	r19, r1
     4fe:	30 93 fc 02 	sts	0x02FC, r19
     502:	20 93 fb 02 	sts	0x02FB, r18
						if(pwm_intermediate_right_desired > pwm_right_desired) {
     506:	82 17       	cp	r24, r18
     508:	93 07       	cpc	r25, r19
     50a:	24 f4       	brge	.+8      	; 0x514 <main+0x338>
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired -= speedStep;
						if(pwm_intermediate_right_desired < pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
     50c:	90 93 fc 02 	sts	0x02FC, r25
     510:	80 93 fb 02 	sts	0x02FB, r24
						}					
					}
	
					if(pwm_left_desired == 0) {
     514:	80 91 f9 02 	lds	r24, 0x02F9
     518:	90 91 fa 02 	lds	r25, 0x02FA
     51c:	00 97       	sbiw	r24, 0x00	; 0
     51e:	09 f4       	brne	.+2      	; 0x522 <main+0x346>
     520:	b3 c2       	rjmp	.+1382   	; 0xa88 <main+0x8ac>
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
     522:	20 91 fd 02 	lds	r18, 0x02FD
     526:	30 91 fe 02 	lds	r19, 0x02FE
     52a:	28 9f       	mul	r18, r24
     52c:	a0 01       	movw	r20, r0
     52e:	29 9f       	mul	r18, r25
     530:	50 0d       	add	r21, r0
     532:	38 9f       	mul	r19, r24
     534:	50 0d       	add	r21, r0
     536:	11 24       	eor	r1, r1
     538:	57 fd       	sbrc	r21, 7
     53a:	a6 c2       	rjmp	.+1356   	; 0xa88 <main+0x8ac>
						pwm_intermediate_left_desired = 0;
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
     53c:	28 17       	cp	r18, r24
     53e:	39 07       	cpc	r19, r25
     540:	14 f0       	brlt	.+4      	; 0x546 <main+0x36a>
     542:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <main+0x1396>
						pwm_intermediate_left_desired += speedStep;
     546:	40 91 17 02 	lds	r20, 0x0217
     54a:	24 0f       	add	r18, r20
     54c:	31 1d       	adc	r19, r1
     54e:	30 93 fe 02 	sts	0x02FE, r19
     552:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_left_desired > pwm_left_desired) {
     556:	82 17       	cp	r24, r18
     558:	93 07       	cpc	r25, r19
     55a:	0c f0       	brlt	.+2      	; 0x55e <main+0x382>
     55c:	a2 ce       	rjmp	.-700    	; 0x2a2 <main+0xc6>
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
					pwm_intermediate_left_desired = pwm_left_desired;
     55e:	90 93 fe 02 	sts	0x02FE, r25
     562:	80 93 fd 02 	sts	0x02FD, r24
				}

			}
		}

		if(currentSelector!=6 && currentSelector!=15) {
     566:	80 91 48 04 	lds	r24, 0x0448
     56a:	86 30       	cpi	r24, 0x06	; 6
     56c:	09 f0       	breq	.+2      	; 0x570 <main+0x394>
     56e:	9e ce       	rjmp	.-708    	; 0x2ac <main+0xd0>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     570:	90 91 1f 04 	lds	r25, 0x041F
     574:	91 30       	cpi	r25, 0x01	; 1
     576:	09 f4       	brne	.+2      	; 0x57a <main+0x39e>
     578:	be c3       	rjmp	.+1916   	; 0xcf6 <main+0xb1a>
     57a:	91 30       	cpi	r25, 0x01	; 1
     57c:	08 f0       	brcs	.+2      	; 0x580 <main+0x3a4>
     57e:	d1 c2       	rjmp	.+1442   	; 0xb22 <main+0x946>
						case 0:
							setRightSpeed(0);
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
							setLeftSpeed(0);
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
							turnOffGreenLeds();
     58c:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <turnOffGreenLeds>
							pwm_red=255;
     590:	10 93 0c 02 	sts	0x020C, r17
							pwm_green=255;
     594:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue=255;
     598:	10 93 0e 02 	sts	0x020E, r17
							updateRedLed(pwm_red);
     59c:	8f ef       	ldi	r24, 0xFF	; 255
     59e:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <updateRedLed>
							updateGreenLed(pwm_green);
     5a2:	80 91 0d 02 	lds	r24, 0x020D
     5a6:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <updateGreenLed>
							updateBlueLed(pwm_blue);
     5aa:	80 91 0e 02 	lds	r24, 0x020E
     5ae:	0e 94 12 37 	call	0x6e24	; 0x6e24 <updateBlueLed>
							LED_IR1_HIGH;
     5b2:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     5b4:	45 9a       	sbi	0x08, 5	; 8
     5b6:	90 91 48 04 	lds	r25, 0x0448
							break;
     5ba:	e4 ce       	rjmp	.-568    	; 0x384 <main+0x1a8>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     5bc:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     5c0:	80 91 48 04 	lds	r24, 0x0448
     5c4:	98 2f       	mov	r25, r24
     5c6:	94 50       	subi	r25, 0x04	; 4
     5c8:	92 30       	cpi	r25, 0x02	; 2
     5ca:	08 f4       	brcc	.+2      	; 0x5ce <main+0x3f2>
     5cc:	d7 c1       	rjmp	.+942    	; 0x97c <main+0x7a0>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     5ce:	87 30       	cpi	r24, 0x07	; 7
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <main+0x3f8>
     5d2:	ff c1       	rjmp	.+1022   	; 0x9d2 <main+0x7f6>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     5d4:	86 30       	cpi	r24, 0x06	; 6
     5d6:	09 f4       	brne	.+2      	; 0x5da <main+0x3fe>
     5d8:	18 c1       	rjmp	.+560    	; 0x80a <main+0x62e>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     5da:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     5de:	6b 01       	movw	r12, r22
     5e0:	7c 01       	movw	r14, r24
     5e2:	56 ce       	rjmp	.-852    	; 0x290 <main+0xb4>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     5e4:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     5e8:	29 81       	ldd	r18, Y+1	; 0x01
     5ea:	3a 81       	ldd	r19, Y+2	; 0x02
     5ec:	4b 81       	ldd	r20, Y+3	; 0x03
     5ee:	5c 81       	ldd	r21, Y+4	; 0x04
     5f0:	62 1b       	sub	r22, r18
     5f2:	73 0b       	sbc	r23, r19
     5f4:	84 0b       	sbc	r24, r20
     5f6:	95 0b       	sbc	r25, r21
     5f8:	68 3c       	cpi	r22, 0xC8	; 200
     5fa:	32 e1       	ldi	r19, 0x12	; 18
     5fc:	73 07       	cpc	r23, r19
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	83 07       	cpc	r24, r19
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	93 07       	cpc	r25, r19
     606:	08 f4       	brcc	.+2      	; 0x60a <main+0x42e>
     608:	34 ce       	rjmp	.-920    	; 0x272 <main+0x96>
				pwm_red = 255;
     60a:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
     60e:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 255;			
     612:	10 93 0e 02 	sts	0x020E, r17
     616:	2d ce       	rjmp	.-934    	; 0x272 <main+0x96>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     618:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <enableObstacleAvoidance>
					enableCliffAvoidance();
     61c:	0e 94 a6 36 	call	0x6d4c	; 0x6d4c <enableCliffAvoidance>
     620:	90 91 48 04 	lds	r25, 0x0448
					break;
     624:	af ce       	rjmp	.-674    	; 0x384 <main+0x1a8>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     626:	9a 30       	cpi	r25, 0x0A	; 10
     628:	09 f4       	brne	.+2      	; 0x62c <main+0x450>
     62a:	72 c0       	rjmp	.+228    	; 0x710 <main+0x534>
     62c:	9b 30       	cpi	r25, 0x0B	; 11
     62e:	08 f0       	brcs	.+2      	; 0x632 <main+0x456>
     630:	05 c1       	rjmp	.+522    	; 0x83c <main+0x660>
     632:	98 30       	cpi	r25, 0x08	; 8
     634:	09 f4       	brne	.+2      	; 0x638 <main+0x45c>
     636:	60 c0       	rjmp	.+192    	; 0x6f8 <main+0x51c>
     638:	99 30       	cpi	r25, 0x09	; 9
     63a:	88 f0       	brcs	.+34     	; 0x65e <main+0x482>
						handleCalibration();
					}
					break;

			case 9:	// write default calibration values
					if(!calibrationWritten) {
     63c:	80 91 65 04 	lds	r24, 0x0465
     640:	88 23       	and	r24, r24
     642:	09 f0       	breq	.+2      	; 0x646 <main+0x46a>
     644:	36 ce       	rjmp	.-916    	; 0x2b2 <main+0xd6>
						calibrationWritten = 1;
     646:	20 92 65 04 	sts	0x0465, r2
						writeDefaultCalibration();
     64a:	0e 94 17 31 	call	0x622e	; 0x622e <writeDefaultCalibration>
     64e:	90 91 48 04 	lds	r25, 0x0448
     652:	98 ce       	rjmp	.-720    	; 0x384 <main+0x1a8>
		}

		switch(currentSelector) {
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     654:	0e 94 8a 21 	call	0x4314	; 0x4314 <handleMotorsWithNoController>
     658:	90 91 48 04 	lds	r25, 0x0448
					break;
     65c:	93 ce       	rjmp	.-730    	; 0x384 <main+0x1a8>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     65e:	80 91 4c 04 	lds	r24, 0x044C
     662:	82 30       	cpi	r24, 0x02	; 2
     664:	09 f4       	brne	.+2      	; 0x668 <main+0x48c>
     666:	c2 c6       	rjmp	.+3460   	; 0x13ec <main+0x1210>
     668:	83 30       	cpi	r24, 0x03	; 3
     66a:	08 f0       	brcs	.+2      	; 0x66e <main+0x492>
     66c:	17 c2       	rjmp	.+1070   	; 0xa9c <main+0x8c0>
     66e:	88 23       	and	r24, r24
     670:	09 f0       	breq	.+2      	; 0x674 <main+0x498>
     672:	e1 c5       	rjmp	.+3010   	; 0x1236 <main+0x105a>
						case 0:	// move around
							turnOffGreenLeds();
     674:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <turnOffGreenLeds>
							GREEN_LED0_ON;
     678:	80 91 0b 01 	lds	r24, 0x010B
     67c:	8e 7f       	andi	r24, 0xFE	; 254
     67e:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     682:	10 92 4d 04 	sts	0x044D, r1
							enableObstacleAvoidance();
     686:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <enableObstacleAvoidance>
							setRightSpeed(20);
     68a:	84 e1       	ldi	r24, 0x14	; 20
     68c:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
							setLeftSpeed(20);
     690:	84 e1       	ldi	r24, 0x14	; 20
     692:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     696:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     69a:	9b 01       	movw	r18, r22
     69c:	ac 01       	movw	r20, r24
     69e:	60 93 58 04 	sts	0x0458, r22
     6a2:	70 93 59 04 	sts	0x0459, r23
     6a6:	80 93 5a 04 	sts	0x045A, r24
     6aa:	90 93 5b 04 	sts	0x045B, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     6ae:	80 91 50 04 	lds	r24, 0x0450
     6b2:	90 91 51 04 	lds	r25, 0x0451
     6b6:	a0 91 52 04 	lds	r26, 0x0452
     6ba:	b0 91 53 04 	lds	r27, 0x0453
     6be:	28 1b       	sub	r18, r24
     6c0:	39 0b       	sbc	r19, r25
     6c2:	4a 0b       	sbc	r20, r26
     6c4:	5b 0b       	sbc	r21, r27
     6c6:	23 33       	cpi	r18, 0x33	; 51
     6c8:	6f ee       	ldi	r22, 0xEF	; 239
     6ca:	36 07       	cpc	r19, r22
     6cc:	62 e0       	ldi	r22, 0x02	; 2
     6ce:	46 07       	cpc	r20, r22
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	56 07       	cpc	r21, r22
     6d4:	10 f0       	brcs	.+4      	; 0x6da <main+0x4fe>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     6d6:	20 92 4c 04 	sts	0x044C, r2
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
								rgbLedState = 1;
								demoStartTime2 = getTime100MicroSec();
							}
							updateRedLed(pwm_red);
     6da:	80 91 0c 02 	lds	r24, 0x020C
     6de:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <updateRedLed>
							updateGreenLed(pwm_green);
     6e2:	80 91 0d 02 	lds	r24, 0x020D
     6e6:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <updateGreenLed>
							updateBlueLed(pwm_blue);
     6ea:	80 91 0e 02 	lds	r24, 0x020E
     6ee:	0e 94 12 37 	call	0x6e24	; 0x6e24 <updateBlueLed>
     6f2:	90 91 48 04 	lds	r25, 0x0448
							break;
     6f6:	46 ce       	rjmp	.-884    	; 0x384 <main+0x1a8>
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	// motors calibration
					irEnabled = 1;
     6f8:	20 92 12 02 	sts	0x0212, r2
					if(calibrateOdomFlag==1) {
     6fc:	80 91 c7 04 	lds	r24, 0x04C7
     700:	81 30       	cpi	r24, 0x01	; 1
     702:	09 f0       	breq	.+2      	; 0x706 <main+0x52a>
     704:	d6 cd       	rjmp	.-1108   	; 0x2b2 <main+0xd6>
						handleCalibration();
     706:	0e 94 db 23 	call	0x47b6	; 0x47b6 <handleCalibration>
     70a:	90 91 48 04 	lds	r25, 0x0448
     70e:	3a ce       	rjmp	.-908    	; 0x384 <main+0x1a8>
						writeDefaultCalibration();
					}
					break;

			case 10:// obstacle avoidance with random colors; 5 seconds motion and 5 seconds pause					
					switch(demoState) {
     710:	80 91 4c 04 	lds	r24, 0x044C
     714:	81 30       	cpi	r24, 0x01	; 1
     716:	09 f4       	brne	.+2      	; 0x71a <main+0x53e>
     718:	57 c5       	rjmp	.+2734   	; 0x11c8 <main+0xfec>
     71a:	81 30       	cpi	r24, 0x01	; 1
     71c:	08 f0       	brcs	.+2      	; 0x720 <main+0x544>
     71e:	5b c2       	rjmp	.+1206   	; 0xbd6 <main+0x9fa>
						case 0: // get first clock tick and start moving the robot with obstacle avoidance enabled
							demoStartTime = getTime100MicroSec();
     720:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     724:	60 93 50 04 	sts	0x0450, r22
     728:	70 93 51 04 	sts	0x0451, r23
     72c:	80 93 52 04 	sts	0x0452, r24
     730:	90 93 53 04 	sts	0x0453, r25
							demoEndTime = getTime100MicroSec();							
     734:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     738:	60 93 58 04 	sts	0x0458, r22
     73c:	70 93 59 04 	sts	0x0459, r23
     740:	80 93 5a 04 	sts	0x045A, r24
     744:	90 93 5b 04 	sts	0x045B, r25
							demoStartTime2 = getTime100MicroSec();
     748:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     74c:	60 93 54 04 	sts	0x0454, r22
     750:	70 93 55 04 	sts	0x0455, r23
     754:	80 93 56 04 	sts	0x0456, r24
     758:	90 93 57 04 	sts	0x0457, r25
							enableObstacleAvoidance();
     75c:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <enableObstacleAvoidance>
							setLeftSpeed(20);
     760:	84 e1       	ldi	r24, 0x14	; 20
     762:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
							setRightSpeed(20);
     766:	84 e1       	ldi	r24, 0x14	; 20
     768:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
							demoState = 1;
     76c:	20 92 4c 04 	sts	0x044C, r2
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     770:	80 91 67 04 	lds	r24, 0x0467
     774:	81 30       	cpi	r24, 0x01	; 1
     776:	09 f4       	brne	.+2      	; 0x77a <main+0x59e>
     778:	61 c2       	rjmp	.+1218   	; 0xc3c <main+0xa60>
     77a:	81 30       	cpi	r24, 0x01	; 1
     77c:	08 f0       	brcs	.+2      	; 0x780 <main+0x5a4>
     77e:	f0 c1       	rjmp	.+992    	; 0xb60 <main+0x984>
						case 0:							
							pwm_red = 255;
     780:	10 93 0c 02 	sts	0x020C, r17
							pwm_green = 255;
     784:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue = 255;
     788:	10 93 0e 02 	sts	0x020E, r17
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
     78c:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     790:	9b 01       	movw	r18, r22
     792:	ac 01       	movw	r20, r24
     794:	80 91 58 04 	lds	r24, 0x0458
     798:	90 91 59 04 	lds	r25, 0x0459
     79c:	a0 91 5a 04 	lds	r26, 0x045A
     7a0:	b0 91 5b 04 	lds	r27, 0x045B
     7a4:	28 1b       	sub	r18, r24
     7a6:	39 0b       	sbc	r19, r25
     7a8:	4a 0b       	sbc	r20, r26
     7aa:	5b 0b       	sbc	r21, r27
     7ac:	21 3c       	cpi	r18, 0xC1	; 193
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	38 07       	cpc	r19, r24
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	48 07       	cpc	r20, r24
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	58 07       	cpc	r21, r24
     7ba:	08 f0       	brcs	.+2      	; 0x7be <main+0x5e2>
     7bc:	ee c6       	rjmp	.+3548   	; 0x159a <main+0x13be>
									greenLedState = 0;
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
     7be:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     7c2:	9b 01       	movw	r18, r22
     7c4:	ac 01       	movw	r20, r24
     7c6:	80 91 54 04 	lds	r24, 0x0454
     7ca:	90 91 55 04 	lds	r25, 0x0455
     7ce:	a0 91 56 04 	lds	r26, 0x0456
     7d2:	b0 91 57 04 	lds	r27, 0x0457
     7d6:	28 1b       	sub	r18, r24
     7d8:	39 0b       	sbc	r19, r25
     7da:	4a 0b       	sbc	r20, r26
     7dc:	5b 0b       	sbc	r21, r27
     7de:	2e 31       	cpi	r18, 0x1E	; 30
     7e0:	9b e4       	ldi	r25, 0x4B	; 75
     7e2:	39 07       	cpc	r19, r25
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	49 07       	cpc	r20, r25
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	59 07       	cpc	r21, r25
     7ec:	08 f4       	brcc	.+2      	; 0x7f0 <main+0x614>
     7ee:	75 cf       	rjmp	.-278    	; 0x6da <main+0x4fe>
								rgbLedState = 1;
     7f0:	20 92 67 04 	sts	0x0467, r2
								demoStartTime2 = getTime100MicroSec();
     7f4:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     7f8:	60 93 54 04 	sts	0x0454, r22
     7fc:	70 93 55 04 	sts	0x0455, r23
     800:	80 93 56 04 	sts	0x0456, r24
     804:	90 93 57 04 	sts	0x0457, r25
     808:	68 cf       	rjmp	.-304    	; 0x6da <main+0x4fe>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     80a:	80 91 1f 04 	lds	r24, 0x041F
     80e:	81 30       	cpi	r24, 0x01	; 1
     810:	09 f0       	breq	.+2      	; 0x814 <main+0x638>
     812:	e3 ce       	rjmp	.-570    	; 0x5da <main+0x3fe>
     814:	90 91 15 03 	lds	r25, 0x0315
     818:	92 30       	cpi	r25, 0x02	; 2
     81a:	08 f0       	brcs	.+2      	; 0x81e <main+0x642>
     81c:	de ce       	rjmp	.-580    	; 0x5da <main+0x3fe>
					if(rgbState == 0) {
     81e:	90 91 18 03 	lds	r25, 0x0318
     822:	99 23       	and	r25, r25
     824:	09 f0       	breq	.+2      	; 0x828 <main+0x64c>
     826:	3c c7       	rjmp	.+3704   	; 0x16a0 <main+0x14c4>
						pwm_red = 254;
     828:	4e ef       	ldi	r20, 0xFE	; 254
     82a:	40 93 0c 02 	sts	0x020C, r20
						pwm_green = 255;
     82e:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 255;
     832:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 1;
     836:	80 93 18 03 	sts	0x0318, r24
     83a:	cf ce       	rjmp	.-610    	; 0x5da <main+0x3fe>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     83c:	9c 30       	cpi	r25, 0x0C	; 12
     83e:	f1 f0       	breq	.+60     	; 0x87c <main+0x6a0>
     840:	9c 30       	cpi	r25, 0x0C	; 12
     842:	a8 f1       	brcs	.+106    	; 0x8ae <main+0x6d2>
     844:	9d 30       	cpi	r25, 0x0D	; 13
     846:	09 f0       	breq	.+2      	; 0x84a <main+0x66e>
     848:	9d cd       	rjmp	.-1222   	; 0x384 <main+0x1a8>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
     84a:	60 91 d3 02 	lds	r22, 0x02D3
     84e:	70 91 d4 02 	lds	r23, 0x02D4
     852:	80 91 d5 02 	lds	r24, 0x02D5
     856:	90 91 d6 02 	lds	r25, 0x02D6
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 ec       	ldi	r19, 0xC0	; 192
     85e:	4a ed       	ldi	r20, 0xDA	; 218
     860:	55 e4       	ldi	r21, 0x45	; 69
     862:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <__cmpsf2>
     866:	18 16       	cp	r1, r24
     868:	cc f4       	brge	.+50     	; 0x89c <main+0x6c0>
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
						setRightSpeed(0);
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
     876:	90 91 48 04 	lds	r25, 0x0448
     87a:	84 cd       	rjmp	.-1272   	; 0x384 <main+0x1a8>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
     87c:	60 91 d3 02 	lds	r22, 0x02D3
     880:	70 91 d4 02 	lds	r23, 0x02D4
     884:	80 91 d5 02 	lds	r24, 0x02D5
     888:	90 91 d6 02 	lds	r25, 0x02D6
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e8       	ldi	r19, 0x80	; 128
     890:	4b eb       	ldi	r20, 0xBB	; 187
     892:	55 e4       	ldi	r21, 0x45	; 69
     894:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <__cmpsf2>
     898:	18 16       	cp	r1, r24
     89a:	cc f0       	brlt	.+50     	; 0x8ce <main+0x6f2>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     89c:	88 e2       	ldi	r24, 0x28	; 40
     89e:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
						setRightSpeed(40);
     8a2:	88 e2       	ldi	r24, 0x28	; 40
     8a4:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
     8a8:	90 91 48 04 	lds	r25, 0x0448
     8ac:	6b cd       	rjmp	.-1322   	; 0x384 <main+0x1a8>
					}
					

					break;

			case 11:if(leftMotSteps <= 5000) {
     8ae:	60 91 d3 02 	lds	r22, 0x02D3
     8b2:	70 91 d4 02 	lds	r23, 0x02D4
     8b6:	80 91 d5 02 	lds	r24, 0x02D5
     8ba:	90 91 d6 02 	lds	r25, 0x02D6
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e4       	ldi	r19, 0x40	; 64
     8c2:	4c e9       	ldi	r20, 0x9C	; 156
     8c4:	55 e4       	ldi	r21, 0x45	; 69
     8c6:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <__cmpsf2>
     8ca:	18 16       	cp	r1, r24
     8cc:	3c f7       	brge	.-50     	; 0x89c <main+0x6c0>

			case 12:if(leftMotSteps <= 6000) {
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
						setRightSpeed(0);
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
     8da:	90 91 48 04 	lds	r25, 0x0448
     8de:	52 cd       	rjmp	.-1372   	; 0x384 <main+0x1a8>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     8e0:	94 30       	cpi	r25, 0x04	; 4
     8e2:	d1 f0       	breq	.+52     	; 0x918 <main+0x73c>
     8e4:	95 30       	cpi	r25, 0x05	; 5
     8e6:	08 f4       	brcc	.+2      	; 0x8ea <main+0x70e>
     8e8:	97 ce       	rjmp	.-722    	; 0x618 <main+0x43c>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     8ea:	80 91 0c 02 	lds	r24, 0x020C
     8ee:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <updateRedLed>
					updateGreenLed(pwm_green);
     8f2:	80 91 0d 02 	lds	r24, 0x020D
     8f6:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <updateGreenLed>
					updateBlueLed(pwm_blue);
     8fa:	80 91 0e 02 	lds	r24, 0x020E
     8fe:	0e 94 12 37 	call	0x6e24	; 0x6e24 <updateBlueLed>
					enableObstacleAvoidance();
     902:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <enableObstacleAvoidance>
					setLeftSpeed(25);
     906:	89 e1       	ldi	r24, 0x19	; 25
     908:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
					setRightSpeed(25);
     90c:	89 e1       	ldi	r24, 0x19	; 25
     90e:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
     912:	90 91 48 04 	lds	r25, 0x0448
					break;
     916:	36 cd       	rjmp	.-1428   	; 0x384 <main+0x1a8>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     918:	80 91 0b 01 	lds	r24, 0x010B
     91c:	8e 7f       	andi	r24, 0xFE	; 254
     91e:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     922:	80 91 0b 01 	lds	r24, 0x010B
     926:	8d 7f       	andi	r24, 0xFD	; 253
     928:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     92c:	80 91 0b 01 	lds	r24, 0x010B
     930:	8b 7f       	andi	r24, 0xFB	; 251
     932:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     936:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     938:	80 91 0b 01 	lds	r24, 0x010B
     93c:	8f 7e       	andi	r24, 0xEF	; 239
     93e:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     942:	80 91 0b 01 	lds	r24, 0x010B
     946:	8f 7d       	andi	r24, 0xDF	; 223
     948:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     94c:	80 91 0b 01 	lds	r24, 0x010B
     950:	8f 7b       	andi	r24, 0xBF	; 191
     952:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     956:	80 91 0b 01 	lds	r24, 0x010B
     95a:	8f 77       	andi	r24, 0x7F	; 127
     95c:	80 93 0b 01 	sts	0x010B, r24
     960:	bc ce       	rjmp	.-648    	; 0x6da <main+0x4fe>
						if(pwm_intermediate_left_desired < pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
     962:	80 91 f7 02 	lds	r24, 0x02F7
     966:	90 91 f8 02 	lds	r25, 0x02F8
     96a:	90 93 fc 02 	sts	0x02FC, r25
     96e:	80 93 fb 02 	sts	0x02FB, r24
					pwm_intermediate_left_desired = pwm_left_desired;
     972:	80 91 f9 02 	lds	r24, 0x02F9
     976:	90 91 fa 02 	lds	r25, 0x02FA
     97a:	f1 cd       	rjmp	.-1054   	; 0x55e <main+0x382>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     97c:	0e 94 ca 42 	call	0x8594	; 0x8594 <rand>
     980:	6e e1       	ldi	r22, 0x1E	; 30
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
     988:	a8 0e       	add	r10, r24
     98a:	b9 1e       	adc	r11, r25
     98c:	5f e7       	ldi	r21, 0x7F	; 127
     98e:	a5 22       	and	r10, r21
     990:	bb 24       	eor	r11, r11

				switch(rgbState) {
     992:	80 91 18 03 	lds	r24, 0x0318
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	09 f4       	brne	.+2      	; 0x99c <main+0x7c0>
     99a:	9a c4       	rjmp	.+2356   	; 0x12d0 <main+0x10f4>
     99c:	81 30       	cpi	r24, 0x01	; 1
     99e:	08 f0       	brcs	.+2      	; 0x9a2 <main+0x7c6>
     9a0:	40 c4       	rjmp	.+2176   	; 0x1222 <main+0x1046>
					case 0:
						pwm_red = 255 - currRand;	
     9a2:	8a 2d       	mov	r24, r10
     9a4:	80 95       	com	r24
     9a6:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     9aa:	20 92 18 03 	sts	0x0318, r2
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     9ae:	80 e2       	ldi	r24, 0x20	; 32
     9b0:	a8 16       	cp	r10, r24
     9b2:	b1 04       	cpc	r11, r1
     9b4:	08 f0       	brcs	.+2      	; 0x9b8 <main+0x7dc>
     9b6:	86 c1       	rjmp	.+780    	; 0xcc4 <main+0xae8>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
     9b8:	80 91 0d 02 	lds	r24, 0x020D
     9bc:	8f 3f       	cpi	r24, 0xFF	; 255
     9be:	09 f4       	brne	.+2      	; 0x9c2 <main+0x7e6>
     9c0:	0c ce       	rjmp	.-1000   	; 0x5da <main+0x3fe>
     9c2:	80 91 0e 02 	lds	r24, 0x020E
     9c6:	8f 3f       	cpi	r24, 0xFF	; 255
     9c8:	09 f4       	brne	.+2      	; 0x9cc <main+0x7f0>
     9ca:	07 ce       	rjmp	.-1010   	; 0x5da <main+0x3fe>
						pwm_red = 255;
     9cc:	10 93 0c 02 	sts	0x020C, r17
     9d0:	04 ce       	rjmp	.-1016   	; 0x5da <main+0x3fe>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     9d2:	80 91 94 00 	lds	r24, 0x0094
     9d6:	90 91 95 00 	lds	r25, 0x0095
     9da:	0e 94 cf 42 	call	0x859e	; 0x859e <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     9de:	0e 94 ca 42 	call	0x8594	; 0x8594 <rand>
     9e2:	6e e1       	ldi	r22, 0x1E	; 30
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
     9ea:	4c 01       	movw	r8, r24
     9ec:	8a 0c       	add	r8, r10
     9ee:	9b 1c       	adc	r9, r11
     9f0:	ff e7       	ldi	r31, 0x7F	; 127
     9f2:	8f 22       	and	r8, r31
     9f4:	99 24       	eor	r9, r9

				pwm_red = 255 - currRand;
     9f6:	88 2d       	mov	r24, r8
     9f8:	80 95       	com	r24
     9fa:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     9fe:	80 91 94 00 	lds	r24, 0x0094
     a02:	90 91 95 00 	lds	r25, 0x0095
     a06:	0e 94 cf 42 	call	0x859e	; 0x859e <srand>
				currRand = (currRand + rand()%30) % 128;	
     a0a:	0e 94 ca 42 	call	0x8594	; 0x8594 <rand>
     a0e:	6e e1       	ldi	r22, 0x1E	; 30
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
     a16:	6c 01       	movw	r12, r24
     a18:	c8 0c       	add	r12, r8
     a1a:	d9 1c       	adc	r13, r9
     a1c:	2f e7       	ldi	r18, 0x7F	; 127
     a1e:	c2 22       	and	r12, r18
     a20:	dd 24       	eor	r13, r13
				pwm_green = 255 - currRand;
     a22:	8c 2d       	mov	r24, r12
     a24:	80 95       	com	r24
     a26:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     a2a:	80 91 94 00 	lds	r24, 0x0094
     a2e:	90 91 95 00 	lds	r25, 0x0095
     a32:	0e 94 cf 42 	call	0x859e	; 0x859e <srand>
				currRand = (currRand + rand()%30) % 128;
     a36:	0e 94 ca 42 	call	0x8594	; 0x8594 <rand>
     a3a:	6e e1       	ldi	r22, 0x1E	; 30
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
     a42:	5c 01       	movw	r10, r24
     a44:	ac 0c       	add	r10, r12
     a46:	bd 1c       	adc	r11, r13
     a48:	3f e7       	ldi	r19, 0x7F	; 127
     a4a:	a3 22       	and	r10, r19
     a4c:	bb 24       	eor	r11, r11
				pwm_blue = 255 - currRand;
     a4e:	8a 2d       	mov	r24, r10
     a50:	80 95       	com	r24
     a52:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     a56:	80 91 94 00 	lds	r24, 0x0094
     a5a:	90 91 95 00 	lds	r25, 0x0095
     a5e:	0e 94 cf 42 	call	0x859e	; 0x859e <srand>
				currRand2 = rand()%128;
     a62:	0e 94 ca 42 	call	0x8594	; 0x8594 <rand>
     a66:	60 e8       	ldi	r22, 0x80	; 128
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
				if(currRand2<32) {
     a6e:	80 32       	cpi	r24, 0x20	; 32
     a70:	91 05       	cpc	r25, r1
     a72:	08 f0       	brcs	.+2      	; 0xa76 <main+0x89a>
     a74:	39 c1       	rjmp	.+626    	; 0xce8 <main+0xb0c>
					pwm_red = 255;
     a76:	10 93 0c 02 	sts	0x020C, r17
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     a7a:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     a7e:	69 83       	std	Y+1, r22	; 0x01
     a80:	7a 83       	std	Y+2, r23	; 0x02
     a82:	8b 83       	std	Y+3, r24	; 0x03
     a84:	9c 83       	std	Y+4, r25	; 0x04
     a86:	a9 cd       	rjmp	.-1198   	; 0x5da <main+0x3fe>
					}
	
					if(pwm_left_desired == 0) {
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
						pwm_intermediate_left_desired = 0;
     a88:	10 92 fe 02 	sts	0x02FE, r1
     a8c:	10 92 fd 02 	sts	0x02FD, r1
     a90:	08 cc       	rjmp	.-2032   	; 0x2a2 <main+0xc6>

				if(softAccEnabled) {
					if(pwm_right_desired == 0) {
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
						pwm_intermediate_right_desired = 0;
     a92:	10 92 fc 02 	sts	0x02FC, r1
     a96:	10 92 fb 02 	sts	0x02FB, r1
     a9a:	3c cd       	rjmp	.-1416   	; 0x514 <main+0x338>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     a9c:	84 30       	cpi	r24, 0x04	; 4
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <main+0x8c6>
     aa0:	64 c4       	rjmp	.+2248   	; 0x136a <main+0x118e>
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	08 f4       	brcc	.+2      	; 0xaa8 <main+0x8cc>
     aa6:	1c c4       	rjmp	.+2104   	; 0x12e0 <main+0x1104>
     aa8:	85 30       	cpi	r24, 0x05	; 5
     aaa:	09 f0       	breq	.+2      	; 0xaae <main+0x8d2>
     aac:	16 ce       	rjmp	.-980    	; 0x6da <main+0x4fe>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     aae:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <turnOffGreenLeds>
							GREEN_LED6_ON;
     ab2:	80 91 0b 01 	lds	r24, 0x010B
     ab6:	8f 7b       	andi	r24, 0xBF	; 191
     ab8:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     abc:	80 91 0b 01 	lds	r24, 0x010B
     ac0:	8f 77       	andi	r24, 0x7F	; 127
     ac2:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     ac6:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     aca:	9b 01       	movw	r18, r22
     acc:	ac 01       	movw	r20, r24
     ace:	60 93 58 04 	sts	0x0458, r22
     ad2:	70 93 59 04 	sts	0x0459, r23
     ad6:	80 93 5a 04 	sts	0x045A, r24
     ada:	90 93 5b 04 	sts	0x045B, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     ade:	80 91 50 04 	lds	r24, 0x0450
     ae2:	90 91 51 04 	lds	r25, 0x0451
     ae6:	a0 91 52 04 	lds	r26, 0x0452
     aea:	b0 91 53 04 	lds	r27, 0x0453
     aee:	28 1b       	sub	r18, r24
     af0:	39 0b       	sbc	r19, r25
     af2:	4a 0b       	sbc	r20, r26
     af4:	5b 0b       	sbc	r21, r27
     af6:	2b 32       	cpi	r18, 0x2B	; 43
     af8:	9c e1       	ldi	r25, 0x1C	; 28
     afa:	39 07       	cpc	r19, r25
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	49 07       	cpc	r20, r25
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	59 07       	cpc	r21, r25
     b04:	08 f4       	brcc	.+2      	; 0xb08 <main+0x92c>
     b06:	e9 cd       	rjmp	.-1070   	; 0x6da <main+0x4fe>
								demoStartTime = getTime100MicroSec();
     b08:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     b0c:	60 93 50 04 	sts	0x0450, r22
     b10:	70 93 51 04 	sts	0x0451, r23
     b14:	80 93 52 04 	sts	0x0452, r24
     b18:	90 93 53 04 	sts	0x0453, r25
								demoState = 0;							
     b1c:	10 92 4c 04 	sts	0x044C, r1
     b20:	dc cd       	rjmp	.-1096   	; 0x6da <main+0x4fe>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     b22:	92 30       	cpi	r25, 0x02	; 2
     b24:	11 f0       	breq	.+4      	; 0xb2a <main+0x94e>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     b26:	98 2f       	mov	r25, r24
     b28:	2d cc       	rjmp	.-1958   	; 0x384 <main+0x1a8>
     b2a:	90 91 20 04 	lds	r25, 0x0420
     b2e:	99 23       	and	r25, r25
     b30:	d1 f3       	breq	.-12     	; 0xb26 <main+0x94a>
								turnOnGreenLeds();
     b32:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     b36:	60 91 13 03 	lds	r22, 0x0313
     b3a:	70 91 14 03 	lds	r23, 0x0314
     b3e:	8e ef       	ldi	r24, 0xFE	; 254
     b40:	9f e0       	ldi	r25, 0x0F	; 15
     b42:	0e 94 2e 43 	call	0x865c	; 0x865c <__eewr_word_m2560>
								turnOffGreenLeds();
     b46:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     b4a:	8a ea       	ldi	r24, 0xAA	; 170
     b4c:	61 e0       	ldi	r22, 0x01	; 1
     b4e:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								addressReceived = 0;
     b52:	10 92 20 04 	sts	0x0420, r1
								menuChoice = 0;
     b56:	10 92 1f 04 	sts	0x041F, r1
     b5a:	90 91 48 04 	lds	r25, 0x0448
     b5e:	12 cc       	rjmp	.-2012   	; 0x384 <main+0x1a8>
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     b60:	82 30       	cpi	r24, 0x02	; 2
     b62:	09 f0       	breq	.+2      	; 0xb66 <main+0x98a>
     b64:	88 ce       	rjmp	.-752    	; 0x876 <main+0x69a>
							updateBlueLed(pwm_blue);
							rgbLedState = 2;
							break;

						case 2:
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_500_MSEC)) {
     b66:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     b6a:	9b 01       	movw	r18, r22
     b6c:	ac 01       	movw	r20, r24
     b6e:	80 91 54 04 	lds	r24, 0x0454
     b72:	90 91 55 04 	lds	r25, 0x0455
     b76:	a0 91 56 04 	lds	r26, 0x0456
     b7a:	b0 91 57 04 	lds	r27, 0x0457
     b7e:	28 1b       	sub	r18, r24
     b80:	39 0b       	sbc	r19, r25
     b82:	4a 0b       	sbc	r20, r26
     b84:	5b 0b       	sbc	r21, r27
     b86:	27 3c       	cpi	r18, 0xC7	; 199
     b88:	62 e1       	ldi	r22, 0x12	; 18
     b8a:	36 07       	cpc	r19, r22
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	46 07       	cpc	r20, r22
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	56 07       	cpc	r21, r22
     b94:	08 f4       	brcc	.+2      	; 0xb98 <main+0x9bc>
     b96:	6f ce       	rjmp	.-802    	; 0x876 <main+0x69a>
								rgbLedState = 0;
     b98:	10 92 67 04 	sts	0x0467, r1
								demoStartTime2 = getTime100MicroSec();
     b9c:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     ba0:	60 93 54 04 	sts	0x0454, r22
     ba4:	70 93 55 04 	sts	0x0455, r23
     ba8:	80 93 56 04 	sts	0x0456, r24
     bac:	90 93 57 04 	sts	0x0457, r25
								demoEndTime = getTime100MicroSec();
     bb0:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     bb4:	60 93 58 04 	sts	0x0458, r22
     bb8:	70 93 59 04 	sts	0x0459, r23
     bbc:	80 93 5a 04 	sts	0x045A, r24
     bc0:	90 93 5b 04 	sts	0x045B, r25
								greenLedState = 0;
     bc4:	10 92 66 04 	sts	0x0466, r1
								setGreenLed(greenLedState, 1);
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <setGreenLed>
     bd0:	90 91 48 04 	lds	r25, 0x0448
     bd4:	d7 cb       	rjmp	.-2130   	; 0x384 <main+0x1a8>
						writeDefaultCalibration();
					}
					break;

			case 10:// obstacle avoidance with random colors; 5 seconds motion and 5 seconds pause					
					switch(demoState) {
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	09 f0       	breq	.+2      	; 0xbdc <main+0xa00>
     bda:	ca cd       	rjmp	.-1132   	; 0x770 <main+0x594>
								demoState = 2;							
							}
							break;

						case 2: // pause							
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_10_SEC)) {
     bdc:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     be0:	9b 01       	movw	r18, r22
     be2:	ac 01       	movw	r20, r24
     be4:	80 91 50 04 	lds	r24, 0x0450
     be8:	90 91 51 04 	lds	r25, 0x0451
     bec:	a0 91 52 04 	lds	r26, 0x0452
     bf0:	b0 91 53 04 	lds	r27, 0x0453
     bf4:	28 1b       	sub	r18, r24
     bf6:	39 0b       	sbc	r19, r25
     bf8:	4a 0b       	sbc	r20, r26
     bfa:	5b 0b       	sbc	r21, r27
     bfc:	2a 39       	cpi	r18, 0x9A	; 154
     bfe:	67 e7       	ldi	r22, 0x77	; 119
     c00:	36 07       	cpc	r19, r22
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	46 07       	cpc	r20, r22
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	56 07       	cpc	r21, r22
     c0a:	08 f4       	brcc	.+2      	; 0xc0e <main+0xa32>
     c0c:	b1 cd       	rjmp	.-1182   	; 0x770 <main+0x594>
								setRightSpeed(20);
     c0e:	84 e1       	ldi	r24, 0x14	; 20
     c10:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
								setLeftSpeed(20);								
     c14:	84 e1       	ldi	r24, 0x14	; 20
     c16:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();								
     c1a:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
     c1e:	60 93 50 04 	sts	0x0450, r22
     c22:	70 93 51 04 	sts	0x0451, r23
     c26:	80 93 52 04 	sts	0x0452, r24
     c2a:	90 93 53 04 	sts	0x0453, r25
								demoState = 1;							
     c2e:	20 92 4c 04 	sts	0x044C, r2
							}
							break;
					}	
					
					switch(rgbLedState) {
     c32:	80 91 67 04 	lds	r24, 0x0467
     c36:	81 30       	cpi	r24, 0x01	; 1
     c38:	09 f0       	breq	.+2      	; 0xc3c <main+0xa60>
     c3a:	9f cd       	rjmp	.-1218   	; 0x77a <main+0x59e>
							updateGreenLed(pwm_green);
							updateBlueLed(pwm_blue);
							break;

						case 1:		
							turnOffGreenLeds();					
     c3c:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <turnOffGreenLeds>
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
     c40:	0e 94 ca 42 	call	0x8594	; 0x8594 <rand>
     c44:	60 e8       	ldi	r22, 0x80	; 128
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
							if(currRand > 95) {
     c4c:	80 36       	cpi	r24, 0x60	; 96
     c4e:	91 05       	cpc	r25, r1
     c50:	08 f4       	brcc	.+2      	; 0xc54 <main+0xa78>
     c52:	78 c4       	rjmp	.+2288   	; 0x1544 <main+0x1368>
								pwm_red = 255;
     c54:	10 93 0c 02 	sts	0x020C, r17
							} else {
								pwm_red = currRand;
							}

							currRand = rand()% 128;
     c58:	0e 94 ca 42 	call	0x8594	; 0x8594 <rand>
     c5c:	60 e8       	ldi	r22, 0x80	; 128
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
							if(currRand > 95) {
     c64:	80 36       	cpi	r24, 0x60	; 96
     c66:	91 05       	cpc	r25, r1
     c68:	08 f4       	brcc	.+2      	; 0xc6c <main+0xa90>
     c6a:	69 c4       	rjmp	.+2258   	; 0x153e <main+0x1362>
								pwm_green = 255;
     c6c:	10 93 0d 02 	sts	0x020D, r17
							} else {
								pwm_green = currRand;
							}

							currRand = rand()% 128;
     c70:	0e 94 ca 42 	call	0x8594	; 0x8594 <rand>
     c74:	60 e8       	ldi	r22, 0x80	; 128
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
							if(currRand > 95) {
     c7c:	80 36       	cpi	r24, 0x60	; 96
     c7e:	91 05       	cpc	r25, r1
     c80:	08 f4       	brcc	.+2      	; 0xc84 <main+0xaa8>
     c82:	5a c4       	rjmp	.+2228   	; 0x1538 <main+0x135c>
								pwm_blue = 255;
     c84:	10 93 0e 02 	sts	0x020E, r17
							} else {
								pwm_blue = currRand;
							}

							currRand = rand()% 200;
     c88:	0e 94 ca 42 	call	0x8594	; 0x8594 <rand>
     c8c:	68 ec       	ldi	r22, 0xC8	; 200
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
     c94:	5c 01       	movw	r10, r24
							if(currRand<50) {
     c96:	82 33       	cpi	r24, 0x32	; 50
     c98:	91 05       	cpc	r25, r1
     c9a:	08 f0       	brcs	.+2      	; 0xc9e <main+0xac2>
     c9c:	44 c4       	rjmp	.+2184   	; 0x1526 <main+0x134a>
								pwm_red = 255;
     c9e:	10 93 0c 02 	sts	0x020C, r17
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
								pwm_blue = 255;
							}
							updateRedLed(pwm_red);
     ca4:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <updateRedLed>
							updateGreenLed(pwm_green);
     ca8:	80 91 0d 02 	lds	r24, 0x020D
     cac:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <updateGreenLed>
							updateBlueLed(pwm_blue);
     cb0:	80 91 0e 02 	lds	r24, 0x020E
     cb4:	0e 94 12 37 	call	0x6e24	; 0x6e24 <updateBlueLed>
							rgbLedState = 2;
     cb8:	32 e0       	ldi	r19, 0x02	; 2
     cba:	30 93 67 04 	sts	0x0467, r19
     cbe:	90 91 48 04 	lds	r25, 0x0448
							break;
     cc2:	60 cb       	rjmp	.-2368   	; 0x384 <main+0x1a8>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     cc4:	90 e4       	ldi	r25, 0x40	; 64
     cc6:	a9 16       	cp	r10, r25
     cc8:	b1 04       	cpc	r11, r1
     cca:	08 f0       	brcs	.+2      	; 0xcce <main+0xaf2>
     ccc:	ef c2       	rjmp	.+1502   	; 0x12ac <main+0x10d0>
					if(pwm_red!=255 && pwm_blue!=255) {
     cce:	80 91 0c 02 	lds	r24, 0x020C
     cd2:	8f 3f       	cpi	r24, 0xFF	; 255
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <main+0xafc>
     cd6:	81 cc       	rjmp	.-1790   	; 0x5da <main+0x3fe>
     cd8:	80 91 0e 02 	lds	r24, 0x020E
     cdc:	8f 3f       	cpi	r24, 0xFF	; 255
     cde:	09 f4       	brne	.+2      	; 0xce2 <main+0xb06>
     ce0:	7c cc       	rjmp	.-1800   	; 0x5da <main+0x3fe>
						pwm_green = 255;
     ce2:	10 93 0d 02 	sts	0x020D, r17
     ce6:	79 cc       	rjmp	.-1806   	; 0x5da <main+0x3fe>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     ce8:	80 34       	cpi	r24, 0x40	; 64
     cea:	91 05       	cpc	r25, r1
     cec:	08 f0       	brcs	.+2      	; 0xcf0 <main+0xb14>
     cee:	14 c4       	rjmp	.+2088   	; 0x1518 <main+0x133c>
					pwm_green = 255;
     cf0:	10 93 0d 02 	sts	0x020D, r17
     cf4:	c2 ce       	rjmp	.-636    	; 0xa7a <main+0x89e>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     cf6:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <turnOnGreenLeds>
							updateRedLed(pwm_red);
     cfa:	80 91 0c 02 	lds	r24, 0x020C
     cfe:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <updateRedLed>
							updateGreenLed(pwm_green);
     d02:	80 91 0d 02 	lds	r24, 0x020D
     d06:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <updateGreenLed>
							updateBlueLed(pwm_blue);
     d0a:	80 91 0e 02 	lds	r24, 0x020E
     d0e:	0e 94 12 37 	call	0x6e24	; 0x6e24 <updateBlueLed>
							LED_IR1_LOW;
     d12:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     d14:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     d16:	80 91 22 04 	lds	r24, 0x0422
     d1a:	88 23       	and	r24, r24
     d1c:	09 f4       	brne	.+2      	; 0xd20 <main+0xb44>
     d1e:	ab cd       	rjmp	.-1194   	; 0x876 <main+0x69a>
								getDataNow = 0;	
     d20:	10 92 22 04 	sts	0x0422, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d24:	80 91 57 02 	lds	r24, 0x0257
     d28:	61 e0       	ldi	r22, 0x01	; 1
     d2a:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d2e:	80 91 58 02 	lds	r24, 0x0258
     d32:	61 e0       	ldi	r22, 0x01	; 1
     d34:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d38:	80 91 27 02 	lds	r24, 0x0227
     d3c:	90 91 28 02 	lds	r25, 0x0228
     d40:	61 e0       	ldi	r22, 0x01	; 1
     d42:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d46:	80 91 27 02 	lds	r24, 0x0227
     d4a:	90 91 28 02 	lds	r25, 0x0228
     d4e:	89 2f       	mov	r24, r25
     d50:	61 e0       	ldi	r22, 0x01	; 1
     d52:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d56:	80 91 59 02 	lds	r24, 0x0259
     d5a:	61 e0       	ldi	r22, 0x01	; 1
     d5c:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d60:	80 91 5a 02 	lds	r24, 0x025A
     d64:	61 e0       	ldi	r22, 0x01	; 1
     d66:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d6a:	80 91 2b 02 	lds	r24, 0x022B
     d6e:	90 91 2c 02 	lds	r25, 0x022C
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d78:	80 91 2b 02 	lds	r24, 0x022B
     d7c:	90 91 2c 02 	lds	r25, 0x022C
     d80:	89 2f       	mov	r24, r25
     d82:	61 e0       	ldi	r22, 0x01	; 1
     d84:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d88:	80 91 5b 02 	lds	r24, 0x025B
     d8c:	61 e0       	ldi	r22, 0x01	; 1
     d8e:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d92:	80 91 5c 02 	lds	r24, 0x025C
     d96:	61 e0       	ldi	r22, 0x01	; 1
     d98:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d9c:	80 91 2f 02 	lds	r24, 0x022F
     da0:	90 91 30 02 	lds	r25, 0x0230
     da4:	61 e0       	ldi	r22, 0x01	; 1
     da6:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     daa:	80 91 2f 02 	lds	r24, 0x022F
     dae:	90 91 30 02 	lds	r25, 0x0230
     db2:	89 2f       	mov	r24, r25
     db4:	61 e0       	ldi	r22, 0x01	; 1
     db6:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     dba:	80 91 5d 02 	lds	r24, 0x025D
     dbe:	61 e0       	ldi	r22, 0x01	; 1
     dc0:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     dc4:	80 91 5e 02 	lds	r24, 0x025E
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     dce:	80 91 33 02 	lds	r24, 0x0233
     dd2:	90 91 34 02 	lds	r25, 0x0234
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     ddc:	80 91 33 02 	lds	r24, 0x0233
     de0:	90 91 34 02 	lds	r25, 0x0234
     de4:	89 2f       	mov	r24, r25
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     dec:	80 91 5f 02 	lds	r24, 0x025F
     df0:	61 e0       	ldi	r22, 0x01	; 1
     df2:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     df6:	80 91 60 02 	lds	r24, 0x0260
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e00:	80 91 37 02 	lds	r24, 0x0237
     e04:	90 91 38 02 	lds	r25, 0x0238
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e0e:	80 91 37 02 	lds	r24, 0x0237
     e12:	90 91 38 02 	lds	r25, 0x0238
     e16:	89 2f       	mov	r24, r25
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e1e:	80 91 61 02 	lds	r24, 0x0261
     e22:	61 e0       	ldi	r22, 0x01	; 1
     e24:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e28:	80 91 62 02 	lds	r24, 0x0262
     e2c:	61 e0       	ldi	r22, 0x01	; 1
     e2e:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e32:	80 91 3b 02 	lds	r24, 0x023B
     e36:	90 91 3c 02 	lds	r25, 0x023C
     e3a:	61 e0       	ldi	r22, 0x01	; 1
     e3c:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e40:	80 91 3b 02 	lds	r24, 0x023B
     e44:	90 91 3c 02 	lds	r25, 0x023C
     e48:	89 2f       	mov	r24, r25
     e4a:	61 e0       	ldi	r22, 0x01	; 1
     e4c:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e50:	80 91 63 02 	lds	r24, 0x0263
     e54:	61 e0       	ldi	r22, 0x01	; 1
     e56:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e5a:	80 91 64 02 	lds	r24, 0x0264
     e5e:	61 e0       	ldi	r22, 0x01	; 1
     e60:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e64:	80 91 3f 02 	lds	r24, 0x023F
     e68:	90 91 40 02 	lds	r25, 0x0240
     e6c:	61 e0       	ldi	r22, 0x01	; 1
     e6e:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e72:	80 91 3f 02 	lds	r24, 0x023F
     e76:	90 91 40 02 	lds	r25, 0x0240
     e7a:	89 2f       	mov	r24, r25
     e7c:	61 e0       	ldi	r22, 0x01	; 1
     e7e:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e82:	80 91 65 02 	lds	r24, 0x0265
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e8c:	80 91 66 02 	lds	r24, 0x0266
     e90:	61 e0       	ldi	r22, 0x01	; 1
     e92:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e96:	80 91 43 02 	lds	r24, 0x0243
     e9a:	90 91 44 02 	lds	r25, 0x0244
     e9e:	61 e0       	ldi	r22, 0x01	; 1
     ea0:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     ea4:	80 91 43 02 	lds	r24, 0x0243
     ea8:	90 91 44 02 	lds	r25, 0x0244
     eac:	89 2f       	mov	r24, r25
     eae:	61 e0       	ldi	r22, 0x01	; 1
     eb0:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     eb4:	80 91 67 02 	lds	r24, 0x0267
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ebe:	80 91 68 02 	lds	r24, 0x0268
     ec2:	61 e0       	ldi	r22, 0x01	; 1
     ec4:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ec8:	80 91 47 02 	lds	r24, 0x0247
     ecc:	90 91 48 02 	lds	r25, 0x0248
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     ed6:	80 91 47 02 	lds	r24, 0x0247
     eda:	90 91 48 02 	lds	r25, 0x0248
     ede:	89 2f       	mov	r24, r25
     ee0:	61 e0       	ldi	r22, 0x01	; 1
     ee2:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ee6:	80 91 69 02 	lds	r24, 0x0269
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     ef0:	80 91 6a 02 	lds	r24, 0x026A
     ef4:	61 e0       	ldi	r22, 0x01	; 1
     ef6:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     efa:	80 91 4b 02 	lds	r24, 0x024B
     efe:	90 91 4c 02 	lds	r25, 0x024C
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f08:	80 91 4b 02 	lds	r24, 0x024B
     f0c:	90 91 4c 02 	lds	r25, 0x024C
     f10:	89 2f       	mov	r24, r25
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f18:	80 91 6b 02 	lds	r24, 0x026B
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f22:	80 91 6c 02 	lds	r24, 0x026C
     f26:	61 e0       	ldi	r22, 0x01	; 1
     f28:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f2c:	80 91 4f 02 	lds	r24, 0x024F
     f30:	90 91 50 02 	lds	r25, 0x0250
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f3a:	80 91 4f 02 	lds	r24, 0x024F
     f3e:	90 91 50 02 	lds	r25, 0x0250
     f42:	89 2f       	mov	r24, r25
     f44:	61 e0       	ldi	r22, 0x01	; 1
     f46:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f4a:	80 91 6d 02 	lds	r24, 0x026D
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f54:	80 91 6e 02 	lds	r24, 0x026E
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f5e:	80 91 53 02 	lds	r24, 0x0253
     f62:	90 91 54 02 	lds	r25, 0x0254
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f6c:	80 91 53 02 	lds	r24, 0x0253
     f70:	90 91 54 02 	lds	r25, 0x0254
     f74:	89 2f       	mov	r24, r25
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     f7c:	80 91 28 04 	lds	r24, 0x0428
     f80:	61 e0       	ldi	r22, 0x01	; 1
     f82:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(accX>>8,1);
     f86:	80 91 29 04 	lds	r24, 0x0429
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     f90:	80 91 2a 04 	lds	r24, 0x042A
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(accY>>8,1);
     f9a:	80 91 2b 04 	lds	r24, 0x042B
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
     fa4:	80 91 2c 04 	lds	r24, 0x042C
     fa8:	61 e0       	ldi	r22, 0x01	; 1
     faa:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(accZ>>8,1);
     fae:	80 91 2d 04 	lds	r24, 0x042D
     fb2:	61 e0       	ldi	r22, 0x01	; 1
     fb4:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(irCommand,1);
     fb8:	80 91 23 04 	lds	r24, 0x0423
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(currentSelector,1);
     fc2:	80 91 48 04 	lds	r24, 0x0448
     fc6:	61 e0       	ldi	r22, 0x01	; 1
     fc8:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(BUTTON0,1);
     fcc:	80 91 03 01 	lds	r24, 0x0103
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	80 72       	andi	r24, 0x20	; 32
     fd4:	90 70       	andi	r25, 0x00	; 0
     fd6:	95 95       	asr	r25
     fd8:	87 95       	ror	r24
     fda:	95 95       	asr	r25
     fdc:	87 95       	ror	r24
     fde:	95 95       	asr	r25
     fe0:	87 95       	ror	r24
     fe2:	95 95       	asr	r25
     fe4:	87 95       	ror	r24
     fe6:	95 95       	asr	r25
     fe8:	87 95       	ror	r24
     fea:	61 e0       	ldi	r22, 0x01	; 1
     fec:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(rfFlags,1);
     ff0:	80 91 15 03 	lds	r24, 0x0315
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))&0xFF,1);	// radians to degrees => 573 = 1800/PI
     ffa:	60 91 6b 04 	lds	r22, 0x046B
     ffe:	70 91 6c 04 	lds	r23, 0x046C
    1002:	80 91 6d 04 	lds	r24, 0x046D
    1006:	90 91 6e 04 	lds	r25, 0x046E
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e4       	ldi	r19, 0x40	; 64
    100e:	4f e0       	ldi	r20, 0x0F	; 15
    1010:	54 e4       	ldi	r21, 0x44	; 68
    1012:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    1016:	0e 94 2b 40 	call	0x8056	; 0x8056 <__fixunssfsi>
    101a:	86 2f       	mov	r24, r22
    101c:	61 e0       	ldi	r22, 0x01	; 1
    101e:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))>>8,1);
    1022:	60 91 6b 04 	lds	r22, 0x046B
    1026:	70 91 6c 04 	lds	r23, 0x046C
    102a:	80 91 6d 04 	lds	r24, 0x046D
    102e:	90 91 6e 04 	lds	r25, 0x046E
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e4       	ldi	r19, 0x40	; 64
    1036:	4f e0       	ldi	r20, 0x0F	; 15
    1038:	54 e4       	ldi	r21, 0x44	; 68
    103a:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    103e:	0e 94 2b 40 	call	0x8056	; 0x8056 <__fixunssfsi>
    1042:	87 2f       	mov	r24, r23
    1044:	61 e0       	ldi	r22, 0x01	; 1
    1046:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)&0xFF,1);
    104a:	60 91 73 04 	lds	r22, 0x0473
    104e:	70 91 74 04 	lds	r23, 0x0474
    1052:	80 91 75 04 	lds	r24, 0x0475
    1056:	90 91 76 04 	lds	r25, 0x0476
    105a:	0e 94 2b 40 	call	0x8056	; 0x8056 <__fixunssfsi>
    105e:	86 2f       	mov	r24, r22
    1060:	61 e0       	ldi	r22, 0x01	; 1
    1062:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)>>8,1);
    1066:	60 91 73 04 	lds	r22, 0x0473
    106a:	70 91 74 04 	lds	r23, 0x0474
    106e:	80 91 75 04 	lds	r24, 0x0475
    1072:	90 91 76 04 	lds	r25, 0x0476
    1076:	0e 94 2b 40 	call	0x8056	; 0x8056 <__fixunssfsi>
    107a:	87 2f       	mov	r24, r23
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)&0xFF,1);
    1082:	60 91 77 04 	lds	r22, 0x0477
    1086:	70 91 78 04 	lds	r23, 0x0478
    108a:	80 91 79 04 	lds	r24, 0x0479
    108e:	90 91 7a 04 	lds	r25, 0x047A
    1092:	0e 94 2b 40 	call	0x8056	; 0x8056 <__fixunssfsi>
    1096:	86 2f       	mov	r24, r22
    1098:	61 e0       	ldi	r22, 0x01	; 1
    109a:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)>>8,1);
    109e:	60 91 77 04 	lds	r22, 0x0477
    10a2:	70 91 78 04 	lds	r23, 0x0478
    10a6:	80 91 79 04 	lds	r24, 0x0479
    10aa:	90 91 7a 04 	lds	r25, 0x047A
    10ae:	0e 94 2b 40 	call	0x8056	; 0x8056 <__fixunssfsi>
    10b2:	87 2f       	mov	r24, r23
    10b4:	61 e0       	ldi	r22, 0x01	; 1
    10b6:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)&0xFF,1);
    10ba:	60 91 d3 02 	lds	r22, 0x02D3
    10be:	70 91 d4 02 	lds	r23, 0x02D4
    10c2:	80 91 d5 02 	lds	r24, 0x02D5
    10c6:	90 91 d6 02 	lds	r25, 0x02D6
    10ca:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    10ce:	86 2f       	mov	r24, r22
    10d0:	61 e0       	ldi	r22, 0x01	; 1
    10d2:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>8,1);
    10d6:	60 91 d3 02 	lds	r22, 0x02D3
    10da:	70 91 d4 02 	lds	r23, 0x02D4
    10de:	80 91 d5 02 	lds	r24, 0x02D5
    10e2:	90 91 d6 02 	lds	r25, 0x02D6
    10e6:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    10ea:	87 2f       	mov	r24, r23
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>16,1);
    10f2:	60 91 d3 02 	lds	r22, 0x02D3
    10f6:	70 91 d4 02 	lds	r23, 0x02D4
    10fa:	80 91 d5 02 	lds	r24, 0x02D5
    10fe:	90 91 d6 02 	lds	r25, 0x02D6
    1102:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    1106:	61 e0       	ldi	r22, 0x01	; 1
    1108:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>24,1);
    110c:	60 91 d3 02 	lds	r22, 0x02D3
    1110:	70 91 d4 02 	lds	r23, 0x02D4
    1114:	80 91 d5 02 	lds	r24, 0x02D5
    1118:	90 91 d6 02 	lds	r25, 0x02D6
    111c:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    1120:	89 2f       	mov	r24, r25
    1122:	61 e0       	ldi	r22, 0x01	; 1
    1124:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)&0xFF,1);
    1128:	60 91 cf 02 	lds	r22, 0x02CF
    112c:	70 91 d0 02 	lds	r23, 0x02D0
    1130:	80 91 d1 02 	lds	r24, 0x02D1
    1134:	90 91 d2 02 	lds	r25, 0x02D2
    1138:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    113c:	86 2f       	mov	r24, r22
    113e:	61 e0       	ldi	r22, 0x01	; 1
    1140:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>8,1);
    1144:	60 91 cf 02 	lds	r22, 0x02CF
    1148:	70 91 d0 02 	lds	r23, 0x02D0
    114c:	80 91 d1 02 	lds	r24, 0x02D1
    1150:	90 91 d2 02 	lds	r25, 0x02D2
    1154:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    1158:	87 2f       	mov	r24, r23
    115a:	61 e0       	ldi	r22, 0x01	; 1
    115c:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>16,1);
    1160:	60 91 cf 02 	lds	r22, 0x02CF
    1164:	70 91 d0 02 	lds	r23, 0x02D0
    1168:	80 91 d1 02 	lds	r24, 0x02D1
    116c:	90 91 d2 02 	lds	r25, 0x02D2
    1170:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    1174:	61 e0       	ldi	r22, 0x01	; 1
    1176:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>24,1);
    117a:	60 91 cf 02 	lds	r22, 0x02CF
    117e:	70 91 d0 02 	lds	r23, 0x02D0
    1182:	80 91 d1 02 	lds	r24, 0x02D1
    1186:	90 91 d2 02 	lds	r25, 0x02D2
    118a:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    118e:	89 2f       	mov	r24, r25
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(pwm_left_desired>>2, 1);
    1196:	80 91 f9 02 	lds	r24, 0x02F9
    119a:	90 91 fa 02 	lds	r25, 0x02FA
    119e:	95 95       	asr	r25
    11a0:	87 95       	ror	r24
    11a2:	95 95       	asr	r25
    11a4:	87 95       	ror	r24
    11a6:	61 e0       	ldi	r22, 0x01	; 1
    11a8:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
								usart0Transmit(pwm_right_desired>>2, 1);
    11ac:	80 91 f7 02 	lds	r24, 0x02F7
    11b0:	90 91 f8 02 	lds	r25, 0x02F8
    11b4:	95 95       	asr	r25
    11b6:	87 95       	ror	r24
    11b8:	95 95       	asr	r25
    11ba:	87 95       	ror	r24
    11bc:	61 e0       	ldi	r22, 0x01	; 1
    11be:	0e 94 26 1c 	call	0x384c	; 0x384c <usart0Transmit>
    11c2:	90 91 48 04 	lds	r25, 0x0448
    11c6:	de c8       	rjmp	.-3652   	; 0x384 <main+0x1a8>
							setLeftSpeed(20);
							setRightSpeed(20);
							demoState = 1;
							break;
						case 1: // motion					
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_4_SEC)) {
    11c8:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    11cc:	9b 01       	movw	r18, r22
    11ce:	ac 01       	movw	r20, r24
    11d0:	80 91 50 04 	lds	r24, 0x0450
    11d4:	90 91 51 04 	lds	r25, 0x0451
    11d8:	a0 91 52 04 	lds	r26, 0x0452
    11dc:	b0 91 53 04 	lds	r27, 0x0453
    11e0:	28 1b       	sub	r18, r24
    11e2:	39 0b       	sbc	r19, r25
    11e4:	4a 0b       	sbc	r20, r26
    11e6:	5b 0b       	sbc	r21, r27
    11e8:	2e 33       	cpi	r18, 0x3E	; 62
    11ea:	e6 e9       	ldi	r30, 0x96	; 150
    11ec:	3e 07       	cpc	r19, r30
    11ee:	e0 e0       	ldi	r30, 0x00	; 0
    11f0:	4e 07       	cpc	r20, r30
    11f2:	e0 e0       	ldi	r30, 0x00	; 0
    11f4:	5e 07       	cpc	r21, r30
    11f6:	08 f4       	brcc	.+2      	; 0x11fa <main+0x101e>
    11f8:	bb ca       	rjmp	.-2698   	; 0x770 <main+0x594>
								setRightSpeed(0);
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
								setLeftSpeed(0);								
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    1206:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    120a:	60 93 50 04 	sts	0x0450, r22
    120e:	70 93 51 04 	sts	0x0451, r23
    1212:	80 93 52 04 	sts	0x0452, r24
    1216:	90 93 53 04 	sts	0x0453, r25
								demoState = 2;							
    121a:	f2 e0       	ldi	r31, 0x02	; 2
    121c:	f0 93 4c 04 	sts	0x044C, r31
    1220:	a7 ca       	rjmp	.-2738   	; 0x770 <main+0x594>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	09 f0       	breq	.+2      	; 0x1228 <main+0x104c>
    1226:	c3 cb       	rjmp	.-2170   	; 0x9ae <main+0x7d2>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
    1228:	8a 2d       	mov	r24, r10
    122a:	80 95       	com	r24
    122c:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    1230:	10 92 18 03 	sts	0x0318, r1
						break;
    1234:	bc cb       	rjmp	.-2184   	; 0x9ae <main+0x7d2>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	09 f0       	breq	.+2      	; 0x123c <main+0x1060>
    123a:	4f ca       	rjmp	.-2914   	; 0x6da <main+0x4fe>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
    123c:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <turnOffGreenLeds>
							GREEN_LED2_ON;
    1240:	80 91 0b 01 	lds	r24, 0x010B
    1244:	8b 7f       	andi	r24, 0xFB	; 251
    1246:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
    124a:	10 92 4e 04 	sts	0x044E, r1
							enableObstacleAvoidance();
    124e:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <enableObstacleAvoidance>
							setRightSpeed(15);
    1252:	8f e0       	ldi	r24, 0x0F	; 15
    1254:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
							setLeftSpeed(15);
    1258:	8f e0       	ldi	r24, 0x0F	; 15
    125a:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
    125e:	80 91 69 02 	lds	r24, 0x0269
    1262:	90 91 6a 02 	lds	r25, 0x026A
    1266:	e1 e0       	ldi	r30, 0x01	; 1
    1268:	80 39       	cpi	r24, 0x90	; 144
    126a:	9e 07       	cpc	r25, r30
    126c:	0c f4       	brge	.+2      	; 0x1270 <main+0x1094>
    126e:	3a c1       	rjmp	.+628    	; 0x14e4 <main+0x1308>
    1270:	80 91 6b 02 	lds	r24, 0x026B
    1274:	90 91 6c 02 	lds	r25, 0x026C
    1278:	f1 e0       	ldi	r31, 0x01	; 1
    127a:	80 39       	cpi	r24, 0x90	; 144
    127c:	9f 07       	cpc	r25, r31
    127e:	0c f4       	brge	.+2      	; 0x1282 <main+0x10a6>
    1280:	31 c1       	rjmp	.+610    	; 0x14e4 <main+0x1308>
    1282:	80 91 67 02 	lds	r24, 0x0267
    1286:	90 91 68 02 	lds	r25, 0x0268
    128a:	21 e0       	ldi	r18, 0x01	; 1
    128c:	80 39       	cpi	r24, 0x90	; 144
    128e:	92 07       	cpc	r25, r18
    1290:	0c f4       	brge	.+2      	; 0x1294 <main+0x10b8>
    1292:	28 c1       	rjmp	.+592    	; 0x14e4 <main+0x1308>
    1294:	80 91 6d 02 	lds	r24, 0x026D
    1298:	90 91 6e 02 	lds	r25, 0x026E
    129c:	31 e0       	ldi	r19, 0x01	; 1
    129e:	80 39       	cpi	r24, 0x90	; 144
    12a0:	93 07       	cpc	r25, r19
    12a2:	0c f4       	brge	.+2      	; 0x12a6 <main+0x10ca>
    12a4:	1f c1       	rjmp	.+574    	; 0x14e4 <main+0x1308>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
    12a6:	10 92 4d 04 	sts	0x044D, r1
    12aa:	17 ca       	rjmp	.-3026   	; 0x6da <main+0x4fe>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    12ac:	e0 e6       	ldi	r30, 0x60	; 96
    12ae:	ae 16       	cp	r10, r30
    12b0:	b1 04       	cpc	r11, r1
    12b2:	08 f0       	brcs	.+2      	; 0x12b6 <main+0x10da>
    12b4:	92 c9       	rjmp	.-3292   	; 0x5da <main+0x3fe>
					if(pwm_red!=255 && pwm_green!=255) {
    12b6:	80 91 0c 02 	lds	r24, 0x020C
    12ba:	8f 3f       	cpi	r24, 0xFF	; 255
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <main+0x10e4>
    12be:	8d c9       	rjmp	.-3302   	; 0x5da <main+0x3fe>
    12c0:	80 91 0d 02 	lds	r24, 0x020D
    12c4:	8f 3f       	cpi	r24, 0xFF	; 255
    12c6:	09 f4       	brne	.+2      	; 0x12ca <main+0x10ee>
    12c8:	88 c9       	rjmp	.-3312   	; 0x5da <main+0x3fe>
						pwm_blue = 255;
    12ca:	10 93 0e 02 	sts	0x020E, r17
    12ce:	85 c9       	rjmp	.-3318   	; 0x5da <main+0x3fe>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
    12d0:	8a 2d       	mov	r24, r10
    12d2:	80 95       	com	r24
    12d4:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
    12d8:	62 e0       	ldi	r22, 0x02	; 2
    12da:	60 93 18 03 	sts	0x0318, r22
						break;
    12de:	67 cb       	rjmp	.-2354   	; 0x9ae <main+0x7d2>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
    12e0:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <turnOffGreenLeds>
							GREEN_LED6_ON;
    12e4:	80 91 0b 01 	lds	r24, 0x010B
    12e8:	8f 7b       	andi	r24, 0xBF	; 191
    12ea:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
    12ee:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    12f2:	9b 01       	movw	r18, r22
    12f4:	ac 01       	movw	r20, r24
    12f6:	60 93 58 04 	sts	0x0458, r22
    12fa:	70 93 59 04 	sts	0x0459, r23
    12fe:	80 93 5a 04 	sts	0x045A, r24
    1302:	90 93 5b 04 	sts	0x045B, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    1306:	80 91 50 04 	lds	r24, 0x0450
    130a:	90 91 51 04 	lds	r25, 0x0451
    130e:	a0 91 52 04 	lds	r26, 0x0452
    1312:	b0 91 53 04 	lds	r27, 0x0453
    1316:	28 1b       	sub	r18, r24
    1318:	39 0b       	sbc	r19, r25
    131a:	4a 0b       	sbc	r20, r26
    131c:	5b 0b       	sbc	r21, r27
    131e:	2d 3c       	cpi	r18, 0xCD	; 205
    1320:	66 e6       	ldi	r22, 0x66	; 102
    1322:	36 07       	cpc	r19, r22
    1324:	64 e0       	ldi	r22, 0x04	; 4
    1326:	46 07       	cpc	r20, r22
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	56 07       	cpc	r21, r22
    132c:	08 f4       	brcc	.+2      	; 0x1330 <main+0x1154>
    132e:	52 c1       	rjmp	.+676    	; 0x15d4 <main+0x13f8>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    1330:	80 91 bb 02 	lds	r24, 0x02BB
    1334:	90 91 bc 02 	lds	r25, 0x02BC
    1338:	e3 e0       	ldi	r30, 0x03	; 3
    133a:	8a 37       	cpi	r24, 0x7A	; 122
    133c:	9e 07       	cpc	r25, r30
    133e:	08 f4       	brcc	.+2      	; 0x1342 <main+0x1166>
    1340:	55 c1       	rjmp	.+682    	; 0x15ec <main+0x1410>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-13);
    1342:	83 ef       	ldi	r24, 0xF3	; 243
    1344:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
									setLeftSpeed(-13);
    1348:	83 ef       	ldi	r24, 0xF3	; 243
    134a:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    134e:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    1352:	60 93 50 04 	sts	0x0450, r22
    1356:	70 93 51 04 	sts	0x0451, r23
    135a:	80 93 52 04 	sts	0x0452, r24
    135e:	90 93 53 04 	sts	0x0453, r25
									demoState = 4;
    1362:	f4 e0       	ldi	r31, 0x04	; 4
    1364:	f0 93 4c 04 	sts	0x044C, r31
									break;
    1368:	b8 c9       	rjmp	.-3216   	; 0x6da <main+0x4fe>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    136a:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <turnOffGreenLeds>
							GREEN_LED6_ON;
    136e:	80 91 0b 01 	lds	r24, 0x010B
    1372:	8f 7b       	andi	r24, 0xBF	; 191
    1374:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    1378:	80 91 0b 01 	lds	r24, 0x010B
    137c:	8f 77       	andi	r24, 0x7F	; 127
    137e:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    1382:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    1386:	9b 01       	movw	r18, r22
    1388:	ac 01       	movw	r20, r24
    138a:	60 93 58 04 	sts	0x0458, r22
    138e:	70 93 59 04 	sts	0x0459, r23
    1392:	80 93 5a 04 	sts	0x045A, r24
    1396:	90 93 5b 04 	sts	0x045B, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    139a:	80 91 50 04 	lds	r24, 0x0450
    139e:	90 91 51 04 	lds	r25, 0x0451
    13a2:	a0 91 52 04 	lds	r26, 0x0452
    13a6:	b0 91 53 04 	lds	r27, 0x0453
    13aa:	28 1b       	sub	r18, r24
    13ac:	39 0b       	sbc	r19, r25
    13ae:	4a 0b       	sbc	r20, r26
    13b0:	5b 0b       	sbc	r21, r27
    13b2:	2f 38       	cpi	r18, 0x8F	; 143
    13b4:	65 e2       	ldi	r22, 0x25	; 37
    13b6:	36 07       	cpc	r19, r22
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	46 07       	cpc	r20, r22
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	56 07       	cpc	r21, r22
    13c0:	08 f4       	brcc	.+2      	; 0x13c4 <main+0x11e8>
    13c2:	8b c9       	rjmp	.-3306   	; 0x6da <main+0x4fe>
								setRightSpeed(20);
    13c4:	84 e1       	ldi	r24, 0x14	; 20
    13c6:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
								setLeftSpeed(-20);								
    13ca:	8c ee       	ldi	r24, 0xEC	; 236
    13cc:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    13d0:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    13d4:	60 93 50 04 	sts	0x0450, r22
    13d8:	70 93 51 04 	sts	0x0451, r23
    13dc:	80 93 52 04 	sts	0x0452, r24
    13e0:	90 93 53 04 	sts	0x0453, r25
								demoState = 5;							
    13e4:	85 e0       	ldi	r24, 0x05	; 5
    13e6:	80 93 4c 04 	sts	0x044C, r24
    13ea:	77 c9       	rjmp	.-3346   	; 0x6da <main+0x4fe>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
    13ec:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <turnOffGreenLeds>
							GREEN_LED4_ON;
    13f0:	80 91 0b 01 	lds	r24, 0x010B
    13f4:	8f 7e       	andi	r24, 0xEF	; 239
    13f6:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
    13fa:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
    13fe:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    1402:	9b 01       	movw	r18, r22
    1404:	ac 01       	movw	r20, r24
    1406:	60 93 58 04 	sts	0x0458, r22
    140a:	70 93 59 04 	sts	0x0459, r23
    140e:	80 93 5a 04 	sts	0x045A, r24
    1412:	90 93 5b 04 	sts	0x045B, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
    1416:	80 91 50 04 	lds	r24, 0x0450
    141a:	90 91 51 04 	lds	r25, 0x0451
    141e:	a0 91 52 04 	lds	r26, 0x0452
    1422:	b0 91 53 04 	lds	r27, 0x0453
    1426:	28 1b       	sub	r18, r24
    1428:	39 0b       	sbc	r19, r25
    142a:	4a 0b       	sbc	r20, r26
    142c:	5b 0b       	sbc	r21, r27
    142e:	23 33       	cpi	r18, 0x33	; 51
    1430:	6f ee       	ldi	r22, 0xEF	; 239
    1432:	36 07       	cpc	r19, r22
    1434:	62 e0       	ldi	r22, 0x02	; 2
    1436:	46 07       	cpc	r20, r22
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	56 07       	cpc	r21, r22
    143c:	08 f0       	brcs	.+2      	; 0x1440 <main+0x1264>
    143e:	19 c1       	rjmp	.+562    	; 0x1672 <main+0x1496>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
    1440:	80 91 03 01 	lds	r24, 0x0103
    1444:	84 ff       	sbrs	r24, 4
    1446:	fa c0       	rjmp	.+500    	; 0x163c <main+0x1460>
								outOfLine = 0;
    1448:	10 92 4e 04 	sts	0x044E, r1
								chargeContact++;
    144c:	80 91 4f 04 	lds	r24, 0x044F
    1450:	8f 5f       	subi	r24, 0xFF	; 255
    1452:	80 93 4f 04 	sts	0x044F, r24
								if(chargeContact > 20) {
    1456:	85 31       	cpi	r24, 0x15	; 21
    1458:	08 f0       	brcs	.+2      	; 0x145c <main+0x1280>
    145a:	3a c1       	rjmp	.+628    	; 0x16d0 <main+0x14f4>
    145c:	80 91 69 02 	lds	r24, 0x0269
    1460:	90 91 6a 02 	lds	r25, 0x026A
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    1464:	20 91 67 02 	lds	r18, 0x0267
    1468:	30 91 68 02 	lds	r19, 0x0268
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	22 3c       	cpi	r18, 0xC2	; 194
    1470:	34 07       	cpc	r19, r20
    1472:	ac f4       	brge	.+42     	; 0x149e <main+0x12c2>
    1474:	51 e0       	ldi	r21, 0x01	; 1
    1476:	83 3c       	cpi	r24, 0xC3	; 195
    1478:	95 07       	cpc	r25, r21
    147a:	8c f0       	brlt	.+34     	; 0x149e <main+0x12c2>
    147c:	40 91 6b 02 	lds	r20, 0x026B
    1480:	50 91 6c 02 	lds	r21, 0x026C
    1484:	61 e0       	ldi	r22, 0x01	; 1
    1486:	43 3c       	cpi	r20, 0xC3	; 195
    1488:	56 07       	cpc	r21, r22
    148a:	4c f0       	brlt	.+18     	; 0x149e <main+0x12c2>
    148c:	40 91 6d 02 	lds	r20, 0x026D
    1490:	50 91 6e 02 	lds	r21, 0x026E
    1494:	e1 e0       	ldi	r30, 0x01	; 1
    1496:	43 3c       	cpi	r20, 0xC3	; 195
    1498:	5e 07       	cpc	r21, r30
    149a:	0c f0       	brlt	.+2      	; 0x149e <main+0x12c2>
    149c:	3a c1       	rjmp	.+628    	; 0x1712 <main+0x1536>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    149e:	40 91 6d 02 	lds	r20, 0x026D
    14a2:	50 91 6e 02 	lds	r21, 0x026E
    14a6:	f1 e0       	ldi	r31, 0x01	; 1
    14a8:	42 3c       	cpi	r20, 0xC2	; 194
    14aa:	5f 07       	cpc	r21, r31
    14ac:	0c f0       	brlt	.+2      	; 0x14b0 <main+0x12d4>
    14ae:	b1 c0       	rjmp	.+354    	; 0x1612 <main+0x1436>
    14b0:	41 e0       	ldi	r20, 0x01	; 1
    14b2:	23 3c       	cpi	r18, 0xC3	; 195
    14b4:	34 07       	cpc	r19, r20
    14b6:	0c f4       	brge	.+2      	; 0x14ba <main+0x12de>
    14b8:	ac c0       	rjmp	.+344    	; 0x1612 <main+0x1436>
    14ba:	51 e0       	ldi	r21, 0x01	; 1
    14bc:	83 3c       	cpi	r24, 0xC3	; 195
    14be:	95 07       	cpc	r25, r21
    14c0:	0c f4       	brge	.+2      	; 0x14c4 <main+0x12e8>
    14c2:	ac c0       	rjmp	.+344    	; 0x161c <main+0x1440>
    14c4:	80 91 6b 02 	lds	r24, 0x026B
    14c8:	90 91 6c 02 	lds	r25, 0x026C
    14cc:	61 e0       	ldi	r22, 0x01	; 1
    14ce:	83 3c       	cpi	r24, 0xC3	; 195
    14d0:	96 07       	cpc	r25, r22
    14d2:	0c f0       	brlt	.+2      	; 0x14d6 <main+0x12fa>
    14d4:	26 c1       	rjmp	.+588    	; 0x1722 <main+0x1546>
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(15);
    14d6:	8f e0       	ldi	r24, 0x0F	; 15
    14d8:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
								setRightSpeed(-5);
    14dc:	8b ef       	ldi	r24, 0xFB	; 251
    14de:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
    14e2:	fb c8       	rjmp	.-3594   	; 0x6da <main+0x4fe>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(15);
							setLeftSpeed(15);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    14e4:	80 91 4d 04 	lds	r24, 0x044D
    14e8:	8f 5f       	subi	r24, 0xFF	; 255
    14ea:	80 93 4d 04 	sts	0x044D, r24
								if(lineFound > 10) {
    14ee:	8b 30       	cpi	r24, 0x0B	; 11
    14f0:	08 f4       	brcc	.+2      	; 0x14f4 <main+0x1318>
    14f2:	f3 c8       	rjmp	.-3610   	; 0x6da <main+0x4fe>
									outOfLine = 0;
    14f4:	10 92 4e 04 	sts	0x044E, r1
									chargeContact = 0;
    14f8:	10 92 4f 04 	sts	0x044F, r1
									demoStartTime = getTime100MicroSec();
    14fc:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    1500:	60 93 50 04 	sts	0x0450, r22
    1504:	70 93 51 04 	sts	0x0451, r23
    1508:	80 93 52 04 	sts	0x0452, r24
    150c:	90 93 53 04 	sts	0x0453, r25
									demoState = 2;
    1510:	42 e0       	ldi	r20, 0x02	; 2
    1512:	40 93 4c 04 	sts	0x044C, r20
									break;
    1516:	e1 c8       	rjmp	.-3646   	; 0x6da <main+0x4fe>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    1518:	80 36       	cpi	r24, 0x60	; 96
    151a:	91 05       	cpc	r25, r1
    151c:	08 f0       	brcs	.+2      	; 0x1520 <main+0x1344>
    151e:	ad ca       	rjmp	.-2726   	; 0xa7a <main+0x89e>
					pwm_blue = 255;
    1520:	10 93 0e 02 	sts	0x020E, r17
    1524:	aa ca       	rjmp	.-2732   	; 0xa7a <main+0x89e>
							}

							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
    1526:	84 36       	cpi	r24, 0x64	; 100
    1528:	91 05       	cpc	r25, r1
    152a:	08 f0       	brcs	.+2      	; 0x152e <main+0x1352>
    152c:	6a c0       	rjmp	.+212    	; 0x1602 <main+0x1426>
								pwm_green = 255;
    152e:	10 93 0d 02 	sts	0x020D, r17
    1532:	80 91 0c 02 	lds	r24, 0x020C
    1536:	b6 cb       	rjmp	.-2196   	; 0xca4 <main+0xac8>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_blue = 255;
							} else {
								pwm_blue = currRand;
    1538:	80 93 0e 02 	sts	0x020E, r24
    153c:	a5 cb       	rjmp	.-2230   	; 0xc88 <main+0xaac>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_green = 255;
							} else {
								pwm_green = currRand;
    153e:	80 93 0d 02 	sts	0x020D, r24
    1542:	96 cb       	rjmp	.-2260   	; 0xc70 <main+0xa94>
							turnOffGreenLeds();					
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
							if(currRand > 95) {
								pwm_red = 255;
							} else {
								pwm_red = currRand;
    1544:	80 93 0c 02 	sts	0x020C, r24
    1548:	87 cb       	rjmp	.-2290   	; 0xc58 <main+0xa7c>
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired += speedStep;
						if(pwm_intermediate_right_desired > pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    154a:	82 17       	cp	r24, r18
    154c:	93 07       	cpc	r25, r19
    154e:	14 f0       	brlt	.+4      	; 0x1554 <main+0x1378>
    1550:	0c 94 8a 02 	jmp	0x514	; 0x514 <main+0x338>
						pwm_intermediate_right_desired -= speedStep;
    1554:	40 91 17 02 	lds	r20, 0x0217
    1558:	24 1b       	sub	r18, r20
    155a:	31 09       	sbc	r19, r1
    155c:	30 93 fc 02 	sts	0x02FC, r19
    1560:	20 93 fb 02 	sts	0x02FB, r18
						if(pwm_intermediate_right_desired < pwm_right_desired) {
    1564:	28 17       	cp	r18, r24
    1566:	39 07       	cpc	r19, r25
    1568:	14 f0       	brlt	.+4      	; 0x156e <main+0x1392>
    156a:	0c 94 8a 02 	jmp	0x514	; 0x514 <main+0x338>
    156e:	0c 94 86 02 	jmp	0x50c	; 0x50c <main+0x330>
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
						pwm_intermediate_left_desired += speedStep;
						if(pwm_intermediate_left_desired > pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}
					} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    1572:	82 17       	cp	r24, r18
    1574:	93 07       	cpc	r25, r19
    1576:	14 f0       	brlt	.+4      	; 0x157c <main+0x13a0>
    1578:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
						pwm_intermediate_left_desired -= speedStep;
    157c:	40 91 17 02 	lds	r20, 0x0217
    1580:	24 1b       	sub	r18, r20
    1582:	31 09       	sbc	r19, r1
    1584:	30 93 fe 02 	sts	0x02FE, r19
    1588:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_left_desired < pwm_left_desired) {
    158c:	28 17       	cp	r18, r24
    158e:	39 07       	cpc	r19, r25
    1590:	14 f0       	brlt	.+4      	; 0x1596 <main+0x13ba>
    1592:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
    1596:	0c 94 af 02 	jmp	0x55e	; 0x55e <main+0x382>
						case 0:							
							pwm_red = 255;
							pwm_green = 255;
							pwm_blue = 255;
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
								setGreenLed(greenLedState, 0);
    159a:	80 91 66 04 	lds	r24, 0x0466
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <setGreenLed>
								greenLedState++;
    15a4:	80 91 66 04 	lds	r24, 0x0466
    15a8:	8f 5f       	subi	r24, 0xFF	; 255
    15aa:	80 93 66 04 	sts	0x0466, r24
								if(greenLedState > 7) {
    15ae:	88 30       	cpi	r24, 0x08	; 8
    15b0:	18 f0       	brcs	.+6      	; 0x15b8 <main+0x13dc>
									greenLedState = 0;
    15b2:	10 92 66 04 	sts	0x0466, r1
    15b6:	80 e0       	ldi	r24, 0x00	; 0
								}
								setGreenLed(greenLedState, 1);
    15b8:	61 e0       	ldi	r22, 0x01	; 1
    15ba:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <setGreenLed>
								demoEndTime = getTime100MicroSec();											
    15be:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    15c2:	60 93 58 04 	sts	0x0458, r22
    15c6:	70 93 59 04 	sts	0x0459, r23
    15ca:	80 93 5a 04 	sts	0x045A, r24
    15ce:	90 93 5b 04 	sts	0x045B, r25
    15d2:	f5 c8       	rjmp	.-3606   	; 0x7be <main+0x5e2>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    15d4:	80 91 03 01 	lds	r24, 0x0103
    15d8:	84 fd       	sbrc	r24, 4
    15da:	7f c8       	rjmp	.-3842   	; 0x6da <main+0x4fe>
								chargeContact = 0;
    15dc:	10 92 4f 04 	sts	0x044F, r1
								outOfLine = 0;
    15e0:	10 92 4e 04 	sts	0x044E, r1
								demoState = 2;
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	98 2e       	mov	r9, r24
    15e8:	90 92 4c 04 	sts	0x044C, r9
								demoStartTime = getTime100MicroSec();
    15ec:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    15f0:	60 93 50 04 	sts	0x0450, r22
    15f4:	70 93 51 04 	sts	0x0451, r23
    15f8:	80 93 52 04 	sts	0x0452, r24
    15fc:	90 93 53 04 	sts	0x0453, r25
								break;						
    1600:	6c c8       	rjmp	.-3880   	; 0x6da <main+0x4fe>
							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
    1602:	86 39       	cpi	r24, 0x96	; 150
    1604:	91 05       	cpc	r25, r1
    1606:	10 f4       	brcc	.+4      	; 0x160c <main+0x1430>
								pwm_blue = 255;
    1608:	10 93 0e 02 	sts	0x020E, r17
    160c:	80 91 0c 02 	lds	r24, 0x020C
    1610:	49 cb       	rjmp	.-2414   	; 0xca4 <main+0xac8>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    1612:	e1 e0       	ldi	r30, 0x01	; 1
    1614:	83 3c       	cpi	r24, 0xC3	; 195
    1616:	9e 07       	cpc	r25, r30
    1618:	0c f0       	brlt	.+2      	; 0x161c <main+0x1440>
    161a:	5d cf       	rjmp	.-326    	; 0x14d6 <main+0x12fa>
								setRightSpeed(-5);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    161c:	80 91 6b 02 	lds	r24, 0x026B
    1620:	90 91 6c 02 	lds	r25, 0x026C
    1624:	f1 e0       	ldi	r31, 0x01	; 1
    1626:	83 3c       	cpi	r24, 0xC3	; 195
    1628:	9f 07       	cpc	r25, r31
    162a:	0c f4       	brge	.+2      	; 0x162e <main+0x1452>
    162c:	4a c0       	rjmp	.+148    	; 0x16c2 <main+0x14e6>
								setLeftSpeed(-5);
    162e:	8b ef       	ldi	r24, 0xFB	; 251
    1630:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
								setRightSpeed(15);
    1634:	8f e0       	ldi	r24, 0x0F	; 15
    1636:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
    163a:	4f c8       	rjmp	.-3938   	; 0x6da <main+0x4fe>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    163c:	10 92 4f 04 	sts	0x044F, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    1640:	80 91 69 02 	lds	r24, 0x0269
    1644:	90 91 6a 02 	lds	r25, 0x026A
    1648:	e1 e0       	ldi	r30, 0x01	; 1
    164a:	83 3c       	cpi	r24, 0xC3	; 195
    164c:	9e 07       	cpc	r25, r30
    164e:	2c f1       	brlt	.+74     	; 0x169a <main+0x14be>
    1650:	20 91 6b 02 	lds	r18, 0x026B
    1654:	30 91 6c 02 	lds	r19, 0x026C
    1658:	f1 e0       	ldi	r31, 0x01	; 1
    165a:	23 3c       	cpi	r18, 0xC3	; 195
    165c:	3f 07       	cpc	r19, r31
    165e:	ec f0       	brlt	.+58     	; 0x169a <main+0x14be>
									outOfLine++;
    1660:	20 91 4e 04 	lds	r18, 0x044E
    1664:	2f 5f       	subi	r18, 0xFF	; 255
    1666:	20 93 4e 04 	sts	0x044E, r18
									if(outOfLine > 250) {
    166a:	2b 3f       	cpi	r18, 0xFB	; 251
    166c:	08 f4       	brcc	.+2      	; 0x1670 <main+0x1494>
    166e:	fa ce       	rjmp	.-524    	; 0x1464 <main+0x1288>
    1670:	32 c8       	rjmp	.-3996   	; 0x6d6 <main+0x4fa>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    1672:	8c ee       	ldi	r24, 0xEC	; 236
    1674:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
								setLeftSpeed(-20);
    1678:	8c ee       	ldi	r24, 0xEC	; 236
    167a:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    167e:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    1682:	60 93 50 04 	sts	0x0450, r22
    1686:	70 93 51 04 	sts	0x0451, r23
    168a:	80 93 52 04 	sts	0x0452, r24
    168e:	90 93 53 04 	sts	0x0453, r25
								demoState = 4;
    1692:	84 e0       	ldi	r24, 0x04	; 4
    1694:	80 93 4c 04 	sts	0x044C, r24
								break;
    1698:	20 c8       	rjmp	.-4032   	; 0x6da <main+0x4fe>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    169a:	10 92 4e 04 	sts	0x044E, r1
    169e:	e2 ce       	rjmp	.-572    	; 0x1464 <main+0x1288>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    16a0:	91 30       	cpi	r25, 0x01	; 1
    16a2:	59 f1       	breq	.+86     	; 0x16fa <main+0x151e>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    16a4:	92 30       	cpi	r25, 0x02	; 2
    16a6:	11 f0       	breq	.+4      	; 0x16ac <main+0x14d0>
    16a8:	0c 94 ed 02 	jmp	0x5da	; 0x5da <main+0x3fe>
						pwm_red = 255;
    16ac:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 255;
    16b0:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 254;
    16b4:	8e ef       	ldi	r24, 0xFE	; 254
    16b6:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    16ba:	10 92 18 03 	sts	0x0318, r1
    16be:	0c 94 ed 02 	jmp	0x5da	; 0x5da <main+0x3fe>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(15);
    16c2:	8f e0       	ldi	r24, 0x0F	; 15
    16c4:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
								setLeftSpeed(15);
    16c8:	8f e0       	ldi	r24, 0x0F	; 15
    16ca:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
    16ce:	05 c8       	rjmp	.-4086   	; 0x6da <main+0x4fe>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
									setRightSpeed(0);
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    16dc:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    16e0:	60 93 50 04 	sts	0x0450, r22
    16e4:	70 93 51 04 	sts	0x0451, r23
    16e8:	80 93 52 04 	sts	0x0452, r24
    16ec:	90 93 53 04 	sts	0x0453, r25
									demoState = 3;
    16f0:	93 e0       	ldi	r25, 0x03	; 3
    16f2:	90 93 4c 04 	sts	0x044C, r25
									break;
    16f6:	0c 94 6d 03 	jmp	0x6da	; 0x6da <main+0x4fe>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    16fa:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 254;
    16fe:	5e ef       	ldi	r21, 0xFE	; 254
    1700:	50 93 0d 02 	sts	0x020D, r21
						pwm_blue = 255;
    1704:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 2;
    1708:	62 e0       	ldi	r22, 0x02	; 2
    170a:	60 93 18 03 	sts	0x0318, r22
    170e:	0c 94 ed 02 	jmp	0x5da	; 0x5da <main+0x3fe>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
    1712:	86 ef       	ldi	r24, 0xF6	; 246
    1714:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
								setRightSpeed(15);
    1718:	8f e0       	ldi	r24, 0x0F	; 15
    171a:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
    171e:	0c 94 6d 03 	jmp	0x6da	; 0x6da <main+0x4fe>
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
    1722:	8f e0       	ldi	r24, 0x0F	; 15
    1724:	0e 94 ba 22 	call	0x4574	; 0x4574 <setLeftSpeed>
								setRightSpeed(-10);
    1728:	86 ef       	ldi	r24, 0xF6	; 246
    172a:	0e 94 d7 22 	call	0x45ae	; 0x45ae <setRightSpeed>
    172e:	0c 94 6d 03 	jmp	0x6da	; 0x6da <main+0x4fe>

00001732 <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1736:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1738:	0d b4       	in	r0, 0x2d	; 45
    173a:	07 fc       	sbrc	r0, 7
    173c:	0a c0       	rjmp	.+20     	; 0x1752 <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    173e:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1740:	37 e2       	ldi	r19, 0x27	; 39
    1742:	80 31       	cpi	r24, 0x10	; 16
    1744:	93 07       	cpc	r25, r19
    1746:	c0 f3       	brcs	.-16     	; 0x1738 <SPI_WAIT+0x6>
			spiCommError = 1;
    1748:	20 93 16 03 	sts	0x0316, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    174c:	0d b4       	in	r0, 0x2d	; 45
    174e:	07 fe       	sbrs	r0, 7
    1750:	f6 cf       	rjmp	.-20     	; 0x173e <SPI_WAIT+0xc>
			return;
		}
	}
}
    1752:	08 95       	ret

00001754 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1754:	84 b1       	in	r24, 0x04	; 4
    1756:	80 7f       	andi	r24, 0xF0	; 240
    1758:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    175a:	84 b1       	in	r24, 0x04	; 4
    175c:	87 60       	ori	r24, 0x07	; 7
    175e:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1760:	80 e5       	ldi	r24, 0x50	; 80
    1762:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1764:	8d b5       	in	r24, 0x2d	; 45
    1766:	81 60       	ori	r24, 0x01	; 1
    1768:	8d bd       	out	0x2d, r24	; 45

}
    176a:	08 95       	ret

0000176c <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    176c:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    176e:	1d bc       	out	0x2d, r1	; 45
}
    1770:	08 95       	ret

00001772 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1772:	44 23       	and	r20, r20
    1774:	09 f1       	breq	.+66     	; 0x17b8 <SPI_ReadWrite_Block+0x46>
    1776:	a6 2f       	mov	r26, r22
    1778:	b7 2f       	mov	r27, r23
    177a:	e8 2f       	mov	r30, r24
    177c:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    177e:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1780:	21 91       	ld	r18, Z+
    1782:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1784:	21 e0       	ldi	r18, 0x01	; 1
    1786:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1788:	0d b4       	in	r0, 0x2d	; 45
    178a:	07 fc       	sbrc	r0, 7
    178c:	0b c0       	rjmp	.+22     	; 0x17a4 <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    178e:	2f 5f       	subi	r18, 0xFF	; 255
    1790:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    1792:	57 e2       	ldi	r21, 0x27	; 39
    1794:	20 31       	cpi	r18, 0x10	; 16
    1796:	35 07       	cpc	r19, r21
    1798:	b8 f3       	brcs	.-18     	; 0x1788 <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
    179a:	90 93 16 03 	sts	0x0316, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    179e:	0d b4       	in	r0, 0x2d	; 45
    17a0:	07 fe       	sbrs	r0, 7
    17a2:	f5 cf       	rjmp	.-22     	; 0x178e <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    17a4:	20 91 16 03 	lds	r18, 0x0316
    17a8:	22 23       	and	r18, r18
    17aa:	31 f4       	brne	.+12     	; 0x17b8 <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
    17ac:	2e b5       	in	r18, 0x2e	; 46
    17ae:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    17b0:	2e 2f       	mov	r18, r30
    17b2:	28 1b       	sub	r18, r24
    17b4:	24 17       	cp	r18, r20
    17b6:	20 f3       	brcs	.-56     	; 0x1780 <SPI_ReadWrite_Block+0xe>
    17b8:	08 95       	ret

000017ba <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    17ba:	66 23       	and	r22, r22
    17bc:	e9 f0       	breq	.+58     	; 0x17f8 <SPI_Write_Block+0x3e>
    17be:	e8 2f       	mov	r30, r24
    17c0:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    17c2:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    17c4:	21 91       	ld	r18, Z+
    17c6:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    17c8:	21 e0       	ldi	r18, 0x01	; 1
    17ca:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    17cc:	0d b4       	in	r0, 0x2d	; 45
    17ce:	07 fc       	sbrc	r0, 7
    17d0:	0b c0       	rjmp	.+22     	; 0x17e8 <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    17d2:	2f 5f       	subi	r18, 0xFF	; 255
    17d4:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    17d6:	47 e2       	ldi	r20, 0x27	; 39
    17d8:	20 31       	cpi	r18, 0x10	; 16
    17da:	34 07       	cpc	r19, r20
    17dc:	b8 f3       	brcs	.-18     	; 0x17cc <SPI_Write_Block+0x12>
			spiCommError = 1;
    17de:	90 93 16 03 	sts	0x0316, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    17e2:	0d b4       	in	r0, 0x2d	; 45
    17e4:	07 fe       	sbrs	r0, 7
    17e6:	f5 cf       	rjmp	.-22     	; 0x17d2 <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    17e8:	20 91 16 03 	lds	r18, 0x0316
    17ec:	22 23       	and	r18, r18
    17ee:	21 f4       	brne	.+8      	; 0x17f8 <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    17f0:	2e 2f       	mov	r18, r30
    17f2:	28 1b       	sub	r18, r24
    17f4:	26 17       	cp	r18, r22
    17f6:	30 f3       	brcs	.-52     	; 0x17c4 <SPI_Write_Block+0xa>
    17f8:	08 95       	ret

000017fa <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    17fa:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1800:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1802:	0d b4       	in	r0, 0x2d	; 45
    1804:	07 fc       	sbrc	r0, 7
    1806:	0a c0       	rjmp	.+20     	; 0x181c <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1808:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    180a:	37 e2       	ldi	r19, 0x27	; 39
    180c:	80 31       	cpi	r24, 0x10	; 16
    180e:	93 07       	cpc	r25, r19
    1810:	c0 f3       	brcs	.-16     	; 0x1802 <SPI_Write_Byte+0x8>
			spiCommError = 1;
    1812:	20 93 16 03 	sts	0x0316, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    1816:	0d b4       	in	r0, 0x2d	; 45
    1818:	07 fe       	sbrs	r0, 7
    181a:	f6 cf       	rjmp	.-20     	; 0x1808 <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    181c:	8e b5       	in	r24, 0x2e	; 46
}
    181e:	08 95       	ret

00001820 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    1820:	0f 93       	push	r16
    1822:	1f 93       	push	r17
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <mirf_config+0xa>
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    182e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1830:	80 e2       	ldi	r24, 0x20	; 32
    1832:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1836:	8d e0       	ldi	r24, 0x0D	; 13
    1838:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    183c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    183e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1840:	83 e2       	ldi	r24, 0x23	; 35
    1842:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    184c:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    184e:	80 91 13 03 	lds	r24, 0x0313
    1852:	90 91 14 03 	lds	r25, 0x0314
    1856:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    1858:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    185a:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    185c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    185e:	80 e3       	ldi	r24, 0x30	; 48
    1860:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1864:	8e 01       	movw	r16, r28
    1866:	0f 5f       	subi	r16, 0xFF	; 255
    1868:	1f 4f       	sbci	r17, 0xFF	; 255
    186a:	c8 01       	movw	r24, r16
    186c:	63 e0       	ldi	r22, 0x03	; 3
    186e:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Block>
    mirf_CSN_hi;
    1872:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1874:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1876:	8a e2       	ldi	r24, 0x2A	; 42
    1878:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    187c:	c8 01       	movw	r24, r16
    187e:	63 e0       	ldi	r22, 0x03	; 3
    1880:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Block>
    mirf_CSN_hi;
    1884:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1886:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1888:	81 e2       	ldi	r24, 0x21	; 33
    188a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Byte(value);
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    1894:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1896:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1898:	82 e2       	ldi	r24, 0x22	; 34
    189a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Byte(value);
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    18a4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    18a6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18a8:	84 e2       	ldi	r24, 0x24	; 36
    18aa:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Byte(value);
    18ae:	82 e1       	ldi	r24, 0x12	; 18
    18b0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    18b4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    18b6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18b8:	85 e2       	ldi	r24, 0x25	; 37
    18ba:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Byte(value);
    18be:	88 e2       	ldi	r24, 0x28	; 40
    18c0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    18c4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    18c6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18c8:	81 e3       	ldi	r24, 0x31	; 49
    18ca:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Byte(value);
    18ce:	8d e0       	ldi	r24, 0x0D	; 13
    18d0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    18d4:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    18d6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    18d8:	80 e5       	ldi	r24, 0x50	; 80
    18da:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    18de:	83 e7       	ldi	r24, 0x73	; 115
    18e0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    18e4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    18e6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18e8:	8c e3       	ldi	r24, 0x3C	; 60
    18ea:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Byte(value);
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    18f4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    18f6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18f8:	8d e3       	ldi	r24, 0x3D	; 61
    18fa:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Byte(value);
    18fe:	86 e0       	ldi	r24, 0x06	; 6
    1900:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    1904:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1906:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1908:	80 e2       	ldi	r24, 0x20	; 32
    190a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Byte(value);
    190e:	8f e0       	ldi	r24, 0x0F	; 15
    1910:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    1914:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	08 95       	ret

00001926 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1926:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    1928:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    192a:	0e 94 10 0c 	call	0x1820	; 0x1820 <mirf_config>
}
    192e:	08 95       	ret

00001930 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1930:	cf 93       	push	r28
    1932:	df 93       	push	r29
    1934:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    1936:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1938:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    193a:	8a e2       	ldi	r24, 0x2A	; 42
    193c:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1940:	ce 01       	movw	r24, r28
    1942:	65 e0       	ldi	r22, 0x05	; 5
    1944:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Block>
    mirf_CSN_hi;
    1948:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    194a:	2c 9a       	sbi	0x05, 4	; 5
}
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	08 95       	ret

00001952 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1958:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    195a:	80 e3       	ldi	r24, 0x30	; 48
    195c:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1960:	ce 01       	movw	r24, r28
    1962:	65 e0       	ldi	r22, 0x05	; 5
    1964:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Block>
    mirf_CSN_hi;
    1968:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	08 95       	ret

00001970 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1970:	80 91 c0 04 	lds	r24, 0x04C0
    1974:	88 23       	and	r24, r24
    1976:	11 f0       	breq	.+4      	; 0x197c <mirf_data_ready+0xc>
    1978:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    197a:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    197c:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1984:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1986:	80 74       	andi	r24, 0x40	; 64
    1988:	08 95       	ret

0000198a <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	0f 92       	push	r0
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1994:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1996:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1998:	87 e1       	ldi	r24, 0x17	; 23
    199a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    199e:	be 01       	movw	r22, r28
    19a0:	6f 5f       	subi	r22, 0xFF	; 255
    19a2:	7f 4f       	sbci	r23, 0xFF	; 255
    19a4:	cb 01       	movw	r24, r22
    19a6:	41 e0       	ldi	r20, 0x01	; 1
    19a8:	0e 94 b9 0b 	call	0x1772	; 0x1772 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    19ac:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b0:	81 70       	andi	r24, 0x01	; 1
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    19ba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    19bc:	82 ee       	ldi	r24, 0xE2	; 226
    19be:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    19c2:	28 9a       	sbi	0x05, 0	; 5

}
    19c4:	08 95       	ret

000019c6 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    19cc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    19ce:	81 e6       	ldi	r24, 0x61	; 97
    19d0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    19d4:	ce 01       	movw	r24, r28
    19d6:	be 01       	movw	r22, r28
    19d8:	4d e0       	ldi	r20, 0x0D	; 13
    19da:	0e 94 b9 0b 	call	0x1772	; 0x1772 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    19de:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19e0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19e2:	87 e2       	ldi	r24, 0x27	; 39
    19e4:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19e8:	80 e4       	ldi	r24, 0x40	; 64
    19ea:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    19ee:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    19f0:	df 91       	pop	r29
    19f2:	cf 91       	pop	r28
    19f4:	08 95       	ret

000019f6 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	0f 92       	push	r0
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1a00:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a02:	8f 71       	andi	r24, 0x1F	; 31
    1a04:	80 62       	ori	r24, 0x20	; 32
    1a06:	69 83       	std	Y+1, r22	; 0x01
    1a08:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1a0c:	69 81       	ldd	r22, Y+1	; 0x01
    1a0e:	86 2f       	mov	r24, r22
    1a10:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    1a14:	28 9a       	sbi	0x05, 0	; 5
}
    1a16:	0f 90       	pop	r0
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	0f 92       	push	r0
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1a2e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1a30:	8f 71       	andi	r24, 0x1F	; 31
    1a32:	49 83       	std	Y+1, r20	; 0x01
    1a34:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1a38:	c8 01       	movw	r24, r16
    1a3a:	b8 01       	movw	r22, r16
    1a3c:	49 81       	ldd	r20, Y+1	; 0x01
    1a3e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1a42:	28 9a       	sbi	0x05, 0	; 5
}
    1a44:	0f 90       	pop	r0
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	08 95       	ret

00001a50 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1a50:	0f 93       	push	r16
    1a52:	1f 93       	push	r17
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	0f 92       	push	r0
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1a60:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a62:	8f 71       	andi	r24, 0x1F	; 31
    1a64:	80 62       	ori	r24, 0x20	; 32
    1a66:	49 83       	std	Y+1, r20	; 0x01
    1a68:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1a6c:	c8 01       	movw	r24, r16
    1a6e:	49 81       	ldd	r20, Y+1	; 0x01
    1a70:	64 2f       	mov	r22, r20
    1a72:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Block>
    mirf_CSN_hi;
    1a76:	28 9a       	sbi	0x05, 0	; 5
}
    1a78:	0f 90       	pop	r0
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	08 95       	ret

00001a84 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1a84:	0f 93       	push	r16
    1a86:	1f 93       	push	r17
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	0f 92       	push	r0
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1a94:	80 91 c0 04 	lds	r24, 0x04C0
    1a98:	88 23       	and	r24, r24
    1a9a:	e1 f7       	brne	.-8      	; 0x1a94 <mirf_send+0x10>

    mirf_CE_lo;
    1a9c:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	80 93 c0 04 	sts	0x04C0, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1aa4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1aa6:	80 e2       	ldi	r24, 0x20	; 32
    1aa8:	69 83       	std	Y+1, r22	; 0x01
    1aaa:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1aae:	8a e4       	ldi	r24, 0x4A	; 74
    1ab0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    1ab4:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1ab6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    1ab8:	81 ee       	ldi	r24, 0xE1	; 225
    1aba:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1abe:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1ac0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1ac2:	80 ea       	ldi	r24, 0xA0	; 160
    1ac4:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    1ac8:	c8 01       	movw	r24, r16
    1aca:	69 81       	ldd	r22, Y+1	; 0x01
    1acc:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    1ad0:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    1ad2:	2c 9a       	sbi	0x05, 4	; 5
}
    1ad4:	0f 90       	pop	r0
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	08 95       	ret

00001ae0 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    1ae0:	ef 92       	push	r14
    1ae2:	ff 92       	push	r15
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	0f 92       	push	r0
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	18 2f       	mov	r17, r24
    1af4:	06 2f       	mov	r16, r22
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    1af6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1af8:	81 ee       	ldi	r24, 0xE1	; 225
    1afa:	99 83       	std	Y+1, r25	; 0x01
    1afc:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    1b00:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1b02:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1b04:	88 ea       	ldi	r24, 0xA8	; 168
    1b06:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    1b0a:	99 81       	ldd	r25, Y+1	; 0x01
    1b0c:	00 23       	and	r16, r16
    1b0e:	61 f0       	breq	.+24     	; 0x1b28 <writeAckPayload+0x48>
    1b10:	61 2f       	mov	r22, r17
    1b12:	79 2f       	mov	r23, r25
    1b14:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1b16:	f7 01       	movw	r30, r14
    1b18:	81 91       	ld	r24, Z+
    1b1a:	7f 01       	movw	r14, r30
    1b1c:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1b20:	8e 2d       	mov	r24, r14
    1b22:	81 1b       	sub	r24, r17
    1b24:	80 17       	cp	r24, r16
    1b26:	b8 f3       	brcs	.-18     	; 0x1b16 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1b28:	28 9a       	sbi	0x05, 0	; 5


}
    1b2a:	0f 90       	pop	r0
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	ff 90       	pop	r15
    1b36:	ef 90       	pop	r14
    1b38:	08 95       	ret

00001b3a <readPayloadWidthFromTopFifo>:

uint8_t readPayloadWidthFromTopFifo() {
	uint8_t pWidth = 0;

    mirf_CSN_lo;
    1b3a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_R_RX_PL_WID);
    1b3c:	80 e6       	ldi	r24, 0x60	; 96
    1b3e:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
	pWidth = SPI_Write_Byte(NOP); 	// not specified in the datasheet but the "NRF_R_RX_PL_WID" has a parameter,
    1b42:	8f ef       	ldi	r24, 0xFF	; 255
    1b44:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
									// we need to send a NOP to receive the actual payload size
    mirf_CSN_hi;
    1b48:	28 9a       	sbi	0x05, 0	; 5
	
	return pWidth;
}
    1b4a:	08 95       	ret

00001b4c <readPayloadWidthFromPipe0>:

uint8_t readPayloadWidthFromPipe0() {
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	0f 92       	push	r0
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
	uint8_t pWidth = 0;
    1b56:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1b58:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1b5a:	81 e1       	ldi	r24, 0x11	; 17
    1b5c:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1b60:	be 01       	movw	r22, r28
    1b62:	6f 5f       	subi	r22, 0xFF	; 255
    1b64:	7f 4f       	sbci	r23, 0xFF	; 255
    1b66:	cb 01       	movw	r24, r22
    1b68:	41 e0       	ldi	r20, 0x01	; 1
    1b6a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1b6e:	28 9a       	sbi	0x05, 0	; 5
	uint8_t pWidth = 0;

	mirf_read_register(RX_PW_P0, &pWidth, 1);
	
	return pWidth;
}
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	0f 90       	pop	r0
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <flushTxFifo>:

void flushTxFifo() {

    mirf_CSN_lo;
    1b7a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1b7c:	81 ee       	ldi	r24, 0xE1	; 225
    1b7e:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    1b82:	28 9a       	sbi	0x05, 0	; 5

}
    1b84:	08 95       	ret

00001b86 <handleRFCommands>:

void handleRFCommands() {
    1b86:	ff 92       	push	r15
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	0f 92       	push	r0
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1b96:	80 91 c0 04 	lds	r24, 0x04C0
    1b9a:	88 23       	and	r24, r24
    1b9c:	39 f0       	breq	.+14     	; 0x1bac <handleRFCommands+0x26>

		writeAckPayload(ackPayload, 16);

	}

}
    1b9e:	0f 90       	pop	r0
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	ff 90       	pop	r15
    1baa:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1bac:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1bae:	8f ef       	ldi	r24, 0xFF	; 255
    1bb0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1bb4:	28 9a       	sbi	0x05, 0	; 5

	unsigned int i=0;
	//uint8_t pWidth = 0;
	//uint8_t pWidthP0 = 0;

	if(mirf_data_ready()) {
    1bb6:	86 ff       	sbrs	r24, 6
    1bb8:	f2 cf       	rjmp	.-28     	; 0x1b9e <handleRFCommands+0x18>
		//if(spiCommError) {
		//	usart0Transmit(0xFE,1);
		//	return;
		//}

		rfFlags |= 0x02;
    1bba:	80 91 15 03 	lds	r24, 0x0315
    1bbe:	82 60       	ori	r24, 0x02	; 2
    1bc0:	80 93 15 03 	sts	0x0315, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1bc4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1bc6:	87 e2       	ldi	r24, 0x27	; 39
    1bc8:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1bcc:	80 e7       	ldi	r24, 0x70	; 112
    1bce:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    1bd2:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
    1bd4:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1bd6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1bd8:	87 e1       	ldi	r24, 0x17	; 23
    1bda:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1bde:	be 01       	movw	r22, r28
    1be0:	6f 5f       	subi	r22, 0xFF	; 255
    1be2:	7f 4f       	sbci	r23, 0xFF	; 255
    1be4:	cb 01       	movw	r24, r22
    1be6:	41 e0       	ldi	r20, 0x01	; 1
    1be8:	0e 94 b9 0b 	call	0x1772	; 0x1772 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1bec:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
		// aren't present in the fifo with consequent wrong data read and wrong behavior of the robot.
		// To avoid this situtation we add this check before actually reading from the fifo to be 
		// sure there are correct data to be read.
		// We don't know why the IRQ for data reception is raised, maybe is not correctly reset sometimes
		// or it is raised when it shouldn't...
		if(rx_fifo_is_empty()) {
    1bf0:	80 fd       	sbrc	r24, 0
    1bf2:	d5 cf       	rjmp	.-86     	; 0x1b9e <handleRFCommands+0x18>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    1bf4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1bf6:	81 e6       	ldi	r24, 0x61	; 97
    1bf8:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1bfc:	85 e7       	ldi	r24, 0x75	; 117
    1bfe:	95 e0       	ldi	r25, 0x05	; 5
    1c00:	bc 01       	movw	r22, r24
    1c02:	4d e0       	ldi	r20, 0x0D	; 13
    1c04:	0e 94 b9 0b 	call	0x1772	; 0x1772 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1c08:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1c0a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1c0c:	87 e2       	ldi	r24, 0x27	; 39
    1c0e:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1c12:	80 e4       	ldi	r24, 0x40	; 64
    1c14:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    1c18:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    1c1a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1c1c:	82 ee       	ldi	r24, 0xE2	; 226
    1c1e:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    1c22:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1c24:	40 91 75 05 	lds	r20, 0x0575
    1c28:	24 2f       	mov	r18, r20
    1c2a:	44 23       	and	r20, r20
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <handleRFCommands+0xaa>
    1c2e:	29 c1       	rjmp	.+594    	; 0x1e82 <handleRFCommands+0x2fc>
    1c30:	50 91 76 05 	lds	r21, 0x0576
    1c34:	e5 2f       	mov	r30, r21
    1c36:	55 23       	and	r21, r21
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <handleRFCommands+0xb6>
    1c3a:	10 c2       	rjmp	.+1056   	; 0x205c <handleRFCommands+0x4d6>

			sleep(60);
    1c3c:	00 91 77 05 	lds	r16, 0x0577

		}

		if(calibrateOdomFlag==0) { 
    1c40:	80 91 c7 04 	lds	r24, 0x04C7
    1c44:	88 23       	and	r24, r24
    1c46:	41 f5       	brne	.+80     	; 0x1c98 <handleRFCommands+0x112>
			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1c48:	70 91 79 05 	lds	r23, 0x0579
    1c4c:	27 2f       	mov	r18, r23
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	2f 77       	andi	r18, 0x7F	; 127
    1c52:	30 70       	andi	r19, 0x00	; 0
    1c54:	30 93 12 03 	sts	0x0312, r19
    1c58:	20 93 11 03 	sts	0x0311, r18
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1c5c:	60 91 7a 05 	lds	r22, 0x057A
    1c60:	86 2f       	mov	r24, r22
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	8f 77       	andi	r24, 0x7F	; 127
    1c66:	90 70       	andi	r25, 0x00	; 0
    1c68:	90 93 10 03 	sts	0x0310, r25
    1c6c:	80 93 0f 03 	sts	0x030F, r24
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
    1c70:	77 fd       	sbrc	r23, 7
    1c72:	03 c0       	rjmp	.+6      	; 0x1c7a <handleRFCommands+0xf4>
				pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
			} else {								// backward
				pwm_right_desired = -(speedr);
    1c74:	30 95       	com	r19
    1c76:	21 95       	neg	r18
    1c78:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7a:	30 93 f8 02 	sts	0x02F8, r19
    1c7e:	20 93 f7 02 	sts	0x02F7, r18
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
    1c82:	67 fd       	sbrc	r22, 7
    1c84:	03 c0       	rjmp	.+6      	; 0x1c8c <handleRFCommands+0x106>
				pwm_left_desired = speedl;
			} else {								// backward
				pwm_left_desired = -(speedl);
    1c86:	90 95       	com	r25
    1c88:	81 95       	neg	r24
    1c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8c:	90 93 fa 02 	sts	0x02FA, r25
    1c90:	80 93 f9 02 	sts	0x02F9, r24
    1c94:	24 2f       	mov	r18, r20
    1c96:	e5 2f       	mov	r30, r21

		}


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	30 93 6e 05 	sts	0x056E, r19
    1c9e:	20 93 6d 05 	sts	0x056D, r18
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	f0 93 70 05 	sts	0x0570, r31
    1ca8:	e0 93 6f 05 	sts	0x056F, r30
    1cac:	10 e0       	ldi	r17, 0x00	; 0
    1cae:	10 93 72 05 	sts	0x0572, r17
    1cb2:	00 93 71 05 	sts	0x0571, r16
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    1cb6:	92 2f       	mov	r25, r18
    1cb8:	88 27       	eor	r24, r24
    1cba:	82 1b       	sub	r24, r18
    1cbc:	93 0b       	sbc	r25, r19
    1cbe:	24 e6       	ldi	r18, 0x64	; 100
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	b9 01       	movw	r22, r18
    1cc4:	0e 94 18 42 	call	0x8430	; 0x8430 <__udivmodhi4>
    1cc8:	f6 2e       	mov	r15, r22
    1cca:	f0 94       	com	r15
    1ccc:	f0 92 0c 02 	sts	0x020C, r15
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    1cd0:	5e 2f       	mov	r21, r30
    1cd2:	44 27       	eor	r20, r20
    1cd4:	4e 1b       	sub	r20, r30
    1cd6:	5f 0b       	sbc	r21, r31
    1cd8:	ca 01       	movw	r24, r20
    1cda:	b9 01       	movw	r22, r18
    1cdc:	0e 94 18 42 	call	0x8430	; 0x8430 <__udivmodhi4>
    1ce0:	60 95       	com	r22
    1ce2:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    1ce6:	50 2f       	mov	r21, r16
    1ce8:	44 27       	eor	r20, r20
    1cea:	40 1b       	sub	r20, r16
    1cec:	51 0b       	sbc	r21, r17
    1cee:	ca 01       	movw	r24, r20
    1cf0:	b9 01       	movw	r22, r18
    1cf2:	0e 94 18 42 	call	0x8430	; 0x8430 <__udivmodhi4>
    1cf6:	60 95       	com	r22
    1cf8:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
    1cfc:	8f 2d       	mov	r24, r15
    1cfe:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <updateRedLed>
		updateGreenLed(pwm_green);
    1d02:	80 91 0d 02 	lds	r24, 0x020D
    1d06:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <updateGreenLed>
		updateBlueLed(pwm_blue);
    1d0a:	80 91 0e 02 	lds	r24, 0x020E
    1d0e:	0e 94 12 37 	call	0x6e24	; 0x6e24 <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    1d12:	80 91 78 05 	lds	r24, 0x0578
    1d16:	80 ff       	sbrs	r24, 0
    1d18:	e6 c0       	rjmp	.+460    	; 0x1ee6 <handleRFCommands+0x360>
			LED_IR1_LOW;
    1d1a:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    1d1c:	81 ff       	sbrs	r24, 1
    1d1e:	e1 c0       	rjmp	.+450    	; 0x1ee2 <handleRFCommands+0x35c>
			LED_IR2_LOW;
    1d20:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1d22:	98 2f       	mov	r25, r24
    1d24:	82 ff       	sbrs	r24, 2
    1d26:	da c0       	rjmp	.+436    	; 0x1edc <handleRFCommands+0x356>
			irEnabled = 1;
    1d28:	21 e0       	ldi	r18, 0x01	; 1
    1d2a:	20 93 12 02 	sts	0x0212, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1d2e:	84 fd       	sbrc	r24, 4
    1d30:	5a c2       	rjmp	.+1204   	; 0x21e6 <handleRFCommands+0x660>
			calibrateSensors();
			resetOdometry();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1d32:	86 ff       	sbrs	r24, 6
    1d34:	d0 c0       	rjmp	.+416    	; 0x1ed6 <handleRFCommands+0x350>
			obstacleAvoidanceEnabled = 1;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	80 93 68 04 	sts	0x0468, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    1d3c:	97 fd       	sbrc	r25, 7
    1d3e:	7e c2       	rjmp	.+1276   	; 0x223c <__stack+0x3d>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
    1d40:	10 92 69 04 	sts	0x0469, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    1d44:	80 91 7b 05 	lds	r24, 0x057B
    1d48:	80 ff       	sbrs	r24, 0
    1d4a:	bf c0       	rjmp	.+382    	; 0x1eca <handleRFCommands+0x344>
				GREEN_LED0_ON;
    1d4c:	80 91 0b 01 	lds	r24, 0x010B
    1d50:	8e 7f       	andi	r24, 0xFE	; 254
    1d52:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    1d56:	80 91 7b 05 	lds	r24, 0x057B
    1d5a:	81 ff       	sbrs	r24, 1
    1d5c:	b0 c0       	rjmp	.+352    	; 0x1ebe <handleRFCommands+0x338>
				GREEN_LED1_ON;
    1d5e:	80 91 0b 01 	lds	r24, 0x010B
    1d62:	8d 7f       	andi	r24, 0xFD	; 253
    1d64:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    1d68:	80 91 7b 05 	lds	r24, 0x057B
    1d6c:	82 ff       	sbrs	r24, 2
    1d6e:	a1 c0       	rjmp	.+322    	; 0x1eb2 <handleRFCommands+0x32c>
				GREEN_LED2_ON;
    1d70:	80 91 0b 01 	lds	r24, 0x010B
    1d74:	8b 7f       	andi	r24, 0xFB	; 251
    1d76:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
    1d7a:	80 91 7b 05 	lds	r24, 0x057B
    1d7e:	83 ff       	sbrs	r24, 3
    1d80:	96 c0       	rjmp	.+300    	; 0x1eae <handleRFCommands+0x328>
				GREEN_LED3_ON;
    1d82:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
    1d84:	80 91 7b 05 	lds	r24, 0x057B
    1d88:	84 ff       	sbrs	r24, 4
    1d8a:	8b c0       	rjmp	.+278    	; 0x1ea2 <handleRFCommands+0x31c>
				GREEN_LED4_ON;
    1d8c:	80 91 0b 01 	lds	r24, 0x010B
    1d90:	8f 7e       	andi	r24, 0xEF	; 239
    1d92:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
    1d96:	80 91 7b 05 	lds	r24, 0x057B
    1d9a:	85 ff       	sbrs	r24, 5
    1d9c:	7c c0       	rjmp	.+248    	; 0x1e96 <handleRFCommands+0x310>
				GREEN_LED5_ON;
    1d9e:	80 91 0b 01 	lds	r24, 0x010B
    1da2:	8f 7d       	andi	r24, 0xDF	; 223
    1da4:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
    1da8:	80 91 7b 05 	lds	r24, 0x057B
    1dac:	86 ff       	sbrs	r24, 6
    1dae:	6d c0       	rjmp	.+218    	; 0x1e8a <handleRFCommands+0x304>
				GREEN_LED6_ON;
    1db0:	80 91 0b 01 	lds	r24, 0x010B
    1db4:	8f 7b       	andi	r24, 0xBF	; 191
    1db6:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
    1dba:	80 91 7b 05 	lds	r24, 0x057B
    1dbe:	87 fd       	sbrc	r24, 7
    1dc0:	37 c2       	rjmp	.+1134   	; 0x2230 <__stack+0x31>
				GREEN_LED7_ON;
			} else {
				GREEN_LED7_OFF;
    1dc2:	80 91 0b 01 	lds	r24, 0x010B
    1dc6:	80 68       	ori	r24, 0x80	; 128
    1dc8:	80 93 0b 01 	sts	0x010B, r24
			}

		#endif
		
		if(currentSelector == 8) {
    1dcc:	80 91 48 04 	lds	r24, 0x0448
    1dd0:	88 30       	cpi	r24, 0x08	; 8
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <handleRFCommands+0x250>
    1dd4:	10 c2       	rjmp	.+1056   	; 0x21f6 <handleRFCommands+0x670>
		}

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    1dd6:	80 91 0b 02 	lds	r24, 0x020B
    1dda:	80 93 cd 04 	sts	0x04CD, r24

		switch(packetId) {
    1dde:	85 30       	cpi	r24, 0x05	; 5
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <handleRFCommands+0x25e>
    1de2:	30 c2       	rjmp	.+1120   	; 0x2244 <__stack+0x45>
    1de4:	86 30       	cpi	r24, 0x06	; 6
    1de6:	08 f0       	brcs	.+2      	; 0x1dea <handleRFCommands+0x264>
    1de8:	80 c0       	rjmp	.+256    	; 0x1eea <handleRFCommands+0x364>
    1dea:	83 30       	cpi	r24, 0x03	; 3
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <handleRFCommands+0x26a>
    1dee:	95 c1       	rjmp	.+810    	; 0x211a <handleRFCommands+0x594>
    1df0:	84 30       	cpi	r24, 0x04	; 4
    1df2:	09 f0       	breq	.+2      	; 0x1df6 <handleRFCommands+0x270>
    1df4:	e2 c0       	rjmp	.+452    	; 0x1fba <handleRFCommands+0x434>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
    1df6:	90 91 5f 02 	lds	r25, 0x025F
    1dfa:	80 91 60 02 	lds	r24, 0x0260
    1dfe:	90 93 ce 04 	sts	0x04CE, r25
				ackPayload[2] = proximityResult[4]>>8;
    1e02:	80 93 cf 04 	sts	0x04CF, r24
				ackPayload[3] = proximityResult[8]&0xFF;
    1e06:	90 91 67 02 	lds	r25, 0x0267
    1e0a:	80 91 68 02 	lds	r24, 0x0268
    1e0e:	90 93 d0 04 	sts	0x04D0, r25
				ackPayload[4] = proximityResult[8]>>8;
    1e12:	80 93 d1 04 	sts	0x04D1, r24
				ackPayload[5] = proximityResult[9]&0xFF;
    1e16:	90 91 69 02 	lds	r25, 0x0269
    1e1a:	80 91 6a 02 	lds	r24, 0x026A
    1e1e:	90 93 d2 04 	sts	0x04D2, r25
				ackPayload[6] = proximityResult[9]>>8;
    1e22:	80 93 d3 04 	sts	0x04D3, r24
				ackPayload[7] = proximityResult[10]&0xFF;
    1e26:	90 91 6b 02 	lds	r25, 0x026B
    1e2a:	80 91 6c 02 	lds	r24, 0x026C
    1e2e:	90 93 d4 04 	sts	0x04D4, r25
				ackPayload[8] = proximityResult[10]>>8;
    1e32:	80 93 d5 04 	sts	0x04D5, r24
				ackPayload[9] = proximityResult[11]&0xFF;
    1e36:	90 91 6d 02 	lds	r25, 0x026D
    1e3a:	80 91 6e 02 	lds	r24, 0x026E
    1e3e:	90 93 d6 04 	sts	0x04D6, r25
				ackPayload[10] = proximityResult[11]>>8;
    1e42:	80 93 d7 04 	sts	0x04D7, r24
				ackPayload[11] = accX&0xFF;
    1e46:	90 91 28 04 	lds	r25, 0x0428
    1e4a:	80 91 29 04 	lds	r24, 0x0429
    1e4e:	90 93 d8 04 	sts	0x04D8, r25
				ackPayload[12] = accX>>8;
    1e52:	80 93 d9 04 	sts	0x04D9, r24
				ackPayload[13] = accY&0xFF;
    1e56:	90 91 2a 04 	lds	r25, 0x042A
    1e5a:	80 91 2b 04 	lds	r24, 0x042B
    1e5e:	90 93 da 04 	sts	0x04DA, r25
				ackPayload[14] = accY>>8;
    1e62:	80 93 db 04 	sts	0x04DB, r24
				ackPayload[15] = irCommand;
    1e66:	80 91 23 04 	lds	r24, 0x0423
    1e6a:	80 93 dc 04 	sts	0x04DC, r24
				packetId = 5;
    1e6e:	85 e0       	ldi	r24, 0x05	; 5
    1e70:	80 93 0b 02 	sts	0x020B, r24
				break;
    1e74:	a2 c0       	rjmp	.+324    	; 0x1fba <handleRFCommands+0x434>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
    1e76:	8c e3       	ldi	r24, 0x3C	; 60
    1e78:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <sleep>
    1e7c:	40 91 75 05 	lds	r20, 0x0575
    1e80:	24 2f       	mov	r18, r20
    1e82:	50 91 76 05 	lds	r21, 0x0576
    1e86:	e5 2f       	mov	r30, r21
    1e88:	d9 ce       	rjmp	.-590    	; 0x1c3c <handleRFCommands+0xb6>
			}

			if(bit_is_set(rfData[6], 6) ) {
				GREEN_LED6_ON;
			} else {
				GREEN_LED6_OFF;
    1e8a:	80 91 0b 01 	lds	r24, 0x010B
    1e8e:	80 64       	ori	r24, 0x40	; 64
    1e90:	80 93 0b 01 	sts	0x010B, r24
    1e94:	92 cf       	rjmp	.-220    	; 0x1dba <handleRFCommands+0x234>
			}

			if(bit_is_set(rfData[6], 5) ) {
				GREEN_LED5_ON;
			} else {
				GREEN_LED5_OFF;
    1e96:	80 91 0b 01 	lds	r24, 0x010B
    1e9a:	80 62       	ori	r24, 0x20	; 32
    1e9c:	80 93 0b 01 	sts	0x010B, r24
    1ea0:	83 cf       	rjmp	.-250    	; 0x1da8 <handleRFCommands+0x222>
			}

			if(bit_is_set(rfData[6], 4) ) {
				GREEN_LED4_ON;
			} else {
				GREEN_LED4_OFF;
    1ea2:	80 91 0b 01 	lds	r24, 0x010B
    1ea6:	80 61       	ori	r24, 0x10	; 16
    1ea8:	80 93 0b 01 	sts	0x010B, r24
    1eac:	74 cf       	rjmp	.-280    	; 0x1d96 <handleRFCommands+0x210>
			}												

			if(bit_is_set(rfData[6], 3) ) {
				GREEN_LED3_ON;
			} else {
				GREEN_LED3_OFF;
    1eae:	a3 9a       	sbi	0x14, 3	; 20
    1eb0:	69 cf       	rjmp	.-302    	; 0x1d84 <handleRFCommands+0x1fe>
			}
				
			if(bit_is_set(rfData[6], 2) ) {
				GREEN_LED2_ON;
			} else {
				GREEN_LED2_OFF;
    1eb2:	80 91 0b 01 	lds	r24, 0x010B
    1eb6:	84 60       	ori	r24, 0x04	; 4
    1eb8:	80 93 0b 01 	sts	0x010B, r24
    1ebc:	5e cf       	rjmp	.-324    	; 0x1d7a <handleRFCommands+0x1f4>
			}
				
			if(bit_is_set(rfData[6], 1) ) {
				GREEN_LED1_ON;
			} else {
				GREEN_LED1_OFF;
    1ebe:	80 91 0b 01 	lds	r24, 0x010B
    1ec2:	82 60       	ori	r24, 0x02	; 2
    1ec4:	80 93 0b 01 	sts	0x010B, r24
    1ec8:	4f cf       	rjmp	.-354    	; 0x1d68 <handleRFCommands+0x1e2>
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
				GREEN_LED0_ON;
			} else {
				GREEN_LED0_OFF;
    1eca:	80 91 0b 01 	lds	r24, 0x010B
    1ece:	81 60       	ori	r24, 0x01	; 1
    1ed0:	80 93 0b 01 	sts	0x010B, r24
    1ed4:	40 cf       	rjmp	.-384    	; 0x1d56 <handleRFCommands+0x1d0>
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
    1ed6:	10 92 68 04 	sts	0x0468, r1
    1eda:	30 cf       	rjmp	.-416    	; 0x1d3c <handleRFCommands+0x1b6>
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
			irEnabled = 1;
		} else {
			irEnabled = 0;
    1edc:	10 92 12 02 	sts	0x0212, r1
    1ee0:	26 cf       	rjmp	.-436    	; 0x1d2e <handleRFCommands+0x1a8>
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
    1ee2:	45 9a       	sbi	0x08, 5	; 8
    1ee4:	1e cf       	rjmp	.-452    	; 0x1d22 <handleRFCommands+0x19c>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
    1ee6:	44 9a       	sbi	0x08, 4	; 8
    1ee8:	19 cf       	rjmp	.-462    	; 0x1d1c <handleRFCommands+0x196>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
    1eea:	86 30       	cpi	r24, 0x06	; 6
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <handleRFCommands+0x36a>
    1eee:	c3 c0       	rjmp	.+390    	; 0x2076 <handleRFCommands+0x4f0>
    1ef0:	87 30       	cpi	r24, 0x07	; 7
    1ef2:	09 f0       	breq	.+2      	; 0x1ef6 <handleRFCommands+0x370>
    1ef4:	62 c0       	rjmp	.+196    	; 0x1fba <handleRFCommands+0x434>
				packetId = 7;
				break;


			case 7:
				ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
    1ef6:	60 91 d3 02 	lds	r22, 0x02D3
    1efa:	70 91 d4 02 	lds	r23, 0x02D4
    1efe:	80 91 d5 02 	lds	r24, 0x02D5
    1f02:	90 91 d6 02 	lds	r25, 0x02D6
    1f06:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    1f0a:	60 93 ce 04 	sts	0x04CE, r22
				ackPayload[2] = ((signed long int)leftMotSteps)>>8;
    1f0e:	70 93 cf 04 	sts	0x04CF, r23
				ackPayload[3] = ((signed long int)leftMotSteps)>>16;
    1f12:	80 93 d0 04 	sts	0x04D0, r24
				ackPayload[4] = ((signed long int)leftMotSteps)>>24;
    1f16:	90 93 d1 04 	sts	0x04D1, r25
				ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
    1f1a:	60 91 cf 02 	lds	r22, 0x02CF
    1f1e:	70 91 d0 02 	lds	r23, 0x02D0
    1f22:	80 91 d1 02 	lds	r24, 0x02D1
    1f26:	90 91 d2 02 	lds	r25, 0x02D2
    1f2a:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    1f2e:	60 93 d2 04 	sts	0x04D2, r22
				ackPayload[6] = ((signed long int)rightMotSteps)>>8;
    1f32:	70 93 d3 04 	sts	0x04D3, r23
				ackPayload[7] = ((signed long int)rightMotSteps)>>16;
    1f36:	80 93 d4 04 	sts	0x04D4, r24
				ackPayload[8] = ((signed long int)rightMotSteps)>>24;
    1f3a:	90 93 d5 04 	sts	0x04D5, r25
				lastTheta = theta;
    1f3e:	60 91 6b 04 	lds	r22, 0x046B
    1f42:	70 91 6c 04 	lds	r23, 0x046C
    1f46:	80 91 6d 04 	lds	r24, 0x046D
    1f4a:	90 91 6e 04 	lds	r25, 0x046E
    1f4e:	60 93 6f 04 	sts	0x046F, r22
    1f52:	70 93 70 04 	sts	0x0470, r23
    1f56:	80 93 71 04 	sts	0x0471, r24
    1f5a:	90 93 72 04 	sts	0x0472, r25
				ackPayload[9] = ((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e4       	ldi	r19, 0x40	; 64
    1f62:	4f e0       	ldi	r20, 0x0F	; 15
    1f64:	54 e4       	ldi	r21, 0x44	; 68
    1f66:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    1f6a:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    1f6e:	26 2f       	mov	r18, r22
    1f70:	20 93 d6 04 	sts	0x04D6, r18
				ackPayload[10] = ((signed int)(lastTheta*573.0))>>8;				
    1f74:	70 93 d7 04 	sts	0x04D7, r23
				ackPayload[11] = ((unsigned int)xPos)&0xFF;
    1f78:	60 91 73 04 	lds	r22, 0x0473
    1f7c:	70 91 74 04 	lds	r23, 0x0474
    1f80:	80 91 75 04 	lds	r24, 0x0475
    1f84:	90 91 76 04 	lds	r25, 0x0476
    1f88:	0e 94 2b 40 	call	0x8056	; 0x8056 <__fixunssfsi>
    1f8c:	60 93 d8 04 	sts	0x04D8, r22
				ackPayload[12] = ((unsigned int)xPos)>>8;
    1f90:	70 93 d9 04 	sts	0x04D9, r23
				ackPayload[13] = ((unsigned int)yPos)&0xFF;
    1f94:	60 91 77 04 	lds	r22, 0x0477
    1f98:	70 91 78 04 	lds	r23, 0x0478
    1f9c:	80 91 79 04 	lds	r24, 0x0479
    1fa0:	90 91 7a 04 	lds	r25, 0x047A
    1fa4:	0e 94 2b 40 	call	0x8056	; 0x8056 <__fixunssfsi>
    1fa8:	60 93 da 04 	sts	0x04DA, r22
				ackPayload[14] = ((unsigned int)yPos)>>8;
    1fac:	70 93 db 04 	sts	0x04DB, r23
				//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
				//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
				//ackPayload[12] = ((unsigned int)xPosOld)>>8;
				//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
				//ackPayload[14] = ((unsigned int)yPosOld)>>8;
				ackPayload[15] = 0;
    1fb0:	10 92 dc 04 	sts	0x04DC, r1
				packetId = 3;
    1fb4:	83 e0       	ldi	r24, 0x03	; 3
    1fb6:	80 93 0b 02 	sts	0x020B, r24
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    1fba:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1fbc:	81 ee       	ldi	r24, 0xE1	; 225
    1fbe:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    mirf_CSN_hi;
    1fc2:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1fc4:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1fc6:	88 ea       	ldi	r24, 0xA8	; 168
    1fc8:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    1fcc:	80 91 cd 04 	lds	r24, 0x04CD
    1fd0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    1fd4:	80 91 ce 04 	lds	r24, 0x04CE
    1fd8:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    1fdc:	80 91 cf 04 	lds	r24, 0x04CF
    1fe0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    1fe4:	80 91 d0 04 	lds	r24, 0x04D0
    1fe8:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    1fec:	80 91 d1 04 	lds	r24, 0x04D1
    1ff0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    1ff4:	80 91 d2 04 	lds	r24, 0x04D2
    1ff8:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    1ffc:	80 91 d3 04 	lds	r24, 0x04D3
    2000:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    2004:	80 91 d4 04 	lds	r24, 0x04D4
    2008:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    200c:	80 91 d5 04 	lds	r24, 0x04D5
    2010:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    2014:	80 91 d6 04 	lds	r24, 0x04D6
    2018:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    201c:	80 91 d7 04 	lds	r24, 0x04D7
    2020:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    2024:	80 91 d8 04 	lds	r24, 0x04D8
    2028:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    202c:	80 91 d9 04 	lds	r24, 0x04D9
    2030:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    2034:	80 91 da 04 	lds	r24, 0x04DA
    2038:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    203c:	80 91 db 04 	lds	r24, 0x04DB
    2040:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
    2044:	80 91 dc 04 	lds	r24, 0x04DC
    2048:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    204c:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	1f 91       	pop	r17
    2056:	0f 91       	pop	r16
    2058:	ff 90       	pop	r15
    205a:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    205c:	00 91 77 05 	lds	r16, 0x0577
    2060:	00 23       	and	r16, r16
    2062:	09 f0       	breq	.+2      	; 0x2066 <handleRFCommands+0x4e0>
    2064:	4b c1       	rjmp	.+662    	; 0x22fc <__stack+0xfd>
    2066:	80 91 78 05 	lds	r24, 0x0578
    206a:	88 30       	cpi	r24, 0x08	; 8
    206c:	09 f4       	brne	.+2      	; 0x2070 <handleRFCommands+0x4ea>
    206e:	48 c1       	rjmp	.+656    	; 0x2300 <__stack+0x101>
    2070:	e0 2f       	mov	r30, r16
    2072:	20 2f       	mov	r18, r16
    2074:	e5 cd       	rjmp	.-1078   	; 0x1c40 <handleRFCommands+0xba>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
    2076:	80 91 37 02 	lds	r24, 0x0237
    207a:	90 91 38 02 	lds	r25, 0x0238
    207e:	80 93 ce 04 	sts	0x04CE, r24
				ackPayload[2] = proximityValue[8]>>8;
    2082:	80 91 37 02 	lds	r24, 0x0237
    2086:	90 91 38 02 	lds	r25, 0x0238
    208a:	90 93 cf 04 	sts	0x04CF, r25
				ackPayload[3] = proximityValue[16]&0xFF;
    208e:	80 91 47 02 	lds	r24, 0x0247
    2092:	90 91 48 02 	lds	r25, 0x0248
    2096:	80 93 d0 04 	sts	0x04D0, r24
				ackPayload[4] = proximityValue[16]>>8;
    209a:	80 91 47 02 	lds	r24, 0x0247
    209e:	90 91 48 02 	lds	r25, 0x0248
    20a2:	90 93 d1 04 	sts	0x04D1, r25
				ackPayload[5] = proximityValue[18]&0xFF;
    20a6:	80 91 4b 02 	lds	r24, 0x024B
    20aa:	90 91 4c 02 	lds	r25, 0x024C
    20ae:	80 93 d2 04 	sts	0x04D2, r24
				ackPayload[6] = proximityValue[18]>>8;
    20b2:	80 91 4b 02 	lds	r24, 0x024B
    20b6:	90 91 4c 02 	lds	r25, 0x024C
    20ba:	90 93 d3 04 	sts	0x04D3, r25
				ackPayload[7] = proximityValue[20]&0xFF;
    20be:	80 91 4f 02 	lds	r24, 0x024F
    20c2:	90 91 50 02 	lds	r25, 0x0250
    20c6:	80 93 d4 04 	sts	0x04D4, r24
				ackPayload[8] = proximityValue[20]>>8;
    20ca:	80 91 4f 02 	lds	r24, 0x024F
    20ce:	90 91 50 02 	lds	r25, 0x0250
    20d2:	90 93 d5 04 	sts	0x04D5, r25
				ackPayload[9] = proximityValue[22]&0xFF;
    20d6:	80 91 53 02 	lds	r24, 0x0253
    20da:	90 91 54 02 	lds	r25, 0x0254
    20de:	80 93 d6 04 	sts	0x04D6, r24
				ackPayload[10] = proximityValue[22]>>8;
    20e2:	80 91 53 02 	lds	r24, 0x0253
    20e6:	90 91 54 02 	lds	r25, 0x0254
    20ea:	90 93 d7 04 	sts	0x04D7, r25
				ackPayload[11] = accZ&0xFF;
    20ee:	90 91 2c 04 	lds	r25, 0x042C
    20f2:	80 91 2d 04 	lds	r24, 0x042D
    20f6:	90 93 d8 04 	sts	0x04D8, r25
				ackPayload[12] = accZ>>8;	
    20fa:	80 93 d9 04 	sts	0x04D9, r24
				ackPayload[13] = batteryLevel&0xFF;
    20fe:	90 91 bb 02 	lds	r25, 0x02BB
    2102:	80 91 bc 02 	lds	r24, 0x02BC
    2106:	90 93 da 04 	sts	0x04DA, r25
				ackPayload[14] = batteryLevel>>8;
    210a:	80 93 db 04 	sts	0x04DB, r24
				ackPayload[15] = 0;
    210e:	10 92 dc 04 	sts	0x04DC, r1
				packetId = 7;
    2112:	87 e0       	ldi	r24, 0x07	; 7
    2114:	80 93 0b 02 	sts	0x020B, r24
				break;
    2118:	50 cf       	rjmp	.-352    	; 0x1fba <handleRFCommands+0x434>
		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
    211a:	90 91 57 02 	lds	r25, 0x0257
    211e:	80 91 58 02 	lds	r24, 0x0258
    2122:	90 93 ce 04 	sts	0x04CE, r25
				ackPayload[2] = proximityResult[0]>>8;
    2126:	80 93 cf 04 	sts	0x04CF, r24
				ackPayload[3] = proximityResult[1]&0xFF;
    212a:	90 91 59 02 	lds	r25, 0x0259
    212e:	80 91 5a 02 	lds	r24, 0x025A
    2132:	90 93 d0 04 	sts	0x04D0, r25
				ackPayload[4] = proximityResult[1]>>8;
    2136:	80 93 d1 04 	sts	0x04D1, r24
				ackPayload[5] = proximityResult[2]&0xFF;
    213a:	90 91 5b 02 	lds	r25, 0x025B
    213e:	80 91 5c 02 	lds	r24, 0x025C
    2142:	90 93 d2 04 	sts	0x04D2, r25
				ackPayload[6] = proximityResult[2]>>8;
    2146:	80 93 d3 04 	sts	0x04D3, r24
				ackPayload[7] = proximityResult[3]&0xFF;
    214a:	90 91 5d 02 	lds	r25, 0x025D
    214e:	80 91 5e 02 	lds	r24, 0x025E
    2152:	90 93 d4 04 	sts	0x04D4, r25
				ackPayload[8] = proximityResult[3]>>8;
    2156:	80 93 d5 04 	sts	0x04D5, r24
				ackPayload[9] = proximityResult[5]&0xFF;
    215a:	90 91 61 02 	lds	r25, 0x0261
    215e:	80 91 62 02 	lds	r24, 0x0262
    2162:	90 93 d6 04 	sts	0x04D6, r25
				ackPayload[10] = proximityResult[5]>>8;
    2166:	80 93 d7 04 	sts	0x04D7, r24
				ackPayload[11] = proximityResult[6]&0xFF;
    216a:	90 91 63 02 	lds	r25, 0x0263
    216e:	80 91 64 02 	lds	r24, 0x0264
    2172:	90 93 d8 04 	sts	0x04D8, r25
				ackPayload[12] = proximityResult[6]>>8;
    2176:	80 93 d9 04 	sts	0x04D9, r24
				ackPayload[13] = proximityResult[7]&0xFF;
    217a:	90 91 65 02 	lds	r25, 0x0265
    217e:	80 91 66 02 	lds	r24, 0x0266
    2182:	90 93 da 04 	sts	0x04DA, r25
				ackPayload[14] = proximityResult[7]>>8;
    2186:	80 93 db 04 	sts	0x04DB, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    218a:	30 91 03 01 	lds	r19, 0x0103
    218e:	80 91 03 01 	lds	r24, 0x0103
    2192:	20 91 03 01 	lds	r18, 0x0103
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	80 72       	andi	r24, 0x20	; 32
    219a:	90 70       	andi	r25, 0x00	; 0
    219c:	95 95       	asr	r25
    219e:	87 95       	ror	r24
    21a0:	95 95       	asr	r25
    21a2:	87 95       	ror	r24
    21a4:	95 95       	asr	r25
    21a6:	87 95       	ror	r24
    21a8:	95 95       	asr	r25
    21aa:	87 95       	ror	r24
    21ac:	95 95       	asr	r25
    21ae:	87 95       	ror	r24
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	22 1f       	adc	r18, r18
    21b6:	22 27       	eor	r18, r18
    21b8:	22 1f       	adc	r18, r18
    21ba:	22 0f       	add	r18, r18
    21bc:	22 0f       	add	r18, r18
    21be:	28 2b       	or	r18, r24
    21c0:	83 2f       	mov	r24, r19
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	80 71       	andi	r24, 0x10	; 16
    21c6:	90 70       	andi	r25, 0x00	; 0
    21c8:	95 95       	asr	r25
    21ca:	87 95       	ror	r24
    21cc:	95 95       	asr	r25
    21ce:	87 95       	ror	r24
    21d0:	95 95       	asr	r25
    21d2:	87 95       	ror	r24
    21d4:	95 95       	asr	r25
    21d6:	87 95       	ror	r24
    21d8:	28 2b       	or	r18, r24
    21da:	20 93 dc 04 	sts	0x04DC, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
    21de:	84 e0       	ldi	r24, 0x04	; 4
    21e0:	80 93 0b 02 	sts	0x020B, r24
				break;
    21e4:	ea ce       	rjmp	.-556    	; 0x1fba <handleRFCommands+0x434>
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
			calibrateSensors();
    21e6:	0e 94 e2 39 	call	0x73c4	; 0x73c4 <calibrateSensors>
			resetOdometry();
    21ea:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <resetOdometry>
    21ee:	90 91 78 05 	lds	r25, 0x0578
    21f2:	89 2f       	mov	r24, r25
    21f4:	9e cd       	rjmp	.-1220   	; 0x1d32 <handleRFCommands+0x1ac>
			}

		#endif
		
		if(currentSelector == 8) {
			if(calibrateOdomFlag==0) {
    21f6:	80 91 c7 04 	lds	r24, 0x04C7
    21fa:	88 23       	and	r24, r24
    21fc:	09 f0       	breq	.+2      	; 0x2200 <__stack+0x1>
    21fe:	eb cd       	rjmp	.-1066   	; 0x1dd6 <handleRFCommands+0x250>
				if((rfData[7]&0b00000001)==0b00000001) {
    2200:	80 91 7c 05 	lds	r24, 0x057C
    2204:	80 ff       	sbrs	r24, 0
    2206:	e7 cd       	rjmp	.-1074   	; 0x1dd6 <handleRFCommands+0x250>
					calibrateSensors();
    2208:	0e 94 e2 39 	call	0x73c4	; 0x73c4 <calibrateSensors>
					proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    220c:	8f ef       	ldi	r24, 0xFF	; 255
    220e:	93 e0       	ldi	r25, 0x03	; 3
    2210:	90 93 68 02 	sts	0x0268, r25
    2214:	80 93 67 02 	sts	0x0267, r24
					proximityResult[11] = 1023;	// and in that case a false black line will be detected
    2218:	90 93 6e 02 	sts	0x026E, r25
    221c:	80 93 6d 02 	sts	0x026D, r24
					calibState = 0;
    2220:	10 92 88 05 	sts	0x0588, r1
					calibVelIndex = 1;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	80 93 ca 04 	sts	0x04CA, r24
					calibrateOdomFlag = 1;
    222a:	80 93 c7 04 	sts	0x04C7, r24
    222e:	d3 cd       	rjmp	.-1114   	; 0x1dd6 <handleRFCommands+0x250>
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
				GREEN_LED7_ON;
    2230:	80 91 0b 01 	lds	r24, 0x010B
    2234:	8f 77       	andi	r24, 0x7F	; 127
    2236:	80 93 0b 01 	sts	0x010B, r24
    223a:	c8 cd       	rjmp	.-1136   	; 0x1dcc <handleRFCommands+0x246>
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
			cliffAvoidanceEnabled = 1;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	80 93 69 04 	sts	0x0469, r24
    2242:	80 cd       	rjmp	.-1280   	; 0x1d44 <handleRFCommands+0x1be>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
    2244:	80 91 27 02 	lds	r24, 0x0227
    2248:	90 91 28 02 	lds	r25, 0x0228
    224c:	80 93 ce 04 	sts	0x04CE, r24
				ackPayload[2] = proximityValue[0]>>8;
    2250:	80 91 27 02 	lds	r24, 0x0227
    2254:	90 91 28 02 	lds	r25, 0x0228
    2258:	90 93 cf 04 	sts	0x04CF, r25
				ackPayload[3] = proximityValue[2]&0xFF;
    225c:	80 91 2b 02 	lds	r24, 0x022B
    2260:	90 91 2c 02 	lds	r25, 0x022C
    2264:	80 93 d0 04 	sts	0x04D0, r24
				ackPayload[4] = proximityValue[2]>>8;
    2268:	80 91 2b 02 	lds	r24, 0x022B
    226c:	90 91 2c 02 	lds	r25, 0x022C
    2270:	90 93 d1 04 	sts	0x04D1, r25
				ackPayload[5] = proximityValue[4]&0xFF;
    2274:	80 91 2f 02 	lds	r24, 0x022F
    2278:	90 91 30 02 	lds	r25, 0x0230
    227c:	80 93 d2 04 	sts	0x04D2, r24
				ackPayload[6] = proximityValue[4]>>8;
    2280:	80 91 2f 02 	lds	r24, 0x022F
    2284:	90 91 30 02 	lds	r25, 0x0230
    2288:	90 93 d3 04 	sts	0x04D3, r25
				ackPayload[7] = proximityValue[6]&0xFF;
    228c:	80 91 33 02 	lds	r24, 0x0233
    2290:	90 91 34 02 	lds	r25, 0x0234
    2294:	80 93 d4 04 	sts	0x04D4, r24
				ackPayload[8] = proximityValue[6]>>8;
    2298:	80 91 33 02 	lds	r24, 0x0233
    229c:	90 91 34 02 	lds	r25, 0x0234
    22a0:	90 93 d5 04 	sts	0x04D5, r25
				ackPayload[9] = proximityValue[10]&0xFF;
    22a4:	80 91 3b 02 	lds	r24, 0x023B
    22a8:	90 91 3c 02 	lds	r25, 0x023C
    22ac:	80 93 d6 04 	sts	0x04D6, r24
				ackPayload[10] = proximityValue[10]>>8;
    22b0:	80 91 3b 02 	lds	r24, 0x023B
    22b4:	90 91 3c 02 	lds	r25, 0x023C
    22b8:	90 93 d7 04 	sts	0x04D7, r25
				ackPayload[11] = proximityValue[12]&0xFF;
    22bc:	80 91 3f 02 	lds	r24, 0x023F
    22c0:	90 91 40 02 	lds	r25, 0x0240
    22c4:	80 93 d8 04 	sts	0x04D8, r24
				ackPayload[12] = proximityValue[12]>>8;
    22c8:	80 91 3f 02 	lds	r24, 0x023F
    22cc:	90 91 40 02 	lds	r25, 0x0240
    22d0:	90 93 d9 04 	sts	0x04D9, r25
				ackPayload[13] = proximityValue[14]&0xFF;
    22d4:	80 91 43 02 	lds	r24, 0x0243
    22d8:	90 91 44 02 	lds	r25, 0x0244
    22dc:	80 93 da 04 	sts	0x04DA, r24
				ackPayload[14] = proximityValue[14]>>8;
    22e0:	80 91 43 02 	lds	r24, 0x0243
    22e4:	90 91 44 02 	lds	r25, 0x0244
    22e8:	90 93 db 04 	sts	0x04DB, r25
				ackPayload[15] = currentSelector;
    22ec:	80 91 48 04 	lds	r24, 0x0448
    22f0:	80 93 dc 04 	sts	0x04DC, r24
				packetId = 6;
    22f4:	86 e0       	ldi	r24, 0x06	; 6
    22f6:	80 93 0b 02 	sts	0x020B, r24
				break;
    22fa:	5f ce       	rjmp	.-834    	; 0x1fba <handleRFCommands+0x434>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    22fc:	25 2f       	mov	r18, r21
    22fe:	a0 cc       	rjmp	.-1728   	; 0x1c40 <handleRFCommands+0xba>
    2300:	80 91 79 05 	lds	r24, 0x0579
    2304:	88 23       	and	r24, r24
    2306:	09 f0       	breq	.+2      	; 0x230a <__stack+0x10b>
    2308:	b3 ce       	rjmp	.-666    	; 0x2070 <handleRFCommands+0x4ea>
    230a:	80 91 7a 05 	lds	r24, 0x057A
    230e:	88 23       	and	r24, r24
    2310:	09 f4       	brne	.+2      	; 0x2314 <__stack+0x115>
    2312:	b1 cd       	rjmp	.-1182   	; 0x1e76 <handleRFCommands+0x2f0>
    2314:	25 2f       	mov	r18, r21
    2316:	94 cc       	rjmp	.-1752   	; 0x1c40 <handleRFCommands+0xba>

00002318 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29

	PCICR = 0;
    231c:	c8 e6       	ldi	r28, 0x68	; 104
    231e:	d0 e0       	ldi	r29, 0x00	; 0
    2320:	18 82       	st	Y, r1
	PCMSK1 = 0;
    2322:	ac e6       	ldi	r26, 0x6C	; 108
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	1c 92       	st	X, r1
	TCCR2A = 0;
    2328:	e0 eb       	ldi	r30, 0xB0	; 176
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	10 82       	st	Z, r1
	TCCR2B = 0;
    232e:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    2332:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    2336:	88 81       	ld	r24, Y
    2338:	82 60       	ori	r24, 0x02	; 2
    233a:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    233c:	8c 91       	ld	r24, X
    233e:	80 68       	ori	r24, 0x80	; 128
    2340:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    2342:	80 81       	ld	r24, Z
    2344:	82 60       	ori	r24, 0x02	; 2
    2346:	80 83       	st	Z, r24

}
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	08 95       	ret

0000234e <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    234e:	1f 92       	push	r1
    2350:	0f 92       	push	r0
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	0f 92       	push	r0
    2356:	11 24       	eor	r1, r1
    2358:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    235a:	80 91 12 02 	lds	r24, 0x0212
    235e:	88 23       	and	r24, r24
    2360:	21 f1       	breq	.+72     	; 0x23aa <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    2362:	80 91 03 01 	lds	r24, 0x0103
    2366:	86 fd       	sbrc	r24, 6
    2368:	20 c0       	rjmp	.+64     	; 0x23aa <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    236a:	80 91 68 00 	lds	r24, 0x0068
    236e:	8d 7f       	andi	r24, 0xFD	; 253
    2370:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    2374:	80 91 6c 00 	lds	r24, 0x006C
    2378:	8f 77       	andi	r24, 0x7F	; 127
    237a:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    2384:	8d e0       	ldi	r24, 0x0D	; 13
    2386:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    238a:	80 91 b1 00 	lds	r24, 0x00B1
    238e:	86 60       	ori	r24, 0x06	; 6
    2390:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    2394:	80 91 70 00 	lds	r24, 0x0070
    2398:	82 60       	ori	r24, 0x02	; 2
    239a:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    239e:	10 92 1e 02 	sts	0x021E, r1
    23a2:	10 92 1f 02 	sts	0x021F, r1
    23a6:	10 92 20 02 	sts	0x0220, r1

		}

	}
	
}
    23aa:	8f 91       	pop	r24
    23ac:	0f 90       	pop	r0
    23ae:	0f be       	out	0x3f, r0	; 63
    23b0:	0f 90       	pop	r0
    23b2:	1f 90       	pop	r1
    23b4:	18 95       	reti

000023b6 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    23b6:	1f 92       	push	r1
    23b8:	0f 92       	push	r0
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	0f 92       	push	r0
    23be:	11 24       	eor	r1, r1
    23c0:	2f 93       	push	r18
    23c2:	3f 93       	push	r19
    23c4:	4f 93       	push	r20
    23c6:	5f 93       	push	r21
    23c8:	8f 93       	push	r24
    23ca:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    23cc:	80 91 b1 00 	lds	r24, 0x00B1
    23d0:	88 7f       	andi	r24, 0xF8	; 248
    23d2:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    23d6:	80 91 13 02 	lds	r24, 0x0213
    23da:	88 23       	and	r24, r24
    23dc:	a9 f0       	breq	.+42     	; 0x2408 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    23de:	80 91 03 01 	lds	r24, 0x0103
    23e2:	86 ff       	sbrs	r24, 6
    23e4:	65 c0       	rjmp	.+202    	; 0x24b0 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    23e6:	80 91 68 00 	lds	r24, 0x0068
    23ea:	82 60       	ori	r24, 0x02	; 2
    23ec:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    23f0:	80 91 6c 00 	lds	r24, 0x006C
    23f4:	80 68       	ori	r24, 0x80	; 128
    23f6:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    23fa:	8f ef       	ldi	r24, 0xFF	; 255
    23fc:	9f ef       	ldi	r25, 0xFF	; 255
    23fe:	90 93 02 02 	sts	0x0202, r25
    2402:	80 93 01 02 	sts	0x0201, r24
    2406:	49 c0       	rjmp	.+146    	; 0x249a <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    2408:	80 91 01 02 	lds	r24, 0x0201
    240c:	90 91 02 02 	lds	r25, 0x0202
    2410:	2f ef       	ldi	r18, 0xFF	; 255
    2412:	8f 3f       	cpi	r24, 0xFF	; 255
    2414:	92 07       	cpc	r25, r18
    2416:	09 f4       	brne	.+2      	; 0x241a <__vector_13+0x64>
    2418:	63 c0       	rjmp	.+198    	; 0x24e0 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    241a:	81 30       	cpi	r24, 0x01	; 1
    241c:	91 05       	cpc	r25, r1
    241e:	09 f4       	brne	.+2      	; 0x2422 <__vector_13+0x6c>
    2420:	98 c0       	rjmp	.+304    	; 0x2552 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    2422:	9c 01       	movw	r18, r24
    2424:	22 50       	subi	r18, 0x02	; 2
    2426:	30 40       	sbci	r19, 0x00	; 0
    2428:	25 30       	cpi	r18, 0x05	; 5
    242a:	31 05       	cpc	r19, r1
    242c:	08 f4       	brcc	.+2      	; 0x2430 <__vector_13+0x7a>
    242e:	67 c0       	rjmp	.+206    	; 0x24fe <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    2430:	9c 01       	movw	r18, r24
    2432:	27 50       	subi	r18, 0x07	; 7
    2434:	30 40       	sbci	r19, 0x00	; 0
    2436:	26 30       	cpi	r18, 0x06	; 6
    2438:	31 05       	cpc	r19, r1
    243a:	08 f0       	brcs	.+2      	; 0x243e <__vector_13+0x88>
    243c:	bd c0       	rjmp	.+378    	; 0x25b8 <__vector_13+0x202>

				OCR2A = 54;
    243e:	26 e3       	ldi	r18, 0x36	; 54
    2440:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2444:	20 91 b1 00 	lds	r18, 0x00B1
    2448:	26 60       	ori	r18, 0x06	; 6
    244a:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    244e:	20 91 70 00 	lds	r18, 0x0070
    2452:	22 60       	ori	r18, 0x02	; 2
    2454:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2458:	20 91 03 01 	lds	r18, 0x0103
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	20 74       	andi	r18, 0x40	; 64
    2460:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    2462:	00 24       	eor	r0, r0
    2464:	22 0f       	add	r18, r18
    2466:	33 1f       	adc	r19, r19
    2468:	00 1c       	adc	r0, r0
    246a:	22 0f       	add	r18, r18
    246c:	33 1f       	adc	r19, r19
    246e:	00 1c       	adc	r0, r0
    2470:	23 2f       	mov	r18, r19
    2472:	30 2d       	mov	r19, r0
    2474:	4c e0       	ldi	r20, 0x0C	; 12
    2476:	50 e0       	ldi	r21, 0x00	; 0
    2478:	48 1b       	sub	r20, r24
    247a:	59 0b       	sbc	r21, r25
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <__vector_13+0xcc>
    247e:	22 0f       	add	r18, r18
    2480:	33 1f       	adc	r19, r19
    2482:	4a 95       	dec	r20
    2484:	e2 f7       	brpl	.-8      	; 0x247e <__vector_13+0xc8>
				data_temp += temp;
    2486:	40 91 1e 02 	lds	r20, 0x021E
    248a:	42 0f       	add	r20, r18
    248c:	40 93 1e 02 	sts	0x021E, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    2490:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    2492:	90 93 02 02 	sts	0x0202, r25
    2496:	80 93 01 02 	sts	0x0201, r24

		}

}
    249a:	9f 91       	pop	r25
    249c:	8f 91       	pop	r24
    249e:	5f 91       	pop	r21
    24a0:	4f 91       	pop	r20
    24a2:	3f 91       	pop	r19
    24a4:	2f 91       	pop	r18
    24a6:	0f 90       	pop	r0
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	0f 90       	pop	r0
    24ac:	1f 90       	pop	r1
    24ae:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    24b0:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    24b4:	83 e3       	ldi	r24, 0x33	; 51
    24b6:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    24ba:	80 91 b1 00 	lds	r24, 0x00B1
    24be:	86 60       	ori	r24, 0x06	; 6
    24c0:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    24c4:	80 91 70 00 	lds	r24, 0x0070
    24c8:	82 60       	ori	r24, 0x02	; 2
    24ca:	80 93 70 00 	sts	0x0070, r24
    24ce:	80 91 01 02 	lds	r24, 0x0201
    24d2:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    24d6:	2f ef       	ldi	r18, 0xFF	; 255
    24d8:	8f 3f       	cpi	r24, 0xFF	; 255
    24da:	92 07       	cpc	r25, r18
    24dc:	c9 f6       	brne	.-78     	; 0x2490 <__vector_13+0xda>
    24de:	dd cf       	rjmp	.-70     	; 0x249a <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    24e0:	20 91 03 01 	lds	r18, 0x0103
    24e4:	26 ff       	sbrs	r18, 6
    24e6:	52 c0       	rjmp	.+164    	; 0x258c <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    24e8:	20 91 68 00 	lds	r18, 0x0068
    24ec:	22 60       	ori	r18, 0x02	; 2
    24ee:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    24f2:	20 91 6c 00 	lds	r18, 0x006C
    24f6:	20 68       	ori	r18, 0x80	; 128
    24f8:	20 93 6c 00 	sts	0x006C, r18
    24fc:	ce cf       	rjmp	.-100    	; 0x249a <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    24fe:	26 e3       	ldi	r18, 0x36	; 54
    2500:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2504:	20 91 b1 00 	lds	r18, 0x00B1
    2508:	26 60       	ori	r18, 0x06	; 6
    250a:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    250e:	20 91 70 00 	lds	r18, 0x0070
    2512:	22 60       	ori	r18, 0x02	; 2
    2514:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2518:	20 91 03 01 	lds	r18, 0x0103
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	20 74       	andi	r18, 0x40	; 64
    2520:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    2522:	00 24       	eor	r0, r0
    2524:	22 0f       	add	r18, r18
    2526:	33 1f       	adc	r19, r19
    2528:	00 1c       	adc	r0, r0
    252a:	22 0f       	add	r18, r18
    252c:	33 1f       	adc	r19, r19
    252e:	00 1c       	adc	r0, r0
    2530:	23 2f       	mov	r18, r19
    2532:	30 2d       	mov	r19, r0
    2534:	46 e0       	ldi	r20, 0x06	; 6
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	48 1b       	sub	r20, r24
    253a:	59 0b       	sbc	r21, r25
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <__vector_13+0x18c>
    253e:	22 0f       	add	r18, r18
    2540:	33 1f       	adc	r19, r19
    2542:	4a 95       	dec	r20
    2544:	e2 f7       	brpl	.-8      	; 0x253e <__vector_13+0x188>
				address_temp += temp;
    2546:	40 91 1f 02 	lds	r20, 0x021F
    254a:	42 0f       	add	r20, r18
    254c:	40 93 1f 02 	sts	0x021F, r20
    2550:	9f cf       	rjmp	.-194    	; 0x2490 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    2552:	20 91 03 01 	lds	r18, 0x0103
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	20 74       	andi	r18, 0x40	; 64
    255a:	30 70       	andi	r19, 0x00	; 0
    255c:	02 2e       	mov	r0, r18
    255e:	23 2f       	mov	r18, r19
    2560:	00 0c       	add	r0, r0
    2562:	22 1f       	adc	r18, r18
    2564:	33 0b       	sbc	r19, r19
    2566:	00 0c       	add	r0, r0
    2568:	22 1f       	adc	r18, r18
    256a:	33 1f       	adc	r19, r19
    256c:	20 93 20 02 	sts	0x0220, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    2570:	26 e3       	ldi	r18, 0x36	; 54
    2572:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2576:	20 91 b1 00 	lds	r18, 0x00B1
    257a:	26 60       	ori	r18, 0x06	; 6
    257c:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2580:	20 91 70 00 	lds	r18, 0x0070
    2584:	22 60       	ori	r18, 0x02	; 2
    2586:	20 93 70 00 	sts	0x0070, r18
    258a:	82 cf       	rjmp	.-252    	; 0x2490 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    258c:	8c e1       	ldi	r24, 0x1C	; 28
    258e:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2592:	80 91 b1 00 	lds	r24, 0x00B1
    2596:	86 60       	ori	r24, 0x06	; 6
    2598:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    259c:	80 91 70 00 	lds	r24, 0x0070
    25a0:	82 60       	ori	r24, 0x02	; 2
    25a2:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    25a6:	10 92 1e 02 	sts	0x021E, r1
    25aa:	10 92 1f 02 	sts	0x021F, r1
    25ae:	10 92 20 02 	sts	0x0220, r1
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	6d cf       	rjmp	.-294    	; 0x2492 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    25b8:	8d 30       	cpi	r24, 0x0D	; 13
    25ba:	91 05       	cpc	r25, r1
    25bc:	09 f0       	breq	.+2      	; 0x25c0 <__vector_13+0x20a>
    25be:	68 cf       	rjmp	.-304    	; 0x2490 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    25c0:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    25c4:	80 91 68 00 	lds	r24, 0x0068
    25c8:	82 60       	ori	r24, 0x02	; 2
    25ca:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    25ce:	80 91 6c 00 	lds	r24, 0x006C
    25d2:	80 68       	ori	r24, 0x80	; 128
    25d4:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    25d8:	8f ef       	ldi	r24, 0xFF	; 255
    25da:	9f ef       	ldi	r25, 0xFF	; 255
    25dc:	90 93 02 02 	sts	0x0202, r25
    25e0:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    25e4:	80 91 20 02 	lds	r24, 0x0220
    25e8:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    25ec:	80 91 1f 02 	lds	r24, 0x021F
    25f0:	80 93 1c 02 	sts	0x021C, r24
				data_ir = data_temp;
    25f4:	80 91 1e 02 	lds	r24, 0x021E
    25f8:	80 93 1d 02 	sts	0x021D, r24
				command_received=1;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	80 93 24 04 	sts	0x0424, r24
    2602:	4b cf       	rjmp	.-362    	; 0x249a <__vector_13+0xe4>

00002604 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    2604:	80 91 00 02 	lds	r24, 0x0200
    2608:	08 95       	ret

0000260a <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    260a:	80 91 1c 02 	lds	r24, 0x021C
    260e:	08 95       	ret

00002610 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    2610:	80 91 1d 02 	lds	r24, 0x021D
    2614:	08 95       	ret

00002616 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    2616:	80 91 12 02 	lds	r24, 0x0212
    261a:	88 23       	and	r24, r24
    261c:	51 f1       	breq	.+84     	; 0x2672 <handleIRRemoteCommands+0x5c>

		if(command_received) {
    261e:	80 91 24 04 	lds	r24, 0x0424
    2622:	88 23       	and	r24, r24
    2624:	31 f1       	breq	.+76     	; 0x2672 <handleIRRemoteCommands+0x5c>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    2626:	e0 91 1d 02 	lds	r30, 0x021D

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    262a:	e0 93 23 04 	sts	0x0423, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    262e:	10 92 24 04 	sts	0x0424, r1

			switch(irCommand) {
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	e5 33       	cpi	r30, 0x35	; 53
    2636:	f1 05       	cpc	r31, r1
    2638:	e8 f0       	brcs	.+58     	; 0x2674 <handleIRRemoteCommands+0x5e>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 1;
    263a:	20 91 f7 02 	lds	r18, 0x02F7
    263e:	30 91 f8 02 	lds	r19, 0x02F8
    2642:	80 91 f9 02 	lds	r24, 0x02F9
    2646:	90 91 fa 02 	lds	r25, 0x02FA
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    264a:	37 fd       	sbrc	r19, 7
    264c:	b9 c1       	rjmp	.+882    	; 0x29c0 <handleIRRemoteCommands+0x3aa>
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    264e:	30 93 12 03 	sts	0x0312, r19
    2652:	20 93 11 03 	sts	0x0311, r18
			}
			if(pwm_left_desired >= 0) {
    2656:	97 fd       	sbrc	r25, 7
    2658:	05 c0       	rjmp	.+10     	; 0x2664 <handleIRRemoteCommands+0x4e>
				speedl = pwm_left_desired;
    265a:	90 93 10 03 	sts	0x0310, r25
    265e:	80 93 0f 03 	sts	0x030F, r24
    2662:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired);
    2664:	90 95       	com	r25
    2666:	81 95       	neg	r24
    2668:	9f 4f       	sbci	r25, 0xFF	; 255
    266a:	90 93 10 03 	sts	0x0310, r25
    266e:	80 93 0f 03 	sts	0x030F, r24
    2672:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    2674:	ee 58       	subi	r30, 0x8E	; 142
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	ee 0f       	add	r30, r30
    267a:	ff 1f       	adc	r31, r31
    267c:	05 90       	lpm	r0, Z+
    267e:	f4 91       	lpm	r31, Z+
    2680:	e0 2d       	mov	r30, r0
    2682:	19 94       	eijmp
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    2684:	80 93 68 04 	sts	0x0468, r24
							cliffAvoidanceEnabled = 0;
    2688:	10 92 69 04 	sts	0x0469, r1
    268c:	20 91 f7 02 	lds	r18, 0x02F7
    2690:	30 91 f8 02 	lds	r19, 0x02F8
    2694:	80 91 f9 02 	lds	r24, 0x02F9
    2698:	90 91 fa 02 	lds	r25, 0x02FA
							break;
    269c:	d6 cf       	rjmp	.-84     	; 0x264a <handleIRRemoteCommands+0x34>
						case 2:
							obstacleAvoidanceEnabled = 0;
    269e:	10 92 68 04 	sts	0x0468, r1
							cliffAvoidanceEnabled = 1;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	80 93 69 04 	sts	0x0469, r24
    26a8:	20 91 f7 02 	lds	r18, 0x02F7
    26ac:	30 91 f8 02 	lds	r19, 0x02F8
    26b0:	80 91 f9 02 	lds	r24, 0x02F9
    26b4:	90 91 fa 02 	lds	r25, 0x02FA
							break;
    26b8:	c8 cf       	rjmp	.-112    	; 0x264a <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    26ba:	80 91 26 04 	lds	r24, 0x0426
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	01 96       	adiw	r24, 0x01	; 1
    26c2:	83 70       	andi	r24, 0x03	; 3
    26c4:	90 70       	andi	r25, 0x00	; 0
    26c6:	80 93 26 04 	sts	0x0426, r24
					switch(behaviorState) {
    26ca:	82 30       	cpi	r24, 0x02	; 2
    26cc:	41 f3       	breq	.-48     	; 0x269e <handleIRRemoteCommands+0x88>
    26ce:	83 30       	cpi	r24, 0x03	; 3
    26d0:	09 f4       	brne	.+2      	; 0x26d4 <handleIRRemoteCommands+0xbe>
    26d2:	8a c1       	rjmp	.+788    	; 0x29e8 <handleIRRemoteCommands+0x3d2>
    26d4:	81 30       	cpi	r24, 0x01	; 1
    26d6:	b1 f2       	breq	.-84     	; 0x2684 <handleIRRemoteCommands+0x6e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    26d8:	10 92 68 04 	sts	0x0468, r1
							cliffAvoidanceEnabled = 0;
    26dc:	10 92 69 04 	sts	0x0469, r1
    26e0:	20 91 f7 02 	lds	r18, 0x02F7
    26e4:	30 91 f8 02 	lds	r19, 0x02F8
    26e8:	80 91 f9 02 	lds	r24, 0x02F9
    26ec:	90 91 fa 02 	lds	r25, 0x02FA
							break;
    26f0:	ac cf       	rjmp	.-168    	; 0x264a <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    26f2:	10 92 68 04 	sts	0x0468, r1
    26f6:	20 91 f7 02 	lds	r18, 0x02F7
    26fa:	30 91 f8 02 	lds	r19, 0x02F8
    26fe:	80 91 f9 02 	lds	r24, 0x02F9
    2702:	90 91 fa 02 	lds	r25, 0x02FA
					break;
    2706:	a1 cf       	rjmp	.-190    	; 0x264a <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    2708:	80 91 f9 02 	lds	r24, 0x02F9
    270c:	90 91 fa 02 	lds	r25, 0x02FA
    2710:	02 97       	sbiw	r24, 0x02	; 2
    2712:	90 93 fa 02 	sts	0x02FA, r25
    2716:	80 93 f9 02 	sts	0x02F9, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    271a:	2e ef       	ldi	r18, 0xFE	; 254
    271c:	80 30       	cpi	r24, 0x00	; 0
    271e:	92 07       	cpc	r25, r18
    2720:	9c f5       	brge	.+102    	; 0x2788 <handleIRRemoteCommands+0x172>
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	9e ef       	ldi	r25, 0xFE	; 254
    2726:	90 93 fa 02 	sts	0x02FA, r25
    272a:	80 93 f9 02 	sts	0x02F9, r24
    272e:	20 91 f7 02 	lds	r18, 0x02F7
    2732:	30 91 f8 02 	lds	r19, 0x02F8
    2736:	89 cf       	rjmp	.-238    	; 0x264a <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    2738:	20 91 f7 02 	lds	r18, 0x02F7
    273c:	30 91 f8 02 	lds	r19, 0x02F8
    2740:	80 91 f5 02 	lds	r24, 0x02F5
    2744:	90 91 f6 02 	lds	r25, 0x02F6
    2748:	28 17       	cp	r18, r24
    274a:	39 07       	cpc	r19, r25
    274c:	24 f0       	brlt	.+8      	; 0x2756 <handleIRRemoteCommands+0x140>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    274e:	20 91 f9 02 	lds	r18, 0x02F9
    2752:	30 91 fa 02 	lds	r19, 0x02FA
					}
					pwm_right_desired -= STEP_MOTORS;
    2756:	22 50       	subi	r18, 0x02	; 2
    2758:	30 40       	sbci	r19, 0x00	; 0
    275a:	30 93 f8 02 	sts	0x02F8, r19
    275e:	20 93 f7 02 	sts	0x02F7, r18
					pwm_left_desired -= STEP_MOTORS;
    2762:	c9 01       	movw	r24, r18
    2764:	30 93 fa 02 	sts	0x02FA, r19
    2768:	20 93 f9 02 	sts	0x02F9, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    276c:	4e ef       	ldi	r20, 0xFE	; 254
    276e:	20 30       	cpi	r18, 0x00	; 0
    2770:	34 07       	cpc	r19, r20
    2772:	34 f4       	brge	.+12     	; 0x2780 <handleIRRemoteCommands+0x16a>
    2774:	40 e0       	ldi	r20, 0x00	; 0
    2776:	5e ef       	ldi	r21, 0xFE	; 254
    2778:	50 93 f8 02 	sts	0x02F8, r21
    277c:	40 93 f7 02 	sts	0x02F7, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    2780:	4e ef       	ldi	r20, 0xFE	; 254
    2782:	20 30       	cpi	r18, 0x00	; 0
    2784:	34 07       	cpc	r19, r20
    2786:	6c f2       	brlt	.-102    	; 0x2722 <handleIRRemoteCommands+0x10c>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2788:	20 91 f7 02 	lds	r18, 0x02F7
    278c:	30 91 f8 02 	lds	r19, 0x02F8
    2790:	5c cf       	rjmp	.-328    	; 0x264a <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	80 93 68 04 	sts	0x0468, r24
    2798:	20 91 f7 02 	lds	r18, 0x02F7
    279c:	30 91 f8 02 	lds	r19, 0x02F8
    27a0:	80 91 f9 02 	lds	r24, 0x02F9
    27a4:	90 91 fa 02 	lds	r25, 0x02FA
					break;
    27a8:	50 cf       	rjmp	.-352    	; 0x264a <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    27aa:	20 91 f7 02 	lds	r18, 0x02F7
    27ae:	30 91 f8 02 	lds	r19, 0x02F8
    27b2:	22 50       	subi	r18, 0x02	; 2
    27b4:	30 40       	sbci	r19, 0x00	; 0
    27b6:	30 93 f8 02 	sts	0x02F8, r19
    27ba:	20 93 f7 02 	sts	0x02F7, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    27be:	4e ef       	ldi	r20, 0xFE	; 254
    27c0:	20 30       	cpi	r18, 0x00	; 0
    27c2:	34 07       	cpc	r19, r20
    27c4:	0c f0       	brlt	.+2      	; 0x27c8 <handleIRRemoteCommands+0x1b2>
    27c6:	3d cf       	rjmp	.-390    	; 0x2642 <handleIRRemoteCommands+0x2c>
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	9e ef       	ldi	r25, 0xFE	; 254
    27cc:	90 93 f8 02 	sts	0x02F8, r25
    27d0:	80 93 f7 02 	sts	0x02F7, r24
    27d4:	80 91 f9 02 	lds	r24, 0x02F9
    27d8:	90 91 fa 02 	lds	r25, 0x02FA
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	32 e0       	ldi	r19, 0x02	; 2
    27e0:	36 cf       	rjmp	.-404    	; 0x264e <handleIRRemoteCommands+0x38>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    27e2:	20 91 f7 02 	lds	r18, 0x02F7
    27e6:	30 91 f8 02 	lds	r19, 0x02F8
    27ea:	22 50       	subi	r18, 0x02	; 2
    27ec:	30 40       	sbci	r19, 0x00	; 0
    27ee:	30 93 f8 02 	sts	0x02F8, r19
    27f2:	20 93 f7 02 	sts	0x02F7, r18
					pwm_left_desired += STEP_MOTORS;
    27f6:	80 91 f9 02 	lds	r24, 0x02F9
    27fa:	90 91 fa 02 	lds	r25, 0x02FA
    27fe:	02 96       	adiw	r24, 0x02	; 2
    2800:	90 93 fa 02 	sts	0x02FA, r25
    2804:	80 93 f9 02 	sts	0x02F9, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    2808:	4e ef       	ldi	r20, 0xFE	; 254
    280a:	20 30       	cpi	r18, 0x00	; 0
    280c:	34 07       	cpc	r19, r20
    280e:	34 f4       	brge	.+12     	; 0x281c <handleIRRemoteCommands+0x206>
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	3e ef       	ldi	r19, 0xFE	; 254
    2814:	30 93 f8 02 	sts	0x02F8, r19
    2818:	20 93 f7 02 	sts	0x02F7, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    281c:	42 e0       	ldi	r20, 0x02	; 2
    281e:	81 30       	cpi	r24, 0x01	; 1
    2820:	94 07       	cpc	r25, r20
    2822:	0c f4       	brge	.+2      	; 0x2826 <handleIRRemoteCommands+0x210>
    2824:	12 cf       	rjmp	.-476    	; 0x264a <handleIRRemoteCommands+0x34>
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	92 e0       	ldi	r25, 0x02	; 2
    282a:	90 93 fa 02 	sts	0x02FA, r25
    282e:	80 93 f9 02 	sts	0x02F9, r24
    2832:	0b cf       	rjmp	.-490    	; 0x264a <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    2834:	10 92 f8 02 	sts	0x02F8, r1
    2838:	10 92 f7 02 	sts	0x02F7, r1
					pwm_left_desired = 0;
    283c:	10 92 fa 02 	sts	0x02FA, r1
    2840:	10 92 f9 02 	sts	0x02F9, r1
					if(currentSelector == 8) {
    2844:	80 91 48 04 	lds	r24, 0x0448
    2848:	88 30       	cpi	r24, 0x08	; 8
    284a:	09 f4       	brne	.+2      	; 0x284e <handleIRRemoteCommands+0x238>
    284c:	db c0       	rjmp	.+438    	; 0x2a04 <handleIRRemoteCommands+0x3ee>
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	fb ce       	rjmp	.-522    	; 0x264e <handleIRRemoteCommands+0x38>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    2858:	20 91 f7 02 	lds	r18, 0x02F7
    285c:	30 91 f8 02 	lds	r19, 0x02F8
    2860:	2e 5f       	subi	r18, 0xFE	; 254
    2862:	3f 4f       	sbci	r19, 0xFF	; 255
    2864:	30 93 f8 02 	sts	0x02F8, r19
    2868:	20 93 f7 02 	sts	0x02F7, r18
					pwm_left_desired -= STEP_MOTORS;
    286c:	80 91 f9 02 	lds	r24, 0x02F9
    2870:	90 91 fa 02 	lds	r25, 0x02FA
    2874:	02 97       	sbiw	r24, 0x02	; 2
    2876:	90 93 fa 02 	sts	0x02FA, r25
    287a:	80 93 f9 02 	sts	0x02F9, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    287e:	42 e0       	ldi	r20, 0x02	; 2
    2880:	21 30       	cpi	r18, 0x01	; 1
    2882:	34 07       	cpc	r19, r20
    2884:	34 f0       	brlt	.+12     	; 0x2892 <handleIRRemoteCommands+0x27c>
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	32 e0       	ldi	r19, 0x02	; 2
    288a:	30 93 f8 02 	sts	0x02F8, r19
    288e:	20 93 f7 02 	sts	0x02F7, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2892:	4e ef       	ldi	r20, 0xFE	; 254
    2894:	80 30       	cpi	r24, 0x00	; 0
    2896:	94 07       	cpc	r25, r20
    2898:	0c f0       	brlt	.+2      	; 0x289c <handleIRRemoteCommands+0x286>
    289a:	d7 ce       	rjmp	.-594    	; 0x264a <handleIRRemoteCommands+0x34>
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	9e ef       	ldi	r25, 0xFE	; 254
    28a0:	90 93 fa 02 	sts	0x02FA, r25
    28a4:	80 93 f9 02 	sts	0x02F9, r24
    28a8:	d0 ce       	rjmp	.-608    	; 0x264a <handleIRRemoteCommands+0x34>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    28aa:	80 91 f9 02 	lds	r24, 0x02F9
    28ae:	90 91 fa 02 	lds	r25, 0x02FA
    28b2:	02 96       	adiw	r24, 0x02	; 2
    28b4:	90 93 fa 02 	sts	0x02FA, r25
    28b8:	80 93 f9 02 	sts	0x02F9, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    28bc:	22 e0       	ldi	r18, 0x02	; 2
    28be:	81 30       	cpi	r24, 0x01	; 1
    28c0:	92 07       	cpc	r25, r18
    28c2:	0c f4       	brge	.+2      	; 0x28c6 <handleIRRemoteCommands+0x2b0>
    28c4:	61 cf       	rjmp	.-318    	; 0x2788 <handleIRRemoteCommands+0x172>
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	92 e0       	ldi	r25, 0x02	; 2
    28ca:	90 93 fa 02 	sts	0x02FA, r25
    28ce:	80 93 f9 02 	sts	0x02F9, r24
    28d2:	5a cf       	rjmp	.-332    	; 0x2788 <handleIRRemoteCommands+0x172>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    28d4:	20 91 f7 02 	lds	r18, 0x02F7
    28d8:	30 91 f8 02 	lds	r19, 0x02F8
    28dc:	80 91 f9 02 	lds	r24, 0x02F9
    28e0:	90 91 fa 02 	lds	r25, 0x02FA
    28e4:	82 17       	cp	r24, r18
    28e6:	93 07       	cpc	r25, r19
    28e8:	0c f4       	brge	.+2      	; 0x28ec <handleIRRemoteCommands+0x2d6>
    28ea:	6e c0       	rjmp	.+220    	; 0x29c8 <handleIRRemoteCommands+0x3b2>
    28ec:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    28ee:	2e 5f       	subi	r18, 0xFE	; 254
    28f0:	3f 4f       	sbci	r19, 0xFF	; 255
    28f2:	30 93 f8 02 	sts	0x02F8, r19
    28f6:	20 93 f7 02 	sts	0x02F7, r18
					pwm_left_desired += STEP_MOTORS;
    28fa:	02 96       	adiw	r24, 0x02	; 2
    28fc:	90 93 fa 02 	sts	0x02FA, r25
    2900:	80 93 f9 02 	sts	0x02F9, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    2904:	42 e0       	ldi	r20, 0x02	; 2
    2906:	21 30       	cpi	r18, 0x01	; 1
    2908:	34 07       	cpc	r19, r20
    290a:	34 f0       	brlt	.+12     	; 0x2918 <handleIRRemoteCommands+0x302>
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	32 e0       	ldi	r19, 0x02	; 2
    2910:	30 93 f8 02 	sts	0x02F8, r19
    2914:	20 93 f7 02 	sts	0x02F7, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    2918:	22 e0       	ldi	r18, 0x02	; 2
    291a:	81 30       	cpi	r24, 0x01	; 1
    291c:	92 07       	cpc	r25, r18
    291e:	0c f4       	brge	.+2      	; 0x2922 <handleIRRemoteCommands+0x30c>
    2920:	33 cf       	rjmp	.-410    	; 0x2788 <handleIRRemoteCommands+0x172>
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	92 e0       	ldi	r25, 0x02	; 2
    2926:	90 93 fa 02 	sts	0x02FA, r25
    292a:	80 93 f9 02 	sts	0x02F9, r24
    292e:	20 91 f7 02 	lds	r18, 0x02F7
    2932:	30 91 f8 02 	lds	r19, 0x02F8
    2936:	89 ce       	rjmp	.-750    	; 0x264a <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    2938:	20 91 f7 02 	lds	r18, 0x02F7
    293c:	30 91 f8 02 	lds	r19, 0x02F8
    2940:	2e 5f       	subi	r18, 0xFE	; 254
    2942:	3f 4f       	sbci	r19, 0xFF	; 255
    2944:	30 93 f8 02 	sts	0x02F8, r19
    2948:	20 93 f7 02 	sts	0x02F7, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    294c:	42 e0       	ldi	r20, 0x02	; 2
    294e:	21 30       	cpi	r18, 0x01	; 1
    2950:	34 07       	cpc	r19, r20
    2952:	0c f4       	brge	.+2      	; 0x2956 <handleIRRemoteCommands+0x340>
    2954:	76 ce       	rjmp	.-788    	; 0x2642 <handleIRRemoteCommands+0x2c>
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	92 e0       	ldi	r25, 0x02	; 2
    295a:	90 93 f8 02 	sts	0x02F8, r25
    295e:	80 93 f7 02 	sts	0x02F7, r24
    2962:	80 91 f9 02 	lds	r24, 0x02F9
    2966:	90 91 fa 02 	lds	r25, 0x02FA
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	32 e0       	ldi	r19, 0x02	; 2
    296e:	6f ce       	rjmp	.-802    	; 0x264e <handleIRRemoteCommands+0x38>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    2970:	80 91 25 04 	lds	r24, 0x0425
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	01 96       	adiw	r24, 0x01	; 1
    2978:	65 e0       	ldi	r22, 0x05	; 5
    297a:	70 e0       	ldi	r23, 0x00	; 0
    297c:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
    2980:	80 93 25 04 	sts	0x0425, r24

					if(colorState==0) {			// turn on blue and off all IRs
    2984:	88 23       	and	r24, r24
    2986:	11 f5       	brne	.+68     	; 0x29cc <handleIRRemoteCommands+0x3b6>
						LED_IR1_HIGH;
    2988:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    298a:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    298c:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    2990:	8f ef       	ldi	r24, 0xFF	; 255
    2992:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2996:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    299a:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <updateRedLed>
					updateGreenLed(pwm_green);
    299e:	80 91 0d 02 	lds	r24, 0x020D
    29a2:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <updateGreenLed>
					updateBlueLed(pwm_blue);
    29a6:	80 91 0e 02 	lds	r24, 0x020E
    29aa:	0e 94 12 37 	call	0x6e24	; 0x6e24 <updateBlueLed>
    29ae:	20 91 f7 02 	lds	r18, 0x02F7
    29b2:	30 91 f8 02 	lds	r19, 0x02F8
    29b6:	80 91 f9 02 	lds	r24, 0x02F9
    29ba:	90 91 fa 02 	lds	r25, 0x02FA

	               	break;
    29be:	45 ce       	rjmp	.-886    	; 0x264a <handleIRRemoteCommands+0x34>

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    29c0:	30 95       	com	r19
    29c2:	21 95       	neg	r18
    29c4:	3f 4f       	sbci	r19, 0xFF	; 255
    29c6:	43 ce       	rjmp	.-890    	; 0x264e <handleIRRemoteCommands+0x38>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    29c8:	c9 01       	movw	r24, r18
    29ca:	91 cf       	rjmp	.-222    	; 0x28ee <handleIRRemoteCommands+0x2d8>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    29cc:	81 30       	cpi	r24, 0x01	; 1
    29ce:	91 f0       	breq	.+36     	; 0x29f4 <handleIRRemoteCommands+0x3de>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    29d0:	82 30       	cpi	r24, 0x02	; 2
    29d2:	a1 f1       	breq	.+104    	; 0x2a3c <handleIRRemoteCommands+0x426>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    29d4:	83 30       	cpi	r24, 0x03	; 3
    29d6:	e9 f1       	breq	.+122    	; 0x2a52 <handleIRRemoteCommands+0x43c>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    29d8:	8f ef       	ldi	r24, 0xFF	; 255
    29da:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    29de:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    29e2:	80 93 0c 02 	sts	0x020C, r24
    29e6:	d9 cf       	rjmp	.-78     	; 0x299a <handleIRRemoteCommands+0x384>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	80 93 68 04 	sts	0x0468, r24
							cliffAvoidanceEnabled = 1;
    29ee:	80 93 69 04 	sts	0x0469, r24
    29f2:	23 ce       	rjmp	.-954    	; 0x263a <handleIRRemoteCommands+0x24>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    29f4:	8f ef       	ldi	r24, 0xFF	; 255
    29f6:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    29fa:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    29fe:	80 93 0c 02 	sts	0x020C, r24
    2a02:	cb cf       	rjmp	.-106    	; 0x299a <handleIRRemoteCommands+0x384>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    2a04:	0e 94 e2 39 	call	0x73c4	; 0x73c4 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    2a08:	8f ef       	ldi	r24, 0xFF	; 255
    2a0a:	93 e0       	ldi	r25, 0x03	; 3
    2a0c:	90 93 68 02 	sts	0x0268, r25
    2a10:	80 93 67 02 	sts	0x0267, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    2a14:	90 93 6e 02 	sts	0x026E, r25
    2a18:	80 93 6d 02 	sts	0x026D, r24
						calibState = 0;
    2a1c:	10 92 88 05 	sts	0x0588, r1
						calibVelIndex = 1;
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	80 93 ca 04 	sts	0x04CA, r24
						calibrateOdomFlag = 1;
    2a26:	80 93 c7 04 	sts	0x04C7, r24
    2a2a:	20 91 f7 02 	lds	r18, 0x02F7
    2a2e:	30 91 f8 02 	lds	r19, 0x02F8
    2a32:	80 91 f9 02 	lds	r24, 0x02F9
    2a36:	90 91 fa 02 	lds	r25, 0x02FA
    2a3a:	07 ce       	rjmp	.-1010   	; 0x264a <handleIRRemoteCommands+0x34>
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    2a3c:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    2a3e:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    2a40:	8f ef       	ldi	r24, 0xFF	; 255
    2a42:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    2a46:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    2a4a:	10 92 0c 02 	sts	0x020C, r1
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	a4 cf       	rjmp	.-184    	; 0x299a <handleIRRemoteCommands+0x384>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    2a52:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    2a56:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    2a5a:	10 92 0c 02 	sts	0x020C, r1
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	9c cf       	rjmp	.-200    	; 0x299a <handleIRRemoteCommands+0x384>

00002a62 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    2a62:	08 95       	ret

00002a64 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    2a64:	cf 92       	push	r12
    2a66:	df 92       	push	r13
    2a68:	ef 92       	push	r14
    2a6a:	ff 92       	push	r15
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29
    2a74:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	00 97       	sbiw	r24, 0x00	; 0
    2a7c:	09 f4       	brne	.+2      	; 0x2a80 <start_vertical_speed_control_left+0x1c>
    2a7e:	f7 c0       	rjmp	.+494    	; 0x2c6e <start_vertical_speed_control_left+0x20a>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2a80:	20 91 3a 04 	lds	r18, 0x043A
    2a84:	30 91 3b 04 	lds	r19, 0x043B
    2a88:	41 e0       	ldi	r20, 0x01	; 1
    2a8a:	2e 30       	cpi	r18, 0x0E	; 14
    2a8c:	34 07       	cpc	r19, r20
    2a8e:	0c f4       	brge	.+2      	; 0x2a92 <start_vertical_speed_control_left+0x2e>
    2a90:	c7 c0       	rjmp	.+398    	; 0x2c20 <start_vertical_speed_control_left+0x1bc>
		if(*pwm_left > 0) {
    2a92:	18 16       	cp	r1, r24
    2a94:	19 06       	cpc	r1, r25
    2a96:	0c f0       	brlt	.+2      	; 0x2a9a <start_vertical_speed_control_left+0x36>
    2a98:	68 c1       	rjmp	.+720    	; 0x2d6a <start_vertical_speed_control_left+0x306>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    2a9a:	88 e6       	ldi	r24, 0x68	; 104
    2a9c:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2a9e:	82 1b       	sub	r24, r18
    2aa0:	93 0b       	sbc	r25, r19
    2aa2:	95 95       	asr	r25
    2aa4:	87 95       	ror	r24
    2aa6:	95 95       	asr	r25
    2aa8:	87 95       	ror	r24
    2aaa:	29 e1       	ldi	r18, 0x19	; 25
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	28 1b       	sub	r18, r24
    2ab0:	39 0b       	sbc	r19, r25
    2ab2:	30 93 04 02 	sts	0x0204, r19
    2ab6:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    2aba:	c0 91 c8 04 	lds	r28, 0x04C8
    2abe:	d0 91 c9 04 	lds	r29, 0x04C9
    2ac2:	d0 93 74 05 	sts	0x0574, r29
    2ac6:	c0 93 73 05 	sts	0x0573, r28
	if(*pwm_left >= 0) {
    2aca:	80 81       	ld	r24, Z
    2acc:	91 81       	ldd	r25, Z+1	; 0x01
    2ace:	97 fd       	sbrc	r25, 7
    2ad0:	2e c1       	rjmp	.+604    	; 0x2d2e <start_vertical_speed_control_left+0x2ca>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    2ad2:	20 91 ef 02 	lds	r18, 0x02EF
    2ad6:	30 91 f0 02 	lds	r19, 0x02F0
    2ada:	dc 01       	movw	r26, r24
    2adc:	a2 1b       	sub	r26, r18
    2ade:	b3 0b       	sbc	r27, r19
    2ae0:	b0 93 c9 04 	sts	0x04C9, r27
    2ae4:	a0 93 c8 04 	sts	0x04C8, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    2ae8:	80 91 07 03 	lds	r24, 0x0307
    2aec:	90 91 08 03 	lds	r25, 0x0308
    2af0:	8a 0f       	add	r24, r26
    2af2:	9b 1f       	adc	r25, r27
    2af4:	90 93 08 03 	sts	0x0308, r25
    2af8:	80 93 07 03 	sts	0x0307, r24

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    2afc:	66 e0       	ldi	r22, 0x06	; 6
    2afe:	81 34       	cpi	r24, 0x41	; 65
    2b00:	96 07       	cpc	r25, r22
    2b02:	0c f4       	brge	.+2      	; 0x2b06 <start_vertical_speed_control_left+0xa2>
    2b04:	cb c0       	rjmp	.+406    	; 0x2c9c <start_vertical_speed_control_left+0x238>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    2b06:	80 e4       	ldi	r24, 0x40	; 64
    2b08:	96 e0       	ldi	r25, 0x06	; 6
    2b0a:	90 93 08 03 	sts	0x0308, r25
    2b0e:	80 93 07 03 	sts	0x0307, r24
    2b12:	10 ec       	ldi	r17, 0xC0	; 192
    2b14:	c1 2e       	mov	r12, r17
    2b16:	12 e1       	ldi	r17, 0x12	; 18
    2b18:	d1 2e       	mov	r13, r17
    2b1a:	e1 2c       	mov	r14, r1
    2b1c:	f1 2c       	mov	r15, r1
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    2b1e:	00 81       	ld	r16, Z
    2b20:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    2b22:	9d 01       	movw	r18, r26
    2b24:	22 0f       	add	r18, r18
    2b26:	33 1f       	adc	r19, r19
    2b28:	2a 0f       	add	r18, r26
    2b2a:	3b 1f       	adc	r19, r27
    2b2c:	22 0f       	add	r18, r18
    2b2e:	33 1f       	adc	r19, r19
    2b30:	22 0f       	add	r18, r18
    2b32:	33 1f       	adc	r19, r19
    2b34:	22 0f       	add	r18, r18
    2b36:	33 1f       	adc	r19, r19
    2b38:	2a 0f       	add	r18, r26
    2b3a:	3b 1f       	adc	r19, r27
    2b3c:	44 27       	eor	r20, r20
    2b3e:	37 fd       	sbrc	r19, 7
    2b40:	40 95       	com	r20
    2b42:	54 2f       	mov	r21, r20
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    2b44:	80 91 03 02 	lds	r24, 0x0203
    2b48:	90 91 04 02 	lds	r25, 0x0204
    2b4c:	08 9f       	mul	r16, r24
    2b4e:	b0 01       	movw	r22, r0
    2b50:	09 9f       	mul	r16, r25
    2b52:	70 0d       	add	r23, r0
    2b54:	18 9f       	mul	r17, r24
    2b56:	70 0d       	add	r23, r0
    2b58:	11 24       	eor	r1, r1
    2b5a:	88 27       	eor	r24, r24
    2b5c:	77 fd       	sbrc	r23, 7
    2b5e:	80 95       	com	r24
    2b60:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    2b62:	26 0f       	add	r18, r22
    2b64:	37 1f       	adc	r19, r23
    2b66:	48 1f       	adc	r20, r24
    2b68:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    2b6a:	ac 1b       	sub	r26, r28
    2b6c:	bd 0b       	sbc	r27, r29
    2b6e:	aa 0f       	add	r26, r26
    2b70:	bb 1f       	adc	r27, r27
    2b72:	bd 01       	movw	r22, r26
    2b74:	cb 01       	movw	r24, r22
    2b76:	aa 27       	eor	r26, r26
    2b78:	97 fd       	sbrc	r25, 7
    2b7a:	a0 95       	com	r26
    2b7c:	ba 2f       	mov	r27, r26
    2b7e:	28 0f       	add	r18, r24
    2b80:	39 1f       	adc	r19, r25
    2b82:	4a 1f       	adc	r20, r26
    2b84:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);
    2b86:	2c 0d       	add	r18, r12
    2b88:	3d 1d       	adc	r19, r13
    2b8a:	4e 1d       	adc	r20, r14
    2b8c:	5f 1d       	adc	r21, r15
    2b8e:	20 93 03 03 	sts	0x0303, r18
    2b92:	30 93 04 03 	sts	0x0304, r19
    2b96:	40 93 05 03 	sts	0x0305, r20
    2b9a:	50 93 06 03 	sts	0x0306, r21

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2b9e:	57 fd       	sbrc	r21, 7
    2ba0:	9d c0       	rjmp	.+314    	; 0x2cdc <start_vertical_speed_control_left+0x278>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2ba2:	12 16       	cp	r1, r18
    2ba4:	13 06       	cpc	r1, r19
    2ba6:	14 06       	cpc	r1, r20
    2ba8:	15 06       	cpc	r1, r21
    2baa:	0c f0       	brlt	.+2      	; 0x2bae <start_vertical_speed_control_left+0x14a>
    2bac:	a4 c0       	rjmp	.+328    	; 0x2cf6 <start_vertical_speed_control_left+0x292>
    2bae:	17 fd       	sbrc	r17, 7
    2bb0:	c9 c0       	rjmp	.+402    	; 0x2d44 <start_vertical_speed_control_left+0x2e0>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2bb2:	21 3c       	cpi	r18, 0xC1	; 193
    2bb4:	7d e5       	ldi	r23, 0x5D	; 93
    2bb6:	37 07       	cpc	r19, r23
    2bb8:	70 e0       	ldi	r23, 0x00	; 0
    2bba:	47 07       	cpc	r20, r23
    2bbc:	70 e0       	ldi	r23, 0x00	; 0
    2bbe:	57 07       	cpc	r21, r23
    2bc0:	0c f4       	brge	.+2      	; 0x2bc4 <start_vertical_speed_control_left+0x160>
    2bc2:	99 c0       	rjmp	.+306    	; 0x2cf6 <start_vertical_speed_control_left+0x292>
    2bc4:	80 ec       	ldi	r24, 0xC0	; 192
    2bc6:	9d e5       	ldi	r25, 0x5D	; 93
    2bc8:	a0 e0       	ldi	r26, 0x00	; 0
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	80 93 03 03 	sts	0x0303, r24
    2bd0:	90 93 04 03 	sts	0x0304, r25
    2bd4:	a0 93 05 03 	sts	0x0305, r26
    2bd8:	b0 93 06 03 	sts	0x0306, r27
    2bdc:	2c ed       	ldi	r18, 0xDC	; 220
    2bde:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    2be0:	31 83       	std	Z+1, r19	; 0x01
    2be2:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    2be4:	80 91 e9 02 	lds	r24, 0x02E9
    2be8:	90 91 ea 02 	lds	r25, 0x02EA
    2bec:	18 16       	cp	r1, r24
    2bee:	19 06       	cpc	r1, r25
    2bf0:	0c f0       	brlt	.+2      	; 0x2bf4 <start_vertical_speed_control_left+0x190>
    2bf2:	98 c0       	rjmp	.+304    	; 0x2d24 <start_vertical_speed_control_left+0x2c0>
		*pwm_left += 1;
    2bf4:	2f 5f       	subi	r18, 0xFF	; 255
    2bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf8:	31 83       	std	Z+1, r19	; 0x01
    2bfa:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2bfc:	42 e0       	ldi	r20, 0x02	; 2
    2bfe:	21 30       	cpi	r18, 0x01	; 1
    2c00:	34 07       	cpc	r19, r20
    2c02:	0c f4       	brge	.+2      	; 0x2c06 <start_vertical_speed_control_left+0x1a2>
    2c04:	41 c0       	rjmp	.+130    	; 0x2c88 <start_vertical_speed_control_left+0x224>
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	92 e0       	ldi	r25, 0x02	; 2
    2c0a:	91 83       	std	Z+1, r25	; 0x01
    2c0c:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	1f 91       	pop	r17
    2c14:	0f 91       	pop	r16
    2c16:	ff 90       	pop	r15
    2c18:	ef 90       	pop	r14
    2c1a:	df 90       	pop	r13
    2c1c:	cf 90       	pop	r12
    2c1e:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2c20:	24 3b       	cpi	r18, 0xB4	; 180
    2c22:	31 05       	cpc	r19, r1
    2c24:	94 f4       	brge	.+36     	; 0x2c4a <start_vertical_speed_control_left+0x1e6>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2c26:	2a 35       	cpi	r18, 0x5A	; 90
    2c28:	31 05       	cpc	r19, r1
    2c2a:	7c f4       	brge	.+30     	; 0x2c4a <start_vertical_speed_control_left+0x1e6>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    2c2c:	18 16       	cp	r1, r24
    2c2e:	19 06       	cpc	r1, r25
    2c30:	0c f0       	brlt	.+2      	; 0x2c34 <start_vertical_speed_control_left+0x1d0>
    2c32:	a9 c0       	rjmp	.+338    	; 0x2d86 <start_vertical_speed_control_left+0x322>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    2c34:	35 95       	asr	r19
    2c36:	27 95       	ror	r18
    2c38:	35 95       	asr	r19
    2c3a:	27 95       	ror	r18
    2c3c:	27 5e       	subi	r18, 0xE7	; 231
    2c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c40:	30 93 04 02 	sts	0x0204, r19
    2c44:	20 93 03 02 	sts	0x0203, r18
    2c48:	38 cf       	rjmp	.-400    	; 0x2aba <start_vertical_speed_control_left+0x56>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    2c4a:	18 16       	cp	r1, r24
    2c4c:	19 06       	cpc	r1, r25
    2c4e:	0c f0       	brlt	.+2      	; 0x2c52 <start_vertical_speed_control_left+0x1ee>
    2c50:	42 c0       	rjmp	.+132    	; 0x2cd6 <start_vertical_speed_control_left+0x272>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    2c52:	84 eb       	ldi	r24, 0xB4	; 180
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	82 1b       	sub	r24, r18
    2c58:	93 0b       	sbc	r25, r19
    2c5a:	95 95       	asr	r25
    2c5c:	87 95       	ror	r24
    2c5e:	95 95       	asr	r25
    2c60:	87 95       	ror	r24
    2c62:	49 96       	adiw	r24, 0x19	; 25
    2c64:	90 93 04 02 	sts	0x0204, r25
    2c68:	80 93 03 02 	sts	0x0203, r24
    2c6c:	26 cf       	rjmp	.-436    	; 0x2aba <start_vertical_speed_control_left+0x56>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    2c6e:	10 92 08 03 	sts	0x0308, r1
    2c72:	10 92 07 03 	sts	0x0307, r1
		delta_left_speed_current = 0;
    2c76:	10 92 c9 04 	sts	0x04C9, r1
    2c7a:	10 92 c8 04 	sts	0x04C8, r1
		delta_left_speed_prev = 0;
    2c7e:	10 92 74 05 	sts	0x0574, r1
    2c82:	10 92 73 05 	sts	0x0573, r1
		return;
    2c86:	c3 cf       	rjmp	.-122    	; 0x2c0e <start_vertical_speed_control_left+0x1aa>
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2c88:	6e ef       	ldi	r22, 0xFE	; 254
    2c8a:	20 30       	cpi	r18, 0x00	; 0
    2c8c:	36 07       	cpc	r19, r22
    2c8e:	0c f0       	brlt	.+2      	; 0x2c92 <start_vertical_speed_control_left+0x22e>
    2c90:	be cf       	rjmp	.-132    	; 0x2c0e <start_vertical_speed_control_left+0x1aa>
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	9e ef       	ldi	r25, 0xFE	; 254
    2c96:	91 83       	std	Z+1, r25	; 0x01
    2c98:	80 83       	st	Z, r24
    2c9a:	b9 cf       	rjmp	.-142    	; 0x2c0e <start_vertical_speed_control_left+0x1aa>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2c9c:	79 ef       	ldi	r23, 0xF9	; 249
    2c9e:	80 3c       	cpi	r24, 0xC0	; 192
    2ca0:	97 07       	cpc	r25, r23
    2ca2:	7c f4       	brge	.+30     	; 0x2cc2 <start_vertical_speed_control_left+0x25e>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    2ca4:	80 ec       	ldi	r24, 0xC0	; 192
    2ca6:	99 ef       	ldi	r25, 0xF9	; 249
    2ca8:	90 93 08 03 	sts	0x0308, r25
    2cac:	80 93 07 03 	sts	0x0307, r24
    2cb0:	60 e4       	ldi	r22, 0x40	; 64
    2cb2:	c6 2e       	mov	r12, r22
    2cb4:	6d ee       	ldi	r22, 0xED	; 237
    2cb6:	d6 2e       	mov	r13, r22
    2cb8:	6f ef       	ldi	r22, 0xFF	; 255
    2cba:	e6 2e       	mov	r14, r22
    2cbc:	6f ef       	ldi	r22, 0xFF	; 255
    2cbe:	f6 2e       	mov	r15, r22
    2cc0:	2e cf       	rjmp	.-420    	; 0x2b1e <start_vertical_speed_control_left+0xba>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2cc2:	6c 01       	movw	r12, r24
    2cc4:	cc 0c       	add	r12, r12
    2cc6:	dd 1c       	adc	r13, r13
    2cc8:	c8 0e       	add	r12, r24
    2cca:	d9 1e       	adc	r13, r25
    2ccc:	ee 24       	eor	r14, r14
    2cce:	d7 fc       	sbrc	r13, 7
    2cd0:	e0 94       	com	r14
    2cd2:	fe 2c       	mov	r15, r14
    2cd4:	24 cf       	rjmp	.-440    	; 0x2b1e <start_vertical_speed_control_left+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2cd6:	84 eb       	ldi	r24, 0xB4	; 180
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	e1 ce       	rjmp	.-574    	; 0x2a9e <start_vertical_speed_control_left+0x3a>
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2cdc:	17 fd       	sbrc	r17, 7
    2cde:	0b c0       	rjmp	.+22     	; 0x2cf6 <start_vertical_speed_control_left+0x292>
		pwm_left_speed_controller = 0;
    2ce0:	10 92 03 03 	sts	0x0303, r1
    2ce4:	10 92 04 03 	sts	0x0304, r1
    2ce8:	10 92 05 03 	sts	0x0305, r1
    2cec:	10 92 06 03 	sts	0x0306, r1
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2cf6:	20 34       	cpi	r18, 0x40	; 64
    2cf8:	82 ea       	ldi	r24, 0xA2	; 162
    2cfa:	38 07       	cpc	r19, r24
    2cfc:	8f ef       	ldi	r24, 0xFF	; 255
    2cfe:	48 07       	cpc	r20, r24
    2d00:	8f ef       	ldi	r24, 0xFF	; 255
    2d02:	58 07       	cpc	r21, r24
    2d04:	54 f5       	brge	.+84     	; 0x2d5a <start_vertical_speed_control_left+0x2f6>
    2d06:	80 e4       	ldi	r24, 0x40	; 64
    2d08:	92 ea       	ldi	r25, 0xA2	; 162
    2d0a:	af ef       	ldi	r26, 0xFF	; 255
    2d0c:	bf ef       	ldi	r27, 0xFF	; 255
    2d0e:	80 93 03 03 	sts	0x0303, r24
    2d12:	90 93 04 03 	sts	0x0304, r25
    2d16:	a0 93 05 03 	sts	0x0305, r26
    2d1a:	b0 93 06 03 	sts	0x0306, r27
    2d1e:	24 e2       	ldi	r18, 0x24	; 36
    2d20:	3a ef       	ldi	r19, 0xFA	; 250
    2d22:	5e cf       	rjmp	.-324    	; 0x2be0 <start_vertical_speed_control_left+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    2d24:	21 50       	subi	r18, 0x01	; 1
    2d26:	30 40       	sbci	r19, 0x00	; 0
    2d28:	31 83       	std	Z+1, r19	; 0x01
    2d2a:	20 83       	st	Z, r18
    2d2c:	67 cf       	rjmp	.-306    	; 0x2bfc <start_vertical_speed_control_left+0x198>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2d2e:	a0 91 ef 02 	lds	r26, 0x02EF
    2d32:	b0 91 f0 02 	lds	r27, 0x02F0
    2d36:	a8 0f       	add	r26, r24
    2d38:	b9 1f       	adc	r27, r25
    2d3a:	b0 93 c9 04 	sts	0x04C9, r27
    2d3e:	a0 93 c8 04 	sts	0x04C8, r26
    2d42:	d2 ce       	rjmp	.-604    	; 0x2ae8 <start_vertical_speed_control_left+0x84>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2d44:	10 92 03 03 	sts	0x0303, r1
    2d48:	10 92 04 03 	sts	0x0304, r1
    2d4c:	10 92 05 03 	sts	0x0305, r1
    2d50:	10 92 06 03 	sts	0x0306, r1
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2d5a:	84 e0       	ldi	r24, 0x04	; 4
    2d5c:	55 95       	asr	r21
    2d5e:	47 95       	ror	r20
    2d60:	37 95       	ror	r19
    2d62:	27 95       	ror	r18
    2d64:	8a 95       	dec	r24
    2d66:	d1 f7       	brne	.-12     	; 0x2d5c <start_vertical_speed_control_left+0x2f8>
    2d68:	3b cf       	rjmp	.-394    	; 0x2be0 <start_vertical_speed_control_left+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    2d6a:	88 e6       	ldi	r24, 0x68	; 104
    2d6c:	91 e0       	ldi	r25, 0x01	; 1
    2d6e:	82 1b       	sub	r24, r18
    2d70:	93 0b       	sbc	r25, r19
    2d72:	95 95       	asr	r25
    2d74:	87 95       	ror	r24
    2d76:	95 95       	asr	r25
    2d78:	87 95       	ror	r24
    2d7a:	49 96       	adiw	r24, 0x19	; 25
    2d7c:	90 93 04 02 	sts	0x0204, r25
    2d80:	80 93 03 02 	sts	0x0203, r24
    2d84:	9a ce       	rjmp	.-716    	; 0x2aba <start_vertical_speed_control_left+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    2d86:	35 95       	asr	r19
    2d88:	27 95       	ror	r18
    2d8a:	35 95       	asr	r19
    2d8c:	27 95       	ror	r18
    2d8e:	89 e1       	ldi	r24, 0x19	; 25
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	82 1b       	sub	r24, r18
    2d94:	93 0b       	sbc	r25, r19
    2d96:	90 93 04 02 	sts	0x0204, r25
    2d9a:	80 93 03 02 	sts	0x0203, r24
    2d9e:	8d ce       	rjmp	.-742    	; 0x2aba <start_vertical_speed_control_left+0x56>

00002da0 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    2da0:	cf 92       	push	r12
    2da2:	df 92       	push	r13
    2da4:	ef 92       	push	r14
    2da6:	ff 92       	push	r15
    2da8:	0f 93       	push	r16
    2daa:	1f 93       	push	r17
    2dac:	cf 93       	push	r28
    2dae:	df 93       	push	r29
    2db0:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    2db2:	80 81       	ld	r24, Z
    2db4:	91 81       	ldd	r25, Z+1	; 0x01
    2db6:	00 97       	sbiw	r24, 0x00	; 0
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <start_vertical_speed_control_right+0x1c>
    2dba:	f7 c0       	rjmp	.+494    	; 0x2faa <start_vertical_speed_control_right+0x20a>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2dbc:	20 91 3a 04 	lds	r18, 0x043A
    2dc0:	30 91 3b 04 	lds	r19, 0x043B
    2dc4:	41 e0       	ldi	r20, 0x01	; 1
    2dc6:	2e 30       	cpi	r18, 0x0E	; 14
    2dc8:	34 07       	cpc	r19, r20
    2dca:	0c f4       	brge	.+2      	; 0x2dce <start_vertical_speed_control_right+0x2e>
    2dcc:	c7 c0       	rjmp	.+398    	; 0x2f5c <start_vertical_speed_control_right+0x1bc>
		if(*pwm_right > 0) {
    2dce:	18 16       	cp	r1, r24
    2dd0:	19 06       	cpc	r1, r25
    2dd2:	0c f0       	brlt	.+2      	; 0x2dd6 <start_vertical_speed_control_right+0x36>
    2dd4:	68 c1       	rjmp	.+720    	; 0x30a6 <start_vertical_speed_control_right+0x306>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    2dd6:	88 e6       	ldi	r24, 0x68	; 104
    2dd8:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2dda:	82 1b       	sub	r24, r18
    2ddc:	93 0b       	sbc	r25, r19
    2dde:	95 95       	asr	r25
    2de0:	87 95       	ror	r24
    2de2:	95 95       	asr	r25
    2de4:	87 95       	ror	r24
    2de6:	29 e1       	ldi	r18, 0x19	; 25
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	28 1b       	sub	r18, r24
    2dec:	39 0b       	sbc	r19, r25
    2dee:	30 93 06 02 	sts	0x0206, r19
    2df2:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    2df6:	c0 91 82 05 	lds	r28, 0x0582
    2dfa:	d0 91 83 05 	lds	r29, 0x0583
    2dfe:	d0 93 cc 04 	sts	0x04CC, r29
    2e02:	c0 93 cb 04 	sts	0x04CB, r28
	if(*pwm_right >= 0) {
    2e06:	80 81       	ld	r24, Z
    2e08:	91 81       	ldd	r25, Z+1	; 0x01
    2e0a:	97 fd       	sbrc	r25, 7
    2e0c:	2e c1       	rjmp	.+604    	; 0x306a <start_vertical_speed_control_right+0x2ca>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2e0e:	20 91 f1 02 	lds	r18, 0x02F1
    2e12:	30 91 f2 02 	lds	r19, 0x02F2
    2e16:	dc 01       	movw	r26, r24
    2e18:	a2 1b       	sub	r26, r18
    2e1a:	b3 0b       	sbc	r27, r19
    2e1c:	b0 93 83 05 	sts	0x0583, r27
    2e20:	a0 93 82 05 	sts	0x0582, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2e24:	80 91 09 03 	lds	r24, 0x0309
    2e28:	90 91 0a 03 	lds	r25, 0x030A
    2e2c:	8a 0f       	add	r24, r26
    2e2e:	9b 1f       	adc	r25, r27
    2e30:	90 93 0a 03 	sts	0x030A, r25
    2e34:	80 93 09 03 	sts	0x0309, r24

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    2e38:	66 e0       	ldi	r22, 0x06	; 6
    2e3a:	81 34       	cpi	r24, 0x41	; 65
    2e3c:	96 07       	cpc	r25, r22
    2e3e:	0c f4       	brge	.+2      	; 0x2e42 <start_vertical_speed_control_right+0xa2>
    2e40:	cb c0       	rjmp	.+406    	; 0x2fd8 <start_vertical_speed_control_right+0x238>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    2e42:	80 e4       	ldi	r24, 0x40	; 64
    2e44:	96 e0       	ldi	r25, 0x06	; 6
    2e46:	90 93 0a 03 	sts	0x030A, r25
    2e4a:	80 93 09 03 	sts	0x0309, r24
    2e4e:	40 ec       	ldi	r20, 0xC0	; 192
    2e50:	c4 2e       	mov	r12, r20
    2e52:	42 e1       	ldi	r20, 0x12	; 18
    2e54:	d4 2e       	mov	r13, r20
    2e56:	e1 2c       	mov	r14, r1
    2e58:	f1 2c       	mov	r15, r1
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2e5a:	00 81       	ld	r16, Z
    2e5c:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    2e5e:	9d 01       	movw	r18, r26
    2e60:	22 0f       	add	r18, r18
    2e62:	33 1f       	adc	r19, r19
    2e64:	2a 0f       	add	r18, r26
    2e66:	3b 1f       	adc	r19, r27
    2e68:	22 0f       	add	r18, r18
    2e6a:	33 1f       	adc	r19, r19
    2e6c:	22 0f       	add	r18, r18
    2e6e:	33 1f       	adc	r19, r19
    2e70:	22 0f       	add	r18, r18
    2e72:	33 1f       	adc	r19, r19
    2e74:	2a 0f       	add	r18, r26
    2e76:	3b 1f       	adc	r19, r27
    2e78:	44 27       	eor	r20, r20
    2e7a:	37 fd       	sbrc	r19, 7
    2e7c:	40 95       	com	r20
    2e7e:	54 2f       	mov	r21, r20
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2e80:	80 91 05 02 	lds	r24, 0x0205
    2e84:	90 91 06 02 	lds	r25, 0x0206
    2e88:	08 9f       	mul	r16, r24
    2e8a:	b0 01       	movw	r22, r0
    2e8c:	09 9f       	mul	r16, r25
    2e8e:	70 0d       	add	r23, r0
    2e90:	18 9f       	mul	r17, r24
    2e92:	70 0d       	add	r23, r0
    2e94:	11 24       	eor	r1, r1
    2e96:	88 27       	eor	r24, r24
    2e98:	77 fd       	sbrc	r23, 7
    2e9a:	80 95       	com	r24
    2e9c:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    2e9e:	26 0f       	add	r18, r22
    2ea0:	37 1f       	adc	r19, r23
    2ea2:	48 1f       	adc	r20, r24
    2ea4:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    2ea6:	ac 1b       	sub	r26, r28
    2ea8:	bd 0b       	sbc	r27, r29
    2eaa:	aa 0f       	add	r26, r26
    2eac:	bb 1f       	adc	r27, r27
    2eae:	bd 01       	movw	r22, r26
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	aa 27       	eor	r26, r26
    2eb4:	97 fd       	sbrc	r25, 7
    2eb6:	a0 95       	com	r26
    2eb8:	ba 2f       	mov	r27, r26
    2eba:	28 0f       	add	r18, r24
    2ebc:	39 1f       	adc	r19, r25
    2ebe:	4a 1f       	adc	r20, r26
    2ec0:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);
    2ec2:	2c 0d       	add	r18, r12
    2ec4:	3d 1d       	adc	r19, r13
    2ec6:	4e 1d       	adc	r20, r14
    2ec8:	5f 1d       	adc	r21, r15
    2eca:	20 93 ff 02 	sts	0x02FF, r18
    2ece:	30 93 00 03 	sts	0x0300, r19
    2ed2:	40 93 01 03 	sts	0x0301, r20
    2ed6:	50 93 02 03 	sts	0x0302, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2eda:	57 fd       	sbrc	r21, 7
    2edc:	9d c0       	rjmp	.+314    	; 0x3018 <start_vertical_speed_control_right+0x278>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    2ede:	12 16       	cp	r1, r18
    2ee0:	13 06       	cpc	r1, r19
    2ee2:	14 06       	cpc	r1, r20
    2ee4:	15 06       	cpc	r1, r21
    2ee6:	0c f0       	brlt	.+2      	; 0x2eea <start_vertical_speed_control_right+0x14a>
    2ee8:	a4 c0       	rjmp	.+328    	; 0x3032 <start_vertical_speed_control_right+0x292>
    2eea:	17 fd       	sbrc	r17, 7
    2eec:	c9 c0       	rjmp	.+402    	; 0x3080 <start_vertical_speed_control_right+0x2e0>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2eee:	21 3c       	cpi	r18, 0xC1	; 193
    2ef0:	7d e5       	ldi	r23, 0x5D	; 93
    2ef2:	37 07       	cpc	r19, r23
    2ef4:	70 e0       	ldi	r23, 0x00	; 0
    2ef6:	47 07       	cpc	r20, r23
    2ef8:	70 e0       	ldi	r23, 0x00	; 0
    2efa:	57 07       	cpc	r21, r23
    2efc:	0c f4       	brge	.+2      	; 0x2f00 <start_vertical_speed_control_right+0x160>
    2efe:	99 c0       	rjmp	.+306    	; 0x3032 <start_vertical_speed_control_right+0x292>
    2f00:	80 ec       	ldi	r24, 0xC0	; 192
    2f02:	9d e5       	ldi	r25, 0x5D	; 93
    2f04:	a0 e0       	ldi	r26, 0x00	; 0
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	80 93 ff 02 	sts	0x02FF, r24
    2f0c:	90 93 00 03 	sts	0x0300, r25
    2f10:	a0 93 01 03 	sts	0x0301, r26
    2f14:	b0 93 02 03 	sts	0x0302, r27
    2f18:	2c ed       	ldi	r18, 0xDC	; 220
    2f1a:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    2f1c:	31 83       	std	Z+1, r19	; 0x01
    2f1e:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    2f20:	80 91 e7 02 	lds	r24, 0x02E7
    2f24:	90 91 e8 02 	lds	r25, 0x02E8
    2f28:	18 16       	cp	r1, r24
    2f2a:	19 06       	cpc	r1, r25
    2f2c:	0c f0       	brlt	.+2      	; 0x2f30 <start_vertical_speed_control_right+0x190>
    2f2e:	98 c0       	rjmp	.+304    	; 0x3060 <start_vertical_speed_control_right+0x2c0>
		*pwm_right += 1;
    2f30:	2f 5f       	subi	r18, 0xFF	; 255
    2f32:	3f 4f       	sbci	r19, 0xFF	; 255
    2f34:	31 83       	std	Z+1, r19	; 0x01
    2f36:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2f38:	42 e0       	ldi	r20, 0x02	; 2
    2f3a:	21 30       	cpi	r18, 0x01	; 1
    2f3c:	34 07       	cpc	r19, r20
    2f3e:	0c f4       	brge	.+2      	; 0x2f42 <start_vertical_speed_control_right+0x1a2>
    2f40:	41 c0       	rjmp	.+130    	; 0x2fc4 <start_vertical_speed_control_right+0x224>
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	92 e0       	ldi	r25, 0x02	; 2
    2f46:	91 83       	std	Z+1, r25	; 0x01
    2f48:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    2f4a:	df 91       	pop	r29
    2f4c:	cf 91       	pop	r28
    2f4e:	1f 91       	pop	r17
    2f50:	0f 91       	pop	r16
    2f52:	ff 90       	pop	r15
    2f54:	ef 90       	pop	r14
    2f56:	df 90       	pop	r13
    2f58:	cf 90       	pop	r12
    2f5a:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2f5c:	24 3b       	cpi	r18, 0xB4	; 180
    2f5e:	31 05       	cpc	r19, r1
    2f60:	94 f4       	brge	.+36     	; 0x2f86 <start_vertical_speed_control_right+0x1e6>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2f62:	2a 35       	cpi	r18, 0x5A	; 90
    2f64:	31 05       	cpc	r19, r1
    2f66:	7c f4       	brge	.+30     	; 0x2f86 <start_vertical_speed_control_right+0x1e6>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    2f68:	18 16       	cp	r1, r24
    2f6a:	19 06       	cpc	r1, r25
    2f6c:	0c f0       	brlt	.+2      	; 0x2f70 <start_vertical_speed_control_right+0x1d0>
    2f6e:	a9 c0       	rjmp	.+338    	; 0x30c2 <start_vertical_speed_control_right+0x322>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    2f70:	35 95       	asr	r19
    2f72:	27 95       	ror	r18
    2f74:	35 95       	asr	r19
    2f76:	27 95       	ror	r18
    2f78:	27 5e       	subi	r18, 0xE7	; 231
    2f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7c:	30 93 06 02 	sts	0x0206, r19
    2f80:	20 93 05 02 	sts	0x0205, r18
    2f84:	38 cf       	rjmp	.-400    	; 0x2df6 <start_vertical_speed_control_right+0x56>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    2f86:	18 16       	cp	r1, r24
    2f88:	19 06       	cpc	r1, r25
    2f8a:	0c f0       	brlt	.+2      	; 0x2f8e <start_vertical_speed_control_right+0x1ee>
    2f8c:	42 c0       	rjmp	.+132    	; 0x3012 <start_vertical_speed_control_right+0x272>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    2f8e:	84 eb       	ldi	r24, 0xB4	; 180
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	82 1b       	sub	r24, r18
    2f94:	93 0b       	sbc	r25, r19
    2f96:	95 95       	asr	r25
    2f98:	87 95       	ror	r24
    2f9a:	95 95       	asr	r25
    2f9c:	87 95       	ror	r24
    2f9e:	49 96       	adiw	r24, 0x19	; 25
    2fa0:	90 93 06 02 	sts	0x0206, r25
    2fa4:	80 93 05 02 	sts	0x0205, r24
    2fa8:	26 cf       	rjmp	.-436    	; 0x2df6 <start_vertical_speed_control_right+0x56>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    2faa:	10 92 0a 03 	sts	0x030A, r1
    2fae:	10 92 09 03 	sts	0x0309, r1
		delta_right_speed_current = 0;
    2fb2:	10 92 83 05 	sts	0x0583, r1
    2fb6:	10 92 82 05 	sts	0x0582, r1
		delta_right_speed_prev = 0;
    2fba:	10 92 cc 04 	sts	0x04CC, r1
    2fbe:	10 92 cb 04 	sts	0x04CB, r1
		return;
    2fc2:	c3 cf       	rjmp	.-122    	; 0x2f4a <start_vertical_speed_control_right+0x1aa>
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2fc4:	6e ef       	ldi	r22, 0xFE	; 254
    2fc6:	20 30       	cpi	r18, 0x00	; 0
    2fc8:	36 07       	cpc	r19, r22
    2fca:	0c f0       	brlt	.+2      	; 0x2fce <start_vertical_speed_control_right+0x22e>
    2fcc:	be cf       	rjmp	.-132    	; 0x2f4a <start_vertical_speed_control_right+0x1aa>
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	9e ef       	ldi	r25, 0xFE	; 254
    2fd2:	91 83       	std	Z+1, r25	; 0x01
    2fd4:	80 83       	st	Z, r24
    2fd6:	b9 cf       	rjmp	.-142    	; 0x2f4a <start_vertical_speed_control_right+0x1aa>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2fd8:	79 ef       	ldi	r23, 0xF9	; 249
    2fda:	80 3c       	cpi	r24, 0xC0	; 192
    2fdc:	97 07       	cpc	r25, r23
    2fde:	7c f4       	brge	.+30     	; 0x2ffe <start_vertical_speed_control_right+0x25e>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    2fe0:	80 ec       	ldi	r24, 0xC0	; 192
    2fe2:	99 ef       	ldi	r25, 0xF9	; 249
    2fe4:	90 93 0a 03 	sts	0x030A, r25
    2fe8:	80 93 09 03 	sts	0x0309, r24
    2fec:	20 e4       	ldi	r18, 0x40	; 64
    2fee:	c2 2e       	mov	r12, r18
    2ff0:	2d ee       	ldi	r18, 0xED	; 237
    2ff2:	d2 2e       	mov	r13, r18
    2ff4:	2f ef       	ldi	r18, 0xFF	; 255
    2ff6:	e2 2e       	mov	r14, r18
    2ff8:	2f ef       	ldi	r18, 0xFF	; 255
    2ffa:	f2 2e       	mov	r15, r18
    2ffc:	2e cf       	rjmp	.-420    	; 0x2e5a <start_vertical_speed_control_right+0xba>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2ffe:	6c 01       	movw	r12, r24
    3000:	cc 0c       	add	r12, r12
    3002:	dd 1c       	adc	r13, r13
    3004:	c8 0e       	add	r12, r24
    3006:	d9 1e       	adc	r13, r25
    3008:	ee 24       	eor	r14, r14
    300a:	d7 fc       	sbrc	r13, 7
    300c:	e0 94       	com	r14
    300e:	fe 2c       	mov	r15, r14
    3010:	24 cf       	rjmp	.-440    	; 0x2e5a <start_vertical_speed_control_right+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    3012:	84 eb       	ldi	r24, 0xB4	; 180
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	e1 ce       	rjmp	.-574    	; 0x2dda <start_vertical_speed_control_right+0x3a>
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3018:	17 fd       	sbrc	r17, 7
    301a:	0b c0       	rjmp	.+22     	; 0x3032 <start_vertical_speed_control_right+0x292>
		pwm_right_speed_controller = 0;
    301c:	10 92 ff 02 	sts	0x02FF, r1
    3020:	10 92 00 03 	sts	0x0300, r1
    3024:	10 92 01 03 	sts	0x0301, r1
    3028:	10 92 02 03 	sts	0x0302, r1
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3032:	20 34       	cpi	r18, 0x40	; 64
    3034:	82 ea       	ldi	r24, 0xA2	; 162
    3036:	38 07       	cpc	r19, r24
    3038:	8f ef       	ldi	r24, 0xFF	; 255
    303a:	48 07       	cpc	r20, r24
    303c:	8f ef       	ldi	r24, 0xFF	; 255
    303e:	58 07       	cpc	r21, r24
    3040:	54 f5       	brge	.+84     	; 0x3096 <start_vertical_speed_control_right+0x2f6>
    3042:	80 e4       	ldi	r24, 0x40	; 64
    3044:	92 ea       	ldi	r25, 0xA2	; 162
    3046:	af ef       	ldi	r26, 0xFF	; 255
    3048:	bf ef       	ldi	r27, 0xFF	; 255
    304a:	80 93 ff 02 	sts	0x02FF, r24
    304e:	90 93 00 03 	sts	0x0300, r25
    3052:	a0 93 01 03 	sts	0x0301, r26
    3056:	b0 93 02 03 	sts	0x0302, r27
    305a:	24 e2       	ldi	r18, 0x24	; 36
    305c:	3a ef       	ldi	r19, 0xFA	; 250
    305e:	5e cf       	rjmp	.-324    	; 0x2f1c <start_vertical_speed_control_right+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    3060:	21 50       	subi	r18, 0x01	; 1
    3062:	30 40       	sbci	r19, 0x00	; 0
    3064:	31 83       	std	Z+1, r19	; 0x01
    3066:	20 83       	st	Z, r18
    3068:	67 cf       	rjmp	.-306    	; 0x2f38 <start_vertical_speed_control_right+0x198>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    306a:	a0 91 f1 02 	lds	r26, 0x02F1
    306e:	b0 91 f2 02 	lds	r27, 0x02F2
    3072:	a8 0f       	add	r26, r24
    3074:	b9 1f       	adc	r27, r25
    3076:	b0 93 83 05 	sts	0x0583, r27
    307a:	a0 93 82 05 	sts	0x0582, r26
    307e:	d2 ce       	rjmp	.-604    	; 0x2e24 <start_vertical_speed_control_right+0x84>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    3080:	10 92 ff 02 	sts	0x02FF, r1
    3084:	10 92 00 03 	sts	0x0300, r1
    3088:	10 92 01 03 	sts	0x0301, r1
    308c:	10 92 02 03 	sts	0x0302, r1
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    3096:	64 e0       	ldi	r22, 0x04	; 4
    3098:	55 95       	asr	r21
    309a:	47 95       	ror	r20
    309c:	37 95       	ror	r19
    309e:	27 95       	ror	r18
    30a0:	6a 95       	dec	r22
    30a2:	d1 f7       	brne	.-12     	; 0x3098 <start_vertical_speed_control_right+0x2f8>
    30a4:	3b cf       	rjmp	.-394    	; 0x2f1c <start_vertical_speed_control_right+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    30a6:	88 e6       	ldi	r24, 0x68	; 104
    30a8:	91 e0       	ldi	r25, 0x01	; 1
    30aa:	82 1b       	sub	r24, r18
    30ac:	93 0b       	sbc	r25, r19
    30ae:	95 95       	asr	r25
    30b0:	87 95       	ror	r24
    30b2:	95 95       	asr	r25
    30b4:	87 95       	ror	r24
    30b6:	49 96       	adiw	r24, 0x19	; 25
    30b8:	90 93 06 02 	sts	0x0206, r25
    30bc:	80 93 05 02 	sts	0x0205, r24
    30c0:	9a ce       	rjmp	.-716    	; 0x2df6 <start_vertical_speed_control_right+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    30c2:	35 95       	asr	r19
    30c4:	27 95       	ror	r18
    30c6:	35 95       	asr	r19
    30c8:	27 95       	ror	r18
    30ca:	89 e1       	ldi	r24, 0x19	; 25
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	82 1b       	sub	r24, r18
    30d0:	93 0b       	sbc	r25, r19
    30d2:	90 93 06 02 	sts	0x0206, r25
    30d6:	80 93 05 02 	sts	0x0205, r24
    30da:	8d ce       	rjmp	.-742    	; 0x2df6 <start_vertical_speed_control_right+0x56>

000030dc <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    30dc:	cf 92       	push	r12
    30de:	df 92       	push	r13
    30e0:	ef 92       	push	r14
    30e2:	ff 92       	push	r15
    30e4:	0f 93       	push	r16
    30e6:	1f 93       	push	r17
    30e8:	cf 93       	push	r28
    30ea:	df 93       	push	r29
    30ec:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    30ee:	80 81       	ld	r24, Z
    30f0:	91 81       	ldd	r25, Z+1	; 0x01
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	09 f4       	brne	.+2      	; 0x30f8 <start_horizontal_speed_control_right+0x1c>
    30f6:	b8 c0       	rjmp	.+368    	; 0x3268 <start_horizontal_speed_control_right+0x18c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    30f8:	c0 91 82 05 	lds	r28, 0x0582
    30fc:	d0 91 83 05 	lds	r29, 0x0583
    3100:	d0 93 cc 04 	sts	0x04CC, r29
    3104:	c0 93 cb 04 	sts	0x04CB, r28
	if(*pwm_right >= 0) {
    3108:	80 81       	ld	r24, Z
    310a:	91 81       	ldd	r25, Z+1	; 0x01
    310c:	97 fd       	sbrc	r25, 7
    310e:	cd c0       	rjmp	.+410    	; 0x32aa <start_horizontal_speed_control_right+0x1ce>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    3110:	20 91 f1 02 	lds	r18, 0x02F1
    3114:	30 91 f2 02 	lds	r19, 0x02F2
    3118:	dc 01       	movw	r26, r24
    311a:	a2 1b       	sub	r26, r18
    311c:	b3 0b       	sbc	r27, r19
    311e:	b0 93 83 05 	sts	0x0583, r27
    3122:	a0 93 82 05 	sts	0x0582, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    3126:	c0 90 09 03 	lds	r12, 0x0309
    312a:	d0 90 0a 03 	lds	r13, 0x030A
    312e:	ca 0e       	add	r12, r26
    3130:	db 1e       	adc	r13, r27
    3132:	d0 92 0a 03 	sts	0x030A, r13
    3136:	c0 92 09 03 	sts	0x0309, r12

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    313a:	81 e4       	ldi	r24, 0x41	; 65
    313c:	c8 16       	cp	r12, r24
    313e:	86 e0       	ldi	r24, 0x06	; 6
    3140:	d8 06       	cpc	r13, r24
    3142:	0c f4       	brge	.+2      	; 0x3146 <start_horizontal_speed_control_right+0x6a>
    3144:	9e c0       	rjmp	.+316    	; 0x3282 <start_horizontal_speed_control_right+0x1a6>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    3146:	80 e4       	ldi	r24, 0x40	; 64
    3148:	96 e0       	ldi	r25, 0x06	; 6
    314a:	90 93 0a 03 	sts	0x030A, r25
    314e:	80 93 09 03 	sts	0x0309, r24
    3152:	10 e8       	ldi	r17, 0x80	; 128
    3154:	c1 2e       	mov	r12, r17
    3156:	1c e0       	ldi	r17, 0x0C	; 12
    3158:	d1 2e       	mov	r13, r17
    315a:	e1 2c       	mov	r14, r1
    315c:	f1 2c       	mov	r15, r1
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    315e:	00 81       	ld	r16, Z
    3160:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    3162:	cd 01       	movw	r24, r26
    3164:	88 0f       	add	r24, r24
    3166:	99 1f       	adc	r25, r25
    3168:	8a 0f       	add	r24, r26
    316a:	9b 1f       	adc	r25, r27
    316c:	9c 01       	movw	r18, r24
    316e:	22 0f       	add	r18, r18
    3170:	33 1f       	adc	r19, r19
    3172:	22 0f       	add	r18, r18
    3174:	33 1f       	adc	r19, r19
    3176:	28 0f       	add	r18, r24
    3178:	39 1f       	adc	r19, r25
    317a:	44 27       	eor	r20, r20
    317c:	37 fd       	sbrc	r19, 7
    317e:	40 95       	com	r20
    3180:	54 2f       	mov	r21, r20
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    3182:	b8 01       	movw	r22, r16
    3184:	66 0f       	add	r22, r22
    3186:	77 1f       	adc	r23, r23
    3188:	66 0f       	add	r22, r22
    318a:	77 1f       	adc	r23, r23
    318c:	66 0f       	add	r22, r22
    318e:	77 1f       	adc	r23, r23
    3190:	88 27       	eor	r24, r24
    3192:	77 fd       	sbrc	r23, 7
    3194:	80 95       	com	r24
    3196:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    3198:	26 0f       	add	r18, r22
    319a:	37 1f       	adc	r19, r23
    319c:	48 1f       	adc	r20, r24
    319e:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    31a0:	ac 1b       	sub	r26, r28
    31a2:	bd 0b       	sbc	r27, r29
    31a4:	cd 01       	movw	r24, r26
    31a6:	88 0f       	add	r24, r24
    31a8:	99 1f       	adc	r25, r25
    31aa:	8a 0f       	add	r24, r26
    31ac:	9b 1f       	adc	r25, r27
    31ae:	aa 27       	eor	r26, r26
    31b0:	97 fd       	sbrc	r25, 7
    31b2:	a0 95       	com	r26
    31b4:	ba 2f       	mov	r27, r26
    31b6:	28 0f       	add	r18, r24
    31b8:	39 1f       	adc	r19, r25
    31ba:	4a 1f       	adc	r20, r26
    31bc:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);
    31be:	2c 0d       	add	r18, r12
    31c0:	3d 1d       	adc	r19, r13
    31c2:	4e 1d       	adc	r20, r14
    31c4:	5f 1d       	adc	r21, r15
    31c6:	20 93 ff 02 	sts	0x02FF, r18
    31ca:	30 93 00 03 	sts	0x0300, r19
    31ce:	40 93 01 03 	sts	0x0301, r20
    31d2:	50 93 02 03 	sts	0x0302, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    31d6:	57 fd       	sbrc	r21, 7
    31d8:	7a c0       	rjmp	.+244    	; 0x32ce <start_horizontal_speed_control_right+0x1f2>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    31da:	12 16       	cp	r1, r18
    31dc:	13 06       	cpc	r1, r19
    31de:	14 06       	cpc	r1, r20
    31e0:	15 06       	cpc	r1, r21
    31e2:	0c f0       	brlt	.+2      	; 0x31e6 <start_horizontal_speed_control_right+0x10a>
    31e4:	81 c0       	rjmp	.+258    	; 0x32e8 <start_horizontal_speed_control_right+0x20c>
    31e6:	17 fd       	sbrc	r17, 7
    31e8:	ad c0       	rjmp	.+346    	; 0x3344 <start_horizontal_speed_control_right+0x268>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    31ea:	21 3c       	cpi	r18, 0xC1	; 193
    31ec:	8d e5       	ldi	r24, 0x5D	; 93
    31ee:	38 07       	cpc	r19, r24
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	48 07       	cpc	r20, r24
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	58 07       	cpc	r21, r24
    31f8:	0c f4       	brge	.+2      	; 0x31fc <start_horizontal_speed_control_right+0x120>
    31fa:	76 c0       	rjmp	.+236    	; 0x32e8 <start_horizontal_speed_control_right+0x20c>
    31fc:	80 ec       	ldi	r24, 0xC0	; 192
    31fe:	9d e5       	ldi	r25, 0x5D	; 93
    3200:	a0 e0       	ldi	r26, 0x00	; 0
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	80 93 ff 02 	sts	0x02FF, r24
    3208:	90 93 00 03 	sts	0x0300, r25
    320c:	a0 93 01 03 	sts	0x0301, r26
    3210:	b0 93 02 03 	sts	0x0302, r27
    3214:	2c ed       	ldi	r18, 0xDC	; 220
    3216:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    3218:	31 83       	std	Z+1, r19	; 0x01
    321a:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    321c:	80 91 e7 02 	lds	r24, 0x02E7
    3220:	90 91 e8 02 	lds	r25, 0x02E8
    3224:	18 16       	cp	r1, r24
    3226:	19 06       	cpc	r1, r25
    3228:	0c f0       	brlt	.+2      	; 0x322c <start_horizontal_speed_control_right+0x150>
    322a:	87 c0       	rjmp	.+270    	; 0x333a <start_horizontal_speed_control_right+0x25e>
		*pwm_right += 1;
    322c:	2f 5f       	subi	r18, 0xFF	; 255
    322e:	3f 4f       	sbci	r19, 0xFF	; 255
    3230:	31 83       	std	Z+1, r19	; 0x01
    3232:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    3234:	12 16       	cp	r1, r18
    3236:	13 06       	cpc	r1, r19
    3238:	0c f0       	brlt	.+2      	; 0x323c <start_horizontal_speed_control_right+0x160>
    323a:	6d c0       	rjmp	.+218    	; 0x3316 <start_horizontal_speed_control_right+0x23a>
		*pwm_right += 30;
    323c:	22 5e       	subi	r18, 0xE2	; 226
    323e:	3f 4f       	sbci	r19, 0xFF	; 255
    3240:	31 83       	std	Z+1, r19	; 0x01
    3242:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    3244:	82 e0       	ldi	r24, 0x02	; 2
    3246:	21 30       	cpi	r18, 0x01	; 1
    3248:	38 07       	cpc	r19, r24
    324a:	0c f4       	brge	.+2      	; 0x324e <start_horizontal_speed_control_right+0x172>
    324c:	6c c0       	rjmp	.+216    	; 0x3326 <start_horizontal_speed_control_right+0x24a>
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	92 e0       	ldi	r25, 0x02	; 2
    3252:	91 83       	std	Z+1, r25	; 0x01
    3254:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    3256:	df 91       	pop	r29
    3258:	cf 91       	pop	r28
    325a:	1f 91       	pop	r17
    325c:	0f 91       	pop	r16
    325e:	ff 90       	pop	r15
    3260:	ef 90       	pop	r14
    3262:	df 90       	pop	r13
    3264:	cf 90       	pop	r12
    3266:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    3268:	10 92 0a 03 	sts	0x030A, r1
    326c:	10 92 09 03 	sts	0x0309, r1
		delta_right_speed_current = 0;
    3270:	10 92 83 05 	sts	0x0583, r1
    3274:	10 92 82 05 	sts	0x0582, r1
		delta_right_speed_prev = 0;
    3278:	10 92 cc 04 	sts	0x04CC, r1
    327c:	10 92 cb 04 	sts	0x04CB, r1
		return;
    3280:	ea cf       	rjmp	.-44     	; 0x3256 <start_horizontal_speed_control_right+0x17a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    3282:	80 ec       	ldi	r24, 0xC0	; 192
    3284:	c8 16       	cp	r12, r24
    3286:	89 ef       	ldi	r24, 0xF9	; 249
    3288:	d8 06       	cpc	r13, r24
    328a:	d4 f4       	brge	.+52     	; 0x32c0 <start_horizontal_speed_control_right+0x1e4>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    328c:	80 ec       	ldi	r24, 0xC0	; 192
    328e:	99 ef       	ldi	r25, 0xF9	; 249
    3290:	90 93 0a 03 	sts	0x030A, r25
    3294:	80 93 09 03 	sts	0x0309, r24
    3298:	60 e8       	ldi	r22, 0x80	; 128
    329a:	c6 2e       	mov	r12, r22
    329c:	63 ef       	ldi	r22, 0xF3	; 243
    329e:	d6 2e       	mov	r13, r22
    32a0:	6f ef       	ldi	r22, 0xFF	; 255
    32a2:	e6 2e       	mov	r14, r22
    32a4:	6f ef       	ldi	r22, 0xFF	; 255
    32a6:	f6 2e       	mov	r15, r22
    32a8:	5a cf       	rjmp	.-332    	; 0x315e <start_horizontal_speed_control_right+0x82>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    32aa:	a0 91 f1 02 	lds	r26, 0x02F1
    32ae:	b0 91 f2 02 	lds	r27, 0x02F2
    32b2:	a8 0f       	add	r26, r24
    32b4:	b9 1f       	adc	r27, r25
    32b6:	b0 93 83 05 	sts	0x0583, r27
    32ba:	a0 93 82 05 	sts	0x0582, r26
    32be:	33 cf       	rjmp	.-410    	; 0x3126 <start_horizontal_speed_control_right+0x4a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    32c0:	cc 0c       	add	r12, r12
    32c2:	dd 1c       	adc	r13, r13
    32c4:	ee 24       	eor	r14, r14
    32c6:	d7 fc       	sbrc	r13, 7
    32c8:	e0 94       	com	r14
    32ca:	fe 2c       	mov	r15, r14
    32cc:	48 cf       	rjmp	.-368    	; 0x315e <start_horizontal_speed_control_right+0x82>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    32ce:	17 fd       	sbrc	r17, 7
    32d0:	0b c0       	rjmp	.+22     	; 0x32e8 <start_horizontal_speed_control_right+0x20c>
		pwm_right_speed_controller = 0;
    32d2:	10 92 ff 02 	sts	0x02FF, r1
    32d6:	10 92 00 03 	sts	0x0300, r1
    32da:	10 92 01 03 	sts	0x0301, r1
    32de:	10 92 02 03 	sts	0x0302, r1
    32e2:	20 e0       	ldi	r18, 0x00	; 0
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    32e8:	20 34       	cpi	r18, 0x40	; 64
    32ea:	82 ea       	ldi	r24, 0xA2	; 162
    32ec:	38 07       	cpc	r19, r24
    32ee:	8f ef       	ldi	r24, 0xFF	; 255
    32f0:	48 07       	cpc	r20, r24
    32f2:	8f ef       	ldi	r24, 0xFF	; 255
    32f4:	58 07       	cpc	r21, r24
    32f6:	8c f5       	brge	.+98     	; 0x335a <start_horizontal_speed_control_right+0x27e>
    32f8:	80 e4       	ldi	r24, 0x40	; 64
    32fa:	92 ea       	ldi	r25, 0xA2	; 162
    32fc:	af ef       	ldi	r26, 0xFF	; 255
    32fe:	bf ef       	ldi	r27, 0xFF	; 255
    3300:	80 93 ff 02 	sts	0x02FF, r24
    3304:	90 93 00 03 	sts	0x0300, r25
    3308:	a0 93 01 03 	sts	0x0301, r26
    330c:	b0 93 02 03 	sts	0x0302, r27
    3310:	24 e2       	ldi	r18, 0x24	; 36
    3312:	3a ef       	ldi	r19, 0xFA	; 250
    3314:	81 cf       	rjmp	.-254    	; 0x3218 <start_horizontal_speed_control_right+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    3316:	21 15       	cp	r18, r1
    3318:	31 05       	cpc	r19, r1
    331a:	09 f4       	brne	.+2      	; 0x331e <start_horizontal_speed_control_right+0x242>
    331c:	9c cf       	rjmp	.-200    	; 0x3256 <start_horizontal_speed_control_right+0x17a>
		*pwm_right -= 30;
    331e:	2e 51       	subi	r18, 0x1E	; 30
    3320:	30 40       	sbci	r19, 0x00	; 0
    3322:	31 83       	std	Z+1, r19	; 0x01
    3324:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3326:	8e ef       	ldi	r24, 0xFE	; 254
    3328:	20 30       	cpi	r18, 0x00	; 0
    332a:	38 07       	cpc	r19, r24
    332c:	0c f0       	brlt	.+2      	; 0x3330 <start_horizontal_speed_control_right+0x254>
    332e:	93 cf       	rjmp	.-218    	; 0x3256 <start_horizontal_speed_control_right+0x17a>
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	9e ef       	ldi	r25, 0xFE	; 254
    3334:	91 83       	std	Z+1, r25	; 0x01
    3336:	80 83       	st	Z, r24
    3338:	8e cf       	rjmp	.-228    	; 0x3256 <start_horizontal_speed_control_right+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    333a:	21 50       	subi	r18, 0x01	; 1
    333c:	30 40       	sbci	r19, 0x00	; 0
    333e:	31 83       	std	Z+1, r19	; 0x01
    3340:	20 83       	st	Z, r18
    3342:	78 cf       	rjmp	.-272    	; 0x3234 <start_horizontal_speed_control_right+0x158>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    3344:	10 92 ff 02 	sts	0x02FF, r1
    3348:	10 92 00 03 	sts	0x0300, r1
    334c:	10 92 01 03 	sts	0x0301, r1
    3350:	10 92 02 03 	sts	0x0302, r1
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    335a:	14 e0       	ldi	r17, 0x04	; 4
    335c:	55 95       	asr	r21
    335e:	47 95       	ror	r20
    3360:	37 95       	ror	r19
    3362:	27 95       	ror	r18
    3364:	1a 95       	dec	r17
    3366:	d1 f7       	brne	.-12     	; 0x335c <start_horizontal_speed_control_right+0x280>
    3368:	57 cf       	rjmp	.-338    	; 0x3218 <start_horizontal_speed_control_right+0x13c>

0000336a <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    336a:	cf 92       	push	r12
    336c:	df 92       	push	r13
    336e:	ef 92       	push	r14
    3370:	ff 92       	push	r15
    3372:	0f 93       	push	r16
    3374:	1f 93       	push	r17
    3376:	cf 93       	push	r28
    3378:	df 93       	push	r29
    337a:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    337c:	80 81       	ld	r24, Z
    337e:	91 81       	ldd	r25, Z+1	; 0x01
    3380:	00 97       	sbiw	r24, 0x00	; 0
    3382:	09 f4       	brne	.+2      	; 0x3386 <start_horizontal_speed_control_left+0x1c>
    3384:	b8 c0       	rjmp	.+368    	; 0x34f6 <start_horizontal_speed_control_left+0x18c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    3386:	c0 91 c8 04 	lds	r28, 0x04C8
    338a:	d0 91 c9 04 	lds	r29, 0x04C9
    338e:	d0 93 74 05 	sts	0x0574, r29
    3392:	c0 93 73 05 	sts	0x0573, r28
	if(*pwm_left >= 0) {
    3396:	80 81       	ld	r24, Z
    3398:	91 81       	ldd	r25, Z+1	; 0x01
    339a:	97 fd       	sbrc	r25, 7
    339c:	cd c0       	rjmp	.+410    	; 0x3538 <start_horizontal_speed_control_left+0x1ce>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    339e:	20 91 ef 02 	lds	r18, 0x02EF
    33a2:	30 91 f0 02 	lds	r19, 0x02F0
    33a6:	dc 01       	movw	r26, r24
    33a8:	a2 1b       	sub	r26, r18
    33aa:	b3 0b       	sbc	r27, r19
    33ac:	b0 93 c9 04 	sts	0x04C9, r27
    33b0:	a0 93 c8 04 	sts	0x04C8, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    33b4:	c0 90 07 03 	lds	r12, 0x0307
    33b8:	d0 90 08 03 	lds	r13, 0x0308
    33bc:	ca 0e       	add	r12, r26
    33be:	db 1e       	adc	r13, r27
    33c0:	d0 92 08 03 	sts	0x0308, r13
    33c4:	c0 92 07 03 	sts	0x0307, r12

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    33c8:	81 e4       	ldi	r24, 0x41	; 65
    33ca:	c8 16       	cp	r12, r24
    33cc:	86 e0       	ldi	r24, 0x06	; 6
    33ce:	d8 06       	cpc	r13, r24
    33d0:	0c f4       	brge	.+2      	; 0x33d4 <start_horizontal_speed_control_left+0x6a>
    33d2:	9e c0       	rjmp	.+316    	; 0x3510 <start_horizontal_speed_control_left+0x1a6>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    33d4:	80 e4       	ldi	r24, 0x40	; 64
    33d6:	96 e0       	ldi	r25, 0x06	; 6
    33d8:	90 93 08 03 	sts	0x0308, r25
    33dc:	80 93 07 03 	sts	0x0307, r24
    33e0:	10 e8       	ldi	r17, 0x80	; 128
    33e2:	c1 2e       	mov	r12, r17
    33e4:	1c e0       	ldi	r17, 0x0C	; 12
    33e6:	d1 2e       	mov	r13, r17
    33e8:	e1 2c       	mov	r14, r1
    33ea:	f1 2c       	mov	r15, r1
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    33ec:	00 81       	ld	r16, Z
    33ee:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    33f0:	cd 01       	movw	r24, r26
    33f2:	88 0f       	add	r24, r24
    33f4:	99 1f       	adc	r25, r25
    33f6:	8a 0f       	add	r24, r26
    33f8:	9b 1f       	adc	r25, r27
    33fa:	9c 01       	movw	r18, r24
    33fc:	22 0f       	add	r18, r18
    33fe:	33 1f       	adc	r19, r19
    3400:	22 0f       	add	r18, r18
    3402:	33 1f       	adc	r19, r19
    3404:	28 0f       	add	r18, r24
    3406:	39 1f       	adc	r19, r25
    3408:	44 27       	eor	r20, r20
    340a:	37 fd       	sbrc	r19, 7
    340c:	40 95       	com	r20
    340e:	54 2f       	mov	r21, r20
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    3410:	b8 01       	movw	r22, r16
    3412:	66 0f       	add	r22, r22
    3414:	77 1f       	adc	r23, r23
    3416:	66 0f       	add	r22, r22
    3418:	77 1f       	adc	r23, r23
    341a:	66 0f       	add	r22, r22
    341c:	77 1f       	adc	r23, r23
    341e:	88 27       	eor	r24, r24
    3420:	77 fd       	sbrc	r23, 7
    3422:	80 95       	com	r24
    3424:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    3426:	26 0f       	add	r18, r22
    3428:	37 1f       	adc	r19, r23
    342a:	48 1f       	adc	r20, r24
    342c:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    342e:	ac 1b       	sub	r26, r28
    3430:	bd 0b       	sbc	r27, r29
    3432:	cd 01       	movw	r24, r26
    3434:	88 0f       	add	r24, r24
    3436:	99 1f       	adc	r25, r25
    3438:	8a 0f       	add	r24, r26
    343a:	9b 1f       	adc	r25, r27
    343c:	aa 27       	eor	r26, r26
    343e:	97 fd       	sbrc	r25, 7
    3440:	a0 95       	com	r26
    3442:	ba 2f       	mov	r27, r26
    3444:	28 0f       	add	r18, r24
    3446:	39 1f       	adc	r19, r25
    3448:	4a 1f       	adc	r20, r26
    344a:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);
    344c:	2c 0d       	add	r18, r12
    344e:	3d 1d       	adc	r19, r13
    3450:	4e 1d       	adc	r20, r14
    3452:	5f 1d       	adc	r21, r15
    3454:	20 93 03 03 	sts	0x0303, r18
    3458:	30 93 04 03 	sts	0x0304, r19
    345c:	40 93 05 03 	sts	0x0305, r20
    3460:	50 93 06 03 	sts	0x0306, r21

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3464:	57 fd       	sbrc	r21, 7
    3466:	7a c0       	rjmp	.+244    	; 0x355c <start_horizontal_speed_control_left+0x1f2>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    3468:	12 16       	cp	r1, r18
    346a:	13 06       	cpc	r1, r19
    346c:	14 06       	cpc	r1, r20
    346e:	15 06       	cpc	r1, r21
    3470:	0c f0       	brlt	.+2      	; 0x3474 <start_horizontal_speed_control_left+0x10a>
    3472:	81 c0       	rjmp	.+258    	; 0x3576 <start_horizontal_speed_control_left+0x20c>
    3474:	17 fd       	sbrc	r17, 7
    3476:	ad c0       	rjmp	.+346    	; 0x35d2 <start_horizontal_speed_control_left+0x268>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    3478:	21 3c       	cpi	r18, 0xC1	; 193
    347a:	8d e5       	ldi	r24, 0x5D	; 93
    347c:	38 07       	cpc	r19, r24
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	48 07       	cpc	r20, r24
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	58 07       	cpc	r21, r24
    3486:	0c f4       	brge	.+2      	; 0x348a <start_horizontal_speed_control_left+0x120>
    3488:	76 c0       	rjmp	.+236    	; 0x3576 <start_horizontal_speed_control_left+0x20c>
    348a:	80 ec       	ldi	r24, 0xC0	; 192
    348c:	9d e5       	ldi	r25, 0x5D	; 93
    348e:	a0 e0       	ldi	r26, 0x00	; 0
    3490:	b0 e0       	ldi	r27, 0x00	; 0
    3492:	80 93 03 03 	sts	0x0303, r24
    3496:	90 93 04 03 	sts	0x0304, r25
    349a:	a0 93 05 03 	sts	0x0305, r26
    349e:	b0 93 06 03 	sts	0x0306, r27
    34a2:	2c ed       	ldi	r18, 0xDC	; 220
    34a4:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    34a6:	31 83       	std	Z+1, r19	; 0x01
    34a8:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    34aa:	80 91 e9 02 	lds	r24, 0x02E9
    34ae:	90 91 ea 02 	lds	r25, 0x02EA
    34b2:	18 16       	cp	r1, r24
    34b4:	19 06       	cpc	r1, r25
    34b6:	0c f0       	brlt	.+2      	; 0x34ba <start_horizontal_speed_control_left+0x150>
    34b8:	87 c0       	rjmp	.+270    	; 0x35c8 <start_horizontal_speed_control_left+0x25e>
		*pwm_left += 1;
    34ba:	2f 5f       	subi	r18, 0xFF	; 255
    34bc:	3f 4f       	sbci	r19, 0xFF	; 255
    34be:	31 83       	std	Z+1, r19	; 0x01
    34c0:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    34c2:	12 16       	cp	r1, r18
    34c4:	13 06       	cpc	r1, r19
    34c6:	0c f0       	brlt	.+2      	; 0x34ca <start_horizontal_speed_control_left+0x160>
    34c8:	6d c0       	rjmp	.+218    	; 0x35a4 <start_horizontal_speed_control_left+0x23a>
		*pwm_left += 30;
    34ca:	22 5e       	subi	r18, 0xE2	; 226
    34cc:	3f 4f       	sbci	r19, 0xFF	; 255
    34ce:	31 83       	std	Z+1, r19	; 0x01
    34d0:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    34d2:	82 e0       	ldi	r24, 0x02	; 2
    34d4:	21 30       	cpi	r18, 0x01	; 1
    34d6:	38 07       	cpc	r19, r24
    34d8:	0c f4       	brge	.+2      	; 0x34dc <start_horizontal_speed_control_left+0x172>
    34da:	6c c0       	rjmp	.+216    	; 0x35b4 <start_horizontal_speed_control_left+0x24a>
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	92 e0       	ldi	r25, 0x02	; 2
    34e0:	91 83       	std	Z+1, r25	; 0x01
    34e2:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    34e4:	df 91       	pop	r29
    34e6:	cf 91       	pop	r28
    34e8:	1f 91       	pop	r17
    34ea:	0f 91       	pop	r16
    34ec:	ff 90       	pop	r15
    34ee:	ef 90       	pop	r14
    34f0:	df 90       	pop	r13
    34f2:	cf 90       	pop	r12
    34f4:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    34f6:	10 92 08 03 	sts	0x0308, r1
    34fa:	10 92 07 03 	sts	0x0307, r1
		delta_left_speed_current = 0;
    34fe:	10 92 c9 04 	sts	0x04C9, r1
    3502:	10 92 c8 04 	sts	0x04C8, r1
		delta_left_speed_prev = 0;
    3506:	10 92 74 05 	sts	0x0574, r1
    350a:	10 92 73 05 	sts	0x0573, r1
		return;
    350e:	ea cf       	rjmp	.-44     	; 0x34e4 <start_horizontal_speed_control_left+0x17a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3510:	80 ec       	ldi	r24, 0xC0	; 192
    3512:	c8 16       	cp	r12, r24
    3514:	89 ef       	ldi	r24, 0xF9	; 249
    3516:	d8 06       	cpc	r13, r24
    3518:	d4 f4       	brge	.+52     	; 0x354e <start_horizontal_speed_control_left+0x1e4>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    351a:	80 ec       	ldi	r24, 0xC0	; 192
    351c:	99 ef       	ldi	r25, 0xF9	; 249
    351e:	90 93 08 03 	sts	0x0308, r25
    3522:	80 93 07 03 	sts	0x0307, r24
    3526:	60 e8       	ldi	r22, 0x80	; 128
    3528:	c6 2e       	mov	r12, r22
    352a:	63 ef       	ldi	r22, 0xF3	; 243
    352c:	d6 2e       	mov	r13, r22
    352e:	6f ef       	ldi	r22, 0xFF	; 255
    3530:	e6 2e       	mov	r14, r22
    3532:	6f ef       	ldi	r22, 0xFF	; 255
    3534:	f6 2e       	mov	r15, r22
    3536:	5a cf       	rjmp	.-332    	; 0x33ec <start_horizontal_speed_control_left+0x82>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    3538:	a0 91 ef 02 	lds	r26, 0x02EF
    353c:	b0 91 f0 02 	lds	r27, 0x02F0
    3540:	a8 0f       	add	r26, r24
    3542:	b9 1f       	adc	r27, r25
    3544:	b0 93 c9 04 	sts	0x04C9, r27
    3548:	a0 93 c8 04 	sts	0x04C8, r26
    354c:	33 cf       	rjmp	.-410    	; 0x33b4 <start_horizontal_speed_control_left+0x4a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    354e:	cc 0c       	add	r12, r12
    3550:	dd 1c       	adc	r13, r13
    3552:	ee 24       	eor	r14, r14
    3554:	d7 fc       	sbrc	r13, 7
    3556:	e0 94       	com	r14
    3558:	fe 2c       	mov	r15, r14
    355a:	48 cf       	rjmp	.-368    	; 0x33ec <start_horizontal_speed_control_left+0x82>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    355c:	17 fd       	sbrc	r17, 7
    355e:	0b c0       	rjmp	.+22     	; 0x3576 <start_horizontal_speed_control_left+0x20c>
		pwm_left_speed_controller = 0;
    3560:	10 92 03 03 	sts	0x0303, r1
    3564:	10 92 04 03 	sts	0x0304, r1
    3568:	10 92 05 03 	sts	0x0305, r1
    356c:	10 92 06 03 	sts	0x0306, r1
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3576:	20 34       	cpi	r18, 0x40	; 64
    3578:	82 ea       	ldi	r24, 0xA2	; 162
    357a:	38 07       	cpc	r19, r24
    357c:	8f ef       	ldi	r24, 0xFF	; 255
    357e:	48 07       	cpc	r20, r24
    3580:	8f ef       	ldi	r24, 0xFF	; 255
    3582:	58 07       	cpc	r21, r24
    3584:	8c f5       	brge	.+98     	; 0x35e8 <start_horizontal_speed_control_left+0x27e>
    3586:	80 e4       	ldi	r24, 0x40	; 64
    3588:	92 ea       	ldi	r25, 0xA2	; 162
    358a:	af ef       	ldi	r26, 0xFF	; 255
    358c:	bf ef       	ldi	r27, 0xFF	; 255
    358e:	80 93 03 03 	sts	0x0303, r24
    3592:	90 93 04 03 	sts	0x0304, r25
    3596:	a0 93 05 03 	sts	0x0305, r26
    359a:	b0 93 06 03 	sts	0x0306, r27
    359e:	24 e2       	ldi	r18, 0x24	; 36
    35a0:	3a ef       	ldi	r19, 0xFA	; 250
    35a2:	81 cf       	rjmp	.-254    	; 0x34a6 <start_horizontal_speed_control_left+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    35a4:	21 15       	cp	r18, r1
    35a6:	31 05       	cpc	r19, r1
    35a8:	09 f4       	brne	.+2      	; 0x35ac <start_horizontal_speed_control_left+0x242>
    35aa:	9c cf       	rjmp	.-200    	; 0x34e4 <start_horizontal_speed_control_left+0x17a>
		*pwm_left -= 30;
    35ac:	2e 51       	subi	r18, 0x1E	; 30
    35ae:	30 40       	sbci	r19, 0x00	; 0
    35b0:	31 83       	std	Z+1, r19	; 0x01
    35b2:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    35b4:	8e ef       	ldi	r24, 0xFE	; 254
    35b6:	20 30       	cpi	r18, 0x00	; 0
    35b8:	38 07       	cpc	r19, r24
    35ba:	0c f0       	brlt	.+2      	; 0x35be <start_horizontal_speed_control_left+0x254>
    35bc:	93 cf       	rjmp	.-218    	; 0x34e4 <start_horizontal_speed_control_left+0x17a>
    35be:	80 e0       	ldi	r24, 0x00	; 0
    35c0:	9e ef       	ldi	r25, 0xFE	; 254
    35c2:	91 83       	std	Z+1, r25	; 0x01
    35c4:	80 83       	st	Z, r24
    35c6:	8e cf       	rjmp	.-228    	; 0x34e4 <start_horizontal_speed_control_left+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    35c8:	21 50       	subi	r18, 0x01	; 1
    35ca:	30 40       	sbci	r19, 0x00	; 0
    35cc:	31 83       	std	Z+1, r19	; 0x01
    35ce:	20 83       	st	Z, r18
    35d0:	78 cf       	rjmp	.-272    	; 0x34c2 <start_horizontal_speed_control_left+0x158>
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    35d2:	10 92 03 03 	sts	0x0303, r1
    35d6:	10 92 04 03 	sts	0x0304, r1
    35da:	10 92 05 03 	sts	0x0305, r1
    35de:	10 92 06 03 	sts	0x0306, r1
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    35e8:	04 e0       	ldi	r16, 0x04	; 4
    35ea:	55 95       	asr	r21
    35ec:	47 95       	ror	r20
    35ee:	37 95       	ror	r19
    35f0:	27 95       	ror	r18
    35f2:	0a 95       	dec	r16
    35f4:	d1 f7       	brne	.-12     	; 0x35ea <start_horizontal_speed_control_left+0x280>
    35f6:	57 cf       	rjmp	.-338    	; 0x34a6 <start_horizontal_speed_control_left+0x13c>

000035f8 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    35f8:	85 b7       	in	r24, 0x35	; 53
    35fa:	80 61       	ori	r24, 0x10	; 16
    35fc:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    35fe:	8f ef       	ldi	r24, 0xFF	; 255
    3600:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    3602:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    3604:	97 ef       	ldi	r25, 0xF7	; 247
    3606:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    3608:	90 ee       	ldi	r25, 0xE0	; 224
    360a:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    360c:	90 ef       	ldi	r25, 0xF0	; 240
    360e:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    3610:	90 eb       	ldi	r25, 0xB0	; 176
    3612:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    3614:	9c ef       	ldi	r25, 0xFC	; 252
    3616:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    3618:	93 e0       	ldi	r25, 0x03	; 3
    361a:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    361c:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    361e:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    3620:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    3622:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    3624:	80 91 4b 04 	lds	r24, 0x044B
    3628:	88 23       	and	r24, r24
    362a:	e1 f0       	breq	.+56     	; 0x3664 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    362c:	81 30       	cpi	r24, 0x01	; 1
    362e:	d1 f0       	breq	.+52     	; 0x3664 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3630:	82 30       	cpi	r24, 0x02	; 2
    3632:	51 f1       	breq	.+84     	; 0x3688 <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    3634:	9f ef       	ldi	r25, 0xFF	; 255
    3636:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    363a:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    363e:	9f e0       	ldi	r25, 0x0F	; 15
    3640:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    3644:	88 23       	and	r24, r24
    3646:	a9 f4       	brne	.+42     	; 0x3672 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    3648:	90 91 05 01 	lds	r25, 0x0105
    364c:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    3650:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    3654:	9f ef       	ldi	r25, 0xFF	; 255
    3656:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    365a:	88 23       	and	r24, r24
    365c:	29 f4       	brne	.+10     	; 0x3668 <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    365e:	10 92 0b 01 	sts	0x010B, r1
    3662:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    3664:	14 ba       	out	0x14, r1	; 20
    3666:	e6 cf       	rjmp	.-52     	; 0x3634 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    3668:	81 30       	cpi	r24, 0x01	; 1
    366a:	c9 f3       	breq	.-14     	; 0x365e <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    366c:	82 30       	cpi	r24, 0x02	; 2
    366e:	41 f0       	breq	.+16     	; 0x3680 <initPortsIO+0x88>
    3670:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    3672:	81 30       	cpi	r24, 0x01	; 1
    3674:	11 f0       	breq	.+4      	; 0x367a <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    3676:	82 30       	cpi	r24, 0x02	; 2
    3678:	59 f7       	brne	.-42     	; 0x3650 <initPortsIO+0x58>
		PORTJ = 0x0F;
    367a:	90 93 05 01 	sts	0x0105, r25
    367e:	e8 cf       	rjmp	.-48     	; 0x3650 <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    3680:	87 ef       	ldi	r24, 0xF7	; 247
    3682:	80 93 0b 01 	sts	0x010B, r24
    3686:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    3688:	98 e0       	ldi	r25, 0x08	; 8
    368a:	94 bb       	out	0x14, r25	; 20
    368c:	d3 cf       	rjmp	.-90     	; 0x3634 <initPortsIO+0x3c>

0000368e <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    368e:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    3692:	10 92 bc 00 	sts	0x00BC, r1
}
    3696:	08 95       	ret

00003698 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    3698:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    369a:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    369c:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    36a6:	08 95       	ret

000036a8 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    36a8:	94 ea       	ldi	r25, 0xA4	; 164
    36aa:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    36ae:	90 91 bc 00 	lds	r25, 0x00BC
    36b2:	97 ff       	sbrs	r25, 7
    36b4:	fc cf       	rjmp	.-8      	; 0x36ae <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    36b6:	90 91 b9 00 	lds	r25, 0x00B9
    36ba:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    36bc:	98 30       	cpi	r25, 0x08	; 8
    36be:	21 f0       	breq	.+8      	; 0x36c8 <i2c_start+0x20>
    36c0:	90 31       	cpi	r25, 0x10	; 16
    36c2:	11 f0       	breq	.+4      	; 0x36c8 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    36c4:	81 e0       	ldi	r24, 0x01	; 1
    36c6:	08 95       	ret
	}

	// send device address
	TWDR = address;
    36c8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    36cc:	84 e8       	ldi	r24, 0x84	; 132
    36ce:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    36d2:	80 91 bc 00 	lds	r24, 0x00BC
    36d6:	87 ff       	sbrs	r24, 7
    36d8:	fc cf       	rjmp	.-8      	; 0x36d2 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    36da:	90 91 b9 00 	lds	r25, 0x00B9
    36de:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    36e0:	98 31       	cpi	r25, 0x18	; 24
    36e2:	21 f0       	breq	.+8      	; 0x36ec <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	90 34       	cpi	r25, 0x40	; 64
    36e8:	19 f0       	breq	.+6      	; 0x36f0 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    36ea:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    36ec:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    36ee:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	08 95       	ret

000036f4 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    36f4:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    36f6:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    36f8:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    36fa:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    36fe:	90 91 bc 00 	lds	r25, 0x00BC
    3702:	97 ff       	sbrs	r25, 7
    3704:	fc cf       	rjmp	.-8      	; 0x36fe <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3706:	90 91 b9 00 	lds	r25, 0x00B9
    370a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    370c:	98 30       	cpi	r25, 0x08	; 8
    370e:	11 f0       	breq	.+4      	; 0x3714 <i2c_start_wait+0x20>
    3710:	90 31       	cpi	r25, 0x10	; 16
    3712:	99 f7       	brne	.-26     	; 0x36fa <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    3714:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3718:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    371c:	90 91 bc 00 	lds	r25, 0x00BC
    3720:	97 ff       	sbrs	r25, 7
    3722:	fc cf       	rjmp	.-8      	; 0x371c <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3724:	90 91 b9 00 	lds	r25, 0x00B9
    3728:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    372a:	90 32       	cpi	r25, 0x20	; 32
    372c:	19 f0       	breq	.+6      	; 0x3734 <i2c_start_wait+0x40>
    372e:	98 35       	cpi	r25, 0x58	; 88
    3730:	09 f0       	breq	.+2      	; 0x3734 <i2c_start_wait+0x40>
    3732:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3734:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    3738:	90 91 bc 00 	lds	r25, 0x00BC
    373c:	94 fd       	sbrc	r25, 4
    373e:	fc cf       	rjmp	.-8      	; 0x3738 <i2c_start_wait+0x44>
    3740:	dc cf       	rjmp	.-72     	; 0x36fa <i2c_start_wait+0x6>

00003742 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3742:	94 ea       	ldi	r25, 0xA4	; 164
    3744:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3748:	90 91 bc 00 	lds	r25, 0x00BC
    374c:	97 ff       	sbrs	r25, 7
    374e:	fc cf       	rjmp	.-8      	; 0x3748 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3750:	90 91 b9 00 	lds	r25, 0x00B9
    3754:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3756:	98 30       	cpi	r25, 0x08	; 8
    3758:	21 f0       	breq	.+8      	; 0x3762 <i2c_rep_start+0x20>
    375a:	90 31       	cpi	r25, 0x10	; 16
    375c:	11 f0       	breq	.+4      	; 0x3762 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    375e:	81 e0       	ldi	r24, 0x01	; 1
    3760:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3762:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3766:	84 e8       	ldi	r24, 0x84	; 132
    3768:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    376c:	80 91 bc 00 	lds	r24, 0x00BC
    3770:	87 ff       	sbrs	r24, 7
    3772:	fc cf       	rjmp	.-8      	; 0x376c <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3774:	90 91 b9 00 	lds	r25, 0x00B9
    3778:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    377a:	98 31       	cpi	r25, 0x18	; 24
    377c:	21 f0       	breq	.+8      	; 0x3786 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	90 34       	cpi	r25, 0x40	; 64
    3782:	19 f0       	breq	.+6      	; 0x378a <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    3784:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3786:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    3788:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	08 95       	ret

0000378e <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    378e:	84 e9       	ldi	r24, 0x94	; 148
    3790:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    3794:	80 91 bc 00 	lds	r24, 0x00BC
    3798:	84 fd       	sbrc	r24, 4
    379a:	fc cf       	rjmp	.-8      	; 0x3794 <i2c_stop+0x6>

}/* i2c_stop */
    379c:	08 95       	ret

0000379e <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    379e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    37a2:	84 e8       	ldi	r24, 0x84	; 132
    37a4:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    37a8:	80 91 bc 00 	lds	r24, 0x00BC
    37ac:	87 ff       	sbrs	r24, 7
    37ae:	fc cf       	rjmp	.-8      	; 0x37a8 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    37b0:	90 91 b9 00 	lds	r25, 0x00B9
    37b4:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	98 32       	cpi	r25, 0x28	; 40
    37ba:	09 f0       	breq	.+2      	; 0x37be <i2c_write+0x20>
	return 0;

}/* i2c_write */
    37bc:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    37be:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    37c0:	08 95       	ret

000037c2 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    37c2:	84 ec       	ldi	r24, 0xC4	; 196
    37c4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    37c8:	80 91 bc 00 	lds	r24, 0x00BC
    37cc:	87 ff       	sbrs	r24, 7
    37ce:	fc cf       	rjmp	.-8      	; 0x37c8 <i2c_readAck+0x6>

    return TWDR;
    37d0:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    37d4:	08 95       	ret

000037d6 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    37d6:	84 e8       	ldi	r24, 0x84	; 132
    37d8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    37dc:	80 91 bc 00 	lds	r24, 0x00BC
    37e0:	87 ff       	sbrs	r24, 7
    37e2:	fc cf       	rjmp	.-8      	; 0x37dc <i2c_readNak+0x6>
	
    return TWDR;
    37e4:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    37e8:	08 95       	ret

000037ea <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    37ea:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    37ee:	80 e1       	ldi	r24, 0x10	; 16
    37f0:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    37f4:	e0 ec       	ldi	r30, 0xC0	; 192
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	80 81       	ld	r24, Z
    37fa:	82 60       	ori	r24, 0x02	; 2
    37fc:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    37fe:	e1 ec       	ldi	r30, 0xC1	; 193
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	88 69       	ori	r24, 0x98	; 152
    3806:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    3808:	e2 ec       	ldi	r30, 0xC2	; 194
    380a:	f0 e0       	ldi	r31, 0x00	; 0
    380c:	80 81       	ld	r24, Z
    380e:	86 60       	ori	r24, 0x06	; 6
    3810:	80 83       	st	Z, r24



}
    3812:	08 95       	ret

00003814 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    3814:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    3818:	80 e1       	ldi	r24, 0x10	; 16
    381a:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    381e:	e8 ec       	ldi	r30, 0xC8	; 200
    3820:	f0 e0       	ldi	r31, 0x00	; 0
    3822:	80 81       	ld	r24, Z
    3824:	82 60       	ori	r24, 0x02	; 2
    3826:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    3828:	e9 ec       	ldi	r30, 0xC9	; 201
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	80 81       	ld	r24, Z
    382e:	88 61       	ori	r24, 0x18	; 24
    3830:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    3832:	ea ec       	ldi	r30, 0xCA	; 202
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	80 81       	ld	r24, Z
    3838:	86 60       	ori	r24, 0x06	; 6
    383a:	80 83       	st	Z, r24

}
    383c:	08 95       	ret

0000383e <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    383e:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    3842:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    3846:	10 92 c2 00 	sts	0x00C2, r1

}
    384a:	08 95       	ret

0000384c <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    384c:	90 91 c0 00 	lds	r25, 0x00C0
    3850:	95 ff       	sbrs	r25, 5
    3852:	fc cf       	rjmp	.-8      	; 0x384c <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    3854:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    3858:	66 23       	and	r22, r22
    385a:	21 f0       	breq	.+8      	; 0x3864 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    385c:	80 91 c0 00 	lds	r24, 0x00C0
    3860:	86 ff       	sbrs	r24, 6
    3862:	fc cf       	rjmp	.-8      	; 0x385c <usart0Transmit+0x10>
    3864:	08 95       	ret

00003866 <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    3866:	90 91 c8 00 	lds	r25, 0x00C8
    386a:	95 ff       	sbrs	r25, 5
    386c:	fc cf       	rjmp	.-8      	; 0x3866 <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    386e:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    3872:	66 23       	and	r22, r22
    3874:	21 f0       	breq	.+8      	; 0x387e <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    3876:	80 91 c8 00 	lds	r24, 0x00C8
    387a:	86 ff       	sbrs	r24, 6
    387c:	fc cf       	rjmp	.-8      	; 0x3876 <usart1Transmit+0x10>
    387e:	08 95       	ret

00003880 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    3880:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    3884:	80 95       	com	r24
	} else {
		return 1;
	}

}
    3886:	88 1f       	adc	r24, r24
    3888:	88 27       	eor	r24, r24
    388a:	88 1f       	adc	r24, r24
    388c:	08 95       	ret

0000388e <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    388e:	87 e9       	ldi	r24, 0x97	; 151
    3890:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    3892:	20 91 c0 00 	lds	r18, 0x00C0
    3896:	27 fd       	sbrc	r18, 7
    3898:	07 c0       	rjmp	.+14     	; 0x38a8 <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    389a:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    389c:	d1 f7       	brne	.-12     	; 0x3892 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	80 93 1a 03 	sts	0x031A, r24
			return 0;				// timeout
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    38a8:	80 91 c6 00 	lds	r24, 0x00C6

}
    38ac:	08 95       	ret

000038ae <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    38ae:	1f 92       	push	r1
    38b0:	0f 92       	push	r0
    38b2:	0f b6       	in	r0, 0x3f	; 63
    38b4:	0f 92       	push	r0
    38b6:	0b b6       	in	r0, 0x3b	; 59
    38b8:	0f 92       	push	r0
    38ba:	11 24       	eor	r1, r1
    38bc:	2f 93       	push	r18
    38be:	3f 93       	push	r19
    38c0:	4f 93       	push	r20
    38c2:	5f 93       	push	r21
    38c4:	6f 93       	push	r22
    38c6:	7f 93       	push	r23
    38c8:	8f 93       	push	r24
    38ca:	9f 93       	push	r25
    38cc:	af 93       	push	r26
    38ce:	bf 93       	push	r27
    38d0:	ef 93       	push	r30
    38d2:	ff 93       	push	r31

	char receivedByte = UDR0;
    38d4:	80 91 c6 00 	lds	r24, 0x00C6

	if(currentSelector==15) {
    38d8:	90 91 48 04 	lds	r25, 0x0448
    38dc:	9f 30       	cpi	r25, 0x0F	; 15
    38de:	21 f1       	breq	.+72     	; 0x3928 <__vector_25+0x7a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    38e0:	90 91 11 02 	lds	r25, 0x0211
    38e4:	99 23       	and	r25, r25
    38e6:	d9 f4       	brne	.+54     	; 0x391e <__vector_25+0x70>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    38e8:	90 91 1f 04 	lds	r25, 0x041F
    38ec:	91 30       	cpi	r25, 0x01	; 1
    38ee:	09 f4       	brne	.+2      	; 0x38f2 <__vector_25+0x44>
    38f0:	60 c0       	rjmp	.+192    	; 0x39b2 <__vector_25+0x104>
    38f2:	92 30       	cpi	r25, 0x02	; 2
    38f4:	09 f4       	brne	.+2      	; 0x38f8 <__vector_25+0x4a>
    38f6:	43 c0       	rjmp	.+134    	; 0x397e <__vector_25+0xd0>
			}
		}

	}

}
    38f8:	ff 91       	pop	r31
    38fa:	ef 91       	pop	r30
    38fc:	bf 91       	pop	r27
    38fe:	af 91       	pop	r26
    3900:	9f 91       	pop	r25
    3902:	8f 91       	pop	r24
    3904:	7f 91       	pop	r23
    3906:	6f 91       	pop	r22
    3908:	5f 91       	pop	r21
    390a:	4f 91       	pop	r20
    390c:	3f 91       	pop	r19
    390e:	2f 91       	pop	r18
    3910:	0f 90       	pop	r0
    3912:	0b be       	out	0x3b, r0	; 59
    3914:	0f 90       	pop	r0
    3916:	0f be       	out	0x3f, r0	; 63
    3918:	0f 90       	pop	r0
    391a:	1f 90       	pop	r1
    391c:	18 95       	reti
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    391e:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    3922:	80 93 1f 04 	sts	0x041F, r24
    3926:	e8 cf       	rjmp	.-48     	; 0x38f8 <__vector_25+0x4a>

	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
    3928:	8b 32       	cpi	r24, 0x2B	; 43
    392a:	09 f4       	brne	.+2      	; 0x392e <__vector_25+0x80>
    392c:	4c c0       	rjmp	.+152    	; 0x39c6 <__vector_25+0x118>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    392e:	8d 32       	cpi	r24, 0x2D	; 45
    3930:	f1 f0       	breq	.+60     	; 0x396e <__vector_25+0xc0>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    3932:	87 36       	cpi	r24, 0x67	; 103
    3934:	09 f0       	breq	.+2      	; 0x3938 <__vector_25+0x8a>
    3936:	5b c0       	rjmp	.+182    	; 0x39ee <__vector_25+0x140>
			usart0Transmit(irCommand,1);
    3938:	90 91 23 04 	lds	r25, 0x0423

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    393c:	80 91 c0 00 	lds	r24, 0x00C0
    3940:	85 ff       	sbrs	r24, 5
    3942:	fc cf       	rjmp	.-8      	; 0x393c <__vector_25+0x8e>
	UDR0 = data;						// put data into buffer, sends the data
    3944:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3948:	80 91 c0 00 	lds	r24, 0x00C0
    394c:	86 ff       	sbrs	r24, 6
    394e:	fc cf       	rjmp	.-8      	; 0x3948 <__vector_25+0x9a>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    3950:	90 91 66 00 	lds	r25, 0x0066
    3954:	90 93 c5 04 	sts	0x04C5, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3958:	80 91 c0 00 	lds	r24, 0x00C0
    395c:	85 ff       	sbrs	r24, 5
    395e:	fc cf       	rjmp	.-8      	; 0x3958 <__vector_25+0xaa>
	UDR0 = data;						// put data into buffer, sends the data
    3960:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3964:	80 91 c0 00 	lds	r24, 0x00C0
    3968:	86 ff       	sbrs	r24, 6
    396a:	fc cf       	rjmp	.-8      	; 0x3964 <__vector_25+0xb6>
    396c:	c5 cf       	rjmp	.-118    	; 0x38f8 <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    396e:	80 91 c5 04 	lds	r24, 0x04C5
    3972:	88 23       	and	r24, r24
    3974:	d1 f1       	breq	.+116    	; 0x39ea <__vector_25+0x13c>
				currentOsccal--;	
    3976:	81 50       	subi	r24, 0x01	; 1
    3978:	80 93 c5 04 	sts	0x04C5, r24
    397c:	2b c0       	rjmp	.+86     	; 0x39d4 <__vector_25+0x126>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    397e:	40 91 21 04 	lds	r20, 0x0421
    3982:	44 23       	and	r20, r20
    3984:	51 f1       	breq	.+84     	; 0x39da <__vector_25+0x12c>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    3986:	41 30       	cpi	r20, 0x01	; 1
    3988:	09 f0       	breq	.+2      	; 0x398c <__vector_25+0xde>
    398a:	b6 cf       	rjmp	.-148    	; 0x38f8 <__vector_25+0x4a>
						rfAddress |= ((unsigned int)receivedByte<<8);
    398c:	38 2f       	mov	r19, r24
    398e:	20 e0       	ldi	r18, 0x00	; 0
    3990:	80 91 13 03 	lds	r24, 0x0313
    3994:	90 91 14 03 	lds	r25, 0x0314
    3998:	82 2b       	or	r24, r18
    399a:	93 2b       	or	r25, r19
    399c:	90 93 14 03 	sts	0x0314, r25
    39a0:	80 93 13 03 	sts	0x0313, r24
						addressReceived = 1;
    39a4:	40 93 20 04 	sts	0x0420, r20
						menuState = 0;
    39a8:	10 92 21 04 	sts	0x0421, r1
						chooseMenu = 1;
    39ac:	40 93 11 02 	sts	0x0211, r20
    39b0:	a3 cf       	rjmp	.-186    	; 0x38f8 <__vector_25+0x4a>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    39b2:	8a 3a       	cpi	r24, 0xAA	; 170
    39b4:	31 f1       	breq	.+76     	; 0x3a02 <__vector_25+0x154>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    39b6:	85 35       	cpi	r24, 0x55	; 85
    39b8:	09 f0       	breq	.+2      	; 0x39bc <__vector_25+0x10e>
    39ba:	9e cf       	rjmp	.-196    	; 0x38f8 <__vector_25+0x4a>
						chooseMenu = 1;
    39bc:	90 93 11 02 	sts	0x0211, r25
						menuChoice = 0;
    39c0:	10 92 1f 04 	sts	0x041F, r1
    39c4:	99 cf       	rjmp	.-206    	; 0x38f8 <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    39c6:	80 91 c5 04 	lds	r24, 0x04C5
    39ca:	8f 3f       	cpi	r24, 0xFF	; 255
    39cc:	e9 f0       	breq	.+58     	; 0x3a08 <__vector_25+0x15a>
				currentOsccal++;
    39ce:	8f 5f       	subi	r24, 0xFF	; 255
    39d0:	80 93 c5 04 	sts	0x04C5, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    39d4:	80 93 66 00 	sts	0x0066, r24
    39d8:	8f cf       	rjmp	.-226    	; 0x38f8 <__vector_25+0x4a>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    39da:	80 93 13 03 	sts	0x0313, r24
    39de:	10 92 14 03 	sts	0x0314, r1
						menuState = 1;
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	80 93 21 04 	sts	0x0421, r24
    39e8:	87 cf       	rjmp	.-242    	; 0x38f8 <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    39ea:	80 e0       	ldi	r24, 0x00	; 0
    39ec:	f3 cf       	rjmp	.-26     	; 0x39d4 <__vector_25+0x126>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    39ee:	83 37       	cpi	r24, 0x73	; 115
    39f0:	09 f0       	breq	.+2      	; 0x39f4 <__vector_25+0x146>
    39f2:	82 cf       	rjmp	.-252    	; 0x38f8 <__vector_25+0x4a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    39f4:	8d ef       	ldi	r24, 0xFD	; 253
    39f6:	9f e0       	ldi	r25, 0x0F	; 15
    39f8:	60 91 c5 04 	lds	r22, 0x04C5
    39fc:	0e 94 20 43 	call	0x8640	; 0x8640 <__eewr_byte_m2560>
    3a00:	7b cf       	rjmp	.-266    	; 0x38f8 <__vector_25+0x4a>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    3a02:	90 93 22 04 	sts	0x0422, r25
    3a06:	78 cf       	rjmp	.-272    	; 0x38f8 <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    3a08:	8f ef       	ldi	r24, 0xFF	; 255
    3a0a:	e4 cf       	rjmp	.-56     	; 0x39d4 <__vector_25+0x126>

00003a0c <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    3a0c:	86 b1       	in	r24, 0x06	; 6
    3a0e:	66 b1       	in	r22, 0x06	; 6
    3a10:	26 b1       	in	r18, 0x06	; 6
    3a12:	46 b1       	in	r20, 0x06	; 6
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	28 70       	andi	r18, 0x08	; 8
    3a18:	30 70       	andi	r19, 0x00	; 0
    3a1a:	35 95       	asr	r19
    3a1c:	27 95       	ror	r18
    3a1e:	35 95       	asr	r19
    3a20:	27 95       	ror	r18
    3a22:	35 95       	asr	r19
    3a24:	27 95       	ror	r18
    3a26:	22 0f       	add	r18, r18
    3a28:	33 1f       	adc	r19, r19
    3a2a:	70 e0       	ldi	r23, 0x00	; 0
    3a2c:	64 70       	andi	r22, 0x04	; 4
    3a2e:	70 70       	andi	r23, 0x00	; 0
    3a30:	75 95       	asr	r23
    3a32:	67 95       	ror	r22
    3a34:	75 95       	asr	r23
    3a36:	67 95       	ror	r22
    3a38:	26 0f       	add	r18, r22
    3a3a:	37 1f       	adc	r19, r23
    3a3c:	22 0f       	add	r18, r18
    3a3e:	33 1f       	adc	r19, r19
    3a40:	50 e0       	ldi	r21, 0x00	; 0
    3a42:	42 70       	andi	r20, 0x02	; 2
    3a44:	50 70       	andi	r21, 0x00	; 0
    3a46:	55 95       	asr	r21
    3a48:	47 95       	ror	r20
    3a4a:	24 0f       	add	r18, r20
    3a4c:	35 1f       	adc	r19, r21
    3a4e:	22 0f       	add	r18, r18
    3a50:	81 70       	andi	r24, 0x01	; 1
}
    3a52:	82 0f       	add	r24, r18
    3a54:	08 95       	ret

00003a56 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    3a56:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    3a58:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    3a5a:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    3a5c:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    3a60:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    3a64:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    3a68:	8e ef       	ldi	r24, 0xFE	; 254
    3a6a:	9f e0       	ldi	r25, 0x0F	; 15
    3a6c:	0e 94 f2 42 	call	0x85e4	; 0x85e4 <__eerd_word_m2560>
    3a70:	90 93 14 03 	sts	0x0314, r25
    3a74:	80 93 13 03 	sts	0x0313, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    3a78:	8d ef       	ldi	r24, 0xFD	; 253
    3a7a:	9f e0       	ldi	r25, 0x0F	; 15
    3a7c:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__eerd_byte_m2560>
    3a80:	80 93 c5 04 	sts	0x04C5, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    3a84:	98 2f       	mov	r25, r24
    3a86:	91 50       	subi	r25, 0x01	; 1
    3a88:	9e 3f       	cpi	r25, 0xFE	; 254
    3a8a:	e8 f5       	brcc	.+122    	; 0x3b06 <initPeripherals+0xb0>
		OSCCAL = currentOsccal;
    3a8c:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    3a90:	80 91 13 03 	lds	r24, 0x0313
    3a94:	90 91 14 03 	lds	r25, 0x0314
    3a98:	9c 01       	movw	r18, r24
    3a9a:	21 58       	subi	r18, 0x81	; 129
    3a9c:	3c 40       	sbci	r19, 0x0C	; 12
    3a9e:	23 30       	cpi	r18, 0x03	; 3
    3aa0:	31 05       	cpc	r19, r1
    3aa2:	08 f5       	brcc	.+66     	; 0x3ae6 <initPeripherals+0x90>
		hardwareRevision = HW_REV_3_0;
    3aa4:	10 92 4b 04 	sts	0x044B, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initCalibration();
    3aa8:	0e 94 d8 32 	call	0x65b0	; 0x65b0 <initCalibration>
	initPortsIO();
    3aac:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <initPortsIO>
	initAdc();
    3ab0:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <initAdc>
	initMotors();
    3ab4:	0e 94 1c 21 	call	0x4238	; 0x4238 <initMotors>
	initRGBleds();
    3ab8:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <initRGBleds>
	initSPI();
    3abc:	0e 94 aa 0b 	call	0x1754	; 0x1754 <initSPI>
	mirf_init();
    3ac0:	0e 94 93 0c 	call	0x1926	; 0x1926 <mirf_init>
	if(spiCommError==0) {
    3ac4:	80 91 16 03 	lds	r24, 0x0316
    3ac8:	88 23       	and	r24, r24
    3aca:	29 f4       	brne	.+10     	; 0x3ad6 <initPeripherals+0x80>
		rfFlags |= 1;
    3acc:	80 91 15 03 	lds	r24, 0x0315
    3ad0:	81 60       	ori	r24, 0x01	; 1
    3ad2:	80 93 15 03 	sts	0x0315, r24
	}
	initUsart0();
    3ad6:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <initUsart0>
	initAccelerometer();
    3ada:	0e 94 f5 37 	call	0x6fea	; 0x6fea <initAccelerometer>
	init_ir_remote_control();
    3ade:	0e 94 8c 11 	call	0x2318	; 0x2318 <init_ir_remote_control>

	sei();			// enable global interrupts
    3ae2:	78 94       	sei

	
}
    3ae4:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    3ae6:	2c e0       	ldi	r18, 0x0C	; 12
    3ae8:	80 38       	cpi	r24, 0x80	; 128
    3aea:	92 07       	cpc	r25, r18
    3aec:	21 f4       	brne	.+8      	; 0x3af6 <initPeripherals+0xa0>
		hardwareRevision = HW_REV_3_0_1;
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	80 93 4b 04 	sts	0x044B, r24
    3af4:	d9 cf       	rjmp	.-78     	; 0x3aa8 <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    3af6:	2c e0       	ldi	r18, 0x0C	; 12
    3af8:	84 38       	cpi	r24, 0x84	; 132
    3afa:	92 07       	cpc	r25, r18
    3afc:	a8 f2       	brcs	.-86     	; 0x3aa8 <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    3afe:	82 e0       	ldi	r24, 0x02	; 2
    3b00:	80 93 4b 04 	sts	0x044B, r24
    3b04:	d1 cf       	rjmp	.-94     	; 0x3aa8 <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    3b06:	60 91 66 00 	lds	r22, 0x0066
    3b0a:	60 93 c5 04 	sts	0x04C5, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    3b0e:	8d ef       	ldi	r24, 0xFD	; 253
    3b10:	9f e0       	ldi	r25, 0x0F	; 15
    3b12:	0e 94 20 43 	call	0x8640	; 0x8640 <__eewr_byte_m2560>
    3b16:	bc cf       	rjmp	.-136    	; 0x3a90 <initPeripherals+0x3a>

00003b18 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    3b18:	1f 92       	push	r1
    3b1a:	0f 92       	push	r0
    3b1c:	0f b6       	in	r0, 0x3f	; 63
    3b1e:	0f 92       	push	r0
    3b20:	11 24       	eor	r1, r1

}
    3b22:	0f 90       	pop	r0
    3b24:	0f be       	out	0x3f, r0	; 63
    3b26:	0f 90       	pop	r0
    3b28:	1f 90       	pop	r1
    3b2a:	18 95       	reti

00003b2c <sleep>:

void sleep(unsigned char seconds) {
    3b2c:	cf 93       	push	r28
    3b2e:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    3b30:	9e e1       	ldi	r25, 0x1E	; 30
    3b32:	89 9f       	mul	r24, r25
    3b34:	e0 01       	movw	r28, r0
    3b36:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    3b38:	80 91 68 00 	lds	r24, 0x0068
    3b3c:	8d 7f       	andi	r24, 0xFD	; 253
    3b3e:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    3b42:	80 91 6c 00 	lds	r24, 0x006C
    3b46:	8f 77       	andi	r24, 0x7F	; 127
    3b48:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    3b4c:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    3b4e:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    3b52:	80 91 7a 00 	lds	r24, 0x007A
    3b56:	80 61       	ori	r24, 0x10	; 16
    3b58:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    3b5c:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    3b60:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    3b64:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    3b68:	88 b3       	in	r24, 0x18	; 24
    3b6a:	87 60       	ori	r24, 0x07	; 7
    3b6c:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    3b6e:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    3b72:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    3b76:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    3b7a:	89 b3       	in	r24, 0x19	; 25
    3b7c:	87 60       	ori	r24, 0x07	; 7
    3b7e:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    3b80:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    3b84:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    3b88:	0e 94 1f 1c 	call	0x383e	; 0x383e <closeUsart>
	closeSPI();
    3b8c:	0e 94 b6 0b 	call	0x176c	; 0x176c <closeSPI>
	i2c_close();
    3b90:	0e 94 47 1b 	call	0x368e	; 0x368e <i2c_close>

	// set port pins
	initPortsIO();
    3b94:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    3b98:	83 b7       	in	r24, 0x33	; 51
    3b9a:	8f 60       	ori	r24, 0x0F	; 15
    3b9c:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    3b9e:	81 e0       	ldi	r24, 0x01	; 1
    3ba0:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    3ba4:	80 91 b0 00 	lds	r24, 0x00B0
    3ba8:	8d 7f       	andi	r24, 0xFD	; 253
    3baa:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    3bae:	80 91 b1 00 	lds	r24, 0x00B1
    3bb2:	87 60       	ori	r24, 0x07	; 7
    3bb4:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    3bb8:	20 97       	sbiw	r28, 0x00	; 0
    3bba:	19 f0       	breq	.+6      	; 0x3bc2 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    3bbc:	88 95       	sleep
		pause--;
    3bbe:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    3bc0:	e9 f7       	brne	.-6      	; 0x3bbc <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    3bc2:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    3bc4:	80 91 b1 00 	lds	r24, 0x00B1
    3bc8:	88 7f       	andi	r24, 0xF8	; 248
    3bca:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    3bce:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    3bd2:	80 91 b0 00 	lds	r24, 0x00B0
    3bd6:	82 60       	ori	r24, 0x02	; 2
    3bd8:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    3bdc:	8f ef       	ldi	r24, 0xFF	; 255
    3bde:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    3be2:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    3be6:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    3bea:	10 92 f4 02 	sts	0x02F4, r1
    3bee:	10 92 f3 02 	sts	0x02F3, r1
	pwm_left = 0;
    3bf2:	10 92 f6 02 	sts	0x02F6, r1
    3bf6:	10 92 f5 02 	sts	0x02F5, r1
	initPeripherals();
    3bfa:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <initPeripherals>

}
    3bfe:	df 91       	pop	r29
    3c00:	cf 91       	pop	r28
    3c02:	08 95       	ret

00003c04 <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
    3c04:	60 91 44 04 	lds	r22, 0x0444
    3c08:	70 91 45 04 	lds	r23, 0x0445
	return clockTick;
}
    3c0c:	80 91 46 04 	lds	r24, 0x0446
    3c10:	90 91 47 04 	lds	r25, 0x0447
    3c14:	08 95       	ret

00003c16 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	80 93 bd 02 	sts	0x02BD, r24
}
    3c1c:	08 95       	ret

00003c1e <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	dc 01       	movw	r26, r24
    3c24:	80 93 d3 02 	sts	0x02D3, r24
    3c28:	90 93 d4 02 	sts	0x02D4, r25
    3c2c:	a0 93 d5 02 	sts	0x02D5, r26
    3c30:	b0 93 d6 02 	sts	0x02D6, r27
	rightMotSteps = 0;
    3c34:	80 93 cf 02 	sts	0x02CF, r24
    3c38:	90 93 d0 02 	sts	0x02D0, r25
    3c3c:	a0 93 d1 02 	sts	0x02D1, r26
    3c40:	b0 93 d2 02 	sts	0x02D2, r27
	theta = 0;
    3c44:	80 93 6b 04 	sts	0x046B, r24
    3c48:	90 93 6c 04 	sts	0x046C, r25
    3c4c:	a0 93 6d 04 	sts	0x046D, r26
    3c50:	b0 93 6e 04 	sts	0x046E, r27
	xPos = 0;
    3c54:	80 93 73 04 	sts	0x0473, r24
    3c58:	90 93 74 04 	sts	0x0474, r25
    3c5c:	a0 93 75 04 	sts	0x0475, r26
    3c60:	b0 93 76 04 	sts	0x0476, r27
	yPos = 0;
    3c64:	80 93 77 04 	sts	0x0477, r24
    3c68:	90 93 78 04 	sts	0x0478, r25
    3c6c:	a0 93 79 04 	sts	0x0479, r26
    3c70:	b0 93 7a 04 	sts	0x047A, r27
}
    3c74:	08 95       	ret

00003c76 <initAdc>:

#include "adc.h"


void initAdc(void) {
    3c76:	cf 93       	push	r28
    3c78:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    3c7a:	ea e7       	ldi	r30, 0x7A	; 122
    3c7c:	f0 e0       	ldi	r31, 0x00	; 0
    3c7e:	10 82       	st	Z, r1
	ADCSRB = 0;
    3c80:	ab e7       	ldi	r26, 0x7B	; 123
    3c82:	b0 e0       	ldi	r27, 0x00	; 0
    3c84:	1c 92       	st	X, r1
	ADMUX = 0;
    3c86:	cc e7       	ldi	r28, 0x7C	; 124
    3c88:	d0 e0       	ldi	r29, 0x00	; 0
    3c8a:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    3c8c:	80 81       	ld	r24, Z
    3c8e:	86 60       	ori	r24, 0x06	; 6
    3c90:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    3c92:	88 81       	ld	r24, Y
    3c94:	80 64       	ori	r24, 0x40	; 64
    3c96:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    3c98:	80 81       	ld	r24, Z
    3c9a:	80 62       	ori	r24, 0x20	; 32
    3c9c:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    3c9e:	8c 91       	ld	r24, X
    3ca0:	88 7f       	andi	r24, 0xF8	; 248
    3ca2:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    3ca4:	80 81       	ld	r24, Z
    3ca6:	88 60       	ori	r24, 0x08	; 8
    3ca8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    3caa:	80 81       	ld	r24, Z
    3cac:	80 68       	ori	r24, 0x80	; 128
    3cae:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    3cb0:	80 81       	ld	r24, Z
    3cb2:	80 64       	ori	r24, 0x40	; 64
    3cb4:	80 83       	st	Z, r24

}
    3cb6:	df 91       	pop	r29
    3cb8:	cf 91       	pop	r28
    3cba:	08 95       	ret

00003cbc <__vector_29>:

ISR(ADC_vect) {
    3cbc:	1f 92       	push	r1
    3cbe:	0f 92       	push	r0
    3cc0:	0f b6       	in	r0, 0x3f	; 63
    3cc2:	0f 92       	push	r0
    3cc4:	0b b6       	in	r0, 0x3b	; 59
    3cc6:	0f 92       	push	r0
    3cc8:	11 24       	eor	r1, r1
    3cca:	2f 93       	push	r18
    3ccc:	3f 93       	push	r19
    3cce:	4f 93       	push	r20
    3cd0:	5f 93       	push	r21
    3cd2:	6f 93       	push	r22
    3cd4:	8f 93       	push	r24
    3cd6:	9f 93       	push	r25
    3cd8:	af 93       	push	r26
    3cda:	bf 93       	push	r27
    3cdc:	ef 93       	push	r30
    3cde:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    3ce0:	80 91 44 04 	lds	r24, 0x0444
    3ce4:	90 91 45 04 	lds	r25, 0x0445
    3ce8:	a0 91 46 04 	lds	r26, 0x0446
    3cec:	b0 91 47 04 	lds	r27, 0x0447
    3cf0:	01 96       	adiw	r24, 0x01	; 1
    3cf2:	a1 1d       	adc	r26, r1
    3cf4:	b1 1d       	adc	r27, r1
    3cf6:	80 93 44 04 	sts	0x0444, r24
    3cfa:	90 93 45 04 	sts	0x0445, r25
    3cfe:	a0 93 46 04 	sts	0x0446, r26
    3d02:	b0 93 47 04 	sts	0x0447, r27
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    3d06:	20 91 78 00 	lds	r18, 0x0078
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    3d0c:	40 91 79 00 	lds	r20, 0x0079
    3d10:	94 2f       	mov	r25, r20
    3d12:	80 e0       	ldi	r24, 0x00	; 0
    3d14:	28 2b       	or	r18, r24
    3d16:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3d18:	80 91 b7 02 	lds	r24, 0x02B7
    3d1c:	82 30       	cpi	r24, 0x02	; 2
    3d1e:	09 f4       	brne	.+2      	; 0x3d22 <__vector_29+0x66>
    3d20:	b2 c1       	rjmp	.+868    	; 0x4086 <__vector_29+0x3ca>
    3d22:	83 30       	cpi	r24, 0x03	; 3
    3d24:	08 f4       	brcc	.+2      	; 0x3d28 <__vector_29+0x6c>
    3d26:	45 c0       	rjmp	.+138    	; 0x3db2 <__vector_29+0xf6>
    3d28:	83 30       	cpi	r24, 0x03	; 3
    3d2a:	09 f4       	brne	.+2      	; 0x3d2e <__vector_29+0x72>
    3d2c:	d5 c1       	rjmp	.+938    	; 0x40d8 <__vector_29+0x41c>
    3d2e:	84 30       	cpi	r24, 0x04	; 4
    3d30:	09 f4       	brne	.+2      	; 0x3d34 <__vector_29+0x78>
    3d32:	68 c1       	rjmp	.+720    	; 0x4004 <__vector_29+0x348>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3d34:	80 91 b8 02 	lds	r24, 0x02B8
    3d38:	82 30       	cpi	r24, 0x02	; 2
    3d3a:	09 f4       	brne	.+2      	; 0x3d3e <__vector_29+0x82>
    3d3c:	4f c1       	rjmp	.+670    	; 0x3fdc <__vector_29+0x320>
    3d3e:	83 30       	cpi	r24, 0x03	; 3
    3d40:	08 f0       	brcs	.+2      	; 0x3d44 <__vector_29+0x88>
    3d42:	cd c0       	rjmp	.+410    	; 0x3ede <__vector_29+0x222>
    3d44:	88 23       	and	r24, r24
    3d46:	09 f0       	breq	.+2      	; 0x3d4a <__vector_29+0x8e>
    3d48:	24 c1       	rjmp	.+584    	; 0x3f92 <__vector_29+0x2d6>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    3d4a:	80 91 22 02 	lds	r24, 0x0222
    3d4e:	86 95       	lsr	r24
    3d50:	80 93 21 02 	sts	0x0221, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    3d54:	80 91 b9 02 	lds	r24, 0x02B9
    3d58:	88 23       	and	r24, r24
    3d5a:	09 f0       	breq	.+2      	; 0x3d5e <__vector_29+0xa2>
    3d5c:	ed c1       	rjmp	.+986    	; 0x4138 <__vector_29+0x47c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    3d5e:	81 e0       	ldi	r24, 0x01	; 1
    3d60:	80 93 b7 02 	sts	0x02B7, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	80 93 b8 02 	sts	0x02B8, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    3d6a:	90 91 21 02 	lds	r25, 0x0221
    3d6e:	98 30       	cpi	r25, 0x08	; 8
    3d70:	08 f0       	brcs	.+2      	; 0x3d74 <__vector_29+0xb8>
    3d72:	ed c0       	rjmp	.+474    	; 0x3f4e <__vector_29+0x292>
		ADCSRB &= ~(1 << MUX5);
    3d74:	90 91 7b 00 	lds	r25, 0x007B
    3d78:	97 7f       	andi	r25, 0xF7	; 247
    3d7a:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    3d7e:	90 91 21 02 	lds	r25, 0x0221
    3d82:	90 5c       	subi	r25, 0xC0	; 192
    3d84:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3d88:	82 30       	cpi	r24, 0x02	; 2
    3d8a:	09 f4       	brne	.+2      	; 0x3d8e <__vector_29+0xd2>
    3d8c:	ed c0       	rjmp	.+474    	; 0x3f68 <__vector_29+0x2ac>

	}

	//LED_BLUE_OFF;

}
    3d8e:	ff 91       	pop	r31
    3d90:	ef 91       	pop	r30
    3d92:	bf 91       	pop	r27
    3d94:	af 91       	pop	r26
    3d96:	9f 91       	pop	r25
    3d98:	8f 91       	pop	r24
    3d9a:	6f 91       	pop	r22
    3d9c:	5f 91       	pop	r21
    3d9e:	4f 91       	pop	r20
    3da0:	3f 91       	pop	r19
    3da2:	2f 91       	pop	r18
    3da4:	0f 90       	pop	r0
    3da6:	0b be       	out	0x3b, r0	; 59
    3da8:	0f 90       	pop	r0
    3daa:	0f be       	out	0x3f, r0	; 63
    3dac:	0f 90       	pop	r0
    3dae:	1f 90       	pop	r1
    3db0:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3db2:	88 23       	and	r24, r24
    3db4:	09 f0       	breq	.+2      	; 0x3db8 <__vector_29+0xfc>
    3db6:	fe c0       	rjmp	.+508    	; 0x3fb4 <__vector_29+0x2f8>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3db8:	60 91 22 02 	lds	r22, 0x0222
    3dbc:	6e 30       	cpi	r22, 0x0E	; 14
    3dbe:	09 f4       	brne	.+2      	; 0x3dc2 <__vector_29+0x106>
    3dc0:	dc c1       	rjmp	.+952    	; 0x417a <__vector_29+0x4be>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    3dc2:	46 2f       	mov	r20, r22
    3dc4:	50 e0       	ldi	r21, 0x00	; 0
    3dc6:	fa 01       	movw	r30, r20
    3dc8:	ee 0f       	add	r30, r30
    3dca:	ff 1f       	adc	r31, r31
    3dcc:	e9 5d       	subi	r30, 0xD9	; 217
    3dce:	fd 4f       	sbci	r31, 0xFD	; 253
    3dd0:	31 83       	std	Z+1, r19	; 0x01
    3dd2:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    3dd4:	40 ff       	sbrs	r20, 0
    3dd6:	77 c0       	rjmp	.+238    	; 0x3ec6 <__vector_29+0x20a>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    3dd8:	fa 01       	movw	r30, r20
    3dda:	ee 0f       	add	r30, r30
    3ddc:	ff 1f       	adc	r31, r31
    3dde:	eb 5d       	subi	r30, 0xDB	; 219
    3de0:	fd 4f       	sbci	r31, 0xFD	; 253
    3de2:	80 81       	ld	r24, Z
    3de4:	91 81       	ldd	r25, Z+1	; 0x01
    3de6:	fa 01       	movw	r30, r20
    3de8:	ee 0f       	add	r30, r30
    3dea:	ff 1f       	adc	r31, r31
    3dec:	e9 5d       	subi	r30, 0xD9	; 217
    3dee:	fd 4f       	sbci	r31, 0xFD	; 253
    3df0:	40 81       	ld	r20, Z
    3df2:	51 81       	ldd	r21, Z+1	; 0x01
    3df4:	26 2f       	mov	r18, r22
    3df6:	26 95       	lsr	r18
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	84 1b       	sub	r24, r20
    3dfc:	95 0b       	sbc	r25, r21
    3dfe:	22 0f       	add	r18, r18
    3e00:	33 1f       	adc	r19, r19
    3e02:	f9 01       	movw	r30, r18
    3e04:	e1 59       	subi	r30, 0x91	; 145
    3e06:	fd 4f       	sbci	r31, 0xFD	; 253
    3e08:	40 81       	ld	r20, Z
    3e0a:	51 81       	ldd	r21, Z+1	; 0x01
    3e0c:	84 1b       	sub	r24, r20
    3e0e:	95 0b       	sbc	r25, r21
    3e10:	f9 01       	movw	r30, r18
    3e12:	e9 5a       	subi	r30, 0xA9	; 169
    3e14:	fd 4f       	sbci	r31, 0xFD	; 253
    3e16:	91 83       	std	Z+1, r25	; 0x01
    3e18:	80 83       	st	Z, r24
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    3e1a:	97 fd       	sbrc	r25, 7
    3e1c:	c9 c1       	rjmp	.+914    	; 0x41b0 <__vector_29+0x4f4>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    3e1e:	44 e0       	ldi	r20, 0x04	; 4
    3e20:	81 30       	cpi	r24, 0x01	; 1
    3e22:	94 07       	cpc	r25, r20
    3e24:	24 f0       	brlt	.+8      	; 0x3e2e <__vector_29+0x172>
					proximityResult[currentProx>>1] = 1024;
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	94 e0       	ldi	r25, 0x04	; 4
    3e2a:	91 83       	std	Z+1, r25	; 0x01
    3e2c:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    3e2e:	60 31       	cpi	r22, 0x10	; 16
    3e30:	48 f4       	brcc	.+18     	; 0x3e44 <__vector_29+0x188>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    3e32:	8c 33       	cpi	r24, 0x3C	; 60
    3e34:	91 05       	cpc	r25, r1
    3e36:	0c f0       	brlt	.+2      	; 0x3e3a <__vector_29+0x17e>
    3e38:	c0 c1       	rjmp	.+896    	; 0x41ba <__vector_29+0x4fe>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    3e3a:	21 54       	subi	r18, 0x41	; 65
    3e3c:	3d 4f       	sbci	r19, 0xFD	; 253
    3e3e:	f9 01       	movw	r30, r18
    3e40:	91 83       	std	Z+1, r25	; 0x01
    3e42:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    3e44:	80 91 69 04 	lds	r24, 0x0469
    3e48:	88 23       	and	r24, r24
    3e4a:	09 f4       	brne	.+2      	; 0x3e4e <__vector_29+0x192>
    3e4c:	81 c1       	rjmp	.+770    	; 0x4150 <__vector_29+0x494>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    3e4e:	80 91 67 02 	lds	r24, 0x0267
    3e52:	90 91 68 02 	lds	r25, 0x0268
    3e56:	f1 e0       	ldi	r31, 0x01	; 1
    3e58:	84 3a       	cpi	r24, 0xA4	; 164
    3e5a:	9f 07       	cpc	r25, r31
    3e5c:	cc f0       	brlt	.+50     	; 0x3e90 <__vector_29+0x1d4>
    3e5e:	80 91 69 02 	lds	r24, 0x0269
    3e62:	90 91 6a 02 	lds	r25, 0x026A
    3e66:	21 e0       	ldi	r18, 0x01	; 1
    3e68:	84 3a       	cpi	r24, 0xA4	; 164
    3e6a:	92 07       	cpc	r25, r18
    3e6c:	8c f0       	brlt	.+34     	; 0x3e90 <__vector_29+0x1d4>
    3e6e:	80 91 6b 02 	lds	r24, 0x026B
    3e72:	90 91 6c 02 	lds	r25, 0x026C
    3e76:	41 e0       	ldi	r20, 0x01	; 1
    3e78:	84 3a       	cpi	r24, 0xA4	; 164
    3e7a:	94 07       	cpc	r25, r20
    3e7c:	4c f0       	brlt	.+18     	; 0x3e90 <__vector_29+0x1d4>
    3e7e:	80 91 6d 02 	lds	r24, 0x026D
    3e82:	90 91 6e 02 	lds	r25, 0x026E
    3e86:	e1 e0       	ldi	r30, 0x01	; 1
    3e88:	84 3a       	cpi	r24, 0xA4	; 164
    3e8a:	9e 07       	cpc	r25, r30
    3e8c:	0c f0       	brlt	.+2      	; 0x3e90 <__vector_29+0x1d4>
    3e8e:	60 c1       	rjmp	.+704    	; 0x4150 <__vector_29+0x494>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    3e90:	81 e0       	ldi	r24, 0x01	; 1
    3e92:	80 93 6a 04 	sts	0x046A, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    3e96:	10 92 f6 02 	sts	0x02F6, r1
    3e9a:	10 92 f5 02 	sts	0x02F5, r1
						OCR4A = 0;
    3e9e:	10 92 a9 00 	sts	0x00A9, r1
    3ea2:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    3ea6:	10 92 ab 00 	sts	0x00AB, r1
    3eaa:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    3eae:	10 92 f4 02 	sts	0x02F4, r1
    3eb2:	10 92 f3 02 	sts	0x02F3, r1
						OCR3A = 0;
    3eb6:	10 92 99 00 	sts	0x0099, r1
    3eba:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    3ebe:	10 92 9b 00 	sts	0x009B, r1
    3ec2:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    3ec6:	6f 5f       	subi	r22, 0xFF	; 255
    3ec8:	60 93 22 02 	sts	0x0222, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    3ecc:	68 31       	cpi	r22, 0x18	; 24
    3ece:	08 f4       	brcc	.+2      	; 0x3ed2 <__vector_29+0x216>
    3ed0:	31 cf       	rjmp	.-414    	; 0x3d34 <__vector_29+0x78>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    3ed2:	10 92 22 02 	sts	0x0222, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	80 93 be 02 	sts	0x02BE, r24
    3edc:	2b cf       	rjmp	.-426    	; 0x3d34 <__vector_29+0x78>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3ede:	83 30       	cpi	r24, 0x03	; 3
    3ee0:	09 f4       	brne	.+2      	; 0x3ee4 <__vector_29+0x228>
    3ee2:	bd c0       	rjmp	.+378    	; 0x405e <__vector_29+0x3a2>
    3ee4:	84 30       	cpi	r24, 0x04	; 4
    3ee6:	09 f0       	breq	.+2      	; 0x3eea <__vector_29+0x22e>
    3ee8:	40 cf       	rjmp	.-384    	; 0x3d6a <__vector_29+0xae>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    3eea:	90 91 24 02 	lds	r25, 0x0224
    3eee:	90 93 21 02 	sts	0x0221, r25
			rightChannelPhase = rightMotorPhase;
    3ef2:	90 91 25 02 	lds	r25, 0x0225
    3ef6:	90 93 b9 02 	sts	0x02B9, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    3efa:	90 91 ba 02 	lds	r25, 0x02BA
    3efe:	99 23       	and	r25, r25
    3f00:	09 f0       	breq	.+2      	; 0x3f04 <__vector_29+0x248>
    3f02:	14 c1       	rjmp	.+552    	; 0x412c <__vector_29+0x470>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3f04:	83 e0       	ldi	r24, 0x03	; 3
    3f06:	80 93 b7 02 	sts	0x02B7, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    3f0a:	10 92 b8 02 	sts	0x02B8, r1

			if(currentProx==14 && measBattery==1) {
    3f0e:	60 91 22 02 	lds	r22, 0x0222
    3f12:	6e 30       	cpi	r22, 0x0E	; 14
    3f14:	09 f4       	brne	.+2      	; 0x3f18 <__vector_29+0x25c>
    3f16:	2b c1       	rjmp	.+598    	; 0x416e <__vector_29+0x4b2>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    3f18:	86 2f       	mov	r24, r22
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	60 ff       	sbrs	r22, 0
    3f1e:	fd c0       	rjmp	.+506    	; 0x411a <__vector_29+0x45e>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    3f20:	60 31       	cpi	r22, 0x10	; 16
    3f22:	08 f4       	brcc	.+2      	; 0x3f26 <__vector_29+0x26a>
    3f24:	18 c1       	rjmp	.+560    	; 0x4156 <__vector_29+0x49a>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
				} else {
					if(hardwareRevision == HW_REV_3_0) {
    3f26:	20 91 4b 04 	lds	r18, 0x044B
    3f2a:	22 23       	and	r18, r18
    3f2c:	09 f0       	breq	.+2      	; 0x3f30 <__vector_29+0x274>
    3f2e:	e1 c0       	rjmp	.+450    	; 0x40f2 <__vector_29+0x436>
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    3f30:	40 97       	sbiw	r24, 0x10	; 16
    3f32:	95 95       	asr	r25
    3f34:	87 95       	ror	r24
    3f36:	21 e0       	ldi	r18, 0x01	; 1
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	02 c0       	rjmp	.+4      	; 0x3f40 <__vector_29+0x284>
    3f3c:	22 0f       	add	r18, r18
    3f3e:	33 1f       	adc	r19, r19
    3f40:	8a 95       	dec	r24
    3f42:	e2 f7       	brpl	.-8      	; 0x3f3c <__vector_29+0x280>
    3f44:	20 93 05 01 	sts	0x0105, r18
    3f48:	80 91 b8 02 	lds	r24, 0x02B8
    3f4c:	0e cf       	rjmp	.-484    	; 0x3d6a <__vector_29+0xae>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    3f4e:	90 91 7b 00 	lds	r25, 0x007B
    3f52:	98 60       	ori	r25, 0x08	; 8
    3f54:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    3f58:	90 91 21 02 	lds	r25, 0x0221
    3f5c:	98 5c       	subi	r25, 0xC8	; 200
    3f5e:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3f62:	82 30       	cpi	r24, 0x02	; 2
    3f64:	09 f0       	breq	.+2      	; 0x3f68 <__vector_29+0x2ac>
    3f66:	13 cf       	rjmp	.-474    	; 0x3d8e <__vector_29+0xd2>

		if(hardwareRevision == HW_REV_3_0) {
    3f68:	20 91 4b 04 	lds	r18, 0x044B
    3f6c:	22 23       	and	r18, r18
    3f6e:	51 f0       	breq	.+20     	; 0x3f84 <__vector_29+0x2c8>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    3f70:	21 30       	cpi	r18, 0x01	; 1
    3f72:	19 f0       	breq	.+6      	; 0x3f7a <__vector_29+0x2be>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    3f74:	22 30       	cpi	r18, 0x02	; 2
    3f76:	09 f0       	breq	.+2      	; 0x3f7a <__vector_29+0x2be>
    3f78:	0a cf       	rjmp	.-492    	; 0x3d8e <__vector_29+0xd2>
			PORTJ = 0xFF;
    3f7a:	8f ef       	ldi	r24, 0xFF	; 255
    3f7c:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    3f80:	12 b8       	out	0x02, r1	; 2
    3f82:	05 cf       	rjmp	.-502    	; 0x3d8e <__vector_29+0xd2>

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {

		if(hardwareRevision == HW_REV_3_0) {
			PORTJ &= 0xF0;
    3f84:	80 91 05 01 	lds	r24, 0x0105
    3f88:	80 7f       	andi	r24, 0xF0	; 240
    3f8a:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    3f8e:	12 b8       	out	0x02, r1	; 2
    3f90:	fe ce       	rjmp	.-516    	; 0x3d8e <__vector_29+0xd2>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3f92:	81 30       	cpi	r24, 0x01	; 1
    3f94:	09 f0       	breq	.+2      	; 0x3f98 <__vector_29+0x2dc>
    3f96:	e9 ce       	rjmp	.-558    	; 0x3d6a <__vector_29+0xae>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    3f98:	80 91 23 02 	lds	r24, 0x0223
    3f9c:	80 93 21 02 	sts	0x0221, r24
			leftChannelPhase = leftMotorPhase;
    3fa0:	80 91 26 02 	lds	r24, 0x0226
    3fa4:	80 93 ba 02 	sts	0x02BA, r24
			adcSaveDataTo = SAVE_TO_PROX;
    3fa8:	10 92 b7 02 	sts	0x02B7, r1
			adcSamplingState = 2;
    3fac:	82 e0       	ldi	r24, 0x02	; 2
    3fae:	80 93 b8 02 	sts	0x02B8, r24
			break;
    3fb2:	db ce       	rjmp	.-586    	; 0x3d6a <__vector_29+0xae>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3fb4:	81 30       	cpi	r24, 0x01	; 1
    3fb6:	09 f0       	breq	.+2      	; 0x3fba <__vector_29+0x2fe>
    3fb8:	bd ce       	rjmp	.-646    	; 0x3d34 <__vector_29+0x78>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    3fba:	80 91 e1 02 	lds	r24, 0x02E1
    3fbe:	90 91 e2 02 	lds	r25, 0x02E2
    3fc2:	82 0f       	add	r24, r18
    3fc4:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    3fc6:	96 95       	lsr	r25
    3fc8:	87 95       	ror	r24
    3fca:	90 93 e2 02 	sts	0x02E2, r25
    3fce:	80 93 e1 02 	sts	0x02E1, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3fd2:	80 91 b8 02 	lds	r24, 0x02B8
    3fd6:	82 30       	cpi	r24, 0x02	; 2
    3fd8:	09 f0       	breq	.+2      	; 0x3fdc <__vector_29+0x320>
    3fda:	b1 ce       	rjmp	.-670    	; 0x3d3e <__vector_29+0x82>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    3fdc:	80 91 24 02 	lds	r24, 0x0224
    3fe0:	80 93 21 02 	sts	0x0221, r24
			rightChannelPhase = rightMotorPhase;
    3fe4:	80 91 25 02 	lds	r24, 0x0225
    3fe8:	80 93 b9 02 	sts	0x02B9, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    3fec:	80 91 ba 02 	lds	r24, 0x02BA
    3ff0:	88 23       	and	r24, r24
    3ff2:	09 f0       	breq	.+2      	; 0x3ff6 <__vector_29+0x33a>
    3ff4:	a7 c0       	rjmp	.+334    	; 0x4144 <__vector_29+0x488>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3ff6:	83 e0       	ldi	r24, 0x03	; 3
    3ff8:	80 93 b7 02 	sts	0x02B7, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    3ffc:	83 e0       	ldi	r24, 0x03	; 3
    3ffe:	80 93 b8 02 	sts	0x02B8, r24
			break;
    4002:	b3 ce       	rjmp	.-666    	; 0x3d6a <__vector_29+0xae>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    4004:	80 91 0a 02 	lds	r24, 0x020A
    4008:	88 23       	and	r24, r24
    400a:	09 f4       	brne	.+2      	; 0x400e <__vector_29+0x352>
    400c:	93 ce       	rjmp	.-730    	; 0x3d34 <__vector_29+0x78>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    400e:	90 91 00 01 	lds	r25, 0x0100
    4012:	93 fd       	sbrc	r25, 3
    4014:	8f ce       	rjmp	.-738    	; 0x3d34 <__vector_29+0x78>
    4016:	90 91 00 01 	lds	r25, 0x0100
    401a:	94 fd       	sbrc	r25, 4
    401c:	8b ce       	rjmp	.-746    	; 0x3d34 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    401e:	48 2f       	mov	r20, r24
    4020:	4f 5f       	subi	r20, 0xFF	; 255
    4022:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    4026:	45 30       	cpi	r20, 0x05	; 5
    4028:	08 f4       	brcc	.+2      	; 0x402c <__vector_29+0x370>
    402a:	84 ce       	rjmp	.-760    	; 0x3d34 <__vector_29+0x78>
					if(pwm_left != 0) {
    402c:	80 91 f5 02 	lds	r24, 0x02F5
    4030:	90 91 f6 02 	lds	r25, 0x02F6
    4034:	00 97       	sbiw	r24, 0x00	; 0
    4036:	51 f0       	breq	.+20     	; 0x404c <__vector_29+0x390>
						left_vel_sum += value;
    4038:	80 91 eb 02 	lds	r24, 0x02EB
    403c:	90 91 ec 02 	lds	r25, 0x02EC
    4040:	82 0f       	add	r24, r18
    4042:	93 1f       	adc	r25, r19
    4044:	90 93 ec 02 	sts	0x02EC, r25
    4048:	80 93 eb 02 	sts	0x02EB, r24
					}
					if(firstSampleLeft==8) {
    404c:	48 30       	cpi	r20, 0x08	; 8
    404e:	09 f0       	breq	.+2      	; 0x4052 <__vector_29+0x396>
    4050:	71 ce       	rjmp	.-798    	; 0x3d34 <__vector_29+0x78>
						firstSampleLeft = 0;
    4052:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    4056:	81 e0       	ldi	r24, 0x01	; 1
    4058:	80 93 07 02 	sts	0x0207, r24
    405c:	6b ce       	rjmp	.-810    	; 0x3d34 <__vector_29+0x78>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    405e:	80 91 23 02 	lds	r24, 0x0223
    4062:	80 93 21 02 	sts	0x0221, r24
			leftChannelPhase = leftMotorPhase;
    4066:	80 91 26 02 	lds	r24, 0x0226
    406a:	80 93 ba 02 	sts	0x02BA, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    406e:	80 91 b9 02 	lds	r24, 0x02B9
    4072:	88 23       	and	r24, r24
    4074:	09 f0       	breq	.+2      	; 0x4078 <__vector_29+0x3bc>
    4076:	54 c0       	rjmp	.+168    	; 0x4120 <__vector_29+0x464>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	80 93 b7 02 	sts	0x02B7, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    407e:	84 e0       	ldi	r24, 0x04	; 4
    4080:	80 93 b8 02 	sts	0x02B8, r24
			break;
    4084:	72 ce       	rjmp	.-796    	; 0x3d6a <__vector_29+0xae>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    4086:	80 91 09 02 	lds	r24, 0x0209
    408a:	88 23       	and	r24, r24
    408c:	09 f4       	brne	.+2      	; 0x4090 <__vector_29+0x3d4>
    408e:	52 ce       	rjmp	.-860    	; 0x3d34 <__vector_29+0x78>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    4090:	63 99       	sbic	0x0c, 3	; 12
    4092:	50 ce       	rjmp	.-864    	; 0x3d34 <__vector_29+0x78>
    4094:	64 99       	sbic	0x0c, 4	; 12
    4096:	4e ce       	rjmp	.-868    	; 0x3d34 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    4098:	48 2f       	mov	r20, r24
    409a:	4f 5f       	subi	r20, 0xFF	; 255
    409c:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    40a0:	45 30       	cpi	r20, 0x05	; 5
    40a2:	08 f4       	brcc	.+2      	; 0x40a6 <__vector_29+0x3ea>
    40a4:	47 ce       	rjmp	.-882    	; 0x3d34 <__vector_29+0x78>
					if(pwm_right != 0) {
    40a6:	80 91 f3 02 	lds	r24, 0x02F3
    40aa:	90 91 f4 02 	lds	r25, 0x02F4
    40ae:	00 97       	sbiw	r24, 0x00	; 0
    40b0:	51 f0       	breq	.+20     	; 0x40c6 <__vector_29+0x40a>
						right_vel_sum += value;
    40b2:	80 91 ed 02 	lds	r24, 0x02ED
    40b6:	90 91 ee 02 	lds	r25, 0x02EE
    40ba:	82 0f       	add	r24, r18
    40bc:	93 1f       	adc	r25, r19
    40be:	90 93 ee 02 	sts	0x02EE, r25
    40c2:	80 93 ed 02 	sts	0x02ED, r24
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    40c6:	48 30       	cpi	r20, 0x08	; 8
    40c8:	09 f0       	breq	.+2      	; 0x40cc <__vector_29+0x410>
    40ca:	34 ce       	rjmp	.-920    	; 0x3d34 <__vector_29+0x78>
						firstSampleRight = 0;
    40cc:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    40d0:	81 e0       	ldi	r24, 0x01	; 1
    40d2:	80 93 08 02 	sts	0x0208, r24
    40d6:	2e ce       	rjmp	.-932    	; 0x3d34 <__vector_29+0x78>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    40d8:	80 91 df 02 	lds	r24, 0x02DF
    40dc:	90 91 e0 02 	lds	r25, 0x02E0
    40e0:	82 0f       	add	r24, r18
    40e2:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    40e4:	96 95       	lsr	r25
    40e6:	87 95       	ror	r24
    40e8:	90 93 e0 02 	sts	0x02E0, r25
    40ec:	80 93 df 02 	sts	0x02DF, r24
			break;
    40f0:	21 ce       	rjmp	.-958    	; 0x3d34 <__vector_29+0x78>
				} else {
					if(hardwareRevision == HW_REV_3_0) {
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					}

					if(hardwareRevision == HW_REV_3_0_1) {
    40f2:	21 30       	cpi	r18, 0x01	; 1
    40f4:	11 f0       	breq	.+4      	; 0x40fa <__vector_29+0x43e>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					}

					if(hardwareRevision == HW_REV_3_1) {
    40f6:	22 30       	cpi	r18, 0x02	; 2
    40f8:	81 f4       	brne	.+32     	; 0x411a <__vector_29+0x45e>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    40fa:	40 91 05 01 	lds	r20, 0x0105
    40fe:	40 97       	sbiw	r24, 0x10	; 16
    4100:	95 95       	asr	r25
    4102:	87 95       	ror	r24
    4104:	21 e0       	ldi	r18, 0x01	; 1
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	02 c0       	rjmp	.+4      	; 0x410e <__vector_29+0x452>
    410a:	22 0f       	add	r18, r18
    410c:	33 1f       	adc	r19, r19
    410e:	8a 95       	dec	r24
    4110:	e2 f7       	brpl	.-8      	; 0x410a <__vector_29+0x44e>
    4112:	20 95       	com	r18
    4114:	24 23       	and	r18, r20
    4116:	20 93 05 01 	sts	0x0105, r18
    411a:	80 91 b8 02 	lds	r24, 0x02B8
    411e:	25 ce       	rjmp	.-950    	; 0x3d6a <__vector_29+0xae>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    4120:	81 30       	cpi	r24, 0x01	; 1
    4122:	d1 f1       	breq	.+116    	; 0x4198 <__vector_29+0x4dc>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    4124:	85 e0       	ldi	r24, 0x05	; 5
    4126:	80 93 b7 02 	sts	0x02B7, r24
    412a:	a9 cf       	rjmp	.-174    	; 0x407e <__vector_29+0x3c2>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    412c:	91 30       	cpi	r25, 0x01	; 1
    412e:	09 f0       	breq	.+2      	; 0x4132 <__vector_29+0x476>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    4130:	85 e0       	ldi	r24, 0x05	; 5
    4132:	80 93 b7 02 	sts	0x02B7, r24
    4136:	e9 ce       	rjmp	.-558    	; 0x3f0a <__vector_29+0x24e>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    4138:	81 30       	cpi	r24, 0x01	; 1
    413a:	b1 f1       	breq	.+108    	; 0x41a8 <__vector_29+0x4ec>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    413c:	85 e0       	ldi	r24, 0x05	; 5
    413e:	80 93 b7 02 	sts	0x02B7, r24
    4142:	10 ce       	rjmp	.-992    	; 0x3d64 <__vector_29+0xa8>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    4144:	81 30       	cpi	r24, 0x01	; 1
    4146:	61 f1       	breq	.+88     	; 0x41a0 <__vector_29+0x4e4>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    4148:	85 e0       	ldi	r24, 0x05	; 5
    414a:	80 93 b7 02 	sts	0x02B7, r24
    414e:	56 cf       	rjmp	.-340    	; 0x3ffc <__vector_29+0x340>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    4150:	10 92 6a 04 	sts	0x046A, r1
    4154:	b8 ce       	rjmp	.-656    	; 0x3ec6 <__vector_29+0x20a>

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    4156:	66 95       	lsr	r22
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	02 c0       	rjmp	.+4      	; 0x4162 <__vector_29+0x4a6>
    415e:	88 0f       	add	r24, r24
    4160:	99 1f       	adc	r25, r25
    4162:	6a 95       	dec	r22
    4164:	e2 f7       	brpl	.-8      	; 0x415e <__vector_29+0x4a2>
    4166:	82 b9       	out	0x02, r24	; 2
    4168:	80 91 b8 02 	lds	r24, 0x02B8
    416c:	fe cd       	rjmp	.-1028   	; 0x3d6a <__vector_29+0xae>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    416e:	80 91 bd 02 	lds	r24, 0x02BD
    4172:	81 30       	cpi	r24, 0x01	; 1
    4174:	a1 f1       	breq	.+104    	; 0x41de <__vector_29+0x522>
    4176:	80 e0       	ldi	r24, 0x00	; 0
    4178:	f8 cd       	rjmp	.-1040   	; 0x3d6a <__vector_29+0xae>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    417a:	80 91 bd 02 	lds	r24, 0x02BD
    417e:	82 30       	cpi	r24, 0x02	; 2
    4180:	09 f0       	breq	.+2      	; 0x4184 <__vector_29+0x4c8>
    4182:	1f ce       	rjmp	.-962    	; 0x3dc2 <__vector_29+0x106>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    4184:	30 93 bc 02 	sts	0x02BC, r19
    4188:	20 93 bb 02 	sts	0x02BB, r18
				measBattery = 0;
    418c:	10 92 bd 02 	sts	0x02BD, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    4190:	46 98       	cbi	0x08, 6	; 8
    4192:	4e e0       	ldi	r20, 0x0E	; 14
    4194:	50 e0       	ldi	r21, 0x00	; 0
    4196:	1e ce       	rjmp	.-964    	; 0x3dd4 <__vector_29+0x118>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4198:	82 e0       	ldi	r24, 0x02	; 2
    419a:	80 93 b7 02 	sts	0x02B7, r24
    419e:	6f cf       	rjmp	.-290    	; 0x407e <__vector_29+0x3c2>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    41a0:	84 e0       	ldi	r24, 0x04	; 4
    41a2:	80 93 b7 02 	sts	0x02B7, r24
    41a6:	2a cf       	rjmp	.-428    	; 0x3ffc <__vector_29+0x340>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    41a8:	82 e0       	ldi	r24, 0x02	; 2
    41aa:	80 93 b7 02 	sts	0x02B7, r24
    41ae:	da cd       	rjmp	.-1100   	; 0x3d64 <__vector_29+0xa8>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    41b0:	11 82       	std	Z+1, r1	; 0x01
    41b2:	10 82       	st	Z, r1
    41b4:	80 e0       	ldi	r24, 0x00	; 0
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	3a ce       	rjmp	.-908    	; 0x3e2e <__vector_29+0x172>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    41ba:	ac 01       	movw	r20, r24
    41bc:	44 5c       	subi	r20, 0xC4	; 196
    41be:	5f 4f       	sbci	r21, 0xFF	; 255
    41c0:	55 95       	asr	r21
    41c2:	47 95       	ror	r20
    41c4:	48 37       	cpi	r20, 0x78	; 120
    41c6:	51 05       	cpc	r21, r1
    41c8:	7c f4       	brge	.+30     	; 0x41e8 <__vector_29+0x52c>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    41ca:	21 54       	subi	r18, 0x41	; 65
    41cc:	3d 4f       	sbci	r19, 0xFD	; 253
    41ce:	cc 97       	sbiw	r24, 0x3c	; 60
    41d0:	95 95       	asr	r25
    41d2:	87 95       	ror	r24
    41d4:	cc 96       	adiw	r24, 0x3c	; 60
    41d6:	f9 01       	movw	r30, r18
    41d8:	91 83       	std	Z+1, r25	; 0x01
    41da:	80 83       	st	Z, r24
    41dc:	33 ce       	rjmp	.-922    	; 0x3e44 <__vector_29+0x188>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    41de:	82 e0       	ldi	r24, 0x02	; 2
    41e0:	80 93 bd 02 	sts	0x02BD, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    41e4:	46 9a       	sbi	0x08, 6	; 8
    41e6:	98 ce       	rjmp	.-720    	; 0x3f18 <__vector_29+0x25c>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    41e8:	ac 01       	movw	r20, r24
    41ea:	44 5d       	subi	r20, 0xD4	; 212
    41ec:	5e 4f       	sbci	r21, 0xFE	; 254
    41ee:	55 95       	asr	r21
    41f0:	47 95       	ror	r20
    41f2:	55 95       	asr	r21
    41f4:	47 95       	ror	r20
    41f6:	44 3b       	cpi	r20, 0xB4	; 180
    41f8:	51 05       	cpc	r21, r1
    41fa:	74 f4       	brge	.+28     	; 0x4218 <__vector_29+0x55c>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    41fc:	21 54       	subi	r18, 0x41	; 65
    41fe:	3d 4f       	sbci	r19, 0xFD	; 253
    4200:	84 5b       	subi	r24, 0xB4	; 180
    4202:	90 40       	sbci	r25, 0x00	; 0
    4204:	95 95       	asr	r25
    4206:	87 95       	ror	r24
    4208:	95 95       	asr	r25
    420a:	87 95       	ror	r24
    420c:	88 58       	subi	r24, 0x88	; 136
    420e:	9f 4f       	sbci	r25, 0xFF	; 255
    4210:	f9 01       	movw	r30, r18
    4212:	91 83       	std	Z+1, r25	; 0x01
    4214:	80 83       	st	Z, r24
    4216:	16 ce       	rjmp	.-980    	; 0x3e44 <__vector_29+0x188>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    4218:	21 54       	subi	r18, 0x41	; 65
    421a:	3d 4f       	sbci	r19, 0xFD	; 253
    421c:	84 5a       	subi	r24, 0xA4	; 164
    421e:	91 40       	sbci	r25, 0x01	; 1
    4220:	95 95       	asr	r25
    4222:	87 95       	ror	r24
    4224:	95 95       	asr	r25
    4226:	87 95       	ror	r24
    4228:	95 95       	asr	r25
    422a:	87 95       	ror	r24
    422c:	8c 54       	subi	r24, 0x4C	; 76
    422e:	9f 4f       	sbci	r25, 0xFF	; 255
    4230:	f9 01       	movw	r30, r18
    4232:	91 83       	std	Z+1, r25	; 0x01
    4234:	80 83       	st	Z, r24
    4236:	06 ce       	rjmp	.-1012   	; 0x3e44 <__vector_29+0x188>

00004238 <initMotors>:

#include "motors.h"

void initMotors() {
    4238:	0f 93       	push	r16
    423a:	1f 93       	push	r17
    423c:	cf 93       	push	r28
    423e:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    4240:	e0 e9       	ldi	r30, 0x90	; 144
    4242:	f0 e0       	ldi	r31, 0x00	; 0
    4244:	10 82       	st	Z, r1
	TCCR3B = 0;
    4246:	41 e9       	ldi	r20, 0x91	; 145
    4248:	50 e0       	ldi	r21, 0x00	; 0
    424a:	da 01       	movw	r26, r20
    424c:	1c 92       	st	X, r1
	TIMSK3 = 0;
    424e:	21 e7       	ldi	r18, 0x71	; 113
    4250:	30 e0       	ldi	r19, 0x00	; 0
    4252:	e9 01       	movw	r28, r18
    4254:	18 82       	st	Y, r1
	TCCR4A = 0;
    4256:	a0 ea       	ldi	r26, 0xA0	; 160
    4258:	b0 e0       	ldi	r27, 0x00	; 0
    425a:	1c 92       	st	X, r1
	TCCR4B = 0;
    425c:	81 ea       	ldi	r24, 0xA1	; 161
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	ec 01       	movw	r28, r24
    4262:	18 82       	st	Y, r1
	TIMSK4 = 0;
    4264:	02 e7       	ldi	r16, 0x72	; 114
    4266:	10 e0       	ldi	r17, 0x00	; 0
    4268:	e8 01       	movw	r28, r16
    426a:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    426c:	60 81       	ld	r22, Z
    426e:	63 68       	ori	r22, 0x83	; 131
    4270:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    4272:	60 81       	ld	r22, Z
    4274:	63 60       	ori	r22, 0x03	; 3
    4276:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    4278:	ea 01       	movw	r28, r20
    427a:	68 81       	ld	r22, Y
    427c:	6b 60       	ori	r22, 0x0B	; 11
    427e:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    4280:	40 91 f3 02 	lds	r20, 0x02F3
    4284:	50 91 f4 02 	lds	r21, 0x02F4
    4288:	50 93 99 00 	sts	0x0099, r21
    428c:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    4290:	10 92 9b 00 	sts	0x009B, r1
    4294:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    4298:	e9 01       	movw	r28, r18
    429a:	48 81       	ld	r20, Y
    429c:	41 60       	ori	r20, 0x01	; 1
    429e:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    42a0:	20 81       	ld	r18, Z
    42a2:	2f 75       	andi	r18, 0x5F	; 95
    42a4:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    42a6:	2e b1       	in	r18, 0x0e	; 14
    42a8:	27 7e       	andi	r18, 0xE7	; 231
    42aa:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    42ac:	2c 91       	ld	r18, X
    42ae:	23 68       	ori	r18, 0x83	; 131
    42b0:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    42b2:	fc 01       	movw	r30, r24
    42b4:	20 81       	ld	r18, Z
    42b6:	2b 60       	ori	r18, 0x0B	; 11
    42b8:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    42ba:	80 91 f5 02 	lds	r24, 0x02F5
    42be:	90 91 f6 02 	lds	r25, 0x02F6
    42c2:	90 93 a9 00 	sts	0x00A9, r25
    42c6:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    42ca:	10 92 ab 00 	sts	0x00AB, r1
    42ce:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    42d2:	e8 01       	movw	r28, r16
    42d4:	88 81       	ld	r24, Y
    42d6:	81 60       	ori	r24, 0x01	; 1
    42d8:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    42da:	8c 91       	ld	r24, X
    42dc:	8f 75       	andi	r24, 0x5F	; 95
    42de:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    42e0:	e2 e0       	ldi	r30, 0x02	; 2
    42e2:	f1 e0       	ldi	r31, 0x01	; 1
    42e4:	80 81       	ld	r24, Z
    42e6:	87 7e       	andi	r24, 0xE7	; 231
    42e8:	80 83       	st	Z, r24


}
    42ea:	df 91       	pop	r29
    42ec:	cf 91       	pop	r28
    42ee:	1f 91       	pop	r17
    42f0:	0f 91       	pop	r16
    42f2:	08 95       	ret

000042f4 <cast_speed>:

signed int cast_speed(signed int vel) {
    42f4:	28 2f       	mov	r18, r24
    42f6:	39 2f       	mov	r19, r25
    42f8:	8e ef       	ldi	r24, 0xFE	; 254
    42fa:	20 30       	cpi	r18, 0x00	; 0
    42fc:	38 07       	cpc	r19, r24
    42fe:	14 f4       	brge	.+4      	; 0x4304 <cast_speed+0x10>
    4300:	20 e0       	ldi	r18, 0x00	; 0
    4302:	3e ef       	ldi	r19, 0xFE	; 254
    4304:	82 e0       	ldi	r24, 0x02	; 2
    4306:	21 30       	cpi	r18, 0x01	; 1
    4308:	38 07       	cpc	r19, r24
    430a:	14 f0       	brlt	.+4      	; 0x4310 <cast_speed+0x1c>
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	32 e0       	ldi	r19, 0x02	; 2
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    4310:	c9 01       	movw	r24, r18
    4312:	08 95       	ret

00004314 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    4314:	80 91 07 02 	lds	r24, 0x0207
    4318:	88 23       	and	r24, r24
    431a:	c1 f1       	breq	.+112    	; 0x438c <handleMotorsWithNoController+0x78>
		last_left_vel = left_vel_sum>>2;
    431c:	60 91 eb 02 	lds	r22, 0x02EB
    4320:	70 91 ec 02 	lds	r23, 0x02EC
    4324:	76 95       	lsr	r23
    4326:	67 95       	ror	r22
    4328:	76 95       	lsr	r23
    432a:	67 95       	ror	r22
    432c:	70 93 f0 02 	sts	0x02F0, r23
    4330:	60 93 ef 02 	sts	0x02EF, r22
		compute_left_vel = 0;
    4334:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    4338:	10 92 ec 02 	sts	0x02EC, r1
    433c:	10 92 eb 02 	sts	0x02EB, r1

		if(pwm_left_desired >= 0) {
    4340:	80 91 f9 02 	lds	r24, 0x02F9
    4344:	90 91 fa 02 	lds	r25, 0x02FA
    4348:	97 fd       	sbrc	r25, 7
    434a:	e3 c0       	rjmp	.+454    	; 0x4512 <handleMotorsWithNoController+0x1fe>
			leftMotSteps += (last_left_vel>>3);
    434c:	75 95       	asr	r23
    434e:	67 95       	ror	r22
    4350:	75 95       	asr	r23
    4352:	67 95       	ror	r22
    4354:	75 95       	asr	r23
    4356:	67 95       	ror	r22
    4358:	88 27       	eor	r24, r24
    435a:	77 fd       	sbrc	r23, 7
    435c:	80 95       	com	r24
    435e:	98 2f       	mov	r25, r24
    4360:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    4364:	9b 01       	movw	r18, r22
    4366:	ac 01       	movw	r20, r24
    4368:	60 91 d3 02 	lds	r22, 0x02D3
    436c:	70 91 d4 02 	lds	r23, 0x02D4
    4370:	80 91 d5 02 	lds	r24, 0x02D5
    4374:	90 91 d6 02 	lds	r25, 0x02D6
    4378:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <__addsf3>
    437c:	60 93 d3 02 	sts	0x02D3, r22
    4380:	70 93 d4 02 	sts	0x02D4, r23
    4384:	80 93 d5 02 	sts	0x02D5, r24
    4388:	90 93 d6 02 	sts	0x02D6, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    438c:	80 91 08 02 	lds	r24, 0x0208
    4390:	88 23       	and	r24, r24
    4392:	c1 f1       	breq	.+112    	; 0x4404 <handleMotorsWithNoController+0xf0>
		last_right_vel = right_vel_sum>>2;
    4394:	60 91 ed 02 	lds	r22, 0x02ED
    4398:	70 91 ee 02 	lds	r23, 0x02EE
    439c:	76 95       	lsr	r23
    439e:	67 95       	ror	r22
    43a0:	76 95       	lsr	r23
    43a2:	67 95       	ror	r22
    43a4:	70 93 f2 02 	sts	0x02F2, r23
    43a8:	60 93 f1 02 	sts	0x02F1, r22
		compute_right_vel = 0;
    43ac:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    43b0:	10 92 ee 02 	sts	0x02EE, r1
    43b4:	10 92 ed 02 	sts	0x02ED, r1

		if(pwm_right_desired >= 0) {
    43b8:	80 91 f7 02 	lds	r24, 0x02F7
    43bc:	90 91 f8 02 	lds	r25, 0x02F8
    43c0:	97 fd       	sbrc	r25, 7
    43c2:	86 c0       	rjmp	.+268    	; 0x44d0 <handleMotorsWithNoController+0x1bc>
			rightMotSteps += (last_right_vel>>3);
    43c4:	75 95       	asr	r23
    43c6:	67 95       	ror	r22
    43c8:	75 95       	asr	r23
    43ca:	67 95       	ror	r22
    43cc:	75 95       	asr	r23
    43ce:	67 95       	ror	r22
    43d0:	88 27       	eor	r24, r24
    43d2:	77 fd       	sbrc	r23, 7
    43d4:	80 95       	com	r24
    43d6:	98 2f       	mov	r25, r24
    43d8:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    43dc:	9b 01       	movw	r18, r22
    43de:	ac 01       	movw	r20, r24
    43e0:	60 91 cf 02 	lds	r22, 0x02CF
    43e4:	70 91 d0 02 	lds	r23, 0x02D0
    43e8:	80 91 d1 02 	lds	r24, 0x02D1
    43ec:	90 91 d2 02 	lds	r25, 0x02D2
    43f0:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <__addsf3>
    43f4:	60 93 cf 02 	sts	0x02CF, r22
    43f8:	70 93 d0 02 	sts	0x02D0, r23
    43fc:	80 93 d1 02 	sts	0x02D1, r24
    4400:	90 93 d2 02 	sts	0x02D2, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    4404:	20 91 fb 02 	lds	r18, 0x02FB
    4408:	30 91 fc 02 	lds	r19, 0x02FC
    440c:	c9 01       	movw	r24, r18
    440e:	88 0f       	add	r24, r24
    4410:	99 1f       	adc	r25, r25
    4412:	88 0f       	add	r24, r24
    4414:	99 1f       	adc	r25, r25
    4416:	82 0f       	add	r24, r18
    4418:	93 1f       	adc	r25, r19
    441a:	90 93 0c 03 	sts	0x030C, r25
    441e:	80 93 0b 03 	sts	0x030B, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    4422:	40 91 fd 02 	lds	r20, 0x02FD
    4426:	50 91 fe 02 	lds	r21, 0x02FE
    442a:	9a 01       	movw	r18, r20
    442c:	22 0f       	add	r18, r18
    442e:	33 1f       	adc	r19, r19
    4430:	22 0f       	add	r18, r18
    4432:	33 1f       	adc	r19, r19
    4434:	24 0f       	add	r18, r20
    4436:	35 1f       	adc	r19, r21
    4438:	52 2f       	mov	r21, r18
    443a:	43 2f       	mov	r20, r19
    443c:	20 93 0d 03 	sts	0x030D, r18
    4440:	30 93 0e 03 	sts	0x030E, r19
	if(obstacleAvoidanceEnabled) {
    4444:	20 91 68 04 	lds	r18, 0x0468
    4448:	22 23       	and	r18, r18
    444a:	39 f5       	brne	.+78     	; 0x449a <handleMotorsWithNoController+0x186>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    444c:	50 93 f5 02 	sts	0x02F5, r21
    4450:	40 93 f6 02 	sts	0x02F6, r20
	pwm_right = pwm_right_working;
    4454:	90 93 f4 02 	sts	0x02F4, r25
    4458:	80 93 f3 02 	sts	0x02F3, r24

	if(pwm_right > 0) {
    445c:	18 16       	cp	r1, r24
    445e:	19 06       	cpc	r1, r25
    4460:	5c f5       	brge	.+86     	; 0x44b8 <handleMotorsWithNoController+0x1a4>
		OCR3A = (unsigned int)pwm_right;
    4462:	90 93 99 00 	sts	0x0099, r25
    4466:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    446a:	80 91 f5 02 	lds	r24, 0x02F5
    446e:	90 91 f6 02 	lds	r25, 0x02F6
    4472:	18 16       	cp	r1, r24
    4474:	19 06       	cpc	r1, r25
    4476:	2c f4       	brge	.+10     	; 0x4482 <handleMotorsWithNoController+0x16e>
		OCR4A = (unsigned int)pwm_left;
    4478:	90 93 a9 00 	sts	0x00A9, r25
    447c:	80 93 a8 00 	sts	0x00A8, r24
    4480:	08 95       	ret
	} else if(pwm_left < 0) {
    4482:	00 97       	sbiw	r24, 0x00	; 0
    4484:	09 f0       	breq	.+2      	; 0x4488 <handleMotorsWithNoController+0x174>
    4486:	6e c0       	rjmp	.+220    	; 0x4564 <handleMotorsWithNoController+0x250>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    4488:	10 92 a9 00 	sts	0x00A9, r1
    448c:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    4490:	10 92 ab 00 	sts	0x00AB, r1
    4494:	10 92 aa 00 	sts	0x00AA, r1
    4498:	08 95       	ret
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    449a:	8d e0       	ldi	r24, 0x0D	; 13
    449c:	93 e0       	ldi	r25, 0x03	; 3
    449e:	6b e0       	ldi	r22, 0x0B	; 11
    44a0:	73 e0       	ldi	r23, 0x03	; 3
    44a2:	0e 94 69 34 	call	0x68d2	; 0x68d2 <obstacleAvoidance>
    44a6:	50 91 0d 03 	lds	r21, 0x030D
    44aa:	40 91 0e 03 	lds	r20, 0x030E
    44ae:	80 91 0b 03 	lds	r24, 0x030B
    44b2:	90 91 0c 03 	lds	r25, 0x030C
    44b6:	ca cf       	rjmp	.-108    	; 0x444c <handleMotorsWithNoController+0x138>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    44b8:	00 97       	sbiw	r24, 0x00	; 0
    44ba:	09 f0       	breq	.+2      	; 0x44be <handleMotorsWithNoController+0x1aa>
    44bc:	4b c0       	rjmp	.+150    	; 0x4554 <handleMotorsWithNoController+0x240>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    44be:	10 92 99 00 	sts	0x0099, r1
    44c2:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    44c6:	10 92 9b 00 	sts	0x009B, r1
    44ca:	10 92 9a 00 	sts	0x009A, r1
    44ce:	cd cf       	rjmp	.-102    	; 0x446a <handleMotorsWithNoController+0x156>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    44d0:	75 95       	asr	r23
    44d2:	67 95       	ror	r22
    44d4:	75 95       	asr	r23
    44d6:	67 95       	ror	r22
    44d8:	75 95       	asr	r23
    44da:	67 95       	ror	r22
    44dc:	88 27       	eor	r24, r24
    44de:	77 fd       	sbrc	r23, 7
    44e0:	80 95       	com	r24
    44e2:	98 2f       	mov	r25, r24
    44e4:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    44e8:	9b 01       	movw	r18, r22
    44ea:	ac 01       	movw	r20, r24
    44ec:	60 91 cf 02 	lds	r22, 0x02CF
    44f0:	70 91 d0 02 	lds	r23, 0x02D0
    44f4:	80 91 d1 02 	lds	r24, 0x02D1
    44f8:	90 91 d2 02 	lds	r25, 0x02D2
    44fc:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <__subsf3>
    4500:	60 93 cf 02 	sts	0x02CF, r22
    4504:	70 93 d0 02 	sts	0x02D0, r23
    4508:	80 93 d1 02 	sts	0x02D1, r24
    450c:	90 93 d2 02 	sts	0x02D2, r25
    4510:	79 cf       	rjmp	.-270    	; 0x4404 <handleMotorsWithNoController+0xf0>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    4512:	75 95       	asr	r23
    4514:	67 95       	ror	r22
    4516:	75 95       	asr	r23
    4518:	67 95       	ror	r22
    451a:	75 95       	asr	r23
    451c:	67 95       	ror	r22
    451e:	88 27       	eor	r24, r24
    4520:	77 fd       	sbrc	r23, 7
    4522:	80 95       	com	r24
    4524:	98 2f       	mov	r25, r24
    4526:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    452a:	9b 01       	movw	r18, r22
    452c:	ac 01       	movw	r20, r24
    452e:	60 91 d3 02 	lds	r22, 0x02D3
    4532:	70 91 d4 02 	lds	r23, 0x02D4
    4536:	80 91 d5 02 	lds	r24, 0x02D5
    453a:	90 91 d6 02 	lds	r25, 0x02D6
    453e:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <__subsf3>
    4542:	60 93 d3 02 	sts	0x02D3, r22
    4546:	70 93 d4 02 	sts	0x02D4, r23
    454a:	80 93 d5 02 	sts	0x02D5, r24
    454e:	90 93 d6 02 	sts	0x02D6, r25
    4552:	1c cf       	rjmp	.-456    	; 0x438c <handleMotorsWithNoController+0x78>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    4554:	90 95       	com	r25
    4556:	81 95       	neg	r24
    4558:	9f 4f       	sbci	r25, 0xFF	; 255
    455a:	90 93 9b 00 	sts	0x009B, r25
    455e:	80 93 9a 00 	sts	0x009A, r24
    4562:	83 cf       	rjmp	.-250    	; 0x446a <handleMotorsWithNoController+0x156>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    4564:	90 95       	com	r25
    4566:	81 95       	neg	r24
    4568:	9f 4f       	sbci	r25, 0xFF	; 255
    456a:	90 93 ab 00 	sts	0x00AB, r25
    456e:	80 93 aa 00 	sts	0x00AA, r24
    4572:	08 95       	ret

00004574 <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4574:	28 2f       	mov	r18, r24
    4576:	33 27       	eor	r19, r19
    4578:	27 fd       	sbrc	r18, 7
    457a:	30 95       	com	r19
    457c:	37 fd       	sbrc	r19, 7
    457e:	13 c0       	rjmp	.+38     	; 0x45a6 <setLeftSpeed+0x32>
    4580:	30 93 10 03 	sts	0x0310, r19
    4584:	20 93 0f 03 	sts	0x030F, r18

    if(vel >= 0) {
    4588:	87 fd       	sbrc	r24, 7
    458a:	05 c0       	rjmp	.+10     	; 0x4596 <setLeftSpeed+0x22>
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    458c:	30 93 fa 02 	sts	0x02FA, r19
    4590:	20 93 f9 02 	sts	0x02F9, r18
    4594:	08 95       	ret
    4596:	30 95       	com	r19
    4598:	21 95       	neg	r18
    459a:	3f 4f       	sbci	r19, 0xFF	; 255
    459c:	30 93 fa 02 	sts	0x02FA, r19
    45a0:	20 93 f9 02 	sts	0x02F9, r18
    45a4:	08 95       	ret
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    45a6:	30 95       	com	r19
    45a8:	21 95       	neg	r18
    45aa:	3f 4f       	sbci	r19, 0xFF	; 255
    45ac:	e9 cf       	rjmp	.-46     	; 0x4580 <setLeftSpeed+0xc>

000045ae <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    45ae:	28 2f       	mov	r18, r24
    45b0:	33 27       	eor	r19, r19
    45b2:	27 fd       	sbrc	r18, 7
    45b4:	30 95       	com	r19
    45b6:	37 fd       	sbrc	r19, 7
    45b8:	13 c0       	rjmp	.+38     	; 0x45e0 <setRightSpeed+0x32>
    45ba:	30 93 12 03 	sts	0x0312, r19
    45be:	20 93 11 03 	sts	0x0311, r18

    if(vel >= 0) {
    45c2:	87 fd       	sbrc	r24, 7
    45c4:	05 c0       	rjmp	.+10     	; 0x45d0 <setRightSpeed+0x22>
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    45c6:	30 93 f8 02 	sts	0x02F8, r19
    45ca:	20 93 f7 02 	sts	0x02F7, r18
    45ce:	08 95       	ret
    45d0:	30 95       	com	r19
    45d2:	21 95       	neg	r18
    45d4:	3f 4f       	sbci	r19, 0xFF	; 255
    45d6:	30 93 f8 02 	sts	0x02F8, r19
    45da:	20 93 f7 02 	sts	0x02F7, r18
    45de:	08 95       	ret

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    45e0:	30 95       	com	r19
    45e2:	21 95       	neg	r18
    45e4:	3f 4f       	sbci	r19, 0xFF	; 255
    45e6:	e9 cf       	rjmp	.-46     	; 0x45ba <setRightSpeed+0xc>

000045e8 <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    45e8:	80 91 c6 04 	lds	r24, 0x04C6
    45ec:	88 23       	and	r24, r24
    45ee:	89 f5       	brne	.+98     	; 0x4652 <updateOdomData+0x6a>
        if(calibVelIndex>1) {
    45f0:	e0 91 ca 04 	lds	r30, 0x04CA
    45f4:	e2 30       	cpi	r30, 0x02	; 2
    45f6:	08 f4       	brcc	.+2      	; 0x45fa <updateOdomData+0x12>
    45f8:	96 c0       	rjmp	.+300    	; 0x4726 <updateOdomData+0x13e>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    45fa:	f0 e0       	ldi	r31, 0x00	; 0
    45fc:	df 01       	movw	r26, r30
    45fe:	a2 95       	swap	r26
    4600:	b2 95       	swap	r27
    4602:	b0 7f       	andi	r27, 0xF0	; 240
    4604:	ba 27       	eor	r27, r26
    4606:	a0 7f       	andi	r26, 0xF0	; 240
    4608:	ba 27       	eor	r27, r26
    460a:	a3 54       	subi	r26, 0x43	; 67
    460c:	bb 4f       	sbci	r27, 0xFB	; 251
    460e:	12 96       	adiw	r26, 0x02	; 2
    4610:	2d 91       	ld	r18, X+
    4612:	3c 91       	ld	r19, X
    4614:	13 97       	sbiw	r26, 0x03	; 3
    4616:	80 91 89 05 	lds	r24, 0x0589
    461a:	90 91 8a 05 	lds	r25, 0x058A
    461e:	28 17       	cp	r18, r24
    4620:	39 07       	cpc	r19, r25
    4622:	34 f0       	brlt	.+12     	; 0x4630 <updateOdomData+0x48>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    4624:	c9 01       	movw	r24, r18
    4626:	01 96       	adiw	r24, 0x01	; 1
    4628:	90 93 8a 05 	sts	0x058A, r25
    462c:	80 93 89 05 	sts	0x0589, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    4630:	e2 95       	swap	r30
    4632:	f2 95       	swap	r31
    4634:	f0 7f       	andi	r31, 0xF0	; 240
    4636:	fe 27       	eor	r31, r30
    4638:	e0 7f       	andi	r30, 0xF0	; 240
    463a:	fe 27       	eor	r31, r30
    463c:	e3 53       	subi	r30, 0x33	; 51
    463e:	fb 4f       	sbci	r31, 0xFB	; 251
    4640:	20 91 b0 04 	lds	r18, 0x04B0
    4644:	30 91 b1 04 	lds	r19, 0x04B1
    4648:	31 83       	std	Z+1, r19	; 0x01
    464a:	20 83       	st	Z, r18
        calibration[calibVelIndex-1][1] = tempVel;
    464c:	93 83       	std	Z+3, r25	; 0x03
    464e:	82 83       	std	Z+2, r24	; 0x02
    4650:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    4652:	81 30       	cpi	r24, 0x01	; 1
    4654:	31 f0       	breq	.+12     	; 0x4662 <updateOdomData+0x7a>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    4656:	82 30       	cpi	r24, 0x02	; 2
    4658:	09 f4       	brne	.+2      	; 0x465c <updateOdomData+0x74>
    465a:	6b c0       	rjmp	.+214    	; 0x4732 <updateOdomData+0x14a>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    465c:	83 30       	cpi	r24, 0x03	; 3
    465e:	91 f1       	breq	.+100    	; 0x46c4 <updateOdomData+0xdc>
    4660:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4662:	e0 91 ca 04 	lds	r30, 0x04CA
    4666:	e2 30       	cpi	r30, 0x02	; 2
    4668:	08 f4       	brcc	.+2      	; 0x466c <updateOdomData+0x84>
    466a:	93 c0       	rjmp	.+294    	; 0x4792 <updateOdomData+0x1aa>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    466c:	f0 e0       	ldi	r31, 0x00	; 0
    466e:	df 01       	movw	r26, r30
    4670:	a2 95       	swap	r26
    4672:	b2 95       	swap	r27
    4674:	b0 7f       	andi	r27, 0xF0	; 240
    4676:	ba 27       	eor	r27, r26
    4678:	a0 7f       	andi	r26, 0xF0	; 240
    467a:	ba 27       	eor	r27, r26
    467c:	a3 54       	subi	r26, 0x43	; 67
    467e:	bb 4f       	sbci	r27, 0xFB	; 251
    4680:	16 96       	adiw	r26, 0x06	; 6
    4682:	2d 91       	ld	r18, X+
    4684:	3c 91       	ld	r19, X
    4686:	17 97       	sbiw	r26, 0x07	; 7
    4688:	80 91 89 05 	lds	r24, 0x0589
    468c:	90 91 8a 05 	lds	r25, 0x058A
    4690:	28 17       	cp	r18, r24
    4692:	39 07       	cpc	r19, r25
    4694:	34 f0       	brlt	.+12     	; 0x46a2 <updateOdomData+0xba>
                tempVel = calibration[calibVelIndex-2][3]+1;
    4696:	c9 01       	movw	r24, r18
    4698:	01 96       	adiw	r24, 0x01	; 1
    469a:	90 93 8a 05 	sts	0x058A, r25
    469e:	80 93 89 05 	sts	0x0589, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    46a2:	e2 95       	swap	r30
    46a4:	f2 95       	swap	r31
    46a6:	f0 7f       	andi	r31, 0xF0	; 240
    46a8:	fe 27       	eor	r31, r30
    46aa:	e0 7f       	andi	r30, 0xF0	; 240
    46ac:	fe 27       	eor	r31, r30
    46ae:	e3 53       	subi	r30, 0x33	; 51
    46b0:	fb 4f       	sbci	r31, 0xFB	; 251
    46b2:	20 91 b2 04 	lds	r18, 0x04B2
    46b6:	30 91 b3 04 	lds	r19, 0x04B3
    46ba:	35 83       	std	Z+5, r19	; 0x05
    46bc:	24 83       	std	Z+4, r18	; 0x04
        calibration[calibVelIndex-1][3] = tempVel;
    46be:	97 83       	std	Z+7, r25	; 0x07
    46c0:	86 83       	std	Z+6, r24	; 0x06
    46c2:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    46c4:	e0 91 ca 04 	lds	r30, 0x04CA
    46c8:	e2 30       	cpi	r30, 0x02	; 2
    46ca:	08 f4       	brcc	.+2      	; 0x46ce <updateOdomData+0xe6>
    46cc:	68 c0       	rjmp	.+208    	; 0x479e <updateOdomData+0x1b6>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    46ce:	f0 e0       	ldi	r31, 0x00	; 0
    46d0:	df 01       	movw	r26, r30
    46d2:	a2 95       	swap	r26
    46d4:	b2 95       	swap	r27
    46d6:	b0 7f       	andi	r27, 0xF0	; 240
    46d8:	ba 27       	eor	r27, r26
    46da:	a0 7f       	andi	r26, 0xF0	; 240
    46dc:	ba 27       	eor	r27, r26
    46de:	a3 54       	subi	r26, 0x43	; 67
    46e0:	bb 4f       	sbci	r27, 0xFB	; 251
    46e2:	1e 96       	adiw	r26, 0x0e	; 14
    46e4:	2d 91       	ld	r18, X+
    46e6:	3c 91       	ld	r19, X
    46e8:	1f 97       	sbiw	r26, 0x0f	; 15
    46ea:	80 91 89 05 	lds	r24, 0x0589
    46ee:	90 91 8a 05 	lds	r25, 0x058A
    46f2:	28 17       	cp	r18, r24
    46f4:	39 07       	cpc	r19, r25
    46f6:	34 f0       	brlt	.+12     	; 0x4704 <updateOdomData+0x11c>
                tempVel = calibration[calibVelIndex-2][7]+1;
    46f8:	c9 01       	movw	r24, r18
    46fa:	01 96       	adiw	r24, 0x01	; 1
    46fc:	90 93 8a 05 	sts	0x058A, r25
    4700:	80 93 89 05 	sts	0x0589, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    4704:	e2 95       	swap	r30
    4706:	f2 95       	swap	r31
    4708:	f0 7f       	andi	r31, 0xF0	; 240
    470a:	fe 27       	eor	r31, r30
    470c:	e0 7f       	andi	r30, 0xF0	; 240
    470e:	fe 27       	eor	r31, r30
    4710:	e3 53       	subi	r30, 0x33	; 51
    4712:	fb 4f       	sbci	r31, 0xFB	; 251
    4714:	20 91 b2 04 	lds	r18, 0x04B2
    4718:	30 91 b3 04 	lds	r19, 0x04B3
    471c:	35 87       	std	Z+13, r19	; 0x0d
    471e:	24 87       	std	Z+12, r18	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    4720:	97 87       	std	Z+15, r25	; 0x0f
    4722:	86 87       	std	Z+14, r24	; 0x0e
    4724:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4726:	f0 e0       	ldi	r31, 0x00	; 0
    4728:	80 91 89 05 	lds	r24, 0x0589
    472c:	90 91 8a 05 	lds	r25, 0x058A
    4730:	7f cf       	rjmp	.-258    	; 0x4630 <updateOdomData+0x48>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4732:	e0 91 ca 04 	lds	r30, 0x04CA
    4736:	e2 30       	cpi	r30, 0x02	; 2
    4738:	c0 f1       	brcs	.+112    	; 0x47aa <updateOdomData+0x1c2>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    473a:	f0 e0       	ldi	r31, 0x00	; 0
    473c:	df 01       	movw	r26, r30
    473e:	a2 95       	swap	r26
    4740:	b2 95       	swap	r27
    4742:	b0 7f       	andi	r27, 0xF0	; 240
    4744:	ba 27       	eor	r27, r26
    4746:	a0 7f       	andi	r26, 0xF0	; 240
    4748:	ba 27       	eor	r27, r26
    474a:	a3 54       	subi	r26, 0x43	; 67
    474c:	bb 4f       	sbci	r27, 0xFB	; 251
    474e:	1a 96       	adiw	r26, 0x0a	; 10
    4750:	2d 91       	ld	r18, X+
    4752:	3c 91       	ld	r19, X
    4754:	1b 97       	sbiw	r26, 0x0b	; 11
    4756:	80 91 89 05 	lds	r24, 0x0589
    475a:	90 91 8a 05 	lds	r25, 0x058A
    475e:	28 17       	cp	r18, r24
    4760:	39 07       	cpc	r19, r25
    4762:	34 f0       	brlt	.+12     	; 0x4770 <updateOdomData+0x188>
                tempVel = calibration[calibVelIndex-2][5]+1;
    4764:	c9 01       	movw	r24, r18
    4766:	01 96       	adiw	r24, 0x01	; 1
    4768:	90 93 8a 05 	sts	0x058A, r25
    476c:	80 93 89 05 	sts	0x0589, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    4770:	e2 95       	swap	r30
    4772:	f2 95       	swap	r31
    4774:	f0 7f       	andi	r31, 0xF0	; 240
    4776:	fe 27       	eor	r31, r30
    4778:	e0 7f       	andi	r30, 0xF0	; 240
    477a:	fe 27       	eor	r31, r30
    477c:	e3 53       	subi	r30, 0x33	; 51
    477e:	fb 4f       	sbci	r31, 0xFB	; 251
    4780:	20 91 b0 04 	lds	r18, 0x04B0
    4784:	30 91 b1 04 	lds	r19, 0x04B1
    4788:	31 87       	std	Z+9, r19	; 0x09
    478a:	20 87       	std	Z+8, r18	; 0x08
        calibration[calibVelIndex-1][5] = tempVel;
    478c:	93 87       	std	Z+11, r25	; 0x0b
    478e:	82 87       	std	Z+10, r24	; 0x0a
    4790:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4792:	f0 e0       	ldi	r31, 0x00	; 0
    4794:	80 91 89 05 	lds	r24, 0x0589
    4798:	90 91 8a 05 	lds	r25, 0x058A
    479c:	82 cf       	rjmp	.-252    	; 0x46a2 <updateOdomData+0xba>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    479e:	f0 e0       	ldi	r31, 0x00	; 0
    47a0:	80 91 89 05 	lds	r24, 0x0589
    47a4:	90 91 8a 05 	lds	r25, 0x058A
    47a8:	ad cf       	rjmp	.-166    	; 0x4704 <updateOdomData+0x11c>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    47aa:	f0 e0       	ldi	r31, 0x00	; 0
    47ac:	80 91 89 05 	lds	r24, 0x0589
    47b0:	90 91 8a 05 	lds	r25, 0x058A
    47b4:	dd cf       	rjmp	.-70     	; 0x4770 <updateOdomData+0x188>

000047b6 <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    47b6:	80 91 88 05 	lds	r24, 0x0588
    47ba:	82 30       	cpi	r24, 0x02	; 2
    47bc:	09 f4       	brne	.+2      	; 0x47c0 <handleCalibration+0xa>
    47be:	d0 c0       	rjmp	.+416    	; 0x4960 <handleCalibration+0x1aa>
    47c0:	83 30       	cpi	r24, 0x03	; 3
    47c2:	08 f4       	brcc	.+2      	; 0x47c6 <handleCalibration+0x10>
    47c4:	3f c0       	rjmp	.+126    	; 0x4844 <handleCalibration+0x8e>
    47c6:	84 30       	cpi	r24, 0x04	; 4
    47c8:	09 f4       	brne	.+2      	; 0x47cc <handleCalibration+0x16>
    47ca:	91 c0       	rjmp	.+290    	; 0x48ee <handleCalibration+0x138>
    47cc:	84 30       	cpi	r24, 0x04	; 4
    47ce:	08 f0       	brcs	.+2      	; 0x47d2 <handleCalibration+0x1c>
    47d0:	63 c0       	rjmp	.+198    	; 0x4898 <handleCalibration+0xe2>
                calibState = 5;
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    47d2:	80 91 c6 04 	lds	r24, 0x04C6
    47d6:	88 23       	and	r24, r24
    47d8:	09 f4       	brne	.+2      	; 0x47dc <handleCalibration+0x26>
    47da:	e1 c0       	rjmp	.+450    	; 0x499e <handleCalibration+0x1e8>
    47dc:	82 30       	cpi	r24, 0x02	; 2
    47de:	09 f4       	brne	.+2      	; 0x47e2 <handleCalibration+0x2c>
    47e0:	de c0       	rjmp	.+444    	; 0x499e <handleCalibration+0x1e8>
                    updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    47e2:	80 91 6d 02 	lds	r24, 0x026D
    47e6:	90 91 6e 02 	lds	r25, 0x026E
    47ea:	21 e0       	ldi	r18, 0x01	; 1
    47ec:	8a 36       	cpi	r24, 0x6A	; 106
    47ee:	92 07       	cpc	r25, r18
    47f0:	0c f4       	brge	.+2      	; 0x47f4 <handleCalibration+0x3e>
    47f2:	8a c1       	rjmp	.+788    	; 0x4b08 <handleCalibration+0x352>
					updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    47f4:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    47f8:	20 91 84 05 	lds	r18, 0x0584
    47fc:	30 91 85 05 	lds	r19, 0x0585
    4800:	40 91 86 05 	lds	r20, 0x0586
    4804:	50 91 87 05 	lds	r21, 0x0587
    4808:	62 1b       	sub	r22, r18
    480a:	73 0b       	sbc	r23, r19
    480c:	84 0b       	sbc	r24, r20
    480e:	95 0b       	sbc	r25, r21
    4810:	6c 39       	cpi	r22, 0x9C	; 156
    4812:	2d ec       	ldi	r18, 0xCD	; 205
    4814:	72 07       	cpc	r23, r18
    4816:	28 e0       	ldi	r18, 0x08	; 8
    4818:	82 07       	cpc	r24, r18
    481a:	20 e0       	ldi	r18, 0x00	; 0
    481c:	92 07       	cpc	r25, r18
    481e:	d8 f1       	brcs	.+118    	; 0x4896 <handleCalibration+0xe0>
            	tempVel = 0;
    4820:	10 92 8a 05 	sts	0x058A, r1
    4824:	10 92 89 05 	sts	0x0589, r1
				avgLeftSpeed = 0;
    4828:	10 92 b1 04 	sts	0x04B1, r1
    482c:	10 92 b0 04 	sts	0x04B0, r1
				avgRightSpeed = 0;
    4830:	10 92 b3 04 	sts	0x04B3, r1
    4834:	10 92 b2 04 	sts	0x04B2, r1
                updateOdomData();
    4838:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <updateOdomData>
                calibState = 5;
    483c:	85 e0       	ldi	r24, 0x05	; 5
    483e:	80 93 88 05 	sts	0x0588, r24
    4842:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    4844:	88 23       	and	r24, r24
    4846:	29 f5       	brne	.+74     	; 0x4892 <handleCalibration+0xdc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    4848:	80 91 c6 04 	lds	r24, 0x04C6
    484c:	88 23       	and	r24, r24
    484e:	09 f0       	breq	.+2      	; 0x4852 <handleCalibration+0x9c>
    4850:	3c c1       	rjmp	.+632    	; 0x4aca <handleCalibration+0x314>
				pwm_intermediate_right_desired = 0;
    4852:	10 92 fc 02 	sts	0x02FC, r1
    4856:	10 92 fb 02 	sts	0x02FB, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    485a:	90 91 ca 04 	lds	r25, 0x04CA
    485e:	85 e0       	ldi	r24, 0x05	; 5
    4860:	98 9f       	mul	r25, r24
    4862:	c0 01       	movw	r24, r0
    4864:	11 24       	eor	r1, r1
    4866:	88 0f       	add	r24, r24
    4868:	99 1f       	adc	r25, r25
    486a:	88 0f       	add	r24, r24
    486c:	99 1f       	adc	r25, r25
    486e:	90 93 fe 02 	sts	0x02FE, r25
    4872:	80 93 fd 02 	sts	0x02FD, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = 1;
    4876:	81 e0       	ldi	r24, 0x01	; 1
    4878:	80 93 88 05 	sts	0x0588, r24
            timeoutOdometry = getTime100MicroSec();
    487c:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    4880:	60 93 84 05 	sts	0x0584, r22
    4884:	70 93 85 05 	sts	0x0585, r23
    4888:	80 93 86 05 	sts	0x0586, r24
    488c:	90 93 87 05 	sts	0x0587, r25
            break;
    4890:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    4892:	81 30       	cpi	r24, 0x01	; 1
    4894:	71 f0       	breq	.+28     	; 0x48b2 <handleCalibration+0xfc>
    4896:	08 95       	ret
    4898:	85 30       	cpi	r24, 0x05	; 5
    489a:	e9 f7       	brne	.-6      	; 0x4896 <handleCalibration+0xe0>
                calibState = 5;
			}
            break;

		case 5:
        	calibVelIndex++;
    489c:	80 91 ca 04 	lds	r24, 0x04CA
    48a0:	8f 5f       	subi	r24, 0xFF	; 255
    48a2:	80 93 ca 04 	sts	0x04CA, r24
            if(calibVelIndex == 10) {
    48a6:	8a 30       	cpi	r24, 0x0A	; 10
    48a8:	09 f4       	brne	.+2      	; 0x48ac <handleCalibration+0xf6>
    48aa:	8b c1       	rjmp	.+790    	; 0x4bc2 <handleCalibration+0x40c>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = 0;
    48ac:	10 92 88 05 	sts	0x0588, r1
    48b0:	08 95       	ret
            calibState = 1;
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    48b2:	80 91 c6 04 	lds	r24, 0x04C6
    48b6:	88 23       	and	r24, r24
    48b8:	09 f4       	brne	.+2      	; 0x48bc <handleCalibration+0x106>
    48ba:	d0 c0       	rjmp	.+416    	; 0x4a5c <handleCalibration+0x2a6>
    48bc:	82 30       	cpi	r24, 0x02	; 2
    48be:	09 f4       	brne	.+2      	; 0x48c2 <handleCalibration+0x10c>
    48c0:	cd c0       	rjmp	.+410    	; 0x4a5c <handleCalibration+0x2a6>
                    timeOdometry = getTime100MicroSec();;
                    calibState = 2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    48c2:	80 91 6d 02 	lds	r24, 0x026D
    48c6:	90 91 6e 02 	lds	r25, 0x026E
    48ca:	21 e0       	ldi	r18, 0x01	; 1
    48cc:	8a 36       	cpi	r24, 0x6A	; 106
    48ce:	92 07       	cpc	r25, r18
    48d0:	0c f0       	brlt	.+2      	; 0x48d4 <handleCalibration+0x11e>
    48d2:	90 cf       	rjmp	.-224    	; 0x47f4 <handleCalibration+0x3e>
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
    48d4:	10 92 af 04 	sts	0x04AF, r1
    48d8:	10 92 ae 04 	sts	0x04AE, r1
					rightSpeedSumOdom = 0;
    48dc:	10 92 a8 04 	sts	0x04A8, r1
    48e0:	10 92 a9 04 	sts	0x04A9, r1
    48e4:	10 92 aa 04 	sts	0x04AA, r1
    48e8:	10 92 ab 04 	sts	0x04AB, r1
    48ec:	cc c0       	rjmp	.+408    	; 0x4a86 <handleCalibration+0x2d0>
                calibState = 5;
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    48ee:	80 91 c6 04 	lds	r24, 0x04C6
    48f2:	88 23       	and	r24, r24
    48f4:	49 f1       	breq	.+82     	; 0x4948 <handleCalibration+0x192>
    48f6:	82 30       	cpi	r24, 0x02	; 2
    48f8:	39 f1       	breq	.+78     	; 0x4948 <handleCalibration+0x192>
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    48fa:	80 91 6d 02 	lds	r24, 0x026D
    48fe:	90 91 6e 02 	lds	r25, 0x026E
    4902:	21 e0       	ldi	r18, 0x01	; 1
    4904:	86 3b       	cpi	r24, 0xB6	; 182
    4906:	92 07       	cpc	r25, r18
    4908:	3c f5       	brge	.+78     	; 0x4958 <handleCalibration+0x1a2>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    490a:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    490e:	20 91 84 05 	lds	r18, 0x0584
    4912:	30 91 85 05 	lds	r19, 0x0585
    4916:	40 91 86 05 	lds	r20, 0x0586
    491a:	50 91 87 05 	lds	r21, 0x0587
    491e:	62 1b       	sub	r22, r18
    4920:	73 0b       	sbc	r23, r19
    4922:	84 0b       	sbc	r24, r20
    4924:	95 0b       	sbc	r25, r21
    4926:	6c 39       	cpi	r22, 0x9C	; 156
    4928:	2d ec       	ldi	r18, 0xCD	; 205
    492a:	72 07       	cpc	r23, r18
    492c:	28 e0       	ldi	r18, 0x08	; 8
    492e:	82 07       	cpc	r24, r18
    4930:	20 e0       	ldi	r18, 0x00	; 0
    4932:	92 07       	cpc	r25, r18
    4934:	08 f4       	brcc	.+2      	; 0x4938 <handleCalibration+0x182>
    4936:	af cf       	rjmp	.-162    	; 0x4896 <handleCalibration+0xe0>
            	tempVel = 0;
    4938:	10 92 8a 05 	sts	0x058A, r1
    493c:	10 92 89 05 	sts	0x0589, r1
                //updateOdomData();
                calibState = 5;
    4940:	85 e0       	ldi	r24, 0x05	; 5
    4942:	80 93 88 05 	sts	0x0588, r24
    4946:	08 95       	ret
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    4948:	80 91 67 02 	lds	r24, 0x0267
    494c:	90 91 68 02 	lds	r25, 0x0268
    4950:	21 e0       	ldi	r18, 0x01	; 1
    4952:	86 3b       	cpi	r24, 0xB6	; 182
    4954:	92 07       	cpc	r25, r18
    4956:	cc f2       	brlt	.-78     	; 0x490a <handleCalibration+0x154>
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
    4958:	85 e0       	ldi	r24, 0x05	; 5
    495a:	80 93 88 05 	sts	0x0588, r24
    495e:	d5 cf       	rjmp	.-86     	; 0x490a <handleCalibration+0x154>
                calibState = 5;
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    4960:	80 91 c6 04 	lds	r24, 0x04C6
    4964:	88 23       	and	r24, r24
    4966:	09 f4       	brne	.+2      	; 0x496a <handleCalibration+0x1b4>
    4968:	a6 c0       	rjmp	.+332    	; 0x4ab6 <handleCalibration+0x300>
    496a:	82 30       	cpi	r24, 0x02	; 2
    496c:	09 f4       	brne	.+2      	; 0x4970 <handleCalibration+0x1ba>
    496e:	a3 c0       	rjmp	.+326    	; 0x4ab6 <handleCalibration+0x300>
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 3;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    4970:	80 91 6d 02 	lds	r24, 0x026D
    4974:	90 91 6e 02 	lds	r25, 0x026E
    4978:	21 e0       	ldi	r18, 0x01	; 1
    497a:	86 3b       	cpi	r24, 0xB6	; 182
    497c:	92 07       	cpc	r25, r18
    497e:	0c f4       	brge	.+2      	; 0x4982 <handleCalibration+0x1cc>
    4980:	39 cf       	rjmp	.-398    	; 0x47f4 <handleCalibration+0x3e>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
                	calibState = 3;
    4982:	83 e0       	ldi	r24, 0x03	; 3
    4984:	80 93 88 05 	sts	0x0588, r24
                    timeoutOdometry = getTime100MicroSec();;
    4988:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    498c:	60 93 84 05 	sts	0x0584, r22
    4990:	70 93 85 05 	sts	0x0585, r23
    4994:	80 93 86 05 	sts	0x0586, r24
    4998:	90 93 87 05 	sts	0x0587, r25
    499c:	2b cf       	rjmp	.-426    	; 0x47f4 <handleCalibration+0x3e>
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    499e:	80 91 67 02 	lds	r24, 0x0267
    49a2:	90 91 68 02 	lds	r25, 0x0268
    49a6:	21 e0       	ldi	r18, 0x01	; 1
    49a8:	8a 36       	cpi	r24, 0x6A	; 106
    49aa:	92 07       	cpc	r25, r18
    49ac:	0c f0       	brlt	.+2      	; 0x49b0 <handleCalibration+0x1fa>
    49ae:	22 cf       	rjmp	.-444    	; 0x47f4 <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    49b0:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    49b4:	20 91 c1 04 	lds	r18, 0x04C1
    49b8:	30 91 c2 04 	lds	r19, 0x04C2
    49bc:	40 91 c3 04 	lds	r20, 0x04C3
    49c0:	50 91 c4 04 	lds	r21, 0x04C4
    49c4:	62 1b       	sub	r22, r18
    49c6:	73 0b       	sbc	r23, r19
    49c8:	84 0b       	sbc	r24, r20
    49ca:	95 0b       	sbc	r25, r21
    49cc:	60 93 c1 04 	sts	0x04C1, r22
    49d0:	70 93 c2 04 	sts	0x04C2, r23
    49d4:	80 93 c3 04 	sts	0x04C3, r24
    49d8:	90 93 c4 04 	sts	0x04C4, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    49dc:	0e 94 57 40 	call	0x80ae	; 0x80ae <__floatunsisf>
    49e0:	20 e0       	ldi	r18, 0x00	; 0
    49e2:	30 e0       	ldi	r19, 0x00	; 0
    49e4:	40 ed       	ldi	r20, 0xD0	; 208
    49e6:	52 e4       	ldi	r21, 0x42	; 66
    49e8:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    49ec:	20 e0       	ldi	r18, 0x00	; 0
    49ee:	34 e2       	ldi	r19, 0x24	; 36
    49f0:	44 e7       	ldi	r20, 0x74	; 116
    49f2:	59 e4       	ldi	r21, 0x49	; 73
    49f4:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    49f8:	9b 01       	movw	r18, r22
    49fa:	ac 01       	movw	r20, r24
    49fc:	64 e1       	ldi	r22, 0x14	; 20
    49fe:	7e e2       	ldi	r23, 0x2E	; 46
    4a00:	88 e7       	ldi	r24, 0x78	; 120
    4a02:	93 e4       	ldi	r25, 0x43	; 67
    4a04:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    4a08:	0e 94 2b 40 	call	0x8056	; 0x8056 <__fixunssfsi>
    4a0c:	70 93 8a 05 	sts	0x058A, r23
    4a10:	60 93 89 05 	sts	0x0589, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    4a14:	20 91 ac 04 	lds	r18, 0x04AC
    4a18:	30 91 ad 04 	lds	r19, 0x04AD
    4a1c:	40 e0       	ldi	r20, 0x00	; 0
    4a1e:	50 e0       	ldi	r21, 0x00	; 0
    4a20:	60 91 a4 04 	lds	r22, 0x04A4
    4a24:	70 91 a5 04 	lds	r23, 0x04A5
    4a28:	80 91 a6 04 	lds	r24, 0x04A6
    4a2c:	90 91 a7 04 	lds	r25, 0x04A7
    4a30:	0e 94 3f 42 	call	0x847e	; 0x847e <__divmodsi4>
    4a34:	30 93 b1 04 	sts	0x04B1, r19
    4a38:	20 93 b0 04 	sts	0x04B0, r18
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
					updateOdomData();
    4a3c:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <updateOdomData>
                    calibState = 4;
    4a40:	84 e0       	ldi	r24, 0x04	; 4
    4a42:	80 93 88 05 	sts	0x0588, r24
                    timeoutOdometry = getTime100MicroSec();;
    4a46:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    4a4a:	60 93 84 05 	sts	0x0584, r22
    4a4e:	70 93 85 05 	sts	0x0585, r23
    4a52:	80 93 86 05 	sts	0x0586, r24
    4a56:	90 93 87 05 	sts	0x0587, r25
    4a5a:	cc ce       	rjmp	.-616    	; 0x47f4 <handleCalibration+0x3e>
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    4a5c:	80 91 67 02 	lds	r24, 0x0267
    4a60:	90 91 68 02 	lds	r25, 0x0268
    4a64:	21 e0       	ldi	r18, 0x01	; 1
    4a66:	8a 36       	cpi	r24, 0x6A	; 106
    4a68:	92 07       	cpc	r25, r18
    4a6a:	0c f0       	brlt	.+2      	; 0x4a6e <handleCalibration+0x2b8>
    4a6c:	c3 ce       	rjmp	.-634    	; 0x47f4 <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {				
                	leftSumCount = 0;
    4a6e:	10 92 ad 04 	sts	0x04AD, r1
    4a72:	10 92 ac 04 	sts	0x04AC, r1
                    leftSpeedSumOdom = 0;
    4a76:	10 92 a4 04 	sts	0x04A4, r1
    4a7a:	10 92 a5 04 	sts	0x04A5, r1
    4a7e:	10 92 a6 04 	sts	0x04A6, r1
    4a82:	10 92 a7 04 	sts	0x04A7, r1
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
					rightSpeedSumOdom = 0;
                    timeOdometry = getTime100MicroSec();;
    4a86:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    4a8a:	60 93 c1 04 	sts	0x04C1, r22
    4a8e:	70 93 c2 04 	sts	0x04C2, r23
    4a92:	80 93 c3 04 	sts	0x04C3, r24
    4a96:	90 93 c4 04 	sts	0x04C4, r25
                    calibState = 2;
    4a9a:	82 e0       	ldi	r24, 0x02	; 2
    4a9c:	80 93 88 05 	sts	0x0588, r24
                    timeoutOdometry = getTime100MicroSec();;
    4aa0:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    4aa4:	60 93 84 05 	sts	0x0584, r22
    4aa8:	70 93 85 05 	sts	0x0585, r23
    4aac:	80 93 86 05 	sts	0x0586, r24
    4ab0:	90 93 87 05 	sts	0x0587, r25
    4ab4:	9f ce       	rjmp	.-706    	; 0x47f4 <handleCalibration+0x3e>
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    4ab6:	80 91 67 02 	lds	r24, 0x0267
    4aba:	90 91 68 02 	lds	r25, 0x0268
    4abe:	21 e0       	ldi	r18, 0x01	; 1
    4ac0:	86 3b       	cpi	r24, 0xB6	; 182
    4ac2:	92 07       	cpc	r25, r18
    4ac4:	0c f4       	brge	.+2      	; 0x4ac8 <handleCalibration+0x312>
    4ac6:	96 ce       	rjmp	.-724    	; 0x47f4 <handleCalibration+0x3e>
    4ac8:	5c cf       	rjmp	.-328    	; 0x4982 <handleCalibration+0x1cc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    4aca:	81 30       	cpi	r24, 0x01	; 1
    4acc:	09 f4       	brne	.+2      	; 0x4ad0 <handleCalibration+0x31a>
    4ace:	84 c0       	rjmp	.+264    	; 0x4bd8 <handleCalibration+0x422>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    4ad0:	82 30       	cpi	r24, 0x02	; 2
    4ad2:	09 f4       	brne	.+2      	; 0x4ad6 <handleCalibration+0x320>
    4ad4:	60 c0       	rjmp	.+192    	; 0x4b96 <handleCalibration+0x3e0>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    4ad6:	83 30       	cpi	r24, 0x03	; 3
    4ad8:	09 f0       	breq	.+2      	; 0x4adc <handleCalibration+0x326>
    4ada:	cd ce       	rjmp	.-614    	; 0x4876 <handleCalibration+0xc0>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    4adc:	90 91 ca 04 	lds	r25, 0x04CA
    4ae0:	85 e0       	ldi	r24, 0x05	; 5
    4ae2:	98 9f       	mul	r25, r24
    4ae4:	c0 01       	movw	r24, r0
    4ae6:	11 24       	eor	r1, r1
    4ae8:	88 0f       	add	r24, r24
    4aea:	99 1f       	adc	r25, r25
    4aec:	88 0f       	add	r24, r24
    4aee:	99 1f       	adc	r25, r25
    4af0:	90 95       	com	r25
    4af2:	81 95       	neg	r24
    4af4:	9f 4f       	sbci	r25, 0xFF	; 255
    4af6:	90 93 fc 02 	sts	0x02FC, r25
    4afa:	80 93 fb 02 	sts	0x02FB, r24
				pwm_intermediate_left_desired = 0;
    4afe:	10 92 fe 02 	sts	0x02FE, r1
    4b02:	10 92 fd 02 	sts	0x02FD, r1
    4b06:	b7 ce       	rjmp	.-658    	; 0x4876 <handleCalibration+0xc0>
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    4b08:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    4b0c:	20 91 c1 04 	lds	r18, 0x04C1
    4b10:	30 91 c2 04 	lds	r19, 0x04C2
    4b14:	40 91 c3 04 	lds	r20, 0x04C3
    4b18:	50 91 c4 04 	lds	r21, 0x04C4
    4b1c:	62 1b       	sub	r22, r18
    4b1e:	73 0b       	sbc	r23, r19
    4b20:	84 0b       	sbc	r24, r20
    4b22:	95 0b       	sbc	r25, r21
    4b24:	60 93 c1 04 	sts	0x04C1, r22
    4b28:	70 93 c2 04 	sts	0x04C2, r23
    4b2c:	80 93 c3 04 	sts	0x04C3, r24
    4b30:	90 93 c4 04 	sts	0x04C4, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    4b34:	0e 94 57 40 	call	0x80ae	; 0x80ae <__floatunsisf>
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	30 e0       	ldi	r19, 0x00	; 0
    4b3c:	40 ed       	ldi	r20, 0xD0	; 208
    4b3e:	52 e4       	ldi	r21, 0x42	; 66
    4b40:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    4b44:	20 e0       	ldi	r18, 0x00	; 0
    4b46:	34 e2       	ldi	r19, 0x24	; 36
    4b48:	44 e7       	ldi	r20, 0x74	; 116
    4b4a:	59 e4       	ldi	r21, 0x49	; 73
    4b4c:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    4b50:	9b 01       	movw	r18, r22
    4b52:	ac 01       	movw	r20, r24
    4b54:	64 e1       	ldi	r22, 0x14	; 20
    4b56:	7e e2       	ldi	r23, 0x2E	; 46
    4b58:	88 e7       	ldi	r24, 0x78	; 120
    4b5a:	93 e4       	ldi	r25, 0x43	; 67
    4b5c:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    4b60:	0e 94 2b 40 	call	0x8056	; 0x8056 <__fixunssfsi>
    4b64:	70 93 8a 05 	sts	0x058A, r23
    4b68:	60 93 89 05 	sts	0x0589, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    4b6c:	20 91 ae 04 	lds	r18, 0x04AE
    4b70:	30 91 af 04 	lds	r19, 0x04AF
    4b74:	40 e0       	ldi	r20, 0x00	; 0
    4b76:	50 e0       	ldi	r21, 0x00	; 0
    4b78:	60 91 a8 04 	lds	r22, 0x04A8
    4b7c:	70 91 a9 04 	lds	r23, 0x04A9
    4b80:	80 91 aa 04 	lds	r24, 0x04AA
    4b84:	90 91 ab 04 	lds	r25, 0x04AB
    4b88:	0e 94 3f 42 	call	0x847e	; 0x847e <__divmodsi4>
    4b8c:	30 93 b3 04 	sts	0x04B3, r19
    4b90:	20 93 b2 04 	sts	0x04B2, r18
    4b94:	53 cf       	rjmp	.-346    	; 0x4a3c <handleCalibration+0x286>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    4b96:	10 92 fc 02 	sts	0x02FC, r1
    4b9a:	10 92 fb 02 	sts	0x02FB, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    4b9e:	90 91 ca 04 	lds	r25, 0x04CA
    4ba2:	85 e0       	ldi	r24, 0x05	; 5
    4ba4:	98 9f       	mul	r25, r24
    4ba6:	c0 01       	movw	r24, r0
    4ba8:	11 24       	eor	r1, r1
    4baa:	88 0f       	add	r24, r24
    4bac:	99 1f       	adc	r25, r25
    4bae:	88 0f       	add	r24, r24
    4bb0:	99 1f       	adc	r25, r25
    4bb2:	90 95       	com	r25
    4bb4:	81 95       	neg	r24
    4bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    4bb8:	90 93 fe 02 	sts	0x02FE, r25
    4bbc:	80 93 fd 02 	sts	0x02FD, r24
    4bc0:	5a ce       	rjmp	.-844    	; 0x4876 <handleCalibration+0xc0>
            break;

		case 5:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    4bc2:	91 e0       	ldi	r25, 0x01	; 1
    4bc4:	90 93 ca 04 	sts	0x04CA, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    4bc8:	80 91 c6 04 	lds	r24, 0x04C6
    4bcc:	88 23       	and	r24, r24
    4bce:	b9 f4       	brne	.+46     	; 0x4bfe <handleCalibration+0x448>
                	calibWheel = LEFT_WHEEL_BW_SC;
    4bd0:	82 e0       	ldi	r24, 0x02	; 2
    4bd2:	80 93 c6 04 	sts	0x04C6, r24
    4bd6:	6a ce       	rjmp	.-812    	; 0x48ac <handleCalibration+0xf6>
    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    4bd8:	90 91 ca 04 	lds	r25, 0x04CA
    4bdc:	85 e0       	ldi	r24, 0x05	; 5
    4bde:	98 9f       	mul	r25, r24
    4be0:	c0 01       	movw	r24, r0
    4be2:	11 24       	eor	r1, r1
    4be4:	88 0f       	add	r24, r24
    4be6:	99 1f       	adc	r25, r25
    4be8:	88 0f       	add	r24, r24
    4bea:	99 1f       	adc	r25, r25
    4bec:	90 93 fc 02 	sts	0x02FC, r25
    4bf0:	80 93 fb 02 	sts	0x02FB, r24
				pwm_intermediate_left_desired = 0;
    4bf4:	10 92 fe 02 	sts	0x02FE, r1
    4bf8:	10 92 fd 02 	sts	0x02FD, r1
    4bfc:	3c ce       	rjmp	.-904    	; 0x4876 <handleCalibration+0xc0>
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    4bfe:	81 30       	cpi	r24, 0x01	; 1
    4c00:	61 f0       	breq	.+24     	; 0x4c1a <handleCalibration+0x464>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    4c02:	82 30       	cpi	r24, 0x02	; 2
    4c04:	71 f0       	breq	.+28     	; 0x4c22 <handleCalibration+0x46c>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    4c06:	83 30       	cpi	r24, 0x03	; 3
    4c08:	09 f0       	breq	.+2      	; 0x4c0c <handleCalibration+0x456>
    4c0a:	50 ce       	rjmp	.-864    	; 0x48ac <handleCalibration+0xf6>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    4c0c:	10 92 c6 04 	sts	0x04C6, r1
					// red off
					writeCalibrationToFlash();
    4c10:	0e 94 d8 3e 	call	0x7db0	; 0x7db0 <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    4c14:	10 92 c7 04 	sts	0x04C7, r1
    4c18:	49 ce       	rjmp	.-878    	; 0x48ac <handleCalibration+0xf6>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    4c1a:	83 e0       	ldi	r24, 0x03	; 3
    4c1c:	80 93 c6 04 	sts	0x04C6, r24
    4c20:	45 ce       	rjmp	.-886    	; 0x48ac <handleCalibration+0xf6>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    4c22:	90 93 c6 04 	sts	0x04C6, r25
					calibrateOdomFlag = 0;
    4c26:	10 92 c7 04 	sts	0x04C7, r1
    4c2a:	40 ce       	rjmp	.-896    	; 0x48ac <handleCalibration+0xf6>

00004c2c <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    4c2c:	af 92       	push	r10
    4c2e:	bf 92       	push	r11
    4c30:	cf 92       	push	r12
    4c32:	df 92       	push	r13
    4c34:	ef 92       	push	r14
    4c36:	ff 92       	push	r15
    4c38:	0f 93       	push	r16
    4c3a:	1f 93       	push	r17
    4c3c:	cf 93       	push	r28
    4c3e:	df 93       	push	r29
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    4c40:	9c 01       	movw	r18, r24
    4c42:	22 0f       	add	r18, r18
    4c44:	33 1f       	adc	r19, r19
    4c46:	22 0f       	add	r18, r18
    4c48:	33 1f       	adc	r19, r19
    4c4a:	28 0f       	add	r18, r24
    4c4c:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    4c4e:	21 15       	cp	r18, r1
    4c50:	31 05       	cpc	r19, r1
    4c52:	09 f4       	brne	.+2      	; 0x4c56 <getInputFromSpeed+0x2a>
    4c54:	7b c0       	rjmp	.+246    	; 0x4d4c <getInputFromSpeed+0x120>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    4c56:	86 2f       	mov	r24, r22
    4c58:	82 50       	subi	r24, 0x02	; 2
    4c5a:	82 30       	cpi	r24, 0x02	; 2
    4c5c:	08 f4       	brcc	.+2      	; 0x4c60 <getInputFromSpeed+0x34>
    4c5e:	84 c0       	rjmp	.+264    	; 0x4d68 <getInputFromSpeed+0x13c>
        currVel = -currVel; // consider only positive values
    4c60:	66 23       	and	r22, r22
    4c62:	09 f0       	breq	.+2      	; 0x4c66 <getInputFromSpeed+0x3a>
    4c64:	84 c0       	rjmp	.+264    	; 0x4d6e <getInputFromSpeed+0x142>
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    4c66:	80 91 df 04 	lds	r24, 0x04DF
    4c6a:	90 91 e0 04 	lds	r25, 0x04E0
    4c6e:	82 17       	cp	r24, r18
    4c70:	93 07       	cpc	r25, r19
    4c72:	0c f0       	brlt	.+2      	; 0x4c76 <getInputFromSpeed+0x4a>
    4c74:	1b c2       	rjmp	.+1078   	; 0x50ac <getInputFromSpeed+0x480>
    4c76:	80 91 ef 04 	lds	r24, 0x04EF
    4c7a:	90 91 f0 04 	lds	r25, 0x04F0
    4c7e:	82 17       	cp	r24, r18
    4c80:	93 07       	cpc	r25, r19
    4c82:	0c f0       	brlt	.+2      	; 0x4c86 <getInputFromSpeed+0x5a>
    4c84:	1c c2       	rjmp	.+1080   	; 0x50be <getInputFromSpeed+0x492>
    4c86:	80 91 ff 04 	lds	r24, 0x04FF
    4c8a:	90 91 00 05 	lds	r25, 0x0500
    4c8e:	82 17       	cp	r24, r18
    4c90:	93 07       	cpc	r25, r19
    4c92:	0c f0       	brlt	.+2      	; 0x4c96 <getInputFromSpeed+0x6a>
    4c94:	17 c2       	rjmp	.+1070   	; 0x50c4 <getInputFromSpeed+0x498>
    4c96:	80 91 0f 05 	lds	r24, 0x050F
    4c9a:	90 91 10 05 	lds	r25, 0x0510
    4c9e:	82 17       	cp	r24, r18
    4ca0:	93 07       	cpc	r25, r19
    4ca2:	0c f0       	brlt	.+2      	; 0x4ca6 <getInputFromSpeed+0x7a>
    4ca4:	12 c2       	rjmp	.+1060   	; 0x50ca <getInputFromSpeed+0x49e>
    4ca6:	80 91 1f 05 	lds	r24, 0x051F
    4caa:	90 91 20 05 	lds	r25, 0x0520
    4cae:	82 17       	cp	r24, r18
    4cb0:	93 07       	cpc	r25, r19
    4cb2:	0c f0       	brlt	.+2      	; 0x4cb6 <getInputFromSpeed+0x8a>
    4cb4:	fe c1       	rjmp	.+1020   	; 0x50b2 <getInputFromSpeed+0x486>
    4cb6:	80 91 2f 05 	lds	r24, 0x052F
    4cba:	90 91 30 05 	lds	r25, 0x0530
    4cbe:	82 17       	cp	r24, r18
    4cc0:	93 07       	cpc	r25, r19
    4cc2:	0c f0       	brlt	.+2      	; 0x4cc6 <getInputFromSpeed+0x9a>
    4cc4:	f9 c1       	rjmp	.+1010   	; 0x50b8 <getInputFromSpeed+0x48c>
    4cc6:	80 91 3f 05 	lds	r24, 0x053F
    4cca:	90 91 40 05 	lds	r25, 0x0540
    4cce:	82 17       	cp	r24, r18
    4cd0:	93 07       	cpc	r25, r19
    4cd2:	0c f0       	brlt	.+2      	; 0x4cd6 <getInputFromSpeed+0xaa>
    4cd4:	02 c2       	rjmp	.+1028   	; 0x50da <getInputFromSpeed+0x4ae>
    4cd6:	80 91 4f 05 	lds	r24, 0x054F
    4cda:	90 91 50 05 	lds	r25, 0x0550
    4cde:	82 17       	cp	r24, r18
    4ce0:	93 07       	cpc	r25, r19
    4ce2:	0c f0       	brlt	.+2      	; 0x4ce6 <getInputFromSpeed+0xba>
    4ce4:	fd c1       	rjmp	.+1018   	; 0x50e0 <getInputFromSpeed+0x4b4>
    4ce6:	c0 91 5f 05 	lds	r28, 0x055F
    4cea:	d0 91 60 05 	lds	r29, 0x0560
    4cee:	c2 17       	cp	r28, r18
    4cf0:	d3 07       	cpc	r29, r19
    4cf2:	0c f0       	brlt	.+2      	; 0x4cf6 <getInputFromSpeed+0xca>
    4cf4:	7a c1       	rjmp	.+756    	; 0x4fea <getInputFromSpeed+0x3be>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    4cf6:	b9 01       	movw	r22, r18
    4cf8:	88 27       	eor	r24, r24
    4cfa:	77 fd       	sbrc	r23, 7
    4cfc:	80 95       	com	r24
    4cfe:	98 2f       	mov	r25, r24
    4d00:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    4d04:	7b 01       	movw	r14, r22
    4d06:	8c 01       	movw	r16, r24
    4d08:	60 91 5d 05 	lds	r22, 0x055D
    4d0c:	70 91 5e 05 	lds	r23, 0x055E
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    4d10:	88 27       	eor	r24, r24
    4d12:	77 fd       	sbrc	r23, 7
    4d14:	80 95       	com	r24
    4d16:	98 2f       	mov	r25, r24
    4d18:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    4d1c:	9b 01       	movw	r18, r22
    4d1e:	ac 01       	movw	r20, r24
    4d20:	c8 01       	movw	r24, r16
    4d22:	b7 01       	movw	r22, r14
    4d24:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    4d28:	7b 01       	movw	r14, r22
    4d2a:	8c 01       	movw	r16, r24
    4d2c:	be 01       	movw	r22, r28
    4d2e:	88 27       	eor	r24, r24
    4d30:	77 fd       	sbrc	r23, 7
    4d32:	80 95       	com	r24
    4d34:	98 2f       	mov	r25, r24
    4d36:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    4d3a:	9b 01       	movw	r18, r22
    4d3c:	ac 01       	movw	r20, r24
    4d3e:	c8 01       	movw	r24, r16
    4d40:	b7 01       	movw	r22, r14
    4d42:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    4d46:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    4d4a:	02 c0       	rjmp	.+4      	; 0x4d50 <getInputFromSpeed+0x124>
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    signed int temp = 0;
    4d4c:	60 e0       	ldi	r22, 0x00	; 0
    4d4e:	70 e0       	ldi	r23, 0x00	; 0
            temp = -temp;
        }        
    }
    
    return temp;
}
    4d50:	cb 01       	movw	r24, r22
    4d52:	df 91       	pop	r29
    4d54:	cf 91       	pop	r28
    4d56:	1f 91       	pop	r17
    4d58:	0f 91       	pop	r16
    4d5a:	ff 90       	pop	r15
    4d5c:	ef 90       	pop	r14
    4d5e:	df 90       	pop	r13
    4d60:	cf 90       	pop	r12
    4d62:	bf 90       	pop	r11
    4d64:	af 90       	pop	r10
    4d66:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    4d68:	30 95       	com	r19
    4d6a:	21 95       	neg	r18
    4d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d6e:	63 30       	cpi	r22, 0x03	; 3
    4d70:	09 f4       	brne	.+2      	; 0x4d74 <getInputFromSpeed+0x148>
    4d72:	f3 c0       	rjmp	.+486    	; 0x4f5a <getInputFromSpeed+0x32e>
    4d74:	62 30       	cpi	r22, 0x02	; 2
    4d76:	01 f1       	breq	.+64     	; 0x4db8 <getInputFromSpeed+0x18c>
    4d78:	61 30       	cpi	r22, 0x01	; 1
    4d7a:	09 f4       	brne	.+2      	; 0x4d7e <getInputFromSpeed+0x152>
    4d7c:	98 c0       	rjmp	.+304    	; 0x4eae <getInputFromSpeed+0x282>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    4d7e:	66 23       	and	r22, r22
    4d80:	09 f4       	brne	.+2      	; 0x4d84 <getInputFromSpeed+0x158>
    4d82:	90 c0       	rjmp	.+288    	; 0x4ea4 <getInputFromSpeed+0x278>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    4d84:	61 30       	cpi	r22, 0x01	; 1
    4d86:	09 f4       	brne	.+2      	; 0x4d8a <getInputFromSpeed+0x15e>
    4d88:	8c c1       	rjmp	.+792    	; 0x50a2 <getInputFromSpeed+0x476>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    4d8a:	62 30       	cpi	r22, 0x02	; 2
    4d8c:	09 f4       	brne	.+2      	; 0x4d90 <getInputFromSpeed+0x164>
    4d8e:	a0 c1       	rjmp	.+832    	; 0x50d0 <getInputFromSpeed+0x4a4>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    4d90:	63 30       	cpi	r22, 0x03	; 3
    4d92:	e1 f6       	brne	.-72     	; 0x4d4c <getInputFromSpeed+0x120>
    4d94:	c0 91 6b 05 	lds	r28, 0x056B
    4d98:	d0 91 6c 05 	lds	r29, 0x056C
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    4d9c:	b9 01       	movw	r22, r18
    4d9e:	88 27       	eor	r24, r24
    4da0:	77 fd       	sbrc	r23, 7
    4da2:	80 95       	com	r24
    4da4:	98 2f       	mov	r25, r24
    4da6:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    4daa:	7b 01       	movw	r14, r22
    4dac:	8c 01       	movw	r16, r24
    4dae:	60 91 69 05 	lds	r22, 0x0569
    4db2:	70 91 6a 05 	lds	r23, 0x056A
    4db6:	55 c0       	rjmp	.+170    	; 0x4e62 <getInputFromSpeed+0x236>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    4db8:	80 91 e7 04 	lds	r24, 0x04E7
    4dbc:	90 91 e8 04 	lds	r25, 0x04E8
    4dc0:	82 17       	cp	r24, r18
    4dc2:	93 07       	cpc	r25, r19
    4dc4:	0c f0       	brlt	.+2      	; 0x4dc8 <getInputFromSpeed+0x19c>
    4dc6:	72 c1       	rjmp	.+740    	; 0x50ac <getInputFromSpeed+0x480>
    4dc8:	80 91 f7 04 	lds	r24, 0x04F7
    4dcc:	90 91 f8 04 	lds	r25, 0x04F8
    4dd0:	82 17       	cp	r24, r18
    4dd2:	93 07       	cpc	r25, r19
    4dd4:	0c f0       	brlt	.+2      	; 0x4dd8 <getInputFromSpeed+0x1ac>
    4dd6:	73 c1       	rjmp	.+742    	; 0x50be <getInputFromSpeed+0x492>
    4dd8:	80 91 07 05 	lds	r24, 0x0507
    4ddc:	90 91 08 05 	lds	r25, 0x0508
    4de0:	82 17       	cp	r24, r18
    4de2:	93 07       	cpc	r25, r19
    4de4:	0c f0       	brlt	.+2      	; 0x4de8 <getInputFromSpeed+0x1bc>
    4de6:	6e c1       	rjmp	.+732    	; 0x50c4 <getInputFromSpeed+0x498>
    4de8:	80 91 17 05 	lds	r24, 0x0517
    4dec:	90 91 18 05 	lds	r25, 0x0518
    4df0:	82 17       	cp	r24, r18
    4df2:	93 07       	cpc	r25, r19
    4df4:	0c f0       	brlt	.+2      	; 0x4df8 <getInputFromSpeed+0x1cc>
    4df6:	69 c1       	rjmp	.+722    	; 0x50ca <getInputFromSpeed+0x49e>
    4df8:	80 91 27 05 	lds	r24, 0x0527
    4dfc:	90 91 28 05 	lds	r25, 0x0528
    4e00:	82 17       	cp	r24, r18
    4e02:	93 07       	cpc	r25, r19
    4e04:	0c f0       	brlt	.+2      	; 0x4e08 <getInputFromSpeed+0x1dc>
    4e06:	55 c1       	rjmp	.+682    	; 0x50b2 <getInputFromSpeed+0x486>
    4e08:	80 91 37 05 	lds	r24, 0x0537
    4e0c:	90 91 38 05 	lds	r25, 0x0538
    4e10:	82 17       	cp	r24, r18
    4e12:	93 07       	cpc	r25, r19
    4e14:	0c f0       	brlt	.+2      	; 0x4e18 <getInputFromSpeed+0x1ec>
    4e16:	50 c1       	rjmp	.+672    	; 0x50b8 <getInputFromSpeed+0x48c>
    4e18:	80 91 47 05 	lds	r24, 0x0547
    4e1c:	90 91 48 05 	lds	r25, 0x0548
    4e20:	82 17       	cp	r24, r18
    4e22:	93 07       	cpc	r25, r19
    4e24:	0c f0       	brlt	.+2      	; 0x4e28 <getInputFromSpeed+0x1fc>
    4e26:	59 c1       	rjmp	.+690    	; 0x50da <getInputFromSpeed+0x4ae>
    4e28:	80 91 57 05 	lds	r24, 0x0557
    4e2c:	90 91 58 05 	lds	r25, 0x0558
    4e30:	82 17       	cp	r24, r18
    4e32:	93 07       	cpc	r25, r19
    4e34:	0c f0       	brlt	.+2      	; 0x4e38 <getInputFromSpeed+0x20c>
    4e36:	54 c1       	rjmp	.+680    	; 0x50e0 <getInputFromSpeed+0x4b4>
    4e38:	c0 91 67 05 	lds	r28, 0x0567
    4e3c:	d0 91 68 05 	lds	r29, 0x0568
    4e40:	c2 17       	cp	r28, r18
    4e42:	d3 07       	cpc	r29, r19
    4e44:	0c f0       	brlt	.+2      	; 0x4e48 <getInputFromSpeed+0x21c>
    4e46:	d1 c0       	rjmp	.+418    	; 0x4fea <getInputFromSpeed+0x3be>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    4e48:	b9 01       	movw	r22, r18
    4e4a:	88 27       	eor	r24, r24
    4e4c:	77 fd       	sbrc	r23, 7
    4e4e:	80 95       	com	r24
    4e50:	98 2f       	mov	r25, r24
    4e52:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    4e56:	7b 01       	movw	r14, r22
    4e58:	8c 01       	movw	r16, r24
    4e5a:	60 91 65 05 	lds	r22, 0x0565
    4e5e:	70 91 66 05 	lds	r23, 0x0566
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    4e62:	88 27       	eor	r24, r24
    4e64:	77 fd       	sbrc	r23, 7
    4e66:	80 95       	com	r24
    4e68:	98 2f       	mov	r25, r24
    4e6a:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    4e6e:	9b 01       	movw	r18, r22
    4e70:	ac 01       	movw	r20, r24
    4e72:	c8 01       	movw	r24, r16
    4e74:	b7 01       	movw	r22, r14
    4e76:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    4e7a:	7b 01       	movw	r14, r22
    4e7c:	8c 01       	movw	r16, r24
    4e7e:	be 01       	movw	r22, r28
    4e80:	88 27       	eor	r24, r24
    4e82:	77 fd       	sbrc	r23, 7
    4e84:	80 95       	com	r24
    4e86:	98 2f       	mov	r25, r24
    4e88:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    4e8c:	9b 01       	movw	r18, r22
    4e8e:	ac 01       	movw	r20, r24
    4e90:	c8 01       	movw	r24, r16
    4e92:	b7 01       	movw	r22, r14
    4e94:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    4e98:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
            temp = -temp;
    4e9c:	70 95       	com	r23
    4e9e:	61 95       	neg	r22
    4ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    4ea2:	56 cf       	rjmp	.-340    	; 0x4d50 <getInputFromSpeed+0x124>
    4ea4:	c0 91 5f 05 	lds	r28, 0x055F
    4ea8:	d0 91 60 05 	lds	r29, 0x0560
    4eac:	24 cf       	rjmp	.-440    	; 0x4cf6 <getInputFromSpeed+0xca>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    4eae:	80 91 e3 04 	lds	r24, 0x04E3
    4eb2:	90 91 e4 04 	lds	r25, 0x04E4
    4eb6:	82 17       	cp	r24, r18
    4eb8:	93 07       	cpc	r25, r19
    4eba:	0c f0       	brlt	.+2      	; 0x4ebe <getInputFromSpeed+0x292>
    4ebc:	f7 c0       	rjmp	.+494    	; 0x50ac <getInputFromSpeed+0x480>
    4ebe:	80 91 f3 04 	lds	r24, 0x04F3
    4ec2:	90 91 f4 04 	lds	r25, 0x04F4
    4ec6:	82 17       	cp	r24, r18
    4ec8:	93 07       	cpc	r25, r19
    4eca:	0c f0       	brlt	.+2      	; 0x4ece <getInputFromSpeed+0x2a2>
    4ecc:	f8 c0       	rjmp	.+496    	; 0x50be <getInputFromSpeed+0x492>
    4ece:	80 91 03 05 	lds	r24, 0x0503
    4ed2:	90 91 04 05 	lds	r25, 0x0504
    4ed6:	82 17       	cp	r24, r18
    4ed8:	93 07       	cpc	r25, r19
    4eda:	0c f0       	brlt	.+2      	; 0x4ede <getInputFromSpeed+0x2b2>
    4edc:	f3 c0       	rjmp	.+486    	; 0x50c4 <getInputFromSpeed+0x498>
    4ede:	80 91 13 05 	lds	r24, 0x0513
    4ee2:	90 91 14 05 	lds	r25, 0x0514
    4ee6:	82 17       	cp	r24, r18
    4ee8:	93 07       	cpc	r25, r19
    4eea:	0c f0       	brlt	.+2      	; 0x4eee <getInputFromSpeed+0x2c2>
    4eec:	ee c0       	rjmp	.+476    	; 0x50ca <getInputFromSpeed+0x49e>
    4eee:	80 91 23 05 	lds	r24, 0x0523
    4ef2:	90 91 24 05 	lds	r25, 0x0524
    4ef6:	82 17       	cp	r24, r18
    4ef8:	93 07       	cpc	r25, r19
    4efa:	0c f0       	brlt	.+2      	; 0x4efe <getInputFromSpeed+0x2d2>
    4efc:	da c0       	rjmp	.+436    	; 0x50b2 <getInputFromSpeed+0x486>
    4efe:	80 91 33 05 	lds	r24, 0x0533
    4f02:	90 91 34 05 	lds	r25, 0x0534
    4f06:	82 17       	cp	r24, r18
    4f08:	93 07       	cpc	r25, r19
    4f0a:	0c f0       	brlt	.+2      	; 0x4f0e <getInputFromSpeed+0x2e2>
    4f0c:	d5 c0       	rjmp	.+426    	; 0x50b8 <getInputFromSpeed+0x48c>
    4f0e:	80 91 43 05 	lds	r24, 0x0543
    4f12:	90 91 44 05 	lds	r25, 0x0544
    4f16:	82 17       	cp	r24, r18
    4f18:	93 07       	cpc	r25, r19
    4f1a:	0c f0       	brlt	.+2      	; 0x4f1e <getInputFromSpeed+0x2f2>
    4f1c:	de c0       	rjmp	.+444    	; 0x50da <getInputFromSpeed+0x4ae>
    4f1e:	80 91 53 05 	lds	r24, 0x0553
    4f22:	90 91 54 05 	lds	r25, 0x0554
    4f26:	82 17       	cp	r24, r18
    4f28:	93 07       	cpc	r25, r19
    4f2a:	0c f0       	brlt	.+2      	; 0x4f2e <getInputFromSpeed+0x302>
    4f2c:	d9 c0       	rjmp	.+434    	; 0x50e0 <getInputFromSpeed+0x4b4>
    4f2e:	c0 91 63 05 	lds	r28, 0x0563
    4f32:	d0 91 64 05 	lds	r29, 0x0564
    4f36:	c2 17       	cp	r28, r18
    4f38:	d3 07       	cpc	r29, r19
    4f3a:	0c f0       	brlt	.+2      	; 0x4f3e <getInputFromSpeed+0x312>
    4f3c:	56 c0       	rjmp	.+172    	; 0x4fea <getInputFromSpeed+0x3be>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    4f3e:	b9 01       	movw	r22, r18
    4f40:	88 27       	eor	r24, r24
    4f42:	77 fd       	sbrc	r23, 7
    4f44:	80 95       	com	r24
    4f46:	98 2f       	mov	r25, r24
    4f48:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    4f4c:	7b 01       	movw	r14, r22
    4f4e:	8c 01       	movw	r16, r24
    4f50:	60 91 61 05 	lds	r22, 0x0561
    4f54:	70 91 62 05 	lds	r23, 0x0562
    4f58:	db ce       	rjmp	.-586    	; 0x4d10 <getInputFromSpeed+0xe4>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    4f5a:	80 91 eb 04 	lds	r24, 0x04EB
    4f5e:	90 91 ec 04 	lds	r25, 0x04EC
    4f62:	82 17       	cp	r24, r18
    4f64:	93 07       	cpc	r25, r19
    4f66:	0c f0       	brlt	.+2      	; 0x4f6a <getInputFromSpeed+0x33e>
    4f68:	a1 c0       	rjmp	.+322    	; 0x50ac <getInputFromSpeed+0x480>
    4f6a:	80 91 fb 04 	lds	r24, 0x04FB
    4f6e:	90 91 fc 04 	lds	r25, 0x04FC
    4f72:	82 17       	cp	r24, r18
    4f74:	93 07       	cpc	r25, r19
    4f76:	0c f0       	brlt	.+2      	; 0x4f7a <getInputFromSpeed+0x34e>
    4f78:	a2 c0       	rjmp	.+324    	; 0x50be <getInputFromSpeed+0x492>
    4f7a:	80 91 0b 05 	lds	r24, 0x050B
    4f7e:	90 91 0c 05 	lds	r25, 0x050C
    4f82:	82 17       	cp	r24, r18
    4f84:	93 07       	cpc	r25, r19
    4f86:	0c f0       	brlt	.+2      	; 0x4f8a <getInputFromSpeed+0x35e>
    4f88:	9d c0       	rjmp	.+314    	; 0x50c4 <getInputFromSpeed+0x498>
    4f8a:	80 91 1b 05 	lds	r24, 0x051B
    4f8e:	90 91 1c 05 	lds	r25, 0x051C
    4f92:	82 17       	cp	r24, r18
    4f94:	93 07       	cpc	r25, r19
    4f96:	0c f0       	brlt	.+2      	; 0x4f9a <getInputFromSpeed+0x36e>
    4f98:	98 c0       	rjmp	.+304    	; 0x50ca <getInputFromSpeed+0x49e>
    4f9a:	80 91 2b 05 	lds	r24, 0x052B
    4f9e:	90 91 2c 05 	lds	r25, 0x052C
    4fa2:	82 17       	cp	r24, r18
    4fa4:	93 07       	cpc	r25, r19
    4fa6:	0c f0       	brlt	.+2      	; 0x4faa <getInputFromSpeed+0x37e>
    4fa8:	84 c0       	rjmp	.+264    	; 0x50b2 <getInputFromSpeed+0x486>
    4faa:	80 91 3b 05 	lds	r24, 0x053B
    4fae:	90 91 3c 05 	lds	r25, 0x053C
    4fb2:	82 17       	cp	r24, r18
    4fb4:	93 07       	cpc	r25, r19
    4fb6:	0c f0       	brlt	.+2      	; 0x4fba <getInputFromSpeed+0x38e>
    4fb8:	7f c0       	rjmp	.+254    	; 0x50b8 <getInputFromSpeed+0x48c>
    4fba:	80 91 4b 05 	lds	r24, 0x054B
    4fbe:	90 91 4c 05 	lds	r25, 0x054C
    4fc2:	82 17       	cp	r24, r18
    4fc4:	93 07       	cpc	r25, r19
    4fc6:	0c f0       	brlt	.+2      	; 0x4fca <getInputFromSpeed+0x39e>
    4fc8:	88 c0       	rjmp	.+272    	; 0x50da <getInputFromSpeed+0x4ae>
    4fca:	80 91 5b 05 	lds	r24, 0x055B
    4fce:	90 91 5c 05 	lds	r25, 0x055C
    4fd2:	82 17       	cp	r24, r18
    4fd4:	93 07       	cpc	r25, r19
    4fd6:	0c f0       	brlt	.+2      	; 0x4fda <getInputFromSpeed+0x3ae>
    4fd8:	83 c0       	rjmp	.+262    	; 0x50e0 <getInputFromSpeed+0x4b4>
    4fda:	c0 91 6b 05 	lds	r28, 0x056B
    4fde:	d0 91 6c 05 	lds	r29, 0x056C
    4fe2:	c2 17       	cp	r28, r18
    4fe4:	d3 07       	cpc	r29, r19
    4fe6:	0c f4       	brge	.+2      	; 0x4fea <getInputFromSpeed+0x3be>
    4fe8:	d9 ce       	rjmp	.-590    	; 0x4d9c <getInputFromSpeed+0x170>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    4fea:	c8 e0       	ldi	r28, 0x08	; 8
    4fec:	d0 e0       	ldi	r29, 0x00	; 0
                break;
            }
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
    4fee:	20 97       	sbiw	r28, 0x00	; 0
    4ff0:	09 f0       	breq	.+2      	; 0x4ff4 <getInputFromSpeed+0x3c8>
    4ff2:	79 c0       	rjmp	.+242    	; 0x50e6 <getInputFromSpeed+0x4ba>
        if(mode==LEFT_WHEEL_FW_SC) {
    4ff4:	66 23       	and	r22, r22
    4ff6:	91 f4       	brne	.+36     	; 0x501c <getInputFromSpeed+0x3f0>
            temp = (currVel*calibration[0][0])/calibration[0][1];
    4ff8:	40 91 dd 04 	lds	r20, 0x04DD
    4ffc:	50 91 de 04 	lds	r21, 0x04DE
    5000:	24 9f       	mul	r18, r20
    5002:	c0 01       	movw	r24, r0
    5004:	25 9f       	mul	r18, r21
    5006:	90 0d       	add	r25, r0
    5008:	34 9f       	mul	r19, r20
    500a:	90 0d       	add	r25, r0
    500c:	11 24       	eor	r1, r1
    500e:	60 91 df 04 	lds	r22, 0x04DF
    5012:	70 91 e0 04 	lds	r23, 0x04E0
    5016:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
    501a:	9a ce       	rjmp	.-716    	; 0x4d50 <getInputFromSpeed+0x124>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    501c:	61 30       	cpi	r22, 0x01	; 1
    501e:	d1 f0       	breq	.+52     	; 0x5054 <getInputFromSpeed+0x428>
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5020:	62 30       	cpi	r22, 0x02	; 2
    5022:	51 f1       	breq	.+84     	; 0x5078 <getInputFromSpeed+0x44c>
            temp = currVel*calibration[0][4]/calibration[0][5];
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5024:	63 30       	cpi	r22, 0x03	; 3
    5026:	09 f0       	breq	.+2      	; 0x502a <getInputFromSpeed+0x3fe>
    5028:	91 ce       	rjmp	.-734    	; 0x4d4c <getInputFromSpeed+0x120>
            temp = currVel*calibration[0][6]/calibration[0][7];
    502a:	40 91 e9 04 	lds	r20, 0x04E9
    502e:	50 91 ea 04 	lds	r21, 0x04EA
    5032:	24 9f       	mul	r18, r20
    5034:	c0 01       	movw	r24, r0
    5036:	25 9f       	mul	r18, r21
    5038:	90 0d       	add	r25, r0
    503a:	34 9f       	mul	r19, r20
    503c:	90 0d       	add	r25, r0
    503e:	11 24       	eor	r1, r1
    5040:	60 91 eb 04 	lds	r22, 0x04EB
    5044:	70 91 ec 04 	lds	r23, 0x04EC
    5048:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
            temp = -temp;
    504c:	70 95       	com	r23
    504e:	61 95       	neg	r22
    5050:	7f 4f       	sbci	r23, 0xFF	; 255
    5052:	7e ce       	rjmp	.-772    	; 0x4d50 <getInputFromSpeed+0x124>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    5054:	40 91 e1 04 	lds	r20, 0x04E1
    5058:	50 91 e2 04 	lds	r21, 0x04E2
    505c:	24 9f       	mul	r18, r20
    505e:	c0 01       	movw	r24, r0
    5060:	25 9f       	mul	r18, r21
    5062:	90 0d       	add	r25, r0
    5064:	34 9f       	mul	r19, r20
    5066:	90 0d       	add	r25, r0
    5068:	11 24       	eor	r1, r1
    506a:	60 91 e3 04 	lds	r22, 0x04E3
    506e:	70 91 e4 04 	lds	r23, 0x04E4
    5072:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
    5076:	6c ce       	rjmp	.-808    	; 0x4d50 <getInputFromSpeed+0x124>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    5078:	40 91 e5 04 	lds	r20, 0x04E5
    507c:	50 91 e6 04 	lds	r21, 0x04E6
    5080:	24 9f       	mul	r18, r20
    5082:	c0 01       	movw	r24, r0
    5084:	25 9f       	mul	r18, r21
    5086:	90 0d       	add	r25, r0
    5088:	34 9f       	mul	r19, r20
    508a:	90 0d       	add	r25, r0
    508c:	11 24       	eor	r1, r1
    508e:	60 91 e7 04 	lds	r22, 0x04E7
    5092:	70 91 e8 04 	lds	r23, 0x04E8
    5096:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
            temp = -temp;
    509a:	70 95       	com	r23
    509c:	61 95       	neg	r22
    509e:	7f 4f       	sbci	r23, 0xFF	; 255
    50a0:	57 ce       	rjmp	.-850    	; 0x4d50 <getInputFromSpeed+0x124>
    50a2:	c0 91 63 05 	lds	r28, 0x0563
    50a6:	d0 91 64 05 	lds	r29, 0x0564
    50aa:	49 cf       	rjmp	.-366    	; 0x4f3e <getInputFromSpeed+0x312>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    50ac:	c0 e0       	ldi	r28, 0x00	; 0
    50ae:	d0 e0       	ldi	r29, 0x00	; 0
    50b0:	9e cf       	rjmp	.-196    	; 0x4fee <getInputFromSpeed+0x3c2>
    50b2:	c4 e0       	ldi	r28, 0x04	; 4
    50b4:	d0 e0       	ldi	r29, 0x00	; 0
    50b6:	9b cf       	rjmp	.-202    	; 0x4fee <getInputFromSpeed+0x3c2>
    50b8:	c5 e0       	ldi	r28, 0x05	; 5
    50ba:	d0 e0       	ldi	r29, 0x00	; 0
    50bc:	98 cf       	rjmp	.-208    	; 0x4fee <getInputFromSpeed+0x3c2>
    50be:	c1 e0       	ldi	r28, 0x01	; 1
    50c0:	d0 e0       	ldi	r29, 0x00	; 0
    50c2:	95 cf       	rjmp	.-214    	; 0x4fee <getInputFromSpeed+0x3c2>
    50c4:	c2 e0       	ldi	r28, 0x02	; 2
    50c6:	d0 e0       	ldi	r29, 0x00	; 0
    50c8:	92 cf       	rjmp	.-220    	; 0x4fee <getInputFromSpeed+0x3c2>
    50ca:	c3 e0       	ldi	r28, 0x03	; 3
    50cc:	d0 e0       	ldi	r29, 0x00	; 0
    50ce:	8f cf       	rjmp	.-226    	; 0x4fee <getInputFromSpeed+0x3c2>
    50d0:	c0 91 67 05 	lds	r28, 0x0567
    50d4:	d0 91 68 05 	lds	r29, 0x0568
    50d8:	b7 ce       	rjmp	.-658    	; 0x4e48 <getInputFromSpeed+0x21c>
    50da:	c6 e0       	ldi	r28, 0x06	; 6
    50dc:	d0 e0       	ldi	r29, 0x00	; 0
    50de:	87 cf       	rjmp	.-242    	; 0x4fee <getInputFromSpeed+0x3c2>
    50e0:	c7 e0       	ldi	r28, 0x07	; 7
    50e2:	d0 e0       	ldi	r29, 0x00	; 0
    50e4:	84 cf       	rjmp	.-248    	; 0x4fee <getInputFromSpeed+0x3c2>
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    50e6:	c9 30       	cpi	r28, 0x09	; 9
    50e8:	d1 05       	cpc	r29, r1
    50ea:	09 f4       	brne	.+2      	; 0x50ee <getInputFromSpeed+0x4c2>
    50ec:	48 ce       	rjmp	.-880    	; 0x4d7e <getInputFromSpeed+0x152>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    50ee:	66 23       	and	r22, r22
    50f0:	09 f0       	breq	.+2      	; 0x50f4 <getInputFromSpeed+0x4c8>
    50f2:	47 c0       	rjmp	.+142    	; 0x5182 <getInputFromSpeed+0x556>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    50f4:	fe 01       	movw	r30, r28
    50f6:	e2 95       	swap	r30
    50f8:	f2 95       	swap	r31
    50fa:	f0 7f       	andi	r31, 0xF0	; 240
    50fc:	fe 27       	eor	r31, r30
    50fe:	e0 7f       	andi	r30, 0xF0	; 240
    5100:	fe 27       	eor	r31, r30
    5102:	e3 53       	subi	r30, 0x33	; 51
    5104:	fb 4f       	sbci	r31, 0xFB	; 251
    5106:	c2 80       	ldd	r12, Z+2	; 0x02
    5108:	d3 80       	ldd	r13, Z+3	; 0x03
    510a:	a0 80       	ld	r10, Z
    510c:	b1 80       	ldd	r11, Z+1	; 0x01
    510e:	2c 19       	sub	r18, r12
    5110:	3d 09       	sbc	r19, r13
    5112:	b9 01       	movw	r22, r18
    5114:	88 27       	eor	r24, r24
    5116:	77 fd       	sbrc	r23, 7
    5118:	80 95       	com	r24
    511a:	98 2f       	mov	r25, r24
    511c:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5120:	7b 01       	movw	r14, r22
    5122:	8c 01       	movw	r16, r24
    5124:	c2 95       	swap	r28
    5126:	d2 95       	swap	r29
    5128:	d0 7f       	andi	r29, 0xF0	; 240
    512a:	dc 27       	eor	r29, r28
    512c:	c0 7f       	andi	r28, 0xF0	; 240
    512e:	dc 27       	eor	r29, r28
    5130:	c3 52       	subi	r28, 0x23	; 35
    5132:	db 4f       	sbci	r29, 0xFB	; 251
    5134:	68 81       	ld	r22, Y
    5136:	79 81       	ldd	r23, Y+1	; 0x01
    5138:	6a 19       	sub	r22, r10
    513a:	7b 09       	sbc	r23, r11
    513c:	88 27       	eor	r24, r24
    513e:	77 fd       	sbrc	r23, 7
    5140:	80 95       	com	r24
    5142:	98 2f       	mov	r25, r24
    5144:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5148:	9b 01       	movw	r18, r22
    514a:	ac 01       	movw	r20, r24
    514c:	c8 01       	movw	r24, r16
    514e:	b7 01       	movw	r22, r14
    5150:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    5154:	7b 01       	movw	r14, r22
    5156:	8c 01       	movw	r16, r24
    5158:	6a 81       	ldd	r22, Y+2	; 0x02
    515a:	7b 81       	ldd	r23, Y+3	; 0x03
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    515c:	6c 19       	sub	r22, r12
    515e:	7d 09       	sbc	r23, r13
    5160:	88 27       	eor	r24, r24
    5162:	77 fd       	sbrc	r23, 7
    5164:	80 95       	com	r24
    5166:	98 2f       	mov	r25, r24
    5168:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    516c:	9b 01       	movw	r18, r22
    516e:	ac 01       	movw	r20, r24
    5170:	c8 01       	movw	r24, r16
    5172:	b7 01       	movw	r22, r14
    5174:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    5178:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    517c:	6a 0d       	add	r22, r10
    517e:	7b 1d       	adc	r23, r11
    5180:	e7 cd       	rjmp	.-1074   	; 0x4d50 <getInputFromSpeed+0x124>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    5182:	61 30       	cpi	r22, 0x01	; 1
    5184:	09 f4       	brne	.+2      	; 0x5188 <getInputFromSpeed+0x55c>
    5186:	50 c0       	rjmp	.+160    	; 0x5228 <getInputFromSpeed+0x5fc>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5188:	62 30       	cpi	r22, 0x02	; 2
    518a:	09 f4       	brne	.+2      	; 0x518e <getInputFromSpeed+0x562>
    518c:	82 c0       	rjmp	.+260    	; 0x5292 <getInputFromSpeed+0x666>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    518e:	63 30       	cpi	r22, 0x03	; 3
    5190:	09 f0       	breq	.+2      	; 0x5194 <getInputFromSpeed+0x568>
    5192:	dc cd       	rjmp	.-1096   	; 0x4d4c <getInputFromSpeed+0x120>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    5194:	fe 01       	movw	r30, r28
    5196:	e2 95       	swap	r30
    5198:	f2 95       	swap	r31
    519a:	f0 7f       	andi	r31, 0xF0	; 240
    519c:	fe 27       	eor	r31, r30
    519e:	e0 7f       	andi	r30, 0xF0	; 240
    51a0:	fe 27       	eor	r31, r30
    51a2:	e3 53       	subi	r30, 0x33	; 51
    51a4:	fb 4f       	sbci	r31, 0xFB	; 251
    51a6:	c6 84       	ldd	r12, Z+14	; 0x0e
    51a8:	d7 84       	ldd	r13, Z+15	; 0x0f
    51aa:	a4 84       	ldd	r10, Z+12	; 0x0c
    51ac:	b5 84       	ldd	r11, Z+13	; 0x0d
    51ae:	2c 19       	sub	r18, r12
    51b0:	3d 09       	sbc	r19, r13
    51b2:	b9 01       	movw	r22, r18
    51b4:	88 27       	eor	r24, r24
    51b6:	77 fd       	sbrc	r23, 7
    51b8:	80 95       	com	r24
    51ba:	98 2f       	mov	r25, r24
    51bc:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    51c0:	7b 01       	movw	r14, r22
    51c2:	8c 01       	movw	r16, r24
    51c4:	c2 95       	swap	r28
    51c6:	d2 95       	swap	r29
    51c8:	d0 7f       	andi	r29, 0xF0	; 240
    51ca:	dc 27       	eor	r29, r28
    51cc:	c0 7f       	andi	r28, 0xF0	; 240
    51ce:	dc 27       	eor	r29, r28
    51d0:	c3 52       	subi	r28, 0x23	; 35
    51d2:	db 4f       	sbci	r29, 0xFB	; 251
    51d4:	6c 85       	ldd	r22, Y+12	; 0x0c
    51d6:	7d 85       	ldd	r23, Y+13	; 0x0d
    51d8:	6a 19       	sub	r22, r10
    51da:	7b 09       	sbc	r23, r11
    51dc:	88 27       	eor	r24, r24
    51de:	77 fd       	sbrc	r23, 7
    51e0:	80 95       	com	r24
    51e2:	98 2f       	mov	r25, r24
    51e4:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    51e8:	9b 01       	movw	r18, r22
    51ea:	ac 01       	movw	r20, r24
    51ec:	c8 01       	movw	r24, r16
    51ee:	b7 01       	movw	r22, r14
    51f0:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    51f4:	7b 01       	movw	r14, r22
    51f6:	8c 01       	movw	r16, r24
    51f8:	6e 85       	ldd	r22, Y+14	; 0x0e
    51fa:	7f 85       	ldd	r23, Y+15	; 0x0f
    51fc:	6c 19       	sub	r22, r12
    51fe:	7d 09       	sbc	r23, r13
    5200:	88 27       	eor	r24, r24
    5202:	77 fd       	sbrc	r23, 7
    5204:	80 95       	com	r24
    5206:	98 2f       	mov	r25, r24
    5208:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    520c:	9b 01       	movw	r18, r22
    520e:	ac 01       	movw	r20, r24
    5210:	c8 01       	movw	r24, r16
    5212:	b7 01       	movw	r22, r14
    5214:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    5218:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    521c:	6a 0d       	add	r22, r10
    521e:	7b 1d       	adc	r23, r11
            temp = -temp;
    5220:	70 95       	com	r23
    5222:	61 95       	neg	r22
    5224:	7f 4f       	sbci	r23, 0xFF	; 255
    5226:	94 cd       	rjmp	.-1240   	; 0x4d50 <getInputFromSpeed+0x124>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    5228:	fe 01       	movw	r30, r28
    522a:	e2 95       	swap	r30
    522c:	f2 95       	swap	r31
    522e:	f0 7f       	andi	r31, 0xF0	; 240
    5230:	fe 27       	eor	r31, r30
    5232:	e0 7f       	andi	r30, 0xF0	; 240
    5234:	fe 27       	eor	r31, r30
    5236:	e3 53       	subi	r30, 0x33	; 51
    5238:	fb 4f       	sbci	r31, 0xFB	; 251
    523a:	c6 80       	ldd	r12, Z+6	; 0x06
    523c:	d7 80       	ldd	r13, Z+7	; 0x07
    523e:	a4 80       	ldd	r10, Z+4	; 0x04
    5240:	b5 80       	ldd	r11, Z+5	; 0x05
    5242:	2c 19       	sub	r18, r12
    5244:	3d 09       	sbc	r19, r13
    5246:	b9 01       	movw	r22, r18
    5248:	88 27       	eor	r24, r24
    524a:	77 fd       	sbrc	r23, 7
    524c:	80 95       	com	r24
    524e:	98 2f       	mov	r25, r24
    5250:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5254:	7b 01       	movw	r14, r22
    5256:	8c 01       	movw	r16, r24
    5258:	c2 95       	swap	r28
    525a:	d2 95       	swap	r29
    525c:	d0 7f       	andi	r29, 0xF0	; 240
    525e:	dc 27       	eor	r29, r28
    5260:	c0 7f       	andi	r28, 0xF0	; 240
    5262:	dc 27       	eor	r29, r28
    5264:	c3 52       	subi	r28, 0x23	; 35
    5266:	db 4f       	sbci	r29, 0xFB	; 251
    5268:	6c 81       	ldd	r22, Y+4	; 0x04
    526a:	7d 81       	ldd	r23, Y+5	; 0x05
    526c:	6a 19       	sub	r22, r10
    526e:	7b 09       	sbc	r23, r11
    5270:	88 27       	eor	r24, r24
    5272:	77 fd       	sbrc	r23, 7
    5274:	80 95       	com	r24
    5276:	98 2f       	mov	r25, r24
    5278:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    527c:	9b 01       	movw	r18, r22
    527e:	ac 01       	movw	r20, r24
    5280:	c8 01       	movw	r24, r16
    5282:	b7 01       	movw	r22, r14
    5284:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    5288:	7b 01       	movw	r14, r22
    528a:	8c 01       	movw	r16, r24
    528c:	6e 81       	ldd	r22, Y+6	; 0x06
    528e:	7f 81       	ldd	r23, Y+7	; 0x07
    5290:	65 cf       	rjmp	.-310    	; 0x515c <getInputFromSpeed+0x530>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    5292:	fe 01       	movw	r30, r28
    5294:	e2 95       	swap	r30
    5296:	f2 95       	swap	r31
    5298:	f0 7f       	andi	r31, 0xF0	; 240
    529a:	fe 27       	eor	r31, r30
    529c:	e0 7f       	andi	r30, 0xF0	; 240
    529e:	fe 27       	eor	r31, r30
    52a0:	e3 53       	subi	r30, 0x33	; 51
    52a2:	fb 4f       	sbci	r31, 0xFB	; 251
    52a4:	c2 84       	ldd	r12, Z+10	; 0x0a
    52a6:	d3 84       	ldd	r13, Z+11	; 0x0b
    52a8:	a0 84       	ldd	r10, Z+8	; 0x08
    52aa:	b1 84       	ldd	r11, Z+9	; 0x09
    52ac:	2c 19       	sub	r18, r12
    52ae:	3d 09       	sbc	r19, r13
    52b0:	b9 01       	movw	r22, r18
    52b2:	88 27       	eor	r24, r24
    52b4:	77 fd       	sbrc	r23, 7
    52b6:	80 95       	com	r24
    52b8:	98 2f       	mov	r25, r24
    52ba:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    52be:	7b 01       	movw	r14, r22
    52c0:	8c 01       	movw	r16, r24
    52c2:	c2 95       	swap	r28
    52c4:	d2 95       	swap	r29
    52c6:	d0 7f       	andi	r29, 0xF0	; 240
    52c8:	dc 27       	eor	r29, r28
    52ca:	c0 7f       	andi	r28, 0xF0	; 240
    52cc:	dc 27       	eor	r29, r28
    52ce:	c3 52       	subi	r28, 0x23	; 35
    52d0:	db 4f       	sbci	r29, 0xFB	; 251
    52d2:	68 85       	ldd	r22, Y+8	; 0x08
    52d4:	79 85       	ldd	r23, Y+9	; 0x09
    52d6:	6a 19       	sub	r22, r10
    52d8:	7b 09       	sbc	r23, r11
    52da:	88 27       	eor	r24, r24
    52dc:	77 fd       	sbrc	r23, 7
    52de:	80 95       	com	r24
    52e0:	98 2f       	mov	r25, r24
    52e2:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    52e6:	9b 01       	movw	r18, r22
    52e8:	ac 01       	movw	r20, r24
    52ea:	c8 01       	movw	r24, r16
    52ec:	b7 01       	movw	r22, r14
    52ee:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    52f2:	7b 01       	movw	r14, r22
    52f4:	8c 01       	movw	r16, r24
    52f6:	6a 85       	ldd	r22, Y+10	; 0x0a
    52f8:	7b 85       	ldd	r23, Y+11	; 0x0b
    52fa:	80 cf       	rjmp	.-256    	; 0x51fc <getInputFromSpeed+0x5d0>

000052fc <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    52fc:	8f 92       	push	r8
    52fe:	9f 92       	push	r9
    5300:	af 92       	push	r10
    5302:	bf 92       	push	r11
    5304:	cf 92       	push	r12
    5306:	df 92       	push	r13
    5308:	ef 92       	push	r14
    530a:	ff 92       	push	r15
    530c:	0f 93       	push	r16
    530e:	1f 93       	push	r17
    5310:	cf 93       	push	r28
    5312:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5314:	c0 91 f1 02 	lds	r28, 0x02F1
    5318:	d0 91 f2 02 	lds	r29, 0x02F2
    531c:	80 91 f3 02 	lds	r24, 0x02F3
    5320:	90 91 f4 02 	lds	r25, 0x02F4
    5324:	97 fd       	sbrc	r25, 7
    5326:	d9 c0       	rjmp	.+434    	; 0x54da <getRightSpeedFromInput+0x1de>
    5328:	60 91 e1 04 	lds	r22, 0x04E1
    532c:	70 91 e2 04 	lds	r23, 0x04E2
    5330:	6c 17       	cp	r22, r28
    5332:	7d 07       	cpc	r23, r29
    5334:	0c f0       	brlt	.+2      	; 0x5338 <getRightSpeedFromInput+0x3c>
    5336:	bd c0       	rjmp	.+378    	; 0x54b2 <getRightSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    5338:	0f ef       	ldi	r16, 0xFF	; 255
    533a:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    533c:	80 91 f1 04 	lds	r24, 0x04F1
    5340:	90 91 f2 04 	lds	r25, 0x04F2
    5344:	8c 17       	cp	r24, r28
    5346:	9d 07       	cpc	r25, r29
    5348:	44 f0       	brlt	.+16     	; 0x535a <getRightSpeedFromInput+0x5e>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    534a:	81 e0       	ldi	r24, 0x01	; 1
    534c:	9f ef       	ldi	r25, 0xFF	; 255
    534e:	0f 3f       	cpi	r16, 0xFF	; 255
    5350:	19 07       	cpc	r17, r25
    5352:	09 f0       	breq	.+2      	; 0x5356 <getRightSpeedFromInput+0x5a>
    5354:	80 e0       	ldi	r24, 0x00	; 0
    5356:	08 2f       	mov	r16, r24
    5358:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    535a:	80 91 01 05 	lds	r24, 0x0501
    535e:	90 91 02 05 	lds	r25, 0x0502
    5362:	8c 17       	cp	r24, r28
    5364:	9d 07       	cpc	r25, r29
    5366:	2c f0       	brlt	.+10     	; 0x5372 <getRightSpeedFromInput+0x76>
    5368:	8f ef       	ldi	r24, 0xFF	; 255
    536a:	0f 3f       	cpi	r16, 0xFF	; 255
    536c:	18 07       	cpc	r17, r24
    536e:	09 f4       	brne	.+2      	; 0x5372 <getRightSpeedFromInput+0x76>
    5370:	6c c1       	rjmp	.+728    	; 0x564a <getRightSpeedFromInput+0x34e>
    5372:	80 91 11 05 	lds	r24, 0x0511
    5376:	90 91 12 05 	lds	r25, 0x0512
    537a:	8c 17       	cp	r24, r28
    537c:	9d 07       	cpc	r25, r29
    537e:	2c f0       	brlt	.+10     	; 0x538a <getRightSpeedFromInput+0x8e>
    5380:	9f ef       	ldi	r25, 0xFF	; 255
    5382:	0f 3f       	cpi	r16, 0xFF	; 255
    5384:	19 07       	cpc	r17, r25
    5386:	09 f4       	brne	.+2      	; 0x538a <getRightSpeedFromInput+0x8e>
    5388:	72 c1       	rjmp	.+740    	; 0x566e <getRightSpeedFromInput+0x372>
    538a:	80 91 21 05 	lds	r24, 0x0521
    538e:	90 91 22 05 	lds	r25, 0x0522
    5392:	8c 17       	cp	r24, r28
    5394:	9d 07       	cpc	r25, r29
    5396:	2c f0       	brlt	.+10     	; 0x53a2 <getRightSpeedFromInput+0xa6>
    5398:	8f ef       	ldi	r24, 0xFF	; 255
    539a:	0f 3f       	cpi	r16, 0xFF	; 255
    539c:	18 07       	cpc	r17, r24
    539e:	09 f4       	brne	.+2      	; 0x53a2 <getRightSpeedFromInput+0xa6>
    53a0:	63 c1       	rjmp	.+710    	; 0x5668 <getRightSpeedFromInput+0x36c>
    53a2:	80 91 31 05 	lds	r24, 0x0531
    53a6:	90 91 32 05 	lds	r25, 0x0532
    53aa:	8c 17       	cp	r24, r28
    53ac:	9d 07       	cpc	r25, r29
    53ae:	2c f0       	brlt	.+10     	; 0x53ba <getRightSpeedFromInput+0xbe>
    53b0:	9f ef       	ldi	r25, 0xFF	; 255
    53b2:	0f 3f       	cpi	r16, 0xFF	; 255
    53b4:	19 07       	cpc	r17, r25
    53b6:	09 f4       	brne	.+2      	; 0x53ba <getRightSpeedFromInput+0xbe>
    53b8:	54 c1       	rjmp	.+680    	; 0x5662 <getRightSpeedFromInput+0x366>
    53ba:	80 91 41 05 	lds	r24, 0x0541
    53be:	90 91 42 05 	lds	r25, 0x0542
    53c2:	8c 17       	cp	r24, r28
    53c4:	9d 07       	cpc	r25, r29
    53c6:	2c f0       	brlt	.+10     	; 0x53d2 <getRightSpeedFromInput+0xd6>
    53c8:	8f ef       	ldi	r24, 0xFF	; 255
    53ca:	0f 3f       	cpi	r16, 0xFF	; 255
    53cc:	18 07       	cpc	r17, r24
    53ce:	09 f4       	brne	.+2      	; 0x53d2 <getRightSpeedFromInput+0xd6>
    53d0:	45 c1       	rjmp	.+650    	; 0x565c <getRightSpeedFromInput+0x360>
    53d2:	80 91 51 05 	lds	r24, 0x0551
    53d6:	90 91 52 05 	lds	r25, 0x0552
    53da:	8c 17       	cp	r24, r28
    53dc:	9d 07       	cpc	r25, r29
    53de:	2c f0       	brlt	.+10     	; 0x53ea <getRightSpeedFromInput+0xee>
    53e0:	9f ef       	ldi	r25, 0xFF	; 255
    53e2:	0f 3f       	cpi	r16, 0xFF	; 255
    53e4:	19 07       	cpc	r17, r25
    53e6:	09 f4       	brne	.+2      	; 0x53ea <getRightSpeedFromInput+0xee>
    53e8:	36 c1       	rjmp	.+620    	; 0x5656 <getRightSpeedFromInput+0x35a>
    53ea:	e0 90 61 05 	lds	r14, 0x0561
    53ee:	f0 90 62 05 	lds	r15, 0x0562
    53f2:	ec 16       	cp	r14, r28
    53f4:	fd 06       	cpc	r15, r29
    53f6:	2c f0       	brlt	.+10     	; 0x5402 <getRightSpeedFromInput+0x106>
    53f8:	8f ef       	ldi	r24, 0xFF	; 255
    53fa:	0f 3f       	cpi	r16, 0xFF	; 255
    53fc:	18 07       	cpc	r17, r24
    53fe:	09 f4       	brne	.+2      	; 0x5402 <getRightSpeedFromInput+0x106>
    5400:	27 c1       	rjmp	.+590    	; 0x5650 <getRightSpeedFromInput+0x354>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    5402:	20 97       	sbiw	r28, 0x00	; 0
    5404:	09 f4       	brne	.+2      	; 0x5408 <getRightSpeedFromInput+0x10c>
    5406:	58 c0       	rjmp	.+176    	; 0x54b8 <getRightSpeedFromInput+0x1bc>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    5408:	01 15       	cp	r16, r1
    540a:	11 05       	cpc	r17, r1
    540c:	09 f4       	brne	.+2      	; 0x5410 <getRightSpeedFromInput+0x114>
    540e:	32 c1       	rjmp	.+612    	; 0x5674 <getRightSpeedFromInput+0x378>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5410:	9f ef       	ldi	r25, 0xFF	; 255
    5412:	0f 3f       	cpi	r16, 0xFF	; 255
    5414:	19 07       	cpc	r17, r25
    5416:	09 f4       	brne	.+2      	; 0x541a <getRightSpeedFromInput+0x11e>
    5418:	e9 c0       	rjmp	.+466    	; 0x55ec <getRightSpeedFromInput+0x2f0>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    541a:	f8 01       	movw	r30, r16
    541c:	e2 95       	swap	r30
    541e:	f2 95       	swap	r31
    5420:	f0 7f       	andi	r31, 0xF0	; 240
    5422:	fe 27       	eor	r31, r30
    5424:	e0 7f       	andi	r30, 0xF0	; 240
    5426:	fe 27       	eor	r31, r30
    5428:	e3 53       	subi	r30, 0x33	; 51
    542a:	fb 4f       	sbci	r31, 0xFB	; 251
    542c:	a4 80       	ldd	r10, Z+4	; 0x04
    542e:	b5 80       	ldd	r11, Z+5	; 0x05
    5430:	86 80       	ldd	r8, Z+6	; 0x06
    5432:	97 80       	ldd	r9, Z+7	; 0x07
    5434:	ca 19       	sub	r28, r10
    5436:	db 09       	sbc	r29, r11
    5438:	be 01       	movw	r22, r28
    543a:	88 27       	eor	r24, r24
    543c:	77 fd       	sbrc	r23, 7
    543e:	80 95       	com	r24
    5440:	98 2f       	mov	r25, r24
    5442:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5446:	6b 01       	movw	r12, r22
    5448:	7c 01       	movw	r14, r24
    544a:	e8 01       	movw	r28, r16
    544c:	c2 95       	swap	r28
    544e:	d2 95       	swap	r29
    5450:	d0 7f       	andi	r29, 0xF0	; 240
    5452:	dc 27       	eor	r29, r28
    5454:	c0 7f       	andi	r28, 0xF0	; 240
    5456:	dc 27       	eor	r29, r28
    5458:	c3 52       	subi	r28, 0x23	; 35
    545a:	db 4f       	sbci	r29, 0xFB	; 251
    545c:	6e 81       	ldd	r22, Y+6	; 0x06
    545e:	7f 81       	ldd	r23, Y+7	; 0x07
    5460:	68 19       	sub	r22, r8
    5462:	79 09       	sbc	r23, r9
    5464:	88 27       	eor	r24, r24
    5466:	77 fd       	sbrc	r23, 7
    5468:	80 95       	com	r24
    546a:	98 2f       	mov	r25, r24
    546c:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5470:	9b 01       	movw	r18, r22
    5472:	ac 01       	movw	r20, r24
    5474:	c7 01       	movw	r24, r14
    5476:	b6 01       	movw	r22, r12
    5478:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    547c:	7b 01       	movw	r14, r22
    547e:	8c 01       	movw	r16, r24
    5480:	6c 81       	ldd	r22, Y+4	; 0x04
    5482:	7d 81       	ldd	r23, Y+5	; 0x05
    5484:	6a 19       	sub	r22, r10
    5486:	7b 09       	sbc	r23, r11
    5488:	88 27       	eor	r24, r24
    548a:	77 fd       	sbrc	r23, 7
    548c:	80 95       	com	r24
    548e:	98 2f       	mov	r25, r24
    5490:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5494:	9b 01       	movw	r18, r22
    5496:	ac 01       	movw	r20, r24
    5498:	c8 01       	movw	r24, r16
    549a:	b7 01       	movw	r22, r14
    549c:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    54a0:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    54a4:	68 0d       	add	r22, r8
    54a6:	79 1d       	adc	r23, r9
    54a8:	70 93 b7 04 	sts	0x04B7, r23
    54ac:	60 93 b6 04 	sts	0x04B6, r22
    54b0:	07 c0       	rjmp	.+14     	; 0x54c0 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    54b2:	00 e0       	ldi	r16, 0x00	; 0
    54b4:	10 e0       	ldi	r17, 0x00	; 0
    54b6:	42 cf       	rjmp	.-380    	; 0x533c <getRightSpeedFromInput+0x40>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    54b8:	10 92 b7 04 	sts	0x04B7, r1
    54bc:	10 92 b6 04 	sts	0x04B6, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    54c0:	df 91       	pop	r29
    54c2:	cf 91       	pop	r28
    54c4:	1f 91       	pop	r17
    54c6:	0f 91       	pop	r16
    54c8:	ff 90       	pop	r15
    54ca:	ef 90       	pop	r14
    54cc:	df 90       	pop	r13
    54ce:	cf 90       	pop	r12
    54d0:	bf 90       	pop	r11
    54d2:	af 90       	pop	r10
    54d4:	9f 90       	pop	r9
    54d6:	8f 90       	pop	r8
    54d8:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    54da:	60 91 e9 04 	lds	r22, 0x04E9
    54de:	70 91 ea 04 	lds	r23, 0x04EA
    54e2:	6c 17       	cp	r22, r28
    54e4:	7d 07       	cpc	r23, r29
    54e6:	0c f0       	brlt	.+2      	; 0x54ea <getRightSpeedFromInput+0x1ee>
    54e8:	7e c0       	rjmp	.+252    	; 0x55e6 <getRightSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    54ea:	0f ef       	ldi	r16, 0xFF	; 255
    54ec:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    54ee:	80 91 f9 04 	lds	r24, 0x04F9
    54f2:	90 91 fa 04 	lds	r25, 0x04FA
    54f6:	8c 17       	cp	r24, r28
    54f8:	9d 07       	cpc	r25, r29
    54fa:	44 f0       	brlt	.+16     	; 0x550c <getRightSpeedFromInput+0x210>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    54fc:	81 e0       	ldi	r24, 0x01	; 1
    54fe:	9f ef       	ldi	r25, 0xFF	; 255
    5500:	0f 3f       	cpi	r16, 0xFF	; 255
    5502:	19 07       	cpc	r17, r25
    5504:	09 f0       	breq	.+2      	; 0x5508 <getRightSpeedFromInput+0x20c>
    5506:	80 e0       	ldi	r24, 0x00	; 0
    5508:	08 2f       	mov	r16, r24
    550a:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    550c:	80 91 09 05 	lds	r24, 0x0509
    5510:	90 91 0a 05 	lds	r25, 0x050A
    5514:	8c 17       	cp	r24, r28
    5516:	9d 07       	cpc	r25, r29
    5518:	2c f0       	brlt	.+10     	; 0x5524 <getRightSpeedFromInput+0x228>
    551a:	8f ef       	ldi	r24, 0xFF	; 255
    551c:	0f 3f       	cpi	r16, 0xFF	; 255
    551e:	18 07       	cpc	r17, r24
    5520:	09 f4       	brne	.+2      	; 0x5524 <getRightSpeedFromInput+0x228>
    5522:	19 c1       	rjmp	.+562    	; 0x5756 <getRightSpeedFromInput+0x45a>
    5524:	80 91 19 05 	lds	r24, 0x0519
    5528:	90 91 1a 05 	lds	r25, 0x051A
    552c:	8c 17       	cp	r24, r28
    552e:	9d 07       	cpc	r25, r29
    5530:	2c f0       	brlt	.+10     	; 0x553c <getRightSpeedFromInput+0x240>
    5532:	9f ef       	ldi	r25, 0xFF	; 255
    5534:	0f 3f       	cpi	r16, 0xFF	; 255
    5536:	19 07       	cpc	r17, r25
    5538:	09 f4       	brne	.+2      	; 0x553c <getRightSpeedFromInput+0x240>
    553a:	0a c1       	rjmp	.+532    	; 0x5750 <getRightSpeedFromInput+0x454>
    553c:	80 91 29 05 	lds	r24, 0x0529
    5540:	90 91 2a 05 	lds	r25, 0x052A
    5544:	8c 17       	cp	r24, r28
    5546:	9d 07       	cpc	r25, r29
    5548:	2c f0       	brlt	.+10     	; 0x5554 <getRightSpeedFromInput+0x258>
    554a:	8f ef       	ldi	r24, 0xFF	; 255
    554c:	0f 3f       	cpi	r16, 0xFF	; 255
    554e:	18 07       	cpc	r17, r24
    5550:	09 f4       	brne	.+2      	; 0x5554 <getRightSpeedFromInput+0x258>
    5552:	fb c0       	rjmp	.+502    	; 0x574a <getRightSpeedFromInput+0x44e>
    5554:	80 91 39 05 	lds	r24, 0x0539
    5558:	90 91 3a 05 	lds	r25, 0x053A
    555c:	8c 17       	cp	r24, r28
    555e:	9d 07       	cpc	r25, r29
    5560:	2c f0       	brlt	.+10     	; 0x556c <getRightSpeedFromInput+0x270>
    5562:	9f ef       	ldi	r25, 0xFF	; 255
    5564:	0f 3f       	cpi	r16, 0xFF	; 255
    5566:	19 07       	cpc	r17, r25
    5568:	09 f4       	brne	.+2      	; 0x556c <getRightSpeedFromInput+0x270>
    556a:	ec c0       	rjmp	.+472    	; 0x5744 <getRightSpeedFromInput+0x448>
    556c:	80 91 49 05 	lds	r24, 0x0549
    5570:	90 91 4a 05 	lds	r25, 0x054A
    5574:	8c 17       	cp	r24, r28
    5576:	9d 07       	cpc	r25, r29
    5578:	2c f0       	brlt	.+10     	; 0x5584 <getRightSpeedFromInput+0x288>
    557a:	8f ef       	ldi	r24, 0xFF	; 255
    557c:	0f 3f       	cpi	r16, 0xFF	; 255
    557e:	18 07       	cpc	r17, r24
    5580:	09 f4       	brne	.+2      	; 0x5584 <getRightSpeedFromInput+0x288>
    5582:	dd c0       	rjmp	.+442    	; 0x573e <getRightSpeedFromInput+0x442>
    5584:	80 91 59 05 	lds	r24, 0x0559
    5588:	90 91 5a 05 	lds	r25, 0x055A
    558c:	8c 17       	cp	r24, r28
    558e:	9d 07       	cpc	r25, r29
    5590:	2c f0       	brlt	.+10     	; 0x559c <getRightSpeedFromInput+0x2a0>
    5592:	9f ef       	ldi	r25, 0xFF	; 255
    5594:	0f 3f       	cpi	r16, 0xFF	; 255
    5596:	19 07       	cpc	r17, r25
    5598:	09 f4       	brne	.+2      	; 0x559c <getRightSpeedFromInput+0x2a0>
    559a:	ce c0       	rjmp	.+412    	; 0x5738 <getRightSpeedFromInput+0x43c>
    559c:	e0 90 69 05 	lds	r14, 0x0569
    55a0:	f0 90 6a 05 	lds	r15, 0x056A
    55a4:	ec 16       	cp	r14, r28
    55a6:	fd 06       	cpc	r15, r29
    55a8:	2c f0       	brlt	.+10     	; 0x55b4 <getRightSpeedFromInput+0x2b8>
    55aa:	8f ef       	ldi	r24, 0xFF	; 255
    55ac:	0f 3f       	cpi	r16, 0xFF	; 255
    55ae:	18 07       	cpc	r17, r24
    55b0:	09 f4       	brne	.+2      	; 0x55b4 <getRightSpeedFromInput+0x2b8>
    55b2:	bf c0       	rjmp	.+382    	; 0x5732 <getRightSpeedFromInput+0x436>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    55b4:	01 15       	cp	r16, r1
    55b6:	11 05       	cpc	r17, r1
    55b8:	09 f0       	breq	.+2      	; 0x55bc <getRightSpeedFromInput+0x2c0>
    55ba:	6e c0       	rjmp	.+220    	; 0x5698 <getRightSpeedFromInput+0x39c>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    55bc:	20 91 eb 04 	lds	r18, 0x04EB
    55c0:	30 91 ec 04 	lds	r19, 0x04EC
    55c4:	c2 9f       	mul	r28, r18
    55c6:	c0 01       	movw	r24, r0
    55c8:	c3 9f       	mul	r28, r19
    55ca:	90 0d       	add	r25, r0
    55cc:	d2 9f       	mul	r29, r18
    55ce:	90 0d       	add	r25, r0
    55d0:	11 24       	eor	r1, r1
    55d2:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    55d6:	70 95       	com	r23
    55d8:	61 95       	neg	r22
    55da:	7f 4f       	sbci	r23, 0xFF	; 255
    55dc:	70 93 b7 04 	sts	0x04B7, r23
    55e0:	60 93 b6 04 	sts	0x04B6, r22
    55e4:	6d cf       	rjmp	.-294    	; 0x54c0 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    55e6:	00 e0       	ldi	r16, 0x00	; 0
    55e8:	10 e0       	ldi	r17, 0x00	; 0
    55ea:	81 cf       	rjmp	.-254    	; 0x54ee <getRightSpeedFromInput+0x1f2>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    55ec:	60 91 63 05 	lds	r22, 0x0563
    55f0:	70 91 64 05 	lds	r23, 0x0564
    55f4:	88 27       	eor	r24, r24
    55f6:	77 fd       	sbrc	r23, 7
    55f8:	80 95       	com	r24
    55fa:	98 2f       	mov	r25, r24
    55fc:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5600:	5b 01       	movw	r10, r22
    5602:	6c 01       	movw	r12, r24
    5604:	be 01       	movw	r22, r28
    5606:	88 27       	eor	r24, r24
    5608:	77 fd       	sbrc	r23, 7
    560a:	80 95       	com	r24
    560c:	98 2f       	mov	r25, r24
    560e:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5612:	9b 01       	movw	r18, r22
    5614:	ac 01       	movw	r20, r24
    5616:	c6 01       	movw	r24, r12
    5618:	b5 01       	movw	r22, r10
    561a:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    561e:	5b 01       	movw	r10, r22
    5620:	6c 01       	movw	r12, r24
    5622:	b7 01       	movw	r22, r14
    5624:	88 27       	eor	r24, r24
    5626:	77 fd       	sbrc	r23, 7
    5628:	80 95       	com	r24
    562a:	98 2f       	mov	r25, r24
    562c:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5630:	9b 01       	movw	r18, r22
    5632:	ac 01       	movw	r20, r24
    5634:	c6 01       	movw	r24, r12
    5636:	b5 01       	movw	r22, r10
    5638:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    563c:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    5640:	70 93 b7 04 	sts	0x04B7, r23
    5644:	60 93 b6 04 	sts	0x04B6, r22
    5648:	3b cf       	rjmp	.-394    	; 0x54c0 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    564a:	02 e0       	ldi	r16, 0x02	; 2
    564c:	10 e0       	ldi	r17, 0x00	; 0
    564e:	91 ce       	rjmp	.-734    	; 0x5372 <getRightSpeedFromInput+0x76>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5650:	08 e0       	ldi	r16, 0x08	; 8
    5652:	10 e0       	ldi	r17, 0x00	; 0
    5654:	d6 ce       	rjmp	.-596    	; 0x5402 <getRightSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5656:	07 e0       	ldi	r16, 0x07	; 7
    5658:	10 e0       	ldi	r17, 0x00	; 0
    565a:	c7 ce       	rjmp	.-626    	; 0x53ea <getRightSpeedFromInput+0xee>
    565c:	06 e0       	ldi	r16, 0x06	; 6
    565e:	10 e0       	ldi	r17, 0x00	; 0
    5660:	b8 ce       	rjmp	.-656    	; 0x53d2 <getRightSpeedFromInput+0xd6>
    5662:	05 e0       	ldi	r16, 0x05	; 5
    5664:	10 e0       	ldi	r17, 0x00	; 0
    5666:	a9 ce       	rjmp	.-686    	; 0x53ba <getRightSpeedFromInput+0xbe>
    5668:	04 e0       	ldi	r16, 0x04	; 4
    566a:	10 e0       	ldi	r17, 0x00	; 0
    566c:	9a ce       	rjmp	.-716    	; 0x53a2 <getRightSpeedFromInput+0xa6>
    566e:	03 e0       	ldi	r16, 0x03	; 3
    5670:	10 e0       	ldi	r17, 0x00	; 0
    5672:	8b ce       	rjmp	.-746    	; 0x538a <getRightSpeedFromInput+0x8e>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    5674:	20 91 e3 04 	lds	r18, 0x04E3
    5678:	30 91 e4 04 	lds	r19, 0x04E4
    567c:	c2 9f       	mul	r28, r18
    567e:	c0 01       	movw	r24, r0
    5680:	c3 9f       	mul	r28, r19
    5682:	90 0d       	add	r25, r0
    5684:	d2 9f       	mul	r29, r18
    5686:	90 0d       	add	r25, r0
    5688:	11 24       	eor	r1, r1
    568a:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
    568e:	70 93 b7 04 	sts	0x04B7, r23
    5692:	60 93 b6 04 	sts	0x04B6, r22
    5696:	14 cf       	rjmp	.-472    	; 0x54c0 <getRightSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5698:	8f ef       	ldi	r24, 0xFF	; 255
    569a:	0f 3f       	cpi	r16, 0xFF	; 255
    569c:	18 07       	cpc	r17, r24
    569e:	09 f4       	brne	.+2      	; 0x56a2 <getRightSpeedFromInput+0x3a6>
    56a0:	5d c0       	rjmp	.+186    	; 0x575c <getRightSpeedFromInput+0x460>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    56a2:	f8 01       	movw	r30, r16
    56a4:	e2 95       	swap	r30
    56a6:	f2 95       	swap	r31
    56a8:	f0 7f       	andi	r31, 0xF0	; 240
    56aa:	fe 27       	eor	r31, r30
    56ac:	e0 7f       	andi	r30, 0xF0	; 240
    56ae:	fe 27       	eor	r31, r30
    56b0:	e3 53       	subi	r30, 0x33	; 51
    56b2:	fb 4f       	sbci	r31, 0xFB	; 251
    56b4:	a4 84       	ldd	r10, Z+12	; 0x0c
    56b6:	b5 84       	ldd	r11, Z+13	; 0x0d
    56b8:	86 84       	ldd	r8, Z+14	; 0x0e
    56ba:	97 84       	ldd	r9, Z+15	; 0x0f
    56bc:	ca 19       	sub	r28, r10
    56be:	db 09       	sbc	r29, r11
    56c0:	be 01       	movw	r22, r28
    56c2:	88 27       	eor	r24, r24
    56c4:	77 fd       	sbrc	r23, 7
    56c6:	80 95       	com	r24
    56c8:	98 2f       	mov	r25, r24
    56ca:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    56ce:	6b 01       	movw	r12, r22
    56d0:	7c 01       	movw	r14, r24
    56d2:	e8 01       	movw	r28, r16
    56d4:	c2 95       	swap	r28
    56d6:	d2 95       	swap	r29
    56d8:	d0 7f       	andi	r29, 0xF0	; 240
    56da:	dc 27       	eor	r29, r28
    56dc:	c0 7f       	andi	r28, 0xF0	; 240
    56de:	dc 27       	eor	r29, r28
    56e0:	c3 52       	subi	r28, 0x23	; 35
    56e2:	db 4f       	sbci	r29, 0xFB	; 251
    56e4:	6e 85       	ldd	r22, Y+14	; 0x0e
    56e6:	7f 85       	ldd	r23, Y+15	; 0x0f
    56e8:	68 19       	sub	r22, r8
    56ea:	79 09       	sbc	r23, r9
    56ec:	88 27       	eor	r24, r24
    56ee:	77 fd       	sbrc	r23, 7
    56f0:	80 95       	com	r24
    56f2:	98 2f       	mov	r25, r24
    56f4:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    56f8:	9b 01       	movw	r18, r22
    56fa:	ac 01       	movw	r20, r24
    56fc:	c7 01       	movw	r24, r14
    56fe:	b6 01       	movw	r22, r12
    5700:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    5704:	7b 01       	movw	r14, r22
    5706:	8c 01       	movw	r16, r24
    5708:	6c 85       	ldd	r22, Y+12	; 0x0c
    570a:	7d 85       	ldd	r23, Y+13	; 0x0d
    570c:	6a 19       	sub	r22, r10
    570e:	7b 09       	sbc	r23, r11
    5710:	88 27       	eor	r24, r24
    5712:	77 fd       	sbrc	r23, 7
    5714:	80 95       	com	r24
    5716:	98 2f       	mov	r25, r24
    5718:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    571c:	9b 01       	movw	r18, r22
    571e:	ac 01       	movw	r20, r24
    5720:	c8 01       	movw	r24, r16
    5722:	b7 01       	movw	r22, r14
    5724:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    5728:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    572c:	68 0d       	add	r22, r8
    572e:	79 1d       	adc	r23, r9
    5730:	52 cf       	rjmp	.-348    	; 0x55d6 <getRightSpeedFromInput+0x2da>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5732:	08 e0       	ldi	r16, 0x08	; 8
    5734:	10 e0       	ldi	r17, 0x00	; 0
    5736:	3e cf       	rjmp	.-388    	; 0x55b4 <getRightSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5738:	07 e0       	ldi	r16, 0x07	; 7
    573a:	10 e0       	ldi	r17, 0x00	; 0
    573c:	2f cf       	rjmp	.-418    	; 0x559c <getRightSpeedFromInput+0x2a0>
    573e:	06 e0       	ldi	r16, 0x06	; 6
    5740:	10 e0       	ldi	r17, 0x00	; 0
    5742:	20 cf       	rjmp	.-448    	; 0x5584 <getRightSpeedFromInput+0x288>
    5744:	05 e0       	ldi	r16, 0x05	; 5
    5746:	10 e0       	ldi	r17, 0x00	; 0
    5748:	11 cf       	rjmp	.-478    	; 0x556c <getRightSpeedFromInput+0x270>
    574a:	04 e0       	ldi	r16, 0x04	; 4
    574c:	10 e0       	ldi	r17, 0x00	; 0
    574e:	02 cf       	rjmp	.-508    	; 0x5554 <getRightSpeedFromInput+0x258>
    5750:	03 e0       	ldi	r16, 0x03	; 3
    5752:	10 e0       	ldi	r17, 0x00	; 0
    5754:	f3 ce       	rjmp	.-538    	; 0x553c <getRightSpeedFromInput+0x240>
    5756:	02 e0       	ldi	r16, 0x02	; 2
    5758:	10 e0       	ldi	r17, 0x00	; 0
    575a:	e4 ce       	rjmp	.-568    	; 0x5524 <getRightSpeedFromInput+0x228>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    575c:	60 91 6b 05 	lds	r22, 0x056B
    5760:	70 91 6c 05 	lds	r23, 0x056C
    5764:	88 27       	eor	r24, r24
    5766:	77 fd       	sbrc	r23, 7
    5768:	80 95       	com	r24
    576a:	98 2f       	mov	r25, r24
    576c:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5770:	5b 01       	movw	r10, r22
    5772:	6c 01       	movw	r12, r24
    5774:	be 01       	movw	r22, r28
    5776:	88 27       	eor	r24, r24
    5778:	77 fd       	sbrc	r23, 7
    577a:	80 95       	com	r24
    577c:	98 2f       	mov	r25, r24
    577e:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5782:	9b 01       	movw	r18, r22
    5784:	ac 01       	movw	r20, r24
    5786:	c6 01       	movw	r24, r12
    5788:	b5 01       	movw	r22, r10
    578a:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    578e:	5b 01       	movw	r10, r22
    5790:	6c 01       	movw	r12, r24
    5792:	b7 01       	movw	r22, r14
    5794:	88 27       	eor	r24, r24
    5796:	77 fd       	sbrc	r23, 7
    5798:	80 95       	com	r24
    579a:	98 2f       	mov	r25, r24
    579c:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    57a0:	9b 01       	movw	r18, r22
    57a2:	ac 01       	movw	r20, r24
    57a4:	c6 01       	movw	r24, r12
    57a6:	b5 01       	movw	r22, r10
    57a8:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    57ac:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    57b0:	12 cf       	rjmp	.-476    	; 0x55d6 <getRightSpeedFromInput+0x2da>

000057b2 <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    57b2:	8f 92       	push	r8
    57b4:	9f 92       	push	r9
    57b6:	af 92       	push	r10
    57b8:	bf 92       	push	r11
    57ba:	cf 92       	push	r12
    57bc:	df 92       	push	r13
    57be:	ef 92       	push	r14
    57c0:	ff 92       	push	r15
    57c2:	0f 93       	push	r16
    57c4:	1f 93       	push	r17
    57c6:	cf 93       	push	r28
    57c8:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    57ca:	c0 91 ef 02 	lds	r28, 0x02EF
    57ce:	d0 91 f0 02 	lds	r29, 0x02F0
    57d2:	80 91 f5 02 	lds	r24, 0x02F5
    57d6:	90 91 f6 02 	lds	r25, 0x02F6
    57da:	97 fd       	sbrc	r25, 7
    57dc:	d9 c0       	rjmp	.+434    	; 0x5990 <getLeftSpeedFromInput+0x1de>
    57de:	60 91 dd 04 	lds	r22, 0x04DD
    57e2:	70 91 de 04 	lds	r23, 0x04DE
    57e6:	6c 17       	cp	r22, r28
    57e8:	7d 07       	cpc	r23, r29
    57ea:	0c f0       	brlt	.+2      	; 0x57ee <getLeftSpeedFromInput+0x3c>
    57ec:	bd c0       	rjmp	.+378    	; 0x5968 <getLeftSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    57ee:	0f ef       	ldi	r16, 0xFF	; 255
    57f0:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    57f2:	80 91 ed 04 	lds	r24, 0x04ED
    57f6:	90 91 ee 04 	lds	r25, 0x04EE
    57fa:	8c 17       	cp	r24, r28
    57fc:	9d 07       	cpc	r25, r29
    57fe:	44 f0       	brlt	.+16     	; 0x5810 <getLeftSpeedFromInput+0x5e>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    5800:	81 e0       	ldi	r24, 0x01	; 1
    5802:	9f ef       	ldi	r25, 0xFF	; 255
    5804:	0f 3f       	cpi	r16, 0xFF	; 255
    5806:	19 07       	cpc	r17, r25
    5808:	09 f0       	breq	.+2      	; 0x580c <getLeftSpeedFromInput+0x5a>
    580a:	80 e0       	ldi	r24, 0x00	; 0
    580c:	08 2f       	mov	r16, r24
    580e:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5810:	80 91 fd 04 	lds	r24, 0x04FD
    5814:	90 91 fe 04 	lds	r25, 0x04FE
    5818:	8c 17       	cp	r24, r28
    581a:	9d 07       	cpc	r25, r29
    581c:	2c f0       	brlt	.+10     	; 0x5828 <getLeftSpeedFromInput+0x76>
    581e:	8f ef       	ldi	r24, 0xFF	; 255
    5820:	0f 3f       	cpi	r16, 0xFF	; 255
    5822:	18 07       	cpc	r17, r24
    5824:	09 f4       	brne	.+2      	; 0x5828 <getLeftSpeedFromInput+0x76>
    5826:	6c c1       	rjmp	.+728    	; 0x5b00 <getLeftSpeedFromInput+0x34e>
    5828:	80 91 0d 05 	lds	r24, 0x050D
    582c:	90 91 0e 05 	lds	r25, 0x050E
    5830:	8c 17       	cp	r24, r28
    5832:	9d 07       	cpc	r25, r29
    5834:	2c f0       	brlt	.+10     	; 0x5840 <getLeftSpeedFromInput+0x8e>
    5836:	9f ef       	ldi	r25, 0xFF	; 255
    5838:	0f 3f       	cpi	r16, 0xFF	; 255
    583a:	19 07       	cpc	r17, r25
    583c:	09 f4       	brne	.+2      	; 0x5840 <getLeftSpeedFromInput+0x8e>
    583e:	72 c1       	rjmp	.+740    	; 0x5b24 <getLeftSpeedFromInput+0x372>
    5840:	80 91 1d 05 	lds	r24, 0x051D
    5844:	90 91 1e 05 	lds	r25, 0x051E
    5848:	8c 17       	cp	r24, r28
    584a:	9d 07       	cpc	r25, r29
    584c:	2c f0       	brlt	.+10     	; 0x5858 <getLeftSpeedFromInput+0xa6>
    584e:	8f ef       	ldi	r24, 0xFF	; 255
    5850:	0f 3f       	cpi	r16, 0xFF	; 255
    5852:	18 07       	cpc	r17, r24
    5854:	09 f4       	brne	.+2      	; 0x5858 <getLeftSpeedFromInput+0xa6>
    5856:	63 c1       	rjmp	.+710    	; 0x5b1e <getLeftSpeedFromInput+0x36c>
    5858:	80 91 2d 05 	lds	r24, 0x052D
    585c:	90 91 2e 05 	lds	r25, 0x052E
    5860:	8c 17       	cp	r24, r28
    5862:	9d 07       	cpc	r25, r29
    5864:	2c f0       	brlt	.+10     	; 0x5870 <getLeftSpeedFromInput+0xbe>
    5866:	9f ef       	ldi	r25, 0xFF	; 255
    5868:	0f 3f       	cpi	r16, 0xFF	; 255
    586a:	19 07       	cpc	r17, r25
    586c:	09 f4       	brne	.+2      	; 0x5870 <getLeftSpeedFromInput+0xbe>
    586e:	54 c1       	rjmp	.+680    	; 0x5b18 <getLeftSpeedFromInput+0x366>
    5870:	80 91 3d 05 	lds	r24, 0x053D
    5874:	90 91 3e 05 	lds	r25, 0x053E
    5878:	8c 17       	cp	r24, r28
    587a:	9d 07       	cpc	r25, r29
    587c:	2c f0       	brlt	.+10     	; 0x5888 <getLeftSpeedFromInput+0xd6>
    587e:	8f ef       	ldi	r24, 0xFF	; 255
    5880:	0f 3f       	cpi	r16, 0xFF	; 255
    5882:	18 07       	cpc	r17, r24
    5884:	09 f4       	brne	.+2      	; 0x5888 <getLeftSpeedFromInput+0xd6>
    5886:	45 c1       	rjmp	.+650    	; 0x5b12 <getLeftSpeedFromInput+0x360>
    5888:	80 91 4d 05 	lds	r24, 0x054D
    588c:	90 91 4e 05 	lds	r25, 0x054E
    5890:	8c 17       	cp	r24, r28
    5892:	9d 07       	cpc	r25, r29
    5894:	2c f0       	brlt	.+10     	; 0x58a0 <getLeftSpeedFromInput+0xee>
    5896:	9f ef       	ldi	r25, 0xFF	; 255
    5898:	0f 3f       	cpi	r16, 0xFF	; 255
    589a:	19 07       	cpc	r17, r25
    589c:	09 f4       	brne	.+2      	; 0x58a0 <getLeftSpeedFromInput+0xee>
    589e:	36 c1       	rjmp	.+620    	; 0x5b0c <getLeftSpeedFromInput+0x35a>
    58a0:	e0 90 5d 05 	lds	r14, 0x055D
    58a4:	f0 90 5e 05 	lds	r15, 0x055E
    58a8:	ec 16       	cp	r14, r28
    58aa:	fd 06       	cpc	r15, r29
    58ac:	2c f0       	brlt	.+10     	; 0x58b8 <getLeftSpeedFromInput+0x106>
    58ae:	8f ef       	ldi	r24, 0xFF	; 255
    58b0:	0f 3f       	cpi	r16, 0xFF	; 255
    58b2:	18 07       	cpc	r17, r24
    58b4:	09 f4       	brne	.+2      	; 0x58b8 <getLeftSpeedFromInput+0x106>
    58b6:	27 c1       	rjmp	.+590    	; 0x5b06 <getLeftSpeedFromInput+0x354>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    58b8:	20 97       	sbiw	r28, 0x00	; 0
    58ba:	09 f4       	brne	.+2      	; 0x58be <getLeftSpeedFromInput+0x10c>
    58bc:	58 c0       	rjmp	.+176    	; 0x596e <getLeftSpeedFromInput+0x1bc>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    58be:	01 15       	cp	r16, r1
    58c0:	11 05       	cpc	r17, r1
    58c2:	09 f4       	brne	.+2      	; 0x58c6 <getLeftSpeedFromInput+0x114>
    58c4:	32 c1       	rjmp	.+612    	; 0x5b2a <getLeftSpeedFromInput+0x378>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    58c6:	9f ef       	ldi	r25, 0xFF	; 255
    58c8:	0f 3f       	cpi	r16, 0xFF	; 255
    58ca:	19 07       	cpc	r17, r25
    58cc:	09 f4       	brne	.+2      	; 0x58d0 <getLeftSpeedFromInput+0x11e>
    58ce:	e9 c0       	rjmp	.+466    	; 0x5aa2 <getLeftSpeedFromInput+0x2f0>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    58d0:	f8 01       	movw	r30, r16
    58d2:	e2 95       	swap	r30
    58d4:	f2 95       	swap	r31
    58d6:	f0 7f       	andi	r31, 0xF0	; 240
    58d8:	fe 27       	eor	r31, r30
    58da:	e0 7f       	andi	r30, 0xF0	; 240
    58dc:	fe 27       	eor	r31, r30
    58de:	e3 53       	subi	r30, 0x33	; 51
    58e0:	fb 4f       	sbci	r31, 0xFB	; 251
    58e2:	a0 80       	ld	r10, Z
    58e4:	b1 80       	ldd	r11, Z+1	; 0x01
    58e6:	82 80       	ldd	r8, Z+2	; 0x02
    58e8:	93 80       	ldd	r9, Z+3	; 0x03
    58ea:	ca 19       	sub	r28, r10
    58ec:	db 09       	sbc	r29, r11
    58ee:	be 01       	movw	r22, r28
    58f0:	88 27       	eor	r24, r24
    58f2:	77 fd       	sbrc	r23, 7
    58f4:	80 95       	com	r24
    58f6:	98 2f       	mov	r25, r24
    58f8:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    58fc:	6b 01       	movw	r12, r22
    58fe:	7c 01       	movw	r14, r24
    5900:	e8 01       	movw	r28, r16
    5902:	c2 95       	swap	r28
    5904:	d2 95       	swap	r29
    5906:	d0 7f       	andi	r29, 0xF0	; 240
    5908:	dc 27       	eor	r29, r28
    590a:	c0 7f       	andi	r28, 0xF0	; 240
    590c:	dc 27       	eor	r29, r28
    590e:	c3 52       	subi	r28, 0x23	; 35
    5910:	db 4f       	sbci	r29, 0xFB	; 251
    5912:	6a 81       	ldd	r22, Y+2	; 0x02
    5914:	7b 81       	ldd	r23, Y+3	; 0x03
    5916:	68 19       	sub	r22, r8
    5918:	79 09       	sbc	r23, r9
    591a:	88 27       	eor	r24, r24
    591c:	77 fd       	sbrc	r23, 7
    591e:	80 95       	com	r24
    5920:	98 2f       	mov	r25, r24
    5922:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5926:	9b 01       	movw	r18, r22
    5928:	ac 01       	movw	r20, r24
    592a:	c7 01       	movw	r24, r14
    592c:	b6 01       	movw	r22, r12
    592e:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    5932:	7b 01       	movw	r14, r22
    5934:	8c 01       	movw	r16, r24
    5936:	68 81       	ld	r22, Y
    5938:	79 81       	ldd	r23, Y+1	; 0x01
    593a:	6a 19       	sub	r22, r10
    593c:	7b 09       	sbc	r23, r11
    593e:	88 27       	eor	r24, r24
    5940:	77 fd       	sbrc	r23, 7
    5942:	80 95       	com	r24
    5944:	98 2f       	mov	r25, r24
    5946:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    594a:	9b 01       	movw	r18, r22
    594c:	ac 01       	movw	r20, r24
    594e:	c8 01       	movw	r24, r16
    5950:	b7 01       	movw	r22, r14
    5952:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    5956:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    595a:	68 0d       	add	r22, r8
    595c:	79 1d       	adc	r23, r9
    595e:	70 93 b5 04 	sts	0x04B5, r23
    5962:	60 93 b4 04 	sts	0x04B4, r22
    5966:	07 c0       	rjmp	.+14     	; 0x5976 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5968:	00 e0       	ldi	r16, 0x00	; 0
    596a:	10 e0       	ldi	r17, 0x00	; 0
    596c:	42 cf       	rjmp	.-380    	; 0x57f2 <getLeftSpeedFromInput+0x40>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    596e:	10 92 b5 04 	sts	0x04B5, r1
    5972:	10 92 b4 04 	sts	0x04B4, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    5976:	df 91       	pop	r29
    5978:	cf 91       	pop	r28
    597a:	1f 91       	pop	r17
    597c:	0f 91       	pop	r16
    597e:	ff 90       	pop	r15
    5980:	ef 90       	pop	r14
    5982:	df 90       	pop	r13
    5984:	cf 90       	pop	r12
    5986:	bf 90       	pop	r11
    5988:	af 90       	pop	r10
    598a:	9f 90       	pop	r9
    598c:	8f 90       	pop	r8
    598e:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    5990:	60 91 e5 04 	lds	r22, 0x04E5
    5994:	70 91 e6 04 	lds	r23, 0x04E6
    5998:	6c 17       	cp	r22, r28
    599a:	7d 07       	cpc	r23, r29
    599c:	0c f0       	brlt	.+2      	; 0x59a0 <getLeftSpeedFromInput+0x1ee>
    599e:	7e c0       	rjmp	.+252    	; 0x5a9c <getLeftSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    59a0:	0f ef       	ldi	r16, 0xFF	; 255
    59a2:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    59a4:	80 91 f5 04 	lds	r24, 0x04F5
    59a8:	90 91 f6 04 	lds	r25, 0x04F6
    59ac:	8c 17       	cp	r24, r28
    59ae:	9d 07       	cpc	r25, r29
    59b0:	44 f0       	brlt	.+16     	; 0x59c2 <getLeftSpeedFromInput+0x210>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    59b2:	81 e0       	ldi	r24, 0x01	; 1
    59b4:	9f ef       	ldi	r25, 0xFF	; 255
    59b6:	0f 3f       	cpi	r16, 0xFF	; 255
    59b8:	19 07       	cpc	r17, r25
    59ba:	09 f0       	breq	.+2      	; 0x59be <getLeftSpeedFromInput+0x20c>
    59bc:	80 e0       	ldi	r24, 0x00	; 0
    59be:	08 2f       	mov	r16, r24
    59c0:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    59c2:	80 91 05 05 	lds	r24, 0x0505
    59c6:	90 91 06 05 	lds	r25, 0x0506
    59ca:	8c 17       	cp	r24, r28
    59cc:	9d 07       	cpc	r25, r29
    59ce:	2c f0       	brlt	.+10     	; 0x59da <getLeftSpeedFromInput+0x228>
    59d0:	8f ef       	ldi	r24, 0xFF	; 255
    59d2:	0f 3f       	cpi	r16, 0xFF	; 255
    59d4:	18 07       	cpc	r17, r24
    59d6:	09 f4       	brne	.+2      	; 0x59da <getLeftSpeedFromInput+0x228>
    59d8:	19 c1       	rjmp	.+562    	; 0x5c0c <getLeftSpeedFromInput+0x45a>
    59da:	80 91 15 05 	lds	r24, 0x0515
    59de:	90 91 16 05 	lds	r25, 0x0516
    59e2:	8c 17       	cp	r24, r28
    59e4:	9d 07       	cpc	r25, r29
    59e6:	2c f0       	brlt	.+10     	; 0x59f2 <getLeftSpeedFromInput+0x240>
    59e8:	9f ef       	ldi	r25, 0xFF	; 255
    59ea:	0f 3f       	cpi	r16, 0xFF	; 255
    59ec:	19 07       	cpc	r17, r25
    59ee:	09 f4       	brne	.+2      	; 0x59f2 <getLeftSpeedFromInput+0x240>
    59f0:	0a c1       	rjmp	.+532    	; 0x5c06 <getLeftSpeedFromInput+0x454>
    59f2:	80 91 25 05 	lds	r24, 0x0525
    59f6:	90 91 26 05 	lds	r25, 0x0526
    59fa:	8c 17       	cp	r24, r28
    59fc:	9d 07       	cpc	r25, r29
    59fe:	2c f0       	brlt	.+10     	; 0x5a0a <getLeftSpeedFromInput+0x258>
    5a00:	8f ef       	ldi	r24, 0xFF	; 255
    5a02:	0f 3f       	cpi	r16, 0xFF	; 255
    5a04:	18 07       	cpc	r17, r24
    5a06:	09 f4       	brne	.+2      	; 0x5a0a <getLeftSpeedFromInput+0x258>
    5a08:	fb c0       	rjmp	.+502    	; 0x5c00 <getLeftSpeedFromInput+0x44e>
    5a0a:	80 91 35 05 	lds	r24, 0x0535
    5a0e:	90 91 36 05 	lds	r25, 0x0536
    5a12:	8c 17       	cp	r24, r28
    5a14:	9d 07       	cpc	r25, r29
    5a16:	2c f0       	brlt	.+10     	; 0x5a22 <getLeftSpeedFromInput+0x270>
    5a18:	9f ef       	ldi	r25, 0xFF	; 255
    5a1a:	0f 3f       	cpi	r16, 0xFF	; 255
    5a1c:	19 07       	cpc	r17, r25
    5a1e:	09 f4       	brne	.+2      	; 0x5a22 <getLeftSpeedFromInput+0x270>
    5a20:	ec c0       	rjmp	.+472    	; 0x5bfa <getLeftSpeedFromInput+0x448>
    5a22:	80 91 45 05 	lds	r24, 0x0545
    5a26:	90 91 46 05 	lds	r25, 0x0546
    5a2a:	8c 17       	cp	r24, r28
    5a2c:	9d 07       	cpc	r25, r29
    5a2e:	2c f0       	brlt	.+10     	; 0x5a3a <getLeftSpeedFromInput+0x288>
    5a30:	8f ef       	ldi	r24, 0xFF	; 255
    5a32:	0f 3f       	cpi	r16, 0xFF	; 255
    5a34:	18 07       	cpc	r17, r24
    5a36:	09 f4       	brne	.+2      	; 0x5a3a <getLeftSpeedFromInput+0x288>
    5a38:	dd c0       	rjmp	.+442    	; 0x5bf4 <getLeftSpeedFromInput+0x442>
    5a3a:	80 91 55 05 	lds	r24, 0x0555
    5a3e:	90 91 56 05 	lds	r25, 0x0556
    5a42:	8c 17       	cp	r24, r28
    5a44:	9d 07       	cpc	r25, r29
    5a46:	2c f0       	brlt	.+10     	; 0x5a52 <getLeftSpeedFromInput+0x2a0>
    5a48:	9f ef       	ldi	r25, 0xFF	; 255
    5a4a:	0f 3f       	cpi	r16, 0xFF	; 255
    5a4c:	19 07       	cpc	r17, r25
    5a4e:	09 f4       	brne	.+2      	; 0x5a52 <getLeftSpeedFromInput+0x2a0>
    5a50:	ce c0       	rjmp	.+412    	; 0x5bee <getLeftSpeedFromInput+0x43c>
    5a52:	e0 90 65 05 	lds	r14, 0x0565
    5a56:	f0 90 66 05 	lds	r15, 0x0566
    5a5a:	ec 16       	cp	r14, r28
    5a5c:	fd 06       	cpc	r15, r29
    5a5e:	2c f0       	brlt	.+10     	; 0x5a6a <getLeftSpeedFromInput+0x2b8>
    5a60:	8f ef       	ldi	r24, 0xFF	; 255
    5a62:	0f 3f       	cpi	r16, 0xFF	; 255
    5a64:	18 07       	cpc	r17, r24
    5a66:	09 f4       	brne	.+2      	; 0x5a6a <getLeftSpeedFromInput+0x2b8>
    5a68:	bf c0       	rjmp	.+382    	; 0x5be8 <getLeftSpeedFromInput+0x436>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    5a6a:	01 15       	cp	r16, r1
    5a6c:	11 05       	cpc	r17, r1
    5a6e:	09 f0       	breq	.+2      	; 0x5a72 <getLeftSpeedFromInput+0x2c0>
    5a70:	6e c0       	rjmp	.+220    	; 0x5b4e <getLeftSpeedFromInput+0x39c>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    5a72:	20 91 e7 04 	lds	r18, 0x04E7
    5a76:	30 91 e8 04 	lds	r19, 0x04E8
    5a7a:	c2 9f       	mul	r28, r18
    5a7c:	c0 01       	movw	r24, r0
    5a7e:	c3 9f       	mul	r28, r19
    5a80:	90 0d       	add	r25, r0
    5a82:	d2 9f       	mul	r29, r18
    5a84:	90 0d       	add	r25, r0
    5a86:	11 24       	eor	r1, r1
    5a88:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    5a8c:	70 95       	com	r23
    5a8e:	61 95       	neg	r22
    5a90:	7f 4f       	sbci	r23, 0xFF	; 255
    5a92:	70 93 b5 04 	sts	0x04B5, r23
    5a96:	60 93 b4 04 	sts	0x04B4, r22
    5a9a:	6d cf       	rjmp	.-294    	; 0x5976 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5a9c:	00 e0       	ldi	r16, 0x00	; 0
    5a9e:	10 e0       	ldi	r17, 0x00	; 0
    5aa0:	81 cf       	rjmp	.-254    	; 0x59a4 <getLeftSpeedFromInput+0x1f2>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    5aa2:	60 91 5f 05 	lds	r22, 0x055F
    5aa6:	70 91 60 05 	lds	r23, 0x0560
    5aaa:	88 27       	eor	r24, r24
    5aac:	77 fd       	sbrc	r23, 7
    5aae:	80 95       	com	r24
    5ab0:	98 2f       	mov	r25, r24
    5ab2:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5ab6:	5b 01       	movw	r10, r22
    5ab8:	6c 01       	movw	r12, r24
    5aba:	be 01       	movw	r22, r28
    5abc:	88 27       	eor	r24, r24
    5abe:	77 fd       	sbrc	r23, 7
    5ac0:	80 95       	com	r24
    5ac2:	98 2f       	mov	r25, r24
    5ac4:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5ac8:	9b 01       	movw	r18, r22
    5aca:	ac 01       	movw	r20, r24
    5acc:	c6 01       	movw	r24, r12
    5ace:	b5 01       	movw	r22, r10
    5ad0:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    5ad4:	5b 01       	movw	r10, r22
    5ad6:	6c 01       	movw	r12, r24
    5ad8:	b7 01       	movw	r22, r14
    5ada:	88 27       	eor	r24, r24
    5adc:	77 fd       	sbrc	r23, 7
    5ade:	80 95       	com	r24
    5ae0:	98 2f       	mov	r25, r24
    5ae2:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5ae6:	9b 01       	movw	r18, r22
    5ae8:	ac 01       	movw	r20, r24
    5aea:	c6 01       	movw	r24, r12
    5aec:	b5 01       	movw	r22, r10
    5aee:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    5af2:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    5af6:	70 93 b5 04 	sts	0x04B5, r23
    5afa:	60 93 b4 04 	sts	0x04B4, r22
    5afe:	3b cf       	rjmp	.-394    	; 0x5976 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5b00:	02 e0       	ldi	r16, 0x02	; 2
    5b02:	10 e0       	ldi	r17, 0x00	; 0
    5b04:	91 ce       	rjmp	.-734    	; 0x5828 <getLeftSpeedFromInput+0x76>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5b06:	08 e0       	ldi	r16, 0x08	; 8
    5b08:	10 e0       	ldi	r17, 0x00	; 0
    5b0a:	d6 ce       	rjmp	.-596    	; 0x58b8 <getLeftSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5b0c:	07 e0       	ldi	r16, 0x07	; 7
    5b0e:	10 e0       	ldi	r17, 0x00	; 0
    5b10:	c7 ce       	rjmp	.-626    	; 0x58a0 <getLeftSpeedFromInput+0xee>
    5b12:	06 e0       	ldi	r16, 0x06	; 6
    5b14:	10 e0       	ldi	r17, 0x00	; 0
    5b16:	b8 ce       	rjmp	.-656    	; 0x5888 <getLeftSpeedFromInput+0xd6>
    5b18:	05 e0       	ldi	r16, 0x05	; 5
    5b1a:	10 e0       	ldi	r17, 0x00	; 0
    5b1c:	a9 ce       	rjmp	.-686    	; 0x5870 <getLeftSpeedFromInput+0xbe>
    5b1e:	04 e0       	ldi	r16, 0x04	; 4
    5b20:	10 e0       	ldi	r17, 0x00	; 0
    5b22:	9a ce       	rjmp	.-716    	; 0x5858 <getLeftSpeedFromInput+0xa6>
    5b24:	03 e0       	ldi	r16, 0x03	; 3
    5b26:	10 e0       	ldi	r17, 0x00	; 0
    5b28:	8b ce       	rjmp	.-746    	; 0x5840 <getLeftSpeedFromInput+0x8e>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    5b2a:	20 91 df 04 	lds	r18, 0x04DF
    5b2e:	30 91 e0 04 	lds	r19, 0x04E0
    5b32:	c2 9f       	mul	r28, r18
    5b34:	c0 01       	movw	r24, r0
    5b36:	c3 9f       	mul	r28, r19
    5b38:	90 0d       	add	r25, r0
    5b3a:	d2 9f       	mul	r29, r18
    5b3c:	90 0d       	add	r25, r0
    5b3e:	11 24       	eor	r1, r1
    5b40:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
    5b44:	70 93 b5 04 	sts	0x04B5, r23
    5b48:	60 93 b4 04 	sts	0x04B4, r22
    5b4c:	14 cf       	rjmp	.-472    	; 0x5976 <getLeftSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5b4e:	8f ef       	ldi	r24, 0xFF	; 255
    5b50:	0f 3f       	cpi	r16, 0xFF	; 255
    5b52:	18 07       	cpc	r17, r24
    5b54:	09 f4       	brne	.+2      	; 0x5b58 <getLeftSpeedFromInput+0x3a6>
    5b56:	5d c0       	rjmp	.+186    	; 0x5c12 <getLeftSpeedFromInput+0x460>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    5b58:	f8 01       	movw	r30, r16
    5b5a:	e2 95       	swap	r30
    5b5c:	f2 95       	swap	r31
    5b5e:	f0 7f       	andi	r31, 0xF0	; 240
    5b60:	fe 27       	eor	r31, r30
    5b62:	e0 7f       	andi	r30, 0xF0	; 240
    5b64:	fe 27       	eor	r31, r30
    5b66:	e3 53       	subi	r30, 0x33	; 51
    5b68:	fb 4f       	sbci	r31, 0xFB	; 251
    5b6a:	a0 84       	ldd	r10, Z+8	; 0x08
    5b6c:	b1 84       	ldd	r11, Z+9	; 0x09
    5b6e:	82 84       	ldd	r8, Z+10	; 0x0a
    5b70:	93 84       	ldd	r9, Z+11	; 0x0b
    5b72:	ca 19       	sub	r28, r10
    5b74:	db 09       	sbc	r29, r11
    5b76:	be 01       	movw	r22, r28
    5b78:	88 27       	eor	r24, r24
    5b7a:	77 fd       	sbrc	r23, 7
    5b7c:	80 95       	com	r24
    5b7e:	98 2f       	mov	r25, r24
    5b80:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5b84:	6b 01       	movw	r12, r22
    5b86:	7c 01       	movw	r14, r24
    5b88:	e8 01       	movw	r28, r16
    5b8a:	c2 95       	swap	r28
    5b8c:	d2 95       	swap	r29
    5b8e:	d0 7f       	andi	r29, 0xF0	; 240
    5b90:	dc 27       	eor	r29, r28
    5b92:	c0 7f       	andi	r28, 0xF0	; 240
    5b94:	dc 27       	eor	r29, r28
    5b96:	c3 52       	subi	r28, 0x23	; 35
    5b98:	db 4f       	sbci	r29, 0xFB	; 251
    5b9a:	6a 85       	ldd	r22, Y+10	; 0x0a
    5b9c:	7b 85       	ldd	r23, Y+11	; 0x0b
    5b9e:	68 19       	sub	r22, r8
    5ba0:	79 09       	sbc	r23, r9
    5ba2:	88 27       	eor	r24, r24
    5ba4:	77 fd       	sbrc	r23, 7
    5ba6:	80 95       	com	r24
    5ba8:	98 2f       	mov	r25, r24
    5baa:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5bae:	9b 01       	movw	r18, r22
    5bb0:	ac 01       	movw	r20, r24
    5bb2:	c7 01       	movw	r24, r14
    5bb4:	b6 01       	movw	r22, r12
    5bb6:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    5bba:	7b 01       	movw	r14, r22
    5bbc:	8c 01       	movw	r16, r24
    5bbe:	68 85       	ldd	r22, Y+8	; 0x08
    5bc0:	79 85       	ldd	r23, Y+9	; 0x09
    5bc2:	6a 19       	sub	r22, r10
    5bc4:	7b 09       	sbc	r23, r11
    5bc6:	88 27       	eor	r24, r24
    5bc8:	77 fd       	sbrc	r23, 7
    5bca:	80 95       	com	r24
    5bcc:	98 2f       	mov	r25, r24
    5bce:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5bd2:	9b 01       	movw	r18, r22
    5bd4:	ac 01       	movw	r20, r24
    5bd6:	c8 01       	movw	r24, r16
    5bd8:	b7 01       	movw	r22, r14
    5bda:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    5bde:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    5be2:	68 0d       	add	r22, r8
    5be4:	79 1d       	adc	r23, r9
    5be6:	52 cf       	rjmp	.-348    	; 0x5a8c <getLeftSpeedFromInput+0x2da>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    5be8:	08 e0       	ldi	r16, 0x08	; 8
    5bea:	10 e0       	ldi	r17, 0x00	; 0
    5bec:	3e cf       	rjmp	.-388    	; 0x5a6a <getLeftSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5bee:	07 e0       	ldi	r16, 0x07	; 7
    5bf0:	10 e0       	ldi	r17, 0x00	; 0
    5bf2:	2f cf       	rjmp	.-418    	; 0x5a52 <getLeftSpeedFromInput+0x2a0>
    5bf4:	06 e0       	ldi	r16, 0x06	; 6
    5bf6:	10 e0       	ldi	r17, 0x00	; 0
    5bf8:	20 cf       	rjmp	.-448    	; 0x5a3a <getLeftSpeedFromInput+0x288>
    5bfa:	05 e0       	ldi	r16, 0x05	; 5
    5bfc:	10 e0       	ldi	r17, 0x00	; 0
    5bfe:	11 cf       	rjmp	.-478    	; 0x5a22 <getLeftSpeedFromInput+0x270>
    5c00:	04 e0       	ldi	r16, 0x04	; 4
    5c02:	10 e0       	ldi	r17, 0x00	; 0
    5c04:	02 cf       	rjmp	.-508    	; 0x5a0a <getLeftSpeedFromInput+0x258>
    5c06:	03 e0       	ldi	r16, 0x03	; 3
    5c08:	10 e0       	ldi	r17, 0x00	; 0
    5c0a:	f3 ce       	rjmp	.-538    	; 0x59f2 <getLeftSpeedFromInput+0x240>
    5c0c:	02 e0       	ldi	r16, 0x02	; 2
    5c0e:	10 e0       	ldi	r17, 0x00	; 0
    5c10:	e4 ce       	rjmp	.-568    	; 0x59da <getLeftSpeedFromInput+0x228>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    5c12:	60 91 67 05 	lds	r22, 0x0567
    5c16:	70 91 68 05 	lds	r23, 0x0568
    5c1a:	88 27       	eor	r24, r24
    5c1c:	77 fd       	sbrc	r23, 7
    5c1e:	80 95       	com	r24
    5c20:	98 2f       	mov	r25, r24
    5c22:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5c26:	5b 01       	movw	r10, r22
    5c28:	6c 01       	movw	r12, r24
    5c2a:	be 01       	movw	r22, r28
    5c2c:	88 27       	eor	r24, r24
    5c2e:	77 fd       	sbrc	r23, 7
    5c30:	80 95       	com	r24
    5c32:	98 2f       	mov	r25, r24
    5c34:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5c38:	9b 01       	movw	r18, r22
    5c3a:	ac 01       	movw	r20, r24
    5c3c:	c6 01       	movw	r24, r12
    5c3e:	b5 01       	movw	r22, r10
    5c40:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    5c44:	5b 01       	movw	r10, r22
    5c46:	6c 01       	movw	r12, r24
    5c48:	b7 01       	movw	r22, r14
    5c4a:	88 27       	eor	r24, r24
    5c4c:	77 fd       	sbrc	r23, 7
    5c4e:	80 95       	com	r24
    5c50:	98 2f       	mov	r25, r24
    5c52:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5c56:	9b 01       	movw	r18, r22
    5c58:	ac 01       	movw	r20, r24
    5c5a:	c6 01       	movw	r24, r12
    5c5c:	b5 01       	movw	r22, r10
    5c5e:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    5c62:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    5c66:	12 cf       	rjmp	.-476    	; 0x5a8c <getLeftSpeedFromInput+0x2da>

00005c68 <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    5c68:	2f 92       	push	r2
    5c6a:	3f 92       	push	r3
    5c6c:	4f 92       	push	r4
    5c6e:	5f 92       	push	r5
    5c70:	6f 92       	push	r6
    5c72:	7f 92       	push	r7
    5c74:	8f 92       	push	r8
    5c76:	9f 92       	push	r9
    5c78:	af 92       	push	r10
    5c7a:	bf 92       	push	r11
    5c7c:	cf 92       	push	r12
    5c7e:	df 92       	push	r13
    5c80:	ef 92       	push	r14
    5c82:	ff 92       	push	r15
    5c84:	0f 93       	push	r16
    5c86:	1f 93       	push	r17

	if(calibrateOdomFlag==1) {
    5c88:	80 91 c7 04 	lds	r24, 0x04C7
    5c8c:	81 30       	cpi	r24, 0x01	; 1
    5c8e:	09 f4       	brne	.+2      	; 0x5c92 <handleMotorsWithSpeedController+0x2a>
    5c90:	28 c2       	rjmp	.+1104   	; 0x60e2 <handleMotorsWithSpeedController+0x47a>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    5c92:	80 91 fb 02 	lds	r24, 0x02FB
    5c96:	90 91 fc 02 	lds	r25, 0x02FC
    5c9a:	97 fd       	sbrc	r25, 7
    5c9c:	9a c2       	rjmp	.+1332   	; 0x61d2 <handleMotorsWithSpeedController+0x56a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    5c9e:	61 e0       	ldi	r22, 0x01	; 1
    5ca0:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <getInputFromSpeed>
    5ca4:	90 93 0c 03 	sts	0x030C, r25
    5ca8:	80 93 0b 03 	sts	0x030B, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    5cac:	80 91 fd 02 	lds	r24, 0x02FD
    5cb0:	90 91 fe 02 	lds	r25, 0x02FE
    5cb4:	97 fd       	sbrc	r25, 7
    5cb6:	85 c2       	rjmp	.+1290   	; 0x61c2 <handleMotorsWithSpeedController+0x55a>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    5cb8:	60 e0       	ldi	r22, 0x00	; 0
    5cba:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <getInputFromSpeed>
    5cbe:	90 93 0e 03 	sts	0x030E, r25
    5cc2:	80 93 0d 03 	sts	0x030D, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    5cc6:	20 91 68 04 	lds	r18, 0x0468
    5cca:	22 23       	and	r18, r18
    5ccc:	09 f0       	breq	.+2      	; 0x5cd0 <handleMotorsWithSpeedController+0x68>
    5cce:	fe c1       	rjmp	.+1020   	; 0x60cc <handleMotorsWithSpeedController+0x464>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    5cd0:	90 93 ea 02 	sts	0x02EA, r25
    5cd4:	80 93 e9 02 	sts	0x02E9, r24
	pwm_right_desired_to_control = pwm_right_working;
    5cd8:	80 91 0b 03 	lds	r24, 0x030B
    5cdc:	90 91 0c 03 	lds	r25, 0x030C
    5ce0:	90 93 e8 02 	sts	0x02E8, r25
    5ce4:	80 93 e7 02 	sts	0x02E7, r24

	if(compute_left_vel) {
    5ce8:	80 91 07 02 	lds	r24, 0x0207
    5cec:	88 23       	and	r24, r24
    5cee:	09 f4       	brne	.+2      	; 0x5cf2 <handleMotorsWithSpeedController+0x8a>
    5cf0:	93 c0       	rjmp	.+294    	; 0x5e18 <handleMotorsWithSpeedController+0x1b0>

		last_left_vel = left_vel_sum>>2;
    5cf2:	20 91 eb 02 	lds	r18, 0x02EB
    5cf6:	30 91 ec 02 	lds	r19, 0x02EC
    5cfa:	36 95       	lsr	r19
    5cfc:	27 95       	ror	r18
    5cfe:	36 95       	lsr	r19
    5d00:	27 95       	ror	r18
    5d02:	30 93 f0 02 	sts	0x02F0, r19
    5d06:	20 93 ef 02 	sts	0x02EF, r18
		compute_left_vel = 0;
    5d0a:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    5d0e:	10 92 ec 02 	sts	0x02EC, r1
    5d12:	10 92 eb 02 	sts	0x02EB, r1
		
		if(calibrateOdomFlag==1) {
    5d16:	80 91 c7 04 	lds	r24, 0x04C7
    5d1a:	81 30       	cpi	r24, 0x01	; 1
    5d1c:	09 f4       	brne	.+2      	; 0x5d20 <handleMotorsWithSpeedController+0xb8>
    5d1e:	08 c2       	rjmp	.+1040   	; 0x6130 <handleMotorsWithSpeedController+0x4c8>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    5d20:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    5d24:	80 91 8f 04 	lds	r24, 0x048F
    5d28:	90 91 90 04 	lds	r25, 0x0490
    5d2c:	a0 91 91 04 	lds	r26, 0x0491
    5d30:	b0 91 92 04 	lds	r27, 0x0492
    5d34:	80 93 97 04 	sts	0x0497, r24
    5d38:	90 93 98 04 	sts	0x0498, r25
    5d3c:	a0 93 99 04 	sts	0x0499, r26
    5d40:	b0 93 9a 04 	sts	0x049A, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    5d44:	60 91 b4 04 	lds	r22, 0x04B4
    5d48:	70 91 b5 04 	lds	r23, 0x04B5
    5d4c:	88 27       	eor	r24, r24
    5d4e:	77 fd       	sbrc	r23, 7
    5d50:	80 95       	com	r24
    5d52:	98 2f       	mov	r25, r24
    5d54:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    5d58:	7b 01       	movw	r14, r22
    5d5a:	8c 01       	movw	r16, r24
    5d5c:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    5d60:	20 91 b8 04 	lds	r18, 0x04B8
    5d64:	30 91 b9 04 	lds	r19, 0x04B9
    5d68:	40 91 ba 04 	lds	r20, 0x04BA
    5d6c:	50 91 bb 04 	lds	r21, 0x04BB
    5d70:	62 1b       	sub	r22, r18
    5d72:	73 0b       	sbc	r23, r19
    5d74:	84 0b       	sbc	r24, r20
    5d76:	95 0b       	sbc	r25, r21
    5d78:	0e 94 57 40 	call	0x80ae	; 0x80ae <__floatunsisf>
    5d7c:	20 e0       	ldi	r18, 0x00	; 0
    5d7e:	30 e0       	ldi	r19, 0x00	; 0
    5d80:	40 ed       	ldi	r20, 0xD0	; 208
    5d82:	52 e4       	ldi	r21, 0x42	; 66
    5d84:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    5d88:	9b 01       	movw	r18, r22
    5d8a:	ac 01       	movw	r20, r24
    5d8c:	c8 01       	movw	r24, r16
    5d8e:	b7 01       	movw	r22, r14
    5d90:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    5d94:	20 e0       	ldi	r18, 0x00	; 0
    5d96:	34 e2       	ldi	r19, 0x24	; 36
    5d98:	44 e7       	ldi	r20, 0x74	; 116
    5d9a:	59 e4       	ldi	r21, 0x49	; 73
    5d9c:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    5da0:	9b 01       	movw	r18, r22
    5da2:	ac 01       	movw	r20, r24
    5da4:	60 91 8f 04 	lds	r22, 0x048F
    5da8:	70 91 90 04 	lds	r23, 0x0490
    5dac:	80 91 91 04 	lds	r24, 0x0491
    5db0:	90 91 92 04 	lds	r25, 0x0492
    5db4:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <__addsf3>
    5db8:	60 93 8f 04 	sts	0x048F, r22
    5dbc:	70 93 90 04 	sts	0x0490, r23
    5dc0:	80 93 91 04 	sts	0x0491, r24
    5dc4:	90 93 92 04 	sts	0x0492, r25
		timeLeftOdom = getTime100MicroSec();
    5dc8:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    5dcc:	60 93 b8 04 	sts	0x04B8, r22
    5dd0:	70 93 b9 04 	sts	0x04B9, r23
    5dd4:	80 93 ba 04 	sts	0x04BA, r24
    5dd8:	90 93 bb 04 	sts	0x04BB, r25
		} else {
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
    5ddc:	80 91 16 02 	lds	r24, 0x0216
    5de0:	81 30       	cpi	r24, 0x01	; 1
    5de2:	09 f4       	brne	.+2      	; 0x5de6 <handleMotorsWithSpeedController+0x17e>
    5de4:	c7 c1       	rjmp	.+910    	; 0x6174 <handleMotorsWithSpeedController+0x50c>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    5de6:	8d e0       	ldi	r24, 0x0D	; 13
    5de8:	93 e0       	ldi	r25, 0x03	; 3
    5dea:	0e 94 32 15 	call	0x2a64	; 0x2a64 <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    5dee:	80 91 0d 03 	lds	r24, 0x030D
    5df2:	90 91 0e 03 	lds	r25, 0x030E
    5df6:	90 93 f6 02 	sts	0x02F6, r25
    5dfa:	80 93 f5 02 	sts	0x02F5, r24

		if(pwm_left > 0) {
    5dfe:	18 16       	cp	r1, r24
    5e00:	19 06       	cpc	r1, r25
    5e02:	0c f0       	brlt	.+2      	; 0x5e06 <handleMotorsWithSpeedController+0x19e>
    5e04:	f9 c1       	rjmp	.+1010   	; 0x61f8 <handleMotorsWithSpeedController+0x590>
			OCR4A = (unsigned int)pwm_left;
    5e06:	90 93 a9 00 	sts	0x00A9, r25
    5e0a:	80 93 a8 00 	sts	0x00A8, r24
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    5e0e:	80 91 9f 04 	lds	r24, 0x049F
    5e12:	8f 5f       	subi	r24, 0xFF	; 255
    5e14:	80 93 9f 04 	sts	0x049F, r24

	}

	if(compute_right_vel) {
    5e18:	80 91 08 02 	lds	r24, 0x0208
    5e1c:	88 23       	and	r24, r24
    5e1e:	09 f0       	breq	.+2      	; 0x5e22 <handleMotorsWithSpeedController+0x1ba>
    5e20:	c1 c0       	rjmp	.+386    	; 0x5fa4 <handleMotorsWithSpeedController+0x33c>
    5e22:	80 91 9f 04 	lds	r24, 0x049F

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    5e26:	82 30       	cpi	r24, 0x02	; 2
    5e28:	08 f4       	brcc	.+2      	; 0x5e2c <handleMotorsWithSpeedController+0x1c4>
    5e2a:	ab c0       	rjmp	.+342    	; 0x5f82 <handleMotorsWithSpeedController+0x31a>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    5e2c:	10 92 9f 04 	sts	0x049F, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    5e30:	60 90 93 04 	lds	r6, 0x0493
    5e34:	70 90 94 04 	lds	r7, 0x0494
    5e38:	80 90 95 04 	lds	r8, 0x0495
    5e3c:	90 90 96 04 	lds	r9, 0x0496
    5e40:	20 90 8f 04 	lds	r2, 0x048F
    5e44:	30 90 90 04 	lds	r3, 0x0490
    5e48:	40 90 91 04 	lds	r4, 0x0491
    5e4c:	50 90 92 04 	lds	r5, 0x0492
    5e50:	c4 01       	movw	r24, r8
    5e52:	b3 01       	movw	r22, r6
    5e54:	20 91 9b 04 	lds	r18, 0x049B
    5e58:	30 91 9c 04 	lds	r19, 0x049C
    5e5c:	40 91 9d 04 	lds	r20, 0x049D
    5e60:	50 91 9e 04 	lds	r21, 0x049E
    5e64:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <__subsf3>
    5e68:	7b 01       	movw	r14, r22
    5e6a:	8c 01       	movw	r16, r24
    5e6c:	c2 01       	movw	r24, r4
    5e6e:	b1 01       	movw	r22, r2
    5e70:	20 91 97 04 	lds	r18, 0x0497
    5e74:	30 91 98 04 	lds	r19, 0x0498
    5e78:	40 91 99 04 	lds	r20, 0x0499
    5e7c:	50 91 9a 04 	lds	r21, 0x049A
    5e80:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <__subsf3>
    5e84:	9b 01       	movw	r18, r22
    5e86:	ac 01       	movw	r20, r24
    5e88:	c8 01       	movw	r24, r16
    5e8a:	b7 01       	movw	r22, r14
    5e8c:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <__addsf3>
    5e90:	20 e0       	ldi	r18, 0x00	; 0
    5e92:	30 e0       	ldi	r19, 0x00	; 0
    5e94:	40 e0       	ldi	r20, 0x00	; 0
    5e96:	5f e3       	ldi	r21, 0x3F	; 63
    5e98:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    5e9c:	d6 2e       	mov	r13, r22
    5e9e:	c7 2e       	mov	r12, r23
    5ea0:	b8 2e       	mov	r11, r24
    5ea2:	a9 2e       	mov	r10, r25
    5ea4:	a6 01       	movw	r20, r12
    5ea6:	95 01       	movw	r18, r10
    5ea8:	85 2f       	mov	r24, r21
    5eaa:	94 2f       	mov	r25, r20
    5eac:	a3 2f       	mov	r26, r19
    5eae:	b2 2f       	mov	r27, r18
    5eb0:	80 93 7b 04 	sts	0x047B, r24
    5eb4:	90 93 7c 04 	sts	0x047C, r25
    5eb8:	a0 93 7d 04 	sts	0x047D, r26
    5ebc:	b0 93 7e 04 	sts	0x047E, r27

		if(robotPosition == HORIZONTAL_POS) {
    5ec0:	80 91 16 02 	lds	r24, 0x0216
    5ec4:	81 30       	cpi	r24, 0x01	; 1
    5ec6:	09 f4       	brne	.+2      	; 0x5eca <handleMotorsWithSpeedController+0x262>
    5ec8:	1d c1       	rjmp	.+570    	; 0x6104 <handleMotorsWithSpeedController+0x49c>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    5eca:	f0 90 a0 04 	lds	r15, 0x04A0
    5ece:	00 91 a1 04 	lds	r16, 0x04A1
    5ed2:	10 91 a2 04 	lds	r17, 0x04A2
    5ed6:	e0 90 a3 04 	lds	r14, 0x04A3
    5eda:	8f 2d       	mov	r24, r15
    5edc:	90 2f       	mov	r25, r16
    5ede:	a1 2f       	mov	r26, r17
    5ee0:	be 2d       	mov	r27, r14
    5ee2:	80 93 6b 04 	sts	0x046B, r24
    5ee6:	90 93 6c 04 	sts	0x046C, r25
    5eea:	a0 93 6d 04 	sts	0x046D, r26
    5eee:	b0 93 6e 04 	sts	0x046E, r27
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    5ef2:	6f 2d       	mov	r22, r15
    5ef4:	70 2f       	mov	r23, r16
    5ef6:	81 2f       	mov	r24, r17
    5ef8:	9e 2d       	mov	r25, r14
    5efa:	0e 94 bb 3f 	call	0x7f76	; 0x7f76 <cos>
    5efe:	9b 01       	movw	r18, r22
    5f00:	ac 01       	movw	r20, r24
    5f02:	d6 01       	movw	r26, r12
    5f04:	f5 01       	movw	r30, r10
    5f06:	6b 2f       	mov	r22, r27
    5f08:	7c 2d       	mov	r23, r12
    5f0a:	8f 2f       	mov	r24, r31
    5f0c:	9a 2d       	mov	r25, r10
    5f0e:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    5f12:	9b 01       	movw	r18, r22
    5f14:	ac 01       	movw	r20, r24
    5f16:	60 91 73 04 	lds	r22, 0x0473
    5f1a:	70 91 74 04 	lds	r23, 0x0474
    5f1e:	80 91 75 04 	lds	r24, 0x0475
    5f22:	90 91 76 04 	lds	r25, 0x0476
    5f26:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <__addsf3>
    5f2a:	60 93 73 04 	sts	0x0473, r22
    5f2e:	70 93 74 04 	sts	0x0474, r23
    5f32:	80 93 75 04 	sts	0x0475, r24
    5f36:	90 93 76 04 	sts	0x0476, r25
		yPos = yPos + sin(theta)*deltaDist;
    5f3a:	6f 2d       	mov	r22, r15
    5f3c:	70 2f       	mov	r23, r16
    5f3e:	81 2f       	mov	r24, r17
    5f40:	9e 2d       	mov	r25, r14
    5f42:	0e 94 d1 41 	call	0x83a2	; 0x83a2 <sin>
    5f46:	9b 01       	movw	r18, r22
    5f48:	ac 01       	movw	r20, r24
    5f4a:	d6 01       	movw	r26, r12
    5f4c:	f5 01       	movw	r30, r10
    5f4e:	6b 2f       	mov	r22, r27
    5f50:	7c 2d       	mov	r23, r12
    5f52:	8f 2f       	mov	r24, r31
    5f54:	9a 2d       	mov	r25, r10
    5f56:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    5f5a:	9b 01       	movw	r18, r22
    5f5c:	ac 01       	movw	r20, r24
    5f5e:	60 91 77 04 	lds	r22, 0x0477
    5f62:	70 91 78 04 	lds	r23, 0x0478
    5f66:	80 91 79 04 	lds	r24, 0x0479
    5f6a:	90 91 7a 04 	lds	r25, 0x047A
    5f6e:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <__addsf3>
    5f72:	60 93 77 04 	sts	0x0477, r22
    5f76:	70 93 78 04 	sts	0x0478, r23
    5f7a:	80 93 79 04 	sts	0x0479, r24
    5f7e:	90 93 7a 04 	sts	0x047A, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    5f82:	1f 91       	pop	r17
    5f84:	0f 91       	pop	r16
    5f86:	ff 90       	pop	r15
    5f88:	ef 90       	pop	r14
    5f8a:	df 90       	pop	r13
    5f8c:	cf 90       	pop	r12
    5f8e:	bf 90       	pop	r11
    5f90:	af 90       	pop	r10
    5f92:	9f 90       	pop	r9
    5f94:	8f 90       	pop	r8
    5f96:	7f 90       	pop	r7
    5f98:	6f 90       	pop	r6
    5f9a:	5f 90       	pop	r5
    5f9c:	4f 90       	pop	r4
    5f9e:	3f 90       	pop	r3
    5fa0:	2f 90       	pop	r2
    5fa2:	08 95       	ret

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    5fa4:	20 91 ed 02 	lds	r18, 0x02ED
    5fa8:	30 91 ee 02 	lds	r19, 0x02EE
    5fac:	36 95       	lsr	r19
    5fae:	27 95       	ror	r18
    5fb0:	36 95       	lsr	r19
    5fb2:	27 95       	ror	r18
    5fb4:	30 93 f2 02 	sts	0x02F2, r19
    5fb8:	20 93 f1 02 	sts	0x02F1, r18
		compute_right_vel = 0;
    5fbc:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    5fc0:	10 92 ee 02 	sts	0x02EE, r1
    5fc4:	10 92 ed 02 	sts	0x02ED, r1

		if(calibrateOdomFlag==1) {
    5fc8:	80 91 c7 04 	lds	r24, 0x04C7
    5fcc:	81 30       	cpi	r24, 0x01	; 1
    5fce:	09 f4       	brne	.+2      	; 0x5fd2 <handleMotorsWithSpeedController+0x36a>
    5fd0:	d6 c0       	rjmp	.+428    	; 0x617e <handleMotorsWithSpeedController+0x516>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    5fd2:	0e 94 7e 29 	call	0x52fc	; 0x52fc <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    5fd6:	80 91 93 04 	lds	r24, 0x0493
    5fda:	90 91 94 04 	lds	r25, 0x0494
    5fde:	a0 91 95 04 	lds	r26, 0x0495
    5fe2:	b0 91 96 04 	lds	r27, 0x0496
    5fe6:	80 93 9b 04 	sts	0x049B, r24
    5fea:	90 93 9c 04 	sts	0x049C, r25
    5fee:	a0 93 9d 04 	sts	0x049D, r26
    5ff2:	b0 93 9e 04 	sts	0x049E, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    5ff6:	60 91 b6 04 	lds	r22, 0x04B6
    5ffa:	70 91 b7 04 	lds	r23, 0x04B7
    5ffe:	88 27       	eor	r24, r24
    6000:	77 fd       	sbrc	r23, 7
    6002:	80 95       	com	r24
    6004:	98 2f       	mov	r25, r24
    6006:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    600a:	7b 01       	movw	r14, r22
    600c:	8c 01       	movw	r16, r24
    600e:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    6012:	20 91 bc 04 	lds	r18, 0x04BC
    6016:	30 91 bd 04 	lds	r19, 0x04BD
    601a:	40 91 be 04 	lds	r20, 0x04BE
    601e:	50 91 bf 04 	lds	r21, 0x04BF
    6022:	62 1b       	sub	r22, r18
    6024:	73 0b       	sbc	r23, r19
    6026:	84 0b       	sbc	r24, r20
    6028:	95 0b       	sbc	r25, r21
    602a:	0e 94 57 40 	call	0x80ae	; 0x80ae <__floatunsisf>
    602e:	20 e0       	ldi	r18, 0x00	; 0
    6030:	30 e0       	ldi	r19, 0x00	; 0
    6032:	40 ed       	ldi	r20, 0xD0	; 208
    6034:	52 e4       	ldi	r21, 0x42	; 66
    6036:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    603a:	9b 01       	movw	r18, r22
    603c:	ac 01       	movw	r20, r24
    603e:	c8 01       	movw	r24, r16
    6040:	b7 01       	movw	r22, r14
    6042:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    6046:	20 e0       	ldi	r18, 0x00	; 0
    6048:	34 e2       	ldi	r19, 0x24	; 36
    604a:	44 e7       	ldi	r20, 0x74	; 116
    604c:	59 e4       	ldi	r21, 0x49	; 73
    604e:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    6052:	9b 01       	movw	r18, r22
    6054:	ac 01       	movw	r20, r24
    6056:	60 91 93 04 	lds	r22, 0x0493
    605a:	70 91 94 04 	lds	r23, 0x0494
    605e:	80 91 95 04 	lds	r24, 0x0495
    6062:	90 91 96 04 	lds	r25, 0x0496
    6066:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <__addsf3>
    606a:	60 93 93 04 	sts	0x0493, r22
    606e:	70 93 94 04 	sts	0x0494, r23
    6072:	80 93 95 04 	sts	0x0495, r24
    6076:	90 93 96 04 	sts	0x0496, r25
		timeRightOdom = getTime100MicroSec();
    607a:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <getTime100MicroSec>
    607e:	60 93 bc 04 	sts	0x04BC, r22
    6082:	70 93 bd 04 	sts	0x04BD, r23
    6086:	80 93 be 04 	sts	0x04BE, r24
    608a:	90 93 bf 04 	sts	0x04BF, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
    608e:	80 91 16 02 	lds	r24, 0x0216
    6092:	81 30       	cpi	r24, 0x01	; 1
    6094:	09 f4       	brne	.+2      	; 0x6098 <handleMotorsWithSpeedController+0x430>
    6096:	47 c0       	rjmp	.+142    	; 0x6126 <handleMotorsWithSpeedController+0x4be>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    6098:	8b e0       	ldi	r24, 0x0B	; 11
    609a:	93 e0       	ldi	r25, 0x03	; 3
    609c:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    60a0:	80 91 0b 03 	lds	r24, 0x030B
    60a4:	90 91 0c 03 	lds	r25, 0x030C
    60a8:	90 93 f4 02 	sts	0x02F4, r25
    60ac:	80 93 f3 02 	sts	0x02F3, r24

		if(pwm_right > 0) {
    60b0:	18 16       	cp	r1, r24
    60b2:	19 06       	cpc	r1, r25
    60b4:	0c f0       	brlt	.+2      	; 0x60b8 <handleMotorsWithSpeedController+0x450>
    60b6:	95 c0       	rjmp	.+298    	; 0x61e2 <handleMotorsWithSpeedController+0x57a>
			OCR3A = (unsigned int)pwm_right;
    60b8:	90 93 99 00 	sts	0x0099, r25
    60bc:	80 93 98 00 	sts	0x0098, r24
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    60c0:	80 91 9f 04 	lds	r24, 0x049F
    60c4:	8f 5f       	subi	r24, 0xFF	; 255
    60c6:	80 93 9f 04 	sts	0x049F, r24
    60ca:	ad ce       	rjmp	.-678    	; 0x5e26 <handleMotorsWithSpeedController+0x1be>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    60cc:	8d e0       	ldi	r24, 0x0D	; 13
    60ce:	93 e0       	ldi	r25, 0x03	; 3
    60d0:	6b e0       	ldi	r22, 0x0B	; 11
    60d2:	73 e0       	ldi	r23, 0x03	; 3
    60d4:	0e 94 69 34 	call	0x68d2	; 0x68d2 <obstacleAvoidance>
    60d8:	80 91 0d 03 	lds	r24, 0x030D
    60dc:	90 91 0e 03 	lds	r25, 0x030E
    60e0:	f7 cd       	rjmp	.-1042   	; 0x5cd0 <handleMotorsWithSpeedController+0x68>
}

void handleMotorsWithSpeedController() {

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    60e2:	80 91 fb 02 	lds	r24, 0x02FB
    60e6:	90 91 fc 02 	lds	r25, 0x02FC
    60ea:	90 93 0c 03 	sts	0x030C, r25
    60ee:	80 93 0b 03 	sts	0x030B, r24
		pwm_left_working = pwm_intermediate_left_desired;
    60f2:	80 91 fd 02 	lds	r24, 0x02FD
    60f6:	90 91 fe 02 	lds	r25, 0x02FE
    60fa:	90 93 0e 03 	sts	0x030E, r25
    60fe:	80 93 0d 03 	sts	0x030D, r24
    6102:	e1 cd       	rjmp	.-1086   	; 0x5cc6 <handleMotorsWithSpeedController+0x5e>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    6104:	c4 01       	movw	r24, r8
    6106:	b3 01       	movw	r22, r6
    6108:	a2 01       	movw	r20, r4
    610a:	91 01       	movw	r18, r2
    610c:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <__subsf3>
    6110:	20 e0       	ldi	r18, 0x00	; 0
    6112:	30 e0       	ldi	r19, 0x00	; 0
    6114:	4e e1       	ldi	r20, 0x1E	; 30
    6116:	52 e4       	ldi	r21, 0x42	; 66
    6118:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    611c:	f6 2e       	mov	r15, r22
    611e:	07 2f       	mov	r16, r23
    6120:	18 2f       	mov	r17, r24
    6122:	e9 2e       	mov	r14, r25
    6124:	da ce       	rjmp	.-588    	; 0x5eda <handleMotorsWithSpeedController+0x272>
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    6126:	8b e0       	ldi	r24, 0x0B	; 11
    6128:	93 e0       	ldi	r25, 0x03	; 3
    612a:	0e 94 6e 18 	call	0x30dc	; 0x30dc <start_horizontal_speed_control_right>
    612e:	b8 cf       	rjmp	.-144    	; 0x60a0 <handleMotorsWithSpeedController+0x438>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    6130:	44 27       	eor	r20, r20
    6132:	37 fd       	sbrc	r19, 7
    6134:	40 95       	com	r20
    6136:	54 2f       	mov	r21, r20
    6138:	80 91 a4 04 	lds	r24, 0x04A4
    613c:	90 91 a5 04 	lds	r25, 0x04A5
    6140:	a0 91 a6 04 	lds	r26, 0x04A6
    6144:	b0 91 a7 04 	lds	r27, 0x04A7
    6148:	82 0f       	add	r24, r18
    614a:	93 1f       	adc	r25, r19
    614c:	a4 1f       	adc	r26, r20
    614e:	b5 1f       	adc	r27, r21
    6150:	80 93 a4 04 	sts	0x04A4, r24
    6154:	90 93 a5 04 	sts	0x04A5, r25
    6158:	a0 93 a6 04 	sts	0x04A6, r26
    615c:	b0 93 a7 04 	sts	0x04A7, r27
			leftSumCount++;
    6160:	80 91 ac 04 	lds	r24, 0x04AC
    6164:	90 91 ad 04 	lds	r25, 0x04AD
    6168:	01 96       	adiw	r24, 0x01	; 1
    616a:	90 93 ad 04 	sts	0x04AD, r25
    616e:	80 93 ac 04 	sts	0x04AC, r24
    6172:	d6 cd       	rjmp	.-1108   	; 0x5d20 <handleMotorsWithSpeedController+0xb8>
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    6174:	8d e0       	ldi	r24, 0x0D	; 13
    6176:	93 e0       	ldi	r25, 0x03	; 3
    6178:	0e 94 b5 19 	call	0x336a	; 0x336a <start_horizontal_speed_control_left>
    617c:	38 ce       	rjmp	.-912    	; 0x5dee <handleMotorsWithSpeedController+0x186>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    617e:	44 27       	eor	r20, r20
    6180:	37 fd       	sbrc	r19, 7
    6182:	40 95       	com	r20
    6184:	54 2f       	mov	r21, r20
    6186:	80 91 a8 04 	lds	r24, 0x04A8
    618a:	90 91 a9 04 	lds	r25, 0x04A9
    618e:	a0 91 aa 04 	lds	r26, 0x04AA
    6192:	b0 91 ab 04 	lds	r27, 0x04AB
    6196:	82 0f       	add	r24, r18
    6198:	93 1f       	adc	r25, r19
    619a:	a4 1f       	adc	r26, r20
    619c:	b5 1f       	adc	r27, r21
    619e:	80 93 a8 04 	sts	0x04A8, r24
    61a2:	90 93 a9 04 	sts	0x04A9, r25
    61a6:	a0 93 aa 04 	sts	0x04AA, r26
    61aa:	b0 93 ab 04 	sts	0x04AB, r27
			rightSumCount++;
    61ae:	80 91 ae 04 	lds	r24, 0x04AE
    61b2:	90 91 af 04 	lds	r25, 0x04AF
    61b6:	01 96       	adiw	r24, 0x01	; 1
    61b8:	90 93 af 04 	sts	0x04AF, r25
    61bc:	80 93 ae 04 	sts	0x04AE, r24
    61c0:	08 cf       	rjmp	.-496    	; 0x5fd2 <handleMotorsWithSpeedController+0x36a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    61c2:	62 e0       	ldi	r22, 0x02	; 2
    61c4:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <getInputFromSpeed>
    61c8:	90 93 0e 03 	sts	0x030E, r25
    61cc:	80 93 0d 03 	sts	0x030D, r24
    61d0:	7a cd       	rjmp	.-1292   	; 0x5cc6 <handleMotorsWithSpeedController+0x5e>
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    61d2:	63 e0       	ldi	r22, 0x03	; 3
    61d4:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <getInputFromSpeed>
    61d8:	90 93 0c 03 	sts	0x030C, r25
    61dc:	80 93 0b 03 	sts	0x030B, r24
    61e0:	65 cd       	rjmp	.-1334   	; 0x5cac <handleMotorsWithSpeedController+0x44>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    61e2:	00 97       	sbiw	r24, 0x00	; 0
    61e4:	a1 f4       	brne	.+40     	; 0x620e <handleMotorsWithSpeedController+0x5a6>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    61e6:	10 92 99 00 	sts	0x0099, r1
    61ea:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    61ee:	10 92 9b 00 	sts	0x009B, r1
    61f2:	10 92 9a 00 	sts	0x009A, r1
    61f6:	64 cf       	rjmp	.-312    	; 0x60c0 <handleMotorsWithSpeedController+0x458>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    61f8:	00 97       	sbiw	r24, 0x00	; 0
    61fa:	89 f4       	brne	.+34     	; 0x621e <handleMotorsWithSpeedController+0x5b6>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    61fc:	10 92 a9 00 	sts	0x00A9, r1
    6200:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    6204:	10 92 ab 00 	sts	0x00AB, r1
    6208:	10 92 aa 00 	sts	0x00AA, r1
    620c:	00 ce       	rjmp	.-1024   	; 0x5e0e <handleMotorsWithSpeedController+0x1a6>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    620e:	90 95       	com	r25
    6210:	81 95       	neg	r24
    6212:	9f 4f       	sbci	r25, 0xFF	; 255
    6214:	90 93 9b 00 	sts	0x009B, r25
    6218:	80 93 9a 00 	sts	0x009A, r24
    621c:	51 cf       	rjmp	.-350    	; 0x60c0 <handleMotorsWithSpeedController+0x458>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    621e:	90 95       	com	r25
    6220:	81 95       	neg	r24
    6222:	9f 4f       	sbci	r25, 0xFF	; 255
    6224:	90 93 ab 00 	sts	0x00AB, r25
    6228:	80 93 aa 00 	sts	0x00AA, r24
    622c:	f0 cd       	rjmp	.-1056   	; 0x5e0e <handleMotorsWithSpeedController+0x1a6>

0000622e <writeDefaultCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void writeDefaultCalibration() {
    622e:	2f 92       	push	r2
    6230:	3f 92       	push	r3
    6232:	4f 92       	push	r4
    6234:	5f 92       	push	r5
    6236:	6f 92       	push	r6
    6238:	7f 92       	push	r7
    623a:	8f 92       	push	r8
    623c:	9f 92       	push	r9
    623e:	af 92       	push	r10
    6240:	bf 92       	push	r11
    6242:	cf 92       	push	r12
    6244:	df 92       	push	r13
    6246:	ef 92       	push	r14
    6248:	ff 92       	push	r15
    624a:	0f 93       	push	r16
    624c:	1f 93       	push	r17
    624e:	cf 93       	push	r28
    6250:	df 93       	push	r29
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    6252:	a4 e1       	ldi	r26, 0x14	; 20
    6254:	b0 e0       	ldi	r27, 0x00	; 0
    6256:	b0 93 de 04 	sts	0x04DE, r27
    625a:	a0 93 dd 04 	sts	0x04DD, r26
    calibration[1][0] = 40;
    625e:	88 e2       	ldi	r24, 0x28	; 40
    6260:	90 e0       	ldi	r25, 0x00	; 0
    6262:	90 93 ee 04 	sts	0x04EE, r25
    6266:	80 93 ed 04 	sts	0x04ED, r24
    calibration[2][0] = 59;
    626a:	6b e3       	ldi	r22, 0x3B	; 59
    626c:	70 e0       	ldi	r23, 0x00	; 0
    626e:	70 93 fe 04 	sts	0x04FE, r23
    6272:	60 93 fd 04 	sts	0x04FD, r22
    calibration[3][0] = 79;
    6276:	0f e4       	ldi	r16, 0x4F	; 79
    6278:	10 e0       	ldi	r17, 0x00	; 0
    627a:	10 93 0e 05 	sts	0x050E, r17
    627e:	00 93 0d 05 	sts	0x050D, r16
    calibration[4][0] = 100;
    6282:	84 e6       	ldi	r24, 0x64	; 100
    6284:	90 e0       	ldi	r25, 0x00	; 0
    6286:	90 93 1e 05 	sts	0x051E, r25
    628a:	80 93 1d 05 	sts	0x051D, r24
    calibration[5][0] = 120;
    628e:	f8 e7       	ldi	r31, 0x78	; 120
    6290:	af 2e       	mov	r10, r31
    6292:	b1 2c       	mov	r11, r1
    6294:	b0 92 2e 05 	sts	0x052E, r11
    6298:	a0 92 2d 05 	sts	0x052D, r10
    calibration[6][0] = 139;
    629c:	8b e8       	ldi	r24, 0x8B	; 139
    629e:	90 e0       	ldi	r25, 0x00	; 0
    62a0:	90 93 3e 05 	sts	0x053E, r25
    62a4:	80 93 3d 05 	sts	0x053D, r24
    calibration[7][0] = 159;
    62a8:	2f e9       	ldi	r18, 0x9F	; 159
    62aa:	30 e0       	ldi	r19, 0x00	; 0
    62ac:	30 93 4e 05 	sts	0x054E, r19
    62b0:	20 93 4d 05 	sts	0x054D, r18
	calibration[8][0] = 180;
    62b4:	44 eb       	ldi	r20, 0xB4	; 180
    62b6:	50 e0       	ldi	r21, 0x00	; 0
    62b8:	50 93 5e 05 	sts	0x055E, r21
    62bc:	40 93 5d 05 	sts	0x055D, r20
    calibration[0][1] = 19;    	// real speed measured in mm/s
    62c0:	63 e1       	ldi	r22, 0x13	; 19
    62c2:	70 e0       	ldi	r23, 0x00	; 0
    62c4:	70 93 e0 04 	sts	0x04E0, r23
    62c8:	60 93 df 04 	sts	0x04DF, r22
    calibration[1][1] = 47;
    62cc:	2f e2       	ldi	r18, 0x2F	; 47
    62ce:	30 e0       	ldi	r19, 0x00	; 0
    62d0:	30 93 f0 04 	sts	0x04F0, r19
    62d4:	20 93 ef 04 	sts	0x04EF, r18
    calibration[2][1] = 72;
    62d8:	28 e4       	ldi	r18, 0x48	; 72
    62da:	30 e0       	ldi	r19, 0x00	; 0
    62dc:	30 93 00 05 	sts	0x0500, r19
    62e0:	20 93 ff 04 	sts	0x04FF, r18
    calibration[3][1] = 91;
    62e4:	2b e5       	ldi	r18, 0x5B	; 91
    62e6:	30 e0       	ldi	r19, 0x00	; 0
    62e8:	30 93 10 05 	sts	0x0510, r19
    62ec:	20 93 0f 05 	sts	0x050F, r18
    calibration[4][1] = 109;
    62f0:	2d e6       	ldi	r18, 0x6D	; 109
    62f2:	30 e0       	ldi	r19, 0x00	; 0
    62f4:	30 93 20 05 	sts	0x0520, r19
    62f8:	20 93 1f 05 	sts	0x051F, r18
    calibration[5][1] = 125;
    62fc:	ed e7       	ldi	r30, 0x7D	; 125
    62fe:	6e 2e       	mov	r6, r30
    6300:	71 2c       	mov	r7, r1
    6302:	70 92 30 05 	sts	0x0530, r7
    6306:	60 92 2f 05 	sts	0x052F, r6
    calibration[6][1] = 143;
    630a:	2f e8       	ldi	r18, 0x8F	; 143
    630c:	30 e0       	ldi	r19, 0x00	; 0
    630e:	30 93 40 05 	sts	0x0540, r19
    6312:	20 93 3f 05 	sts	0x053F, r18
    calibration[7][1] = 160;
    6316:	20 ea       	ldi	r18, 0xA0	; 160
    6318:	30 e0       	ldi	r19, 0x00	; 0
    631a:	30 93 50 05 	sts	0x0550, r19
    631e:	20 93 4f 05 	sts	0x054F, r18
	calibration[8][1] = 174;
    6322:	ee ea       	ldi	r30, 0xAE	; 174
    6324:	f0 e0       	ldi	r31, 0x00	; 0
    6326:	f0 93 60 05 	sts	0x0560, r31
    632a:	e0 93 5f 05 	sts	0x055F, r30
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    632e:	70 93 e2 04 	sts	0x04E2, r23
    6332:	60 93 e1 04 	sts	0x04E1, r22
    calibration[1][2] = 39;
    6336:	e7 e2       	ldi	r30, 0x27	; 39
    6338:	f0 e0       	ldi	r31, 0x00	; 0
    633a:	f0 93 f2 04 	sts	0x04F2, r31
    633e:	e0 93 f1 04 	sts	0x04F1, r30
    calibration[2][2] = 60;
    6342:	cc e3       	ldi	r28, 0x3C	; 60
    6344:	d0 e0       	ldi	r29, 0x00	; 0
    6346:	d0 93 02 05 	sts	0x0502, r29
    634a:	c0 93 01 05 	sts	0x0501, r28
    calibration[3][2] = 80;
    634e:	60 e5       	ldi	r22, 0x50	; 80
    6350:	70 e0       	ldi	r23, 0x00	; 0
    6352:	70 93 12 05 	sts	0x0512, r23
    6356:	60 93 11 05 	sts	0x0511, r22
    calibration[4][2] = 99;
    635a:	63 e6       	ldi	r22, 0x63	; 99
    635c:	e6 2e       	mov	r14, r22
    635e:	f1 2c       	mov	r15, r1
    6360:	f0 92 22 05 	sts	0x0522, r15
    6364:	e0 92 21 05 	sts	0x0521, r14
    calibration[5][2] = 119;
    6368:	67 e7       	ldi	r22, 0x77	; 119
    636a:	70 e0       	ldi	r23, 0x00	; 0
    636c:	70 93 32 05 	sts	0x0532, r23
    6370:	60 93 31 05 	sts	0x0531, r22
    calibration[6][2] = 140;
    6374:	0f 2e       	mov	r0, r31
    6376:	fc e8       	ldi	r31, 0x8C	; 140
    6378:	cf 2e       	mov	r12, r31
    637a:	dd 24       	eor	r13, r13
    637c:	f0 2d       	mov	r31, r0
    637e:	d0 92 42 05 	sts	0x0542, r13
    6382:	c0 92 41 05 	sts	0x0541, r12
    calibration[7][2] = 160;
    6386:	30 93 52 05 	sts	0x0552, r19
    638a:	20 93 51 05 	sts	0x0551, r18
	calibration[8][2] = 180;
    638e:	50 93 62 05 	sts	0x0562, r21
    6392:	40 93 61 05 	sts	0x0561, r20
    calibration[0][3] = 23;    	// real speed measured in mm/s
    6396:	0f 2e       	mov	r0, r31
    6398:	f7 e1       	ldi	r31, 0x17	; 23
    639a:	8f 2e       	mov	r8, r31
    639c:	99 24       	eor	r9, r9
    639e:	f0 2d       	mov	r31, r0
    63a0:	90 92 e4 04 	sts	0x04E4, r9
    63a4:	80 92 e3 04 	sts	0x04E3, r8
    calibration[1][3] = 46;
    63a8:	0f 2e       	mov	r0, r31
    63aa:	fe e2       	ldi	r31, 0x2E	; 46
    63ac:	4f 2e       	mov	r4, r31
    63ae:	55 24       	eor	r5, r5
    63b0:	f0 2d       	mov	r31, r0
    63b2:	50 92 f4 04 	sts	0x04F4, r5
    63b6:	40 92 f3 04 	sts	0x04F3, r4
    calibration[2][3] = 64;
    63ba:	88 24       	eor	r8, r8
    63bc:	99 24       	eor	r9, r9
    63be:	68 94       	set
    63c0:	86 f8       	bld	r8, 6
    63c2:	90 92 04 05 	sts	0x0504, r9
    63c6:	80 92 03 05 	sts	0x0503, r8
    calibration[3][3] = 81;
    63ca:	0f 2e       	mov	r0, r31
    63cc:	f1 e5       	ldi	r31, 0x51	; 81
    63ce:	2f 2e       	mov	r2, r31
    63d0:	33 24       	eor	r3, r3
    63d2:	f0 2d       	mov	r31, r0
    63d4:	30 92 14 05 	sts	0x0514, r3
    63d8:	20 92 13 05 	sts	0x0513, r2
    calibration[4][3] = 97;
    63dc:	0f 2e       	mov	r0, r31
    63de:	f1 e6       	ldi	r31, 0x61	; 97
    63e0:	8f 2e       	mov	r8, r31
    63e2:	99 24       	eor	r9, r9
    63e4:	f0 2d       	mov	r31, r0
    63e6:	90 92 24 05 	sts	0x0524, r9
    63ea:	80 92 23 05 	sts	0x0523, r8
    calibration[5][3] = 112;
    63ee:	0f 2e       	mov	r0, r31
    63f0:	f0 e7       	ldi	r31, 0x70	; 112
    63f2:	8f 2e       	mov	r8, r31
    63f4:	99 24       	eor	r9, r9
    63f6:	f0 2d       	mov	r31, r0
    63f8:	90 92 34 05 	sts	0x0534, r9
    63fc:	80 92 33 05 	sts	0x0533, r8
    calibration[6][3] = 125;
    6400:	70 92 44 05 	sts	0x0544, r7
    6404:	60 92 43 05 	sts	0x0543, r6
    calibration[7][3] = 139;
    6408:	90 93 54 05 	sts	0x0554, r25
    640c:	80 93 53 05 	sts	0x0553, r24
	calibration[8][3] = 152;
    6410:	0f 2e       	mov	r0, r31
    6412:	f8 e9       	ldi	r31, 0x98	; 152
    6414:	8f 2e       	mov	r8, r31
    6416:	99 24       	eor	r9, r9
    6418:	f0 2d       	mov	r31, r0
    641a:	90 92 64 05 	sts	0x0564, r9
    641e:	80 92 63 05 	sts	0x0563, r8
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    6422:	b0 93 e6 04 	sts	0x04E6, r27
    6426:	a0 93 e5 04 	sts	0x04E5, r26
    calibration[1][4] = 39;
    642a:	f0 93 f6 04 	sts	0x04F6, r31
    642e:	e0 93 f5 04 	sts	0x04F5, r30
    calibration[2][4] = 60;
    6432:	d0 93 06 05 	sts	0x0506, r29
    6436:	c0 93 05 05 	sts	0x0505, r28
    calibration[3][4] = 79;
    643a:	10 93 16 05 	sts	0x0516, r17
    643e:	00 93 15 05 	sts	0x0515, r16
    calibration[4][4] = 99;
    6442:	f0 92 26 05 	sts	0x0526, r15
    6446:	e0 92 25 05 	sts	0x0525, r14
    calibration[5][4] = 120;
    644a:	b0 92 36 05 	sts	0x0536, r11
    644e:	a0 92 35 05 	sts	0x0535, r10
    calibration[6][4] = 140;
    6452:	d0 92 46 05 	sts	0x0546, r13
    6456:	c0 92 45 05 	sts	0x0545, r12
    calibration[7][4] = 160;
    645a:	30 93 56 05 	sts	0x0556, r19
    645e:	20 93 55 05 	sts	0x0555, r18
	calibration[8][4] = 179;
    6462:	c3 eb       	ldi	r28, 0xB3	; 179
    6464:	d0 e0       	ldi	r29, 0x00	; 0
    6466:	d0 93 66 05 	sts	0x0566, r29
    646a:	c0 93 65 05 	sts	0x0565, r28
    calibration[0][5] = 18;    	// real speed measured in mm/s
    646e:	c2 e1       	ldi	r28, 0x12	; 18
    6470:	d0 e0       	ldi	r29, 0x00	; 0
    6472:	d0 93 e8 04 	sts	0x04E8, r29
    6476:	c0 93 e7 04 	sts	0x04E7, r28
    calibration[1][5] = 45;
    647a:	cd e2       	ldi	r28, 0x2D	; 45
    647c:	d0 e0       	ldi	r29, 0x00	; 0
    647e:	d0 93 f8 04 	sts	0x04F8, r29
    6482:	c0 93 f7 04 	sts	0x04F7, r28
    calibration[2][5] = 68;
    6486:	c4 e4       	ldi	r28, 0x44	; 68
    6488:	d0 e0       	ldi	r29, 0x00	; 0
    648a:	d0 93 08 05 	sts	0x0508, r29
    648e:	c0 93 07 05 	sts	0x0507, r28
    calibration[3][5] = 87;
    6492:	c7 e5       	ldi	r28, 0x57	; 87
    6494:	d0 e0       	ldi	r29, 0x00	; 0
    6496:	d0 93 18 05 	sts	0x0518, r29
    649a:	c0 93 17 05 	sts	0x0517, r28
    calibration[4][5] = 105;
    649e:	c9 e6       	ldi	r28, 0x69	; 105
    64a0:	d0 e0       	ldi	r29, 0x00	; 0
    64a2:	d0 93 28 05 	sts	0x0528, r29
    64a6:	c0 93 27 05 	sts	0x0527, r28
    calibration[5][5] = 119;
    64aa:	70 93 38 05 	sts	0x0538, r23
    64ae:	60 93 37 05 	sts	0x0537, r22
    calibration[6][5] = 137;
    64b2:	c9 e8       	ldi	r28, 0x89	; 137
    64b4:	d0 e0       	ldi	r29, 0x00	; 0
    64b6:	d0 93 48 05 	sts	0x0548, r29
    64ba:	c0 93 47 05 	sts	0x0547, r28
    calibration[7][5] = 151;
    64be:	c7 e9       	ldi	r28, 0x97	; 151
    64c0:	d0 e0       	ldi	r29, 0x00	; 0
    64c2:	d0 93 58 05 	sts	0x0558, r29
    64c6:	c0 93 57 05 	sts	0x0557, r28
	calibration[8][5] = 168;
    64ca:	c8 ea       	ldi	r28, 0xA8	; 168
    64cc:	d0 e0       	ldi	r29, 0x00	; 0
    64ce:	d0 93 68 05 	sts	0x0568, r29
    64d2:	c0 93 67 05 	sts	0x0567, r28
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    64d6:	b0 93 ea 04 	sts	0x04EA, r27
    64da:	a0 93 e9 04 	sts	0x04E9, r26
    calibration[1][6] = 39;
    64de:	f0 93 fa 04 	sts	0x04FA, r31
    64e2:	e0 93 f9 04 	sts	0x04F9, r30
    calibration[2][6] = 59;
    64e6:	eb e3       	ldi	r30, 0x3B	; 59
    64e8:	f0 e0       	ldi	r31, 0x00	; 0
    64ea:	f0 93 0a 05 	sts	0x050A, r31
    64ee:	e0 93 09 05 	sts	0x0509, r30
    calibration[3][6] = 80;
    64f2:	e0 e5       	ldi	r30, 0x50	; 80
    64f4:	f0 e0       	ldi	r31, 0x00	; 0
    64f6:	f0 93 1a 05 	sts	0x051A, r31
    64fa:	e0 93 19 05 	sts	0x0519, r30
    calibration[4][6] = 100;
    64fe:	e4 e6       	ldi	r30, 0x64	; 100
    6500:	f0 e0       	ldi	r31, 0x00	; 0
    6502:	f0 93 2a 05 	sts	0x052A, r31
    6506:	e0 93 29 05 	sts	0x0529, r30
    calibration[5][6] = 119;
    650a:	70 93 3a 05 	sts	0x053A, r23
    650e:	60 93 39 05 	sts	0x0539, r22
    calibration[6][6] = 139;
    6512:	90 93 4a 05 	sts	0x054A, r25
    6516:	80 93 49 05 	sts	0x0549, r24
    calibration[7][6] = 160;
    651a:	30 93 5a 05 	sts	0x055A, r19
    651e:	20 93 59 05 	sts	0x0559, r18
	calibration[8][6] = 180;
    6522:	50 93 6a 05 	sts	0x056A, r21
    6526:	40 93 69 05 	sts	0x0569, r20
    calibration[0][7] = 22;    	// real speed measured in mm/s
    652a:	26 e1       	ldi	r18, 0x16	; 22
    652c:	30 e0       	ldi	r19, 0x00	; 0
    652e:	30 93 ec 04 	sts	0x04EC, r19
    6532:	20 93 eb 04 	sts	0x04EB, r18
    calibration[1][7] = 46;
    6536:	50 92 fc 04 	sts	0x04FC, r5
    653a:	40 92 fb 04 	sts	0x04FB, r4
    calibration[2][7] = 65;
    653e:	21 e4       	ldi	r18, 0x41	; 65
    6540:	30 e0       	ldi	r19, 0x00	; 0
    6542:	30 93 0c 05 	sts	0x050C, r19
    6546:	20 93 0b 05 	sts	0x050B, r18
    calibration[3][7] = 81;
    654a:	30 92 1c 05 	sts	0x051C, r3
    654e:	20 92 1b 05 	sts	0x051B, r2
    calibration[4][7] = 96;
    6552:	20 e6       	ldi	r18, 0x60	; 96
    6554:	30 e0       	ldi	r19, 0x00	; 0
    6556:	30 93 2c 05 	sts	0x052C, r19
    655a:	20 93 2b 05 	sts	0x052B, r18
    calibration[5][7] = 111;
    655e:	2f e6       	ldi	r18, 0x6F	; 111
    6560:	30 e0       	ldi	r19, 0x00	; 0
    6562:	30 93 3c 05 	sts	0x053C, r19
    6566:	20 93 3b 05 	sts	0x053B, r18
    calibration[6][7] = 125;
    656a:	70 92 4c 05 	sts	0x054C, r7
    656e:	60 92 4b 05 	sts	0x054B, r6
    calibration[7][7] = 139;
    6572:	90 93 5c 05 	sts	0x055C, r25
    6576:	80 93 5b 05 	sts	0x055B, r24
	calibration[8][7] = 153;
    657a:	89 e9       	ldi	r24, 0x99	; 153
    657c:	90 e0       	ldi	r25, 0x00	; 0
    657e:	90 93 6c 05 	sts	0x056C, r25
    6582:	80 93 6b 05 	sts	0x056B, r24

    writeCalibrationToFlash();
    6586:	0e 94 d8 3e 	call	0x7db0	; 0x7db0 <writeCalibrationToFlash>
}
    658a:	df 91       	pop	r29
    658c:	cf 91       	pop	r28
    658e:	1f 91       	pop	r17
    6590:	0f 91       	pop	r16
    6592:	ff 90       	pop	r15
    6594:	ef 90       	pop	r14
    6596:	df 90       	pop	r13
    6598:	cf 90       	pop	r12
    659a:	bf 90       	pop	r11
    659c:	af 90       	pop	r10
    659e:	9f 90       	pop	r9
    65a0:	8f 90       	pop	r8
    65a2:	7f 90       	pop	r7
    65a4:	6f 90       	pop	r6
    65a6:	5f 90       	pop	r5
    65a8:	4f 90       	pop	r4
    65aa:	3f 90       	pop	r3
    65ac:	2f 90       	pop	r2
    65ae:	08 95       	ret

000065b0 <initCalibration>:

void initCalibration() {

    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    65b0:	8a e6       	ldi	r24, 0x6A	; 106
    65b2:	9f e0       	ldi	r25, 0x0F	; 15
    65b4:	0e 94 f2 42 	call	0x85e4	; 0x85e4 <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    65b8:	2a ea       	ldi	r18, 0xAA	; 170
    65ba:	85 35       	cpi	r24, 0x55	; 85
    65bc:	92 07       	cpc	r25, r18
    65be:	19 f0       	breq	.+6      	; 0x65c6 <initCalibration+0x16>
        readCalibrationFromFlash();
    } else {
		writeDefaultCalibration();		
    65c0:	0e 94 17 31 	call	0x622e	; 0x622e <writeDefaultCalibration>
    65c4:	08 95       	ret
    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    65c6:	0e 94 e7 3e 	call	0x7dce	; 0x7dce <readCalibrationFromFlash>
    65ca:	08 95       	ret

000065cc <__vector_45>:
    }

}

// Motor left
ISR(TIMER4_OVF_vect) {
    65cc:	1f 92       	push	r1
    65ce:	0f 92       	push	r0
    65d0:	0f b6       	in	r0, 0x3f	; 63
    65d2:	0f 92       	push	r0
    65d4:	11 24       	eor	r1, r1
    65d6:	8f 93       	push	r24
    65d8:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    65da:	80 91 6a 04 	lds	r24, 0x046A
    65de:	88 23       	and	r24, r24
    65e0:	61 f0       	breq	.+24     	; 0x65fa <__vector_45+0x2e>
		pwm_left = 0;
    65e2:	10 92 f6 02 	sts	0x02F6, r1
    65e6:	10 92 f5 02 	sts	0x02F5, r1
		OCR4A = 0;
    65ea:	10 92 a9 00 	sts	0x00A9, r1
    65ee:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    65f2:	10 92 ab 00 	sts	0x00AB, r1
    65f6:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    65fa:	10 92 e0 02 	sts	0x02E0, r1
    65fe:	10 92 df 02 	sts	0x02DF, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    6602:	80 91 f5 02 	lds	r24, 0x02F5
    6606:	90 91 f6 02 	lds	r25, 0x02F6
    660a:	00 97       	sbiw	r24, 0x00	; 0
    660c:	41 f5       	brne	.+80     	; 0x665e <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    660e:	80 91 e9 02 	lds	r24, 0x02E9
    6612:	90 91 ea 02 	lds	r25, 0x02EA
    6616:	97 fd       	sbrc	r25, 7
    6618:	69 c0       	rjmp	.+210    	; 0x66ec <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    661a:	81 e0       	ldi	r24, 0x01	; 1
    661c:	80 93 26 02 	sts	0x0226, r24
			currentMotLeftChannel = 14;
    6620:	8e e0       	ldi	r24, 0x0E	; 14
    6622:	80 93 23 02 	sts	0x0223, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    6626:	81 e0       	ldi	r24, 0x01	; 1
    6628:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    662c:	80 91 a0 00 	lds	r24, 0x00A0
    6630:	8f 75       	andi	r24, 0x5F	; 95
    6632:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    6636:	80 91 02 01 	lds	r24, 0x0102
    663a:	87 7e       	andi	r24, 0xE7	; 231
    663c:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    6640:	80 91 72 00 	lds	r24, 0x0072
    6644:	89 7f       	andi	r24, 0xF9	; 249
    6646:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    664a:	89 b3       	in	r24, 0x19	; 25
    664c:	86 60       	ori	r24, 0x06	; 6
    664e:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    6650:	9f 91       	pop	r25
    6652:	8f 91       	pop	r24
    6654:	0f 90       	pop	r0
    6656:	0f be       	out	0x3f, r0	; 63
    6658:	0f 90       	pop	r0
    665a:	1f 90       	pop	r1
    665c:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    665e:	18 16       	cp	r1, r24
    6660:	19 06       	cpc	r1, r25
    6662:	2c f5       	brge	.+74     	; 0x66ae <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    6664:	10 92 26 02 	sts	0x0226, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    6668:	8f e0       	ldi	r24, 0x0F	; 15
    666a:	80 93 23 02 	sts	0x0223, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    666e:	80 91 a0 00 	lds	r24, 0x00A0
    6672:	8f 7d       	andi	r24, 0xDF	; 223
    6674:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    6678:	80 91 72 00 	lds	r24, 0x0072
    667c:	8b 7f       	andi	r24, 0xFB	; 251
    667e:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    6682:	80 91 02 01 	lds	r24, 0x0102
    6686:	8f 7e       	andi	r24, 0xEF	; 239
    6688:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    668c:	80 91 a0 00 	lds	r24, 0x00A0
    6690:	80 68       	ori	r24, 0x80	; 128
    6692:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    6696:	80 91 72 00 	lds	r24, 0x0072
    669a:	82 60       	ori	r24, 0x02	; 2
    669c:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    66a0:	9f 91       	pop	r25
    66a2:	8f 91       	pop	r24
    66a4:	0f 90       	pop	r0
    66a6:	0f be       	out	0x3f, r0	; 63
    66a8:	0f 90       	pop	r0
    66aa:	1f 90       	pop	r1
    66ac:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    66ae:	10 92 26 02 	sts	0x0226, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    66b2:	8e e0       	ldi	r24, 0x0E	; 14
    66b4:	80 93 23 02 	sts	0x0223, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    66b8:	80 91 a0 00 	lds	r24, 0x00A0
    66bc:	8f 77       	andi	r24, 0x7F	; 127
    66be:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    66c2:	80 91 72 00 	lds	r24, 0x0072
    66c6:	8d 7f       	andi	r24, 0xFD	; 253
    66c8:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    66cc:	80 91 02 01 	lds	r24, 0x0102
    66d0:	87 7f       	andi	r24, 0xF7	; 247
    66d2:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    66d6:	80 91 a0 00 	lds	r24, 0x00A0
    66da:	80 62       	ori	r24, 0x20	; 32
    66dc:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    66e0:	80 91 72 00 	lds	r24, 0x0072
    66e4:	84 60       	ori	r24, 0x04	; 4
    66e6:	80 93 72 00 	sts	0x0072, r24
    66ea:	b2 cf       	rjmp	.-156    	; 0x6650 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    66ec:	81 e0       	ldi	r24, 0x01	; 1
    66ee:	80 93 26 02 	sts	0x0226, r24
			currentMotLeftChannel = 15;
    66f2:	8f e0       	ldi	r24, 0x0F	; 15
    66f4:	80 93 23 02 	sts	0x0223, r24
    66f8:	96 cf       	rjmp	.-212    	; 0x6626 <__vector_45+0x5a>

000066fa <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    66fa:	1f 92       	push	r1
    66fc:	0f 92       	push	r0
    66fe:	0f b6       	in	r0, 0x3f	; 63
    6700:	0f 92       	push	r0
    6702:	11 24       	eor	r1, r1
    6704:	8f 93       	push	r24
    6706:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    6708:	81 e0       	ldi	r24, 0x01	; 1
    670a:	80 93 26 02 	sts	0x0226, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    670e:	9e e0       	ldi	r25, 0x0E	; 14
    6710:	90 93 23 02 	sts	0x0223, r25

	firstSampleLeft = 1;
    6714:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    6718:	9f 91       	pop	r25
    671a:	8f 91       	pop	r24
    671c:	0f 90       	pop	r0
    671e:	0f be       	out	0x3f, r0	; 63
    6720:	0f 90       	pop	r0
    6722:	1f 90       	pop	r1
    6724:	18 95       	reti

00006726 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    6726:	1f 92       	push	r1
    6728:	0f 92       	push	r0
    672a:	0f b6       	in	r0, 0x3f	; 63
    672c:	0f 92       	push	r0
    672e:	11 24       	eor	r1, r1
    6730:	8f 93       	push	r24
    6732:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    6734:	81 e0       	ldi	r24, 0x01	; 1
    6736:	80 93 26 02 	sts	0x0226, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    673a:	9f e0       	ldi	r25, 0x0F	; 15
    673c:	90 93 23 02 	sts	0x0223, r25

	firstSampleLeft = 1;
    6740:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    6744:	9f 91       	pop	r25
    6746:	8f 91       	pop	r24
    6748:	0f 90       	pop	r0
    674a:	0f be       	out	0x3f, r0	; 63
    674c:	0f 90       	pop	r0
    674e:	1f 90       	pop	r1
    6750:	18 95       	reti

00006752 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    6752:	1f 92       	push	r1
    6754:	0f 92       	push	r0
    6756:	0f b6       	in	r0, 0x3f	; 63
    6758:	0f 92       	push	r0
    675a:	11 24       	eor	r1, r1
    675c:	8f 93       	push	r24
    675e:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    6760:	80 91 6a 04 	lds	r24, 0x046A
    6764:	88 23       	and	r24, r24
    6766:	61 f0       	breq	.+24     	; 0x6780 <__vector_35+0x2e>
		pwm_right = 0;
    6768:	10 92 f4 02 	sts	0x02F4, r1
    676c:	10 92 f3 02 	sts	0x02F3, r1
		OCR3A = 0;
    6770:	10 92 99 00 	sts	0x0099, r1
    6774:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    6778:	10 92 9b 00 	sts	0x009B, r1
    677c:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    6780:	10 92 e2 02 	sts	0x02E2, r1
    6784:	10 92 e1 02 	sts	0x02E1, r1


	if(pwm_right == 0) {
    6788:	80 91 f3 02 	lds	r24, 0x02F3
    678c:	90 91 f4 02 	lds	r25, 0x02F4
    6790:	00 97       	sbiw	r24, 0x00	; 0
    6792:	31 f5       	brne	.+76     	; 0x67e0 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    6794:	80 91 e7 02 	lds	r24, 0x02E7
    6798:	90 91 e8 02 	lds	r25, 0x02E8
    679c:	97 fd       	sbrc	r25, 7
    679e:	5f c0       	rjmp	.+190    	; 0x685e <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    67a0:	81 e0       	ldi	r24, 0x01	; 1
    67a2:	80 93 25 02 	sts	0x0225, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    67a6:	8c e0       	ldi	r24, 0x0C	; 12
    67a8:	80 93 24 02 	sts	0x0224, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    67ac:	81 e0       	ldi	r24, 0x01	; 1
    67ae:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    67b2:	80 91 90 00 	lds	r24, 0x0090
    67b6:	8f 75       	andi	r24, 0x5F	; 95
    67b8:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    67bc:	8e b1       	in	r24, 0x0e	; 14
    67be:	87 7e       	andi	r24, 0xE7	; 231
    67c0:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    67c2:	80 91 71 00 	lds	r24, 0x0071
    67c6:	89 7f       	andi	r24, 0xF9	; 249
    67c8:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    67cc:	88 b3       	in	r24, 0x18	; 24
    67ce:	86 60       	ori	r24, 0x06	; 6
    67d0:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    67d2:	9f 91       	pop	r25
    67d4:	8f 91       	pop	r24
    67d6:	0f 90       	pop	r0
    67d8:	0f be       	out	0x3f, r0	; 63
    67da:	0f 90       	pop	r0
    67dc:	1f 90       	pop	r1
    67de:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    67e0:	18 16       	cp	r1, r24
    67e2:	19 06       	cpc	r1, r25
    67e4:	0c f5       	brge	.+66     	; 0x6828 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    67e6:	10 92 25 02 	sts	0x0225, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    67ea:	8d e0       	ldi	r24, 0x0D	; 13
    67ec:	80 93 24 02 	sts	0x0224, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    67f0:	80 91 90 00 	lds	r24, 0x0090
    67f4:	8f 7d       	andi	r24, 0xDF	; 223
    67f6:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    67fa:	80 91 71 00 	lds	r24, 0x0071
    67fe:	8b 7f       	andi	r24, 0xFB	; 251
    6800:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    6804:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    6806:	80 91 90 00 	lds	r24, 0x0090
    680a:	80 68       	ori	r24, 0x80	; 128
    680c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    6810:	80 91 71 00 	lds	r24, 0x0071
    6814:	82 60       	ori	r24, 0x02	; 2
    6816:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    681a:	9f 91       	pop	r25
    681c:	8f 91       	pop	r24
    681e:	0f 90       	pop	r0
    6820:	0f be       	out	0x3f, r0	; 63
    6822:	0f 90       	pop	r0
    6824:	1f 90       	pop	r1
    6826:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    6828:	10 92 25 02 	sts	0x0225, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    682c:	8c e0       	ldi	r24, 0x0C	; 12
    682e:	80 93 24 02 	sts	0x0224, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    6832:	80 91 90 00 	lds	r24, 0x0090
    6836:	8f 77       	andi	r24, 0x7F	; 127
    6838:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    683c:	80 91 71 00 	lds	r24, 0x0071
    6840:	8d 7f       	andi	r24, 0xFD	; 253
    6842:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    6846:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    6848:	80 91 90 00 	lds	r24, 0x0090
    684c:	80 62       	ori	r24, 0x20	; 32
    684e:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    6852:	80 91 71 00 	lds	r24, 0x0071
    6856:	84 60       	ori	r24, 0x04	; 4
    6858:	80 93 71 00 	sts	0x0071, r24
    685c:	ba cf       	rjmp	.-140    	; 0x67d2 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    685e:	81 e0       	ldi	r24, 0x01	; 1
    6860:	80 93 25 02 	sts	0x0225, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    6864:	8d e0       	ldi	r24, 0x0D	; 13
    6866:	80 93 24 02 	sts	0x0224, r24
    686a:	a0 cf       	rjmp	.-192    	; 0x67ac <__vector_35+0x5a>

0000686c <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    686c:	1f 92       	push	r1
    686e:	0f 92       	push	r0
    6870:	0f b6       	in	r0, 0x3f	; 63
    6872:	0f 92       	push	r0
    6874:	11 24       	eor	r1, r1
    6876:	8f 93       	push	r24
    6878:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    687a:	81 e0       	ldi	r24, 0x01	; 1
    687c:	80 93 25 02 	sts	0x0225, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    6880:	9c e0       	ldi	r25, 0x0C	; 12
    6882:	90 93 24 02 	sts	0x0224, r25

	firstSampleRight = 1;
    6886:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    688a:	9f 91       	pop	r25
    688c:	8f 91       	pop	r24
    688e:	0f 90       	pop	r0
    6890:	0f be       	out	0x3f, r0	; 63
    6892:	0f 90       	pop	r0
    6894:	1f 90       	pop	r1
    6896:	18 95       	reti

00006898 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    6898:	1f 92       	push	r1
    689a:	0f 92       	push	r0
    689c:	0f b6       	in	r0, 0x3f	; 63
    689e:	0f 92       	push	r0
    68a0:	11 24       	eor	r1, r1
    68a2:	8f 93       	push	r24
    68a4:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    68a6:	81 e0       	ldi	r24, 0x01	; 1
    68a8:	80 93 25 02 	sts	0x0225, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    68ac:	9d e0       	ldi	r25, 0x0D	; 13
    68ae:	90 93 24 02 	sts	0x0224, r25

	firstSampleRight = 1;
    68b2:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    68b6:	9f 91       	pop	r25
    68b8:	8f 91       	pop	r24
    68ba:	0f 90       	pop	r0
    68bc:	0f be       	out	0x3f, r0	; 63
    68be:	0f 90       	pop	r0
    68c0:	1f 90       	pop	r1
    68c2:	18 95       	reti

000068c4 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    68c4:	80 91 94 00 	lds	r24, 0x0094
    68c8:	90 91 95 00 	lds	r25, 0x0095
    68cc:	0e 94 cf 42 	call	0x859e	; 0x859e <srand>

}
    68d0:	08 95       	ret

000068d2 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    68d2:	2f 92       	push	r2
    68d4:	3f 92       	push	r3
    68d6:	4f 92       	push	r4
    68d8:	5f 92       	push	r5
    68da:	6f 92       	push	r6
    68dc:	7f 92       	push	r7
    68de:	8f 92       	push	r8
    68e0:	9f 92       	push	r9
    68e2:	af 92       	push	r10
    68e4:	bf 92       	push	r11
    68e6:	cf 92       	push	r12
    68e8:	df 92       	push	r13
    68ea:	ef 92       	push	r14
    68ec:	ff 92       	push	r15
    68ee:	0f 93       	push	r16
    68f0:	1f 93       	push	r17
    68f2:	df 93       	push	r29
    68f4:	cf 93       	push	r28
    68f6:	cd b7       	in	r28, 0x3d	; 61
    68f8:	de b7       	in	r29, 0x3e	; 62
    68fa:	28 97       	sbiw	r28, 0x08	; 8
    68fc:	0f b6       	in	r0, 0x3f	; 63
    68fe:	f8 94       	cli
    6900:	de bf       	out	0x3e, r29	; 62
    6902:	0f be       	out	0x3f, r0	; 63
    6904:	cd bf       	out	0x3d, r28	; 61
    6906:	6c 01       	movw	r12, r24
    6908:	7a 83       	std	Y+2, r23	; 0x02
    690a:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    690c:	fc 01       	movw	r30, r24
    690e:	01 90       	ld	r0, Z+
    6910:	f0 81       	ld	r31, Z
    6912:	e0 2d       	mov	r30, r0
    6914:	fc 83       	std	Y+4, r31	; 0x04
    6916:	eb 83       	std	Y+3, r30	; 0x03
    6918:	fb 01       	movw	r30, r22
    691a:	01 90       	ld	r0, Z+
    691c:	f0 81       	ld	r31, Z
    691e:	e0 2d       	mov	r30, r0
    6920:	fe 83       	std	Y+6, r31	; 0x06
    6922:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6924:	00 91 bf 02 	lds	r16, 0x02BF
    6928:	10 91 c0 02 	lds	r17, 0x02C0
    692c:	05 30       	cpi	r16, 0x05	; 5
    692e:	11 05       	cpc	r17, r1
    6930:	34 f4       	brge	.+12     	; 0x693e <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    6932:	10 92 c0 02 	sts	0x02C0, r1
    6936:	10 92 bf 02 	sts	0x02BF, r1
    693a:	00 e0       	ldi	r16, 0x00	; 0
    693c:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    693e:	60 91 c1 02 	lds	r22, 0x02C1
    6942:	70 91 c2 02 	lds	r23, 0x02C2
    6946:	65 30       	cpi	r22, 0x05	; 5
    6948:	71 05       	cpc	r23, r1
    694a:	34 f4       	brge	.+12     	; 0x6958 <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    694c:	10 92 c2 02 	sts	0x02C2, r1
    6950:	10 92 c1 02 	sts	0x02C1, r1
    6954:	60 e0       	ldi	r22, 0x00	; 0
    6956:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6958:	80 91 c3 02 	lds	r24, 0x02C3
    695c:	90 91 c4 02 	lds	r25, 0x02C4
    6960:	85 30       	cpi	r24, 0x05	; 5
    6962:	91 05       	cpc	r25, r1
    6964:	24 f4       	brge	.+8      	; 0x696e <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    6966:	10 92 c4 02 	sts	0x02C4, r1
    696a:	10 92 c3 02 	sts	0x02C3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    696e:	40 91 c5 02 	lds	r20, 0x02C5
    6972:	50 91 c6 02 	lds	r21, 0x02C6
    6976:	45 30       	cpi	r20, 0x05	; 5
    6978:	51 05       	cpc	r21, r1
    697a:	34 f4       	brge	.+12     	; 0x6988 <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    697c:	10 92 c6 02 	sts	0x02C6, r1
    6980:	10 92 c5 02 	sts	0x02C5, r1
    6984:	40 e0       	ldi	r20, 0x00	; 0
    6986:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6988:	40 90 c7 02 	lds	r4, 0x02C7
    698c:	50 90 c8 02 	lds	r5, 0x02C8
    6990:	f5 e0       	ldi	r31, 0x05	; 5
    6992:	4f 16       	cp	r4, r31
    6994:	51 04       	cpc	r5, r1
    6996:	34 f4       	brge	.+12     	; 0x69a4 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    6998:	10 92 c8 02 	sts	0x02C8, r1
    699c:	10 92 c7 02 	sts	0x02C7, r1
    69a0:	44 24       	eor	r4, r4
    69a2:	55 24       	eor	r5, r5
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    69a4:	20 91 c9 02 	lds	r18, 0x02C9
    69a8:	30 91 ca 02 	lds	r19, 0x02CA
    69ac:	25 30       	cpi	r18, 0x05	; 5
    69ae:	31 05       	cpc	r19, r1
    69b0:	34 f4       	brge	.+12     	; 0x69be <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    69b2:	10 92 ca 02 	sts	0x02CA, r1
    69b6:	10 92 c9 02 	sts	0x02C9, r1
    69ba:	20 e0       	ldi	r18, 0x00	; 0
    69bc:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    69be:	80 91 cb 02 	lds	r24, 0x02CB
    69c2:	90 91 cc 02 	lds	r25, 0x02CC
    69c6:	85 30       	cpi	r24, 0x05	; 5
    69c8:	91 05       	cpc	r25, r1
    69ca:	24 f4       	brge	.+8      	; 0x69d4 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    69cc:	10 92 cc 02 	sts	0x02CC, r1
    69d0:	10 92 cb 02 	sts	0x02CB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    69d4:	80 91 cd 02 	lds	r24, 0x02CD
    69d8:	90 91 ce 02 	lds	r25, 0x02CE
    69dc:	85 30       	cpi	r24, 0x05	; 5
    69de:	91 05       	cpc	r25, r1
    69e0:	34 f4       	brge	.+12     	; 0x69ee <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    69e2:	10 92 ce 02 	sts	0x02CE, r1
    69e6:	10 92 cd 02 	sts	0x02CD, r1
    69ea:	80 e0       	ldi	r24, 0x00	; 0
    69ec:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    69ee:	10 95       	com	r17
    69f0:	01 95       	neg	r16
    69f2:	1f 4f       	sbci	r17, 0xFF	; 255
    69f4:	4b 01       	movw	r8, r22
    69f6:	95 94       	asr	r9
    69f8:	87 94       	ror	r8
    69fa:	7a 01       	movw	r14, r20
    69fc:	f5 94       	asr	r15
    69fe:	e7 94       	ror	r14
    6a00:	59 01       	movw	r10, r18
    6a02:	b5 94       	asr	r11
    6a04:	a7 94       	ror	r10
    6a06:	3c 01       	movw	r6, r24
    6a08:	75 94       	asr	r7
    6a0a:	67 94       	ror	r6
    6a0c:	0e 94 ca 42 	call	0x8594	; 0x8594 <rand>
    6a10:	92 01       	movw	r18, r4
    6a12:	2e 51       	subi	r18, 0x1E	; 30
    6a14:	30 40       	sbci	r19, 0x00	; 0
    6a16:	20 0f       	add	r18, r16
    6a18:	31 1f       	adc	r19, r17
    6a1a:	2e 0d       	add	r18, r14
    6a1c:	3f 1d       	adc	r19, r15
    6a1e:	2a 0d       	add	r18, r10
    6a20:	3b 1d       	adc	r19, r11
    6a22:	28 19       	sub	r18, r8
    6a24:	39 09       	sbc	r19, r9
    6a26:	26 19       	sub	r18, r6
    6a28:	37 09       	sbc	r19, r7
    6a2a:	6c e3       	ldi	r22, 0x3C	; 60
    6a2c:	26 2e       	mov	r2, r22
    6a2e:	31 2c       	mov	r3, r1
    6a30:	b1 01       	movw	r22, r2
    6a32:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
    6a36:	28 0f       	add	r18, r24
    6a38:	39 1f       	adc	r19, r25
    6a3a:	38 87       	std	Y+8, r19	; 0x08
    6a3c:	2f 83       	std	Y+7, r18	; 0x07
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    6a3e:	e0 90 c1 02 	lds	r14, 0x02C1
    6a42:	f0 90 c2 02 	lds	r15, 0x02C2
    6a46:	f5 94       	asr	r15
    6a48:	e7 94       	ror	r14
    6a4a:	00 91 c3 02 	lds	r16, 0x02C3
    6a4e:	10 91 c4 02 	lds	r17, 0x02C4
    6a52:	15 95       	asr	r17
    6a54:	07 95       	ror	r16
    6a56:	15 95       	asr	r17
    6a58:	07 95       	ror	r16
    6a5a:	a0 90 c5 02 	lds	r10, 0x02C5
    6a5e:	b0 90 c6 02 	lds	r11, 0x02C6
    6a62:	b5 94       	asr	r11
    6a64:	a7 94       	ror	r10
    6a66:	80 90 c9 02 	lds	r8, 0x02C9
    6a6a:	90 90 ca 02 	lds	r9, 0x02CA
    6a6e:	95 94       	asr	r9
    6a70:	87 94       	ror	r8
    6a72:	40 90 cb 02 	lds	r4, 0x02CB
    6a76:	50 90 cc 02 	lds	r5, 0x02CC
    6a7a:	55 94       	asr	r5
    6a7c:	47 94       	ror	r4
    6a7e:	55 94       	asr	r5
    6a80:	47 94       	ror	r4
    6a82:	60 90 cd 02 	lds	r6, 0x02CD
    6a86:	70 90 ce 02 	lds	r7, 0x02CE
    6a8a:	75 94       	asr	r7
    6a8c:	67 94       	ror	r6
    6a8e:	0e 94 ca 42 	call	0x8594	; 0x8594 <rand>
    6a92:	97 01       	movw	r18, r14
    6a94:	20 0f       	add	r18, r16
    6a96:	31 1f       	adc	r19, r17
    6a98:	2e 51       	subi	r18, 0x1E	; 30
    6a9a:	30 40       	sbci	r19, 0x00	; 0
    6a9c:	2a 0d       	add	r18, r10
    6a9e:	3b 1d       	adc	r19, r11
    6aa0:	28 19       	sub	r18, r8
    6aa2:	39 09       	sbc	r19, r9
    6aa4:	26 19       	sub	r18, r6
    6aa6:	37 09       	sbc	r19, r7
    6aa8:	24 19       	sub	r18, r4
    6aaa:	35 09       	sbc	r19, r5
    6aac:	b1 01       	movw	r22, r2
    6aae:	0e 94 2c 42 	call	0x8458	; 0x8458 <__divmodhi4>
    6ab2:	28 0f       	add	r18, r24
    6ab4:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    6ab6:	4b 81       	ldd	r20, Y+3	; 0x03
    6ab8:	5c 81       	ldd	r21, Y+4	; 0x04
    6aba:	57 fd       	sbrc	r21, 7
    6abc:	df c0       	rjmp	.+446    	; 0x6c7c <obstacleAvoidance+0x3aa>
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    6abe:	4a 01       	movw	r8, r20
    6ac0:	aa 24       	eor	r10, r10
    6ac2:	97 fc       	sbrc	r9, 7
    6ac4:	a0 94       	com	r10
    6ac6:	ba 2c       	mov	r11, r10
    6ac8:	8f 81       	ldd	r24, Y+7	; 0x07
    6aca:	98 85       	ldd	r25, Y+8	; 0x08
    6acc:	2c 01       	movw	r4, r24
    6ace:	66 24       	eor	r6, r6
    6ad0:	57 fc       	sbrc	r5, 7
    6ad2:	60 94       	com	r6
    6ad4:	76 2c       	mov	r7, r6
    6ad6:	79 01       	movw	r14, r18
    6ad8:	00 27       	eor	r16, r16
    6ada:	f7 fc       	sbrc	r15, 7
    6adc:	00 95       	com	r16
    6ade:	10 2f       	mov	r17, r16
    6ae0:	c3 01       	movw	r24, r6
    6ae2:	b2 01       	movw	r22, r4
    6ae4:	6e 19       	sub	r22, r14
    6ae6:	7f 09       	sbc	r23, r15
    6ae8:	80 0b       	sbc	r24, r16
    6aea:	91 0b       	sbc	r25, r17
    6aec:	a5 01       	movw	r20, r10
    6aee:	94 01       	movw	r18, r8
    6af0:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <__mulsi3>
    6af4:	b6 e0       	ldi	r27, 0x06	; 6
    6af6:	95 95       	asr	r25
    6af8:	87 95       	ror	r24
    6afa:	77 95       	ror	r23
    6afc:	67 95       	ror	r22
    6afe:	ba 95       	dec	r27
    6b00:	d1 f7       	brne	.-12     	; 0x6af6 <obstacleAvoidance+0x224>
    6b02:	68 0d       	add	r22, r8
    6b04:	79 1d       	adc	r23, r9
    6b06:	8a 1d       	adc	r24, r10
    6b08:	9b 1d       	adc	r25, r11
		*pwmLeft = (signed int)res;
    6b0a:	f6 01       	movw	r30, r12
    6b0c:	71 83       	std	Z+1, r23	; 0x01
    6b0e:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    6b10:	2d 81       	ldd	r18, Y+5	; 0x05
    6b12:	3e 81       	ldd	r19, Y+6	; 0x06
    6b14:	37 fd       	sbrc	r19, 7
    6b16:	91 c0       	rjmp	.+290    	; 0x6c3a <obstacleAvoidance+0x368>
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    6b18:	49 01       	movw	r8, r18
    6b1a:	aa 24       	eor	r10, r10
    6b1c:	97 fc       	sbrc	r9, 7
    6b1e:	a0 94       	com	r10
    6b20:	ba 2c       	mov	r11, r10
    6b22:	c8 01       	movw	r24, r16
    6b24:	b7 01       	movw	r22, r14
    6b26:	64 0d       	add	r22, r4
    6b28:	75 1d       	adc	r23, r5
    6b2a:	86 1d       	adc	r24, r6
    6b2c:	97 1d       	adc	r25, r7
    6b2e:	a5 01       	movw	r20, r10
    6b30:	94 01       	movw	r18, r8
    6b32:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <__mulsi3>
    6b36:	f6 e0       	ldi	r31, 0x06	; 6
    6b38:	95 95       	asr	r25
    6b3a:	87 95       	ror	r24
    6b3c:	77 95       	ror	r23
    6b3e:	67 95       	ror	r22
    6b40:	fa 95       	dec	r31
    6b42:	d1 f7       	brne	.-12     	; 0x6b38 <obstacleAvoidance+0x266>
    6b44:	68 0d       	add	r22, r8
    6b46:	79 1d       	adc	r23, r9
    6b48:	8a 1d       	adc	r24, r10
    6b4a:	9b 1d       	adc	r25, r11
		*pwmRight = (signed int)res;
    6b4c:	9b 01       	movw	r18, r22
    6b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    6b50:	fa 81       	ldd	r31, Y+2	; 0x02
    6b52:	71 83       	std	Z+1, r23	; 0x01
    6b54:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}
		
	if(desL!=0 && desR!=0) {
    6b56:	4b 81       	ldd	r20, Y+3	; 0x03
    6b58:	5c 81       	ldd	r21, Y+4	; 0x04
    6b5a:	41 15       	cp	r20, r1
    6b5c:	51 05       	cpc	r21, r1
    6b5e:	e9 f0       	breq	.+58     	; 0x6b9a <obstacleAvoidance+0x2c8>
    6b60:	8d 81       	ldd	r24, Y+5	; 0x05
    6b62:	9e 81       	ldd	r25, Y+6	; 0x06
    6b64:	00 97       	sbiw	r24, 0x00	; 0
    6b66:	09 f4       	brne	.+2      	; 0x6b6a <obstacleAvoidance+0x298>
    6b68:	63 c0       	rjmp	.+198    	; 0x6c30 <obstacleAvoidance+0x35e>
		if(currentAngle<270 && currentAngle>90) {
    6b6a:	80 91 3a 04 	lds	r24, 0x043A
    6b6e:	90 91 3b 04 	lds	r25, 0x043B
    6b72:	8b 55       	subi	r24, 0x5B	; 91
    6b74:	90 40       	sbci	r25, 0x00	; 0
    6b76:	83 3b       	cpi	r24, 0xB3	; 179
    6b78:	91 05       	cpc	r25, r1
    6b7a:	08 f0       	brcs	.+2      	; 0x6b7e <obstacleAvoidance+0x2ac>
    6b7c:	a9 c0       	rjmp	.+338    	; 0x6cd0 <obstacleAvoidance+0x3fe>
			*pwmLeft += 10;
    6b7e:	f6 01       	movw	r30, r12
    6b80:	80 81       	ld	r24, Z
    6b82:	91 81       	ldd	r25, Z+1	; 0x01
    6b84:	0a 96       	adiw	r24, 0x0a	; 10
    6b86:	91 83       	std	Z+1, r25	; 0x01
    6b88:	80 83       	st	Z, r24
			*pwmRight -= 10;
    6b8a:	e9 81       	ldd	r30, Y+1	; 0x01
    6b8c:	fa 81       	ldd	r31, Y+2	; 0x02
    6b8e:	20 81       	ld	r18, Z
    6b90:	31 81       	ldd	r19, Z+1	; 0x01
    6b92:	2a 50       	subi	r18, 0x0A	; 10
    6b94:	30 40       	sbci	r19, 0x00	; 0
    6b96:	31 83       	std	Z+1, r19	; 0x01
    6b98:	20 83       	st	Z, r18
			*pwmRight += 10;
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    6b9a:	f2 e0       	ldi	r31, 0x02	; 2
    6b9c:	21 30       	cpi	r18, 0x01	; 1
    6b9e:	3f 07       	cpc	r19, r31
    6ba0:	44 f0       	brlt	.+16     	; 0x6bb2 <obstacleAvoidance+0x2e0>
    6ba2:	80 e0       	ldi	r24, 0x00	; 0
    6ba4:	92 e0       	ldi	r25, 0x02	; 2
    6ba6:	e9 81       	ldd	r30, Y+1	; 0x01
    6ba8:	fa 81       	ldd	r31, Y+2	; 0x02
    6baa:	91 83       	std	Z+1, r25	; 0x01
    6bac:	80 83       	st	Z, r24
    6bae:	20 e0       	ldi	r18, 0x00	; 0
    6bb0:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    6bb2:	f6 01       	movw	r30, r12
    6bb4:	80 81       	ld	r24, Z
    6bb6:	91 81       	ldd	r25, Z+1	; 0x01
    6bb8:	f2 e0       	ldi	r31, 0x02	; 2
    6bba:	81 30       	cpi	r24, 0x01	; 1
    6bbc:	9f 07       	cpc	r25, r31
    6bbe:	4c f0       	brlt	.+18     	; 0x6bd2 <obstacleAvoidance+0x300>
    6bc0:	80 e0       	ldi	r24, 0x00	; 0
    6bc2:	92 e0       	ldi	r25, 0x02	; 2
    6bc4:	f6 01       	movw	r30, r12
    6bc6:	91 83       	std	Z+1, r25	; 0x01
    6bc8:	80 83       	st	Z, r24
    6bca:	e9 81       	ldd	r30, Y+1	; 0x01
    6bcc:	fa 81       	ldd	r31, Y+2	; 0x02
    6bce:	20 81       	ld	r18, Z
    6bd0:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    6bd2:	fe ef       	ldi	r31, 0xFE	; 254
    6bd4:	20 30       	cpi	r18, 0x00	; 0
    6bd6:	3f 07       	cpc	r19, r31
    6bd8:	4c f4       	brge	.+18     	; 0x6bec <obstacleAvoidance+0x31a>
    6bda:	80 e0       	ldi	r24, 0x00	; 0
    6bdc:	9e ef       	ldi	r25, 0xFE	; 254
    6bde:	e9 81       	ldd	r30, Y+1	; 0x01
    6be0:	fa 81       	ldd	r31, Y+2	; 0x02
    6be2:	91 83       	std	Z+1, r25	; 0x01
    6be4:	80 83       	st	Z, r24
    6be6:	f6 01       	movw	r30, r12
    6be8:	80 81       	ld	r24, Z
    6bea:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    6bec:	fe ef       	ldi	r31, 0xFE	; 254
    6bee:	80 30       	cpi	r24, 0x00	; 0
    6bf0:	9f 07       	cpc	r25, r31
    6bf2:	2c f4       	brge	.+10     	; 0x6bfe <obstacleAvoidance+0x32c>
    6bf4:	80 e0       	ldi	r24, 0x00	; 0
    6bf6:	9e ef       	ldi	r25, 0xFE	; 254
    6bf8:	f6 01       	movw	r30, r12
    6bfa:	91 83       	std	Z+1, r25	; 0x01
    6bfc:	80 83       	st	Z, r24

}
    6bfe:	28 96       	adiw	r28, 0x08	; 8
    6c00:	0f b6       	in	r0, 0x3f	; 63
    6c02:	f8 94       	cli
    6c04:	de bf       	out	0x3e, r29	; 62
    6c06:	0f be       	out	0x3f, r0	; 63
    6c08:	cd bf       	out	0x3d, r28	; 61
    6c0a:	cf 91       	pop	r28
    6c0c:	df 91       	pop	r29
    6c0e:	1f 91       	pop	r17
    6c10:	0f 91       	pop	r16
    6c12:	ff 90       	pop	r15
    6c14:	ef 90       	pop	r14
    6c16:	df 90       	pop	r13
    6c18:	cf 90       	pop	r12
    6c1a:	bf 90       	pop	r11
    6c1c:	af 90       	pop	r10
    6c1e:	9f 90       	pop	r9
    6c20:	8f 90       	pop	r8
    6c22:	7f 90       	pop	r7
    6c24:	6f 90       	pop	r6
    6c26:	5f 90       	pop	r5
    6c28:	4f 90       	pop	r4
    6c2a:	3f 90       	pop	r3
    6c2c:	2f 90       	pop	r2
    6c2e:	08 95       	ret
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}
		
	if(desL!=0 && desR!=0) {
    6c30:	e9 81       	ldd	r30, Y+1	; 0x01
    6c32:	fa 81       	ldd	r31, Y+2	; 0x02
    6c34:	20 81       	ld	r18, Z
    6c36:	31 81       	ldd	r19, Z+1	; 0x01
    6c38:	b0 cf       	rjmp	.-160    	; 0x6b9a <obstacleAvoidance+0x2c8>
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    6c3a:	49 01       	movw	r8, r18
    6c3c:	aa 24       	eor	r10, r10
    6c3e:	97 fc       	sbrc	r9, 7
    6c40:	a0 94       	com	r10
    6c42:	ba 2c       	mov	r11, r10
    6c44:	c3 01       	movw	r24, r6
    6c46:	b2 01       	movw	r22, r4
    6c48:	6e 19       	sub	r22, r14
    6c4a:	7f 09       	sbc	r23, r15
    6c4c:	80 0b       	sbc	r24, r16
    6c4e:	91 0b       	sbc	r25, r17
    6c50:	a5 01       	movw	r20, r10
    6c52:	94 01       	movw	r18, r8
    6c54:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <__mulsi3>
    6c58:	e6 e0       	ldi	r30, 0x06	; 6
    6c5a:	95 95       	asr	r25
    6c5c:	87 95       	ror	r24
    6c5e:	77 95       	ror	r23
    6c60:	67 95       	ror	r22
    6c62:	ea 95       	dec	r30
    6c64:	d1 f7       	brne	.-12     	; 0x6c5a <obstacleAvoidance+0x388>
    6c66:	26 1b       	sub	r18, r22
    6c68:	37 0b       	sbc	r19, r23
    6c6a:	48 0b       	sbc	r20, r24
    6c6c:	59 0b       	sbc	r21, r25
    6c6e:	da 01       	movw	r26, r20
    6c70:	c9 01       	movw	r24, r18
		*pwmRight = (signed int)res;
    6c72:	e9 81       	ldd	r30, Y+1	; 0x01
    6c74:	fa 81       	ldd	r31, Y+2	; 0x02
    6c76:	91 83       	std	Z+1, r25	; 0x01
    6c78:	80 83       	st	Z, r24
    6c7a:	6d cf       	rjmp	.-294    	; 0x6b56 <obstacleAvoidance+0x284>
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    6c7c:	4a 01       	movw	r8, r20
    6c7e:	aa 24       	eor	r10, r10
    6c80:	97 fc       	sbrc	r9, 7
    6c82:	a0 94       	com	r10
    6c84:	ba 2c       	mov	r11, r10
    6c86:	8f 81       	ldd	r24, Y+7	; 0x07
    6c88:	98 85       	ldd	r25, Y+8	; 0x08
    6c8a:	2c 01       	movw	r4, r24
    6c8c:	66 24       	eor	r6, r6
    6c8e:	57 fc       	sbrc	r5, 7
    6c90:	60 94       	com	r6
    6c92:	76 2c       	mov	r7, r6
    6c94:	79 01       	movw	r14, r18
    6c96:	00 27       	eor	r16, r16
    6c98:	f7 fc       	sbrc	r15, 7
    6c9a:	00 95       	com	r16
    6c9c:	10 2f       	mov	r17, r16
    6c9e:	c8 01       	movw	r24, r16
    6ca0:	b7 01       	movw	r22, r14
    6ca2:	64 0d       	add	r22, r4
    6ca4:	75 1d       	adc	r23, r5
    6ca6:	86 1d       	adc	r24, r6
    6ca8:	97 1d       	adc	r25, r7
    6caa:	a5 01       	movw	r20, r10
    6cac:	94 01       	movw	r18, r8
    6cae:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <__mulsi3>
    6cb2:	a6 e0       	ldi	r26, 0x06	; 6
    6cb4:	95 95       	asr	r25
    6cb6:	87 95       	ror	r24
    6cb8:	77 95       	ror	r23
    6cba:	67 95       	ror	r22
    6cbc:	aa 95       	dec	r26
    6cbe:	d1 f7       	brne	.-12     	; 0x6cb4 <obstacleAvoidance+0x3e2>
    6cc0:	26 1b       	sub	r18, r22
    6cc2:	37 0b       	sbc	r19, r23
    6cc4:	48 0b       	sbc	r20, r24
    6cc6:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    6cc8:	f6 01       	movw	r30, r12
    6cca:	31 83       	std	Z+1, r19	; 0x01
    6ccc:	20 83       	st	Z, r18
    6cce:	20 cf       	rjmp	.-448    	; 0x6b10 <obstacleAvoidance+0x23e>
	if(desL!=0 && desR!=0) {
		if(currentAngle<270 && currentAngle>90) {
			*pwmLeft += 10;
			*pwmRight -= 10;
		} else {
			*pwmLeft -= 10;
    6cd0:	f6 01       	movw	r30, r12
    6cd2:	80 81       	ld	r24, Z
    6cd4:	91 81       	ldd	r25, Z+1	; 0x01
    6cd6:	0a 97       	sbiw	r24, 0x0a	; 10
    6cd8:	91 83       	std	Z+1, r25	; 0x01
    6cda:	80 83       	st	Z, r24
			*pwmRight += 10;
    6cdc:	e9 81       	ldd	r30, Y+1	; 0x01
    6cde:	fa 81       	ldd	r31, Y+2	; 0x02
    6ce0:	20 81       	ld	r18, Z
    6ce2:	31 81       	ldd	r19, Z+1	; 0x01
    6ce4:	26 5f       	subi	r18, 0xF6	; 246
    6ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    6ce8:	31 83       	std	Z+1, r19	; 0x01
    6cea:	20 83       	st	Z, r18
    6cec:	56 cf       	rjmp	.-340    	; 0x6b9a <obstacleAvoidance+0x2c8>

00006cee <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    6cee:	80 91 67 02 	lds	r24, 0x0267
    6cf2:	90 91 68 02 	lds	r25, 0x0268
    6cf6:	21 e0       	ldi	r18, 0x01	; 1
    6cf8:	84 3a       	cpi	r24, 0xA4	; 164
    6cfa:	92 07       	cpc	r25, r18
    6cfc:	d4 f0       	brlt	.+52     	; 0x6d32 <cliffDetected+0x44>
    6cfe:	80 91 69 02 	lds	r24, 0x0269
    6d02:	90 91 6a 02 	lds	r25, 0x026A
    6d06:	21 e0       	ldi	r18, 0x01	; 1
    6d08:	84 3a       	cpi	r24, 0xA4	; 164
    6d0a:	92 07       	cpc	r25, r18
    6d0c:	94 f0       	brlt	.+36     	; 0x6d32 <cliffDetected+0x44>
    6d0e:	80 91 6b 02 	lds	r24, 0x026B
    6d12:	90 91 6c 02 	lds	r25, 0x026C
    6d16:	21 e0       	ldi	r18, 0x01	; 1
    6d18:	84 3a       	cpi	r24, 0xA4	; 164
    6d1a:	92 07       	cpc	r25, r18
    6d1c:	74 f0       	brlt	.+28     	; 0x6d3a <cliffDetected+0x4c>
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    6d1e:	81 e0       	ldi	r24, 0x01	; 1
    6d20:	20 91 6d 02 	lds	r18, 0x026D
    6d24:	30 91 6e 02 	lds	r19, 0x026E
    6d28:	91 e0       	ldi	r25, 0x01	; 1
    6d2a:	24 3a       	cpi	r18, 0xA4	; 164
    6d2c:	39 07       	cpc	r19, r25
    6d2e:	1c f4       	brge	.+6      	; 0x6d36 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    6d30:	08 95       	ret
char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    6d32:	81 e0       	ldi	r24, 0x01	; 1
    6d34:	08 95       	ret
    6d36:	80 e0       	ldi	r24, 0x00	; 0
    6d38:	08 95       	ret
    6d3a:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    6d3c:	08 95       	ret

00006d3e <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    6d3e:	81 e0       	ldi	r24, 0x01	; 1
    6d40:	80 93 68 04 	sts	0x0468, r24
}
    6d44:	08 95       	ret

00006d46 <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    6d46:	10 92 68 04 	sts	0x0468, r1
}
    6d4a:	08 95       	ret

00006d4c <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    6d4c:	81 e0       	ldi	r24, 0x01	; 1
    6d4e:	80 93 69 04 	sts	0x0469, r24
}
    6d52:	08 95       	ret

00006d54 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    6d54:	10 92 69 04 	sts	0x0469, r1
}
    6d58:	08 95       	ret

00006d5a <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    6d5a:	a0 e8       	ldi	r26, 0x80	; 128
    6d5c:	b0 e0       	ldi	r27, 0x00	; 0
    6d5e:	1c 92       	st	X, r1
	TCCR1B = 0;
    6d60:	e1 e8       	ldi	r30, 0x81	; 129
    6d62:	f0 e0       	ldi	r31, 0x00	; 0
    6d64:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    6d66:	8c 91       	ld	r24, X
    6d68:	89 6a       	ori	r24, 0xA9	; 169
    6d6a:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    6d6c:	80 81       	ld	r24, Z
    6d6e:	89 60       	ori	r24, 0x09	; 9
    6d70:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    6d72:	80 91 0c 02 	lds	r24, 0x020C
    6d76:	90 e0       	ldi	r25, 0x00	; 0
    6d78:	90 93 89 00 	sts	0x0089, r25
    6d7c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    6d80:	80 91 0d 02 	lds	r24, 0x020D
    6d84:	90 e0       	ldi	r25, 0x00	; 0
    6d86:	90 93 8b 00 	sts	0x008B, r25
    6d8a:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    6d8e:	80 91 0e 02 	lds	r24, 0x020E
    6d92:	90 e0       	ldi	r25, 0x00	; 0
    6d94:	90 93 8d 00 	sts	0x008D, r25
    6d98:	80 93 8c 00 	sts	0x008C, r24

}
    6d9c:	08 95       	ret

00006d9e <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    6d9e:	81 e0       	ldi	r24, 0x01	; 1
    6da0:	90 91 17 03 	lds	r25, 0x0317
    6da4:	89 1b       	sub	r24, r25
    6da6:	80 93 17 03 	sts	0x0317, r24

	if(blinkState) {
    6daa:	88 23       	and	r24, r24
    6dac:	39 f4       	brne	.+14     	; 0x6dbc <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    6dae:	80 91 80 00 	lds	r24, 0x0080
    6db2:	87 7f       	andi	r24, 0xF7	; 247
    6db4:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    6db8:	2f 98       	cbi	0x05, 7	; 5
    6dba:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    6dbc:	80 91 80 00 	lds	r24, 0x0080
    6dc0:	88 60       	ori	r24, 0x08	; 8
    6dc2:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    6dc6:	8f ef       	ldi	r24, 0xFF	; 255
    6dc8:	90 e0       	ldi	r25, 0x00	; 0
    6dca:	90 93 8d 00 	sts	0x008D, r25
    6dce:	80 93 8c 00 	sts	0x008C, r24
    6dd2:	08 95       	ret

00006dd4 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    6dd4:	88 23       	and	r24, r24
    6dd6:	59 f0       	breq	.+22     	; 0x6dee <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    6dd8:	90 91 80 00 	lds	r25, 0x0080
    6ddc:	90 68       	ori	r25, 0x80	; 128
    6dde:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    6de2:	90 e0       	ldi	r25, 0x00	; 0
    6de4:	90 93 89 00 	sts	0x0089, r25
    6de8:	80 93 88 00 	sts	0x0088, r24
    6dec:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    6dee:	80 91 80 00 	lds	r24, 0x0080
    6df2:	8f 77       	andi	r24, 0x7F	; 127
    6df4:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    6df8:	2d 98       	cbi	0x05, 5	; 5
    6dfa:	08 95       	ret

00006dfc <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    6dfc:	88 23       	and	r24, r24
    6dfe:	59 f0       	breq	.+22     	; 0x6e16 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    6e00:	90 91 80 00 	lds	r25, 0x0080
    6e04:	90 62       	ori	r25, 0x20	; 32
    6e06:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    6e0a:	90 e0       	ldi	r25, 0x00	; 0
    6e0c:	90 93 8b 00 	sts	0x008B, r25
    6e10:	80 93 8a 00 	sts	0x008A, r24
    6e14:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    6e16:	80 91 80 00 	lds	r24, 0x0080
    6e1a:	8f 7d       	andi	r24, 0xDF	; 223
    6e1c:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    6e20:	2e 98       	cbi	0x05, 6	; 5
    6e22:	08 95       	ret

00006e24 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    6e24:	88 23       	and	r24, r24
    6e26:	59 f0       	breq	.+22     	; 0x6e3e <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    6e28:	90 91 80 00 	lds	r25, 0x0080
    6e2c:	98 60       	ori	r25, 0x08	; 8
    6e2e:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    6e32:	90 e0       	ldi	r25, 0x00	; 0
    6e34:	90 93 8d 00 	sts	0x008D, r25
    6e38:	80 93 8c 00 	sts	0x008C, r24
    6e3c:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    6e3e:	80 91 80 00 	lds	r24, 0x0080
    6e42:	87 7f       	andi	r24, 0xF7	; 247
    6e44:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    6e48:	2f 98       	cbi	0x05, 7	; 5
    6e4a:	08 95       	ret

00006e4c <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6e4c:	83 30       	cpi	r24, 0x03	; 3
    6e4e:	09 f4       	brne	.+2      	; 0x6e52 <setGreenLed+0x6>
    6e50:	5a c0       	rjmp	.+180    	; 0x6f06 <setGreenLed+0xba>
    6e52:	84 30       	cpi	r24, 0x04	; 4
    6e54:	80 f0       	brcs	.+32     	; 0x6e76 <setGreenLed+0x2a>
    6e56:	85 30       	cpi	r24, 0x05	; 5
    6e58:	09 f4       	brne	.+2      	; 0x6e5c <setGreenLed+0x10>
    6e5a:	41 c0       	rjmp	.+130    	; 0x6ede <setGreenLed+0x92>
    6e5c:	85 30       	cpi	r24, 0x05	; 5
    6e5e:	d0 f4       	brcc	.+52     	; 0x6e94 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    6e60:	66 23       	and	r22, r22
    6e62:	09 f4       	brne	.+2      	; 0x6e66 <setGreenLed+0x1a>
    6e64:	68 c0       	rjmp	.+208    	; 0x6f36 <setGreenLed+0xea>
    6e66:	80 91 0b 01 	lds	r24, 0x010B
    6e6a:	8f 7e       	andi	r24, 0xEF	; 239
    6e6c:	80 93 0b 01 	sts	0x010B, r24
    6e70:	80 91 0b 01 	lds	r24, 0x010B
    6e74:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6e76:	81 30       	cpi	r24, 0x01	; 1
    6e78:	e1 f1       	breq	.+120    	; 0x6ef2 <setGreenLed+0xa6>
    6e7a:	82 30       	cpi	r24, 0x02	; 2
    6e7c:	80 f0       	brcs	.+32     	; 0x6e9e <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    6e7e:	66 23       	and	r22, r22
    6e80:	09 f4       	brne	.+2      	; 0x6e84 <setGreenLed+0x38>
    6e82:	46 c0       	rjmp	.+140    	; 0x6f10 <setGreenLed+0xc4>
    6e84:	80 91 0b 01 	lds	r24, 0x010B
    6e88:	8b 7f       	andi	r24, 0xFB	; 251
    6e8a:	80 93 0b 01 	sts	0x010B, r24
    6e8e:	80 91 0b 01 	lds	r24, 0x010B
    6e92:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6e94:	86 30       	cpi	r24, 0x06	; 6
    6e96:	c9 f0       	breq	.+50     	; 0x6eca <setGreenLed+0x7e>
    6e98:	87 30       	cpi	r24, 0x07	; 7
    6e9a:	61 f0       	breq	.+24     	; 0x6eb4 <setGreenLed+0x68>
    6e9c:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    6e9e:	66 23       	and	r22, r22
    6ea0:	09 f4       	brne	.+2      	; 0x6ea4 <setGreenLed+0x58>
    6ea2:	51 c0       	rjmp	.+162    	; 0x6f46 <setGreenLed+0xfa>
    6ea4:	80 91 0b 01 	lds	r24, 0x010B
    6ea8:	8e 7f       	andi	r24, 0xFE	; 254
    6eaa:	80 93 0b 01 	sts	0x010B, r24
    6eae:	80 91 0b 01 	lds	r24, 0x010B
    6eb2:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    6eb4:	66 23       	and	r22, r22
    6eb6:	09 f0       	breq	.+2      	; 0x6eba <setGreenLed+0x6e>
    6eb8:	5e c0       	rjmp	.+188    	; 0x6f76 <setGreenLed+0x12a>
    6eba:	80 91 0b 01 	lds	r24, 0x010B
    6ebe:	80 68       	ori	r24, 0x80	; 128
    6ec0:	80 93 0b 01 	sts	0x010B, r24
    6ec4:	80 91 0b 01 	lds	r24, 0x010B
    6ec8:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    6eca:	66 23       	and	r22, r22
    6ecc:	49 f1       	breq	.+82     	; 0x6f20 <setGreenLed+0xd4>
    6ece:	80 91 0b 01 	lds	r24, 0x010B
    6ed2:	8f 7b       	andi	r24, 0xBF	; 191
    6ed4:	80 93 0b 01 	sts	0x010B, r24
    6ed8:	80 91 0b 01 	lds	r24, 0x010B
    6edc:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    6ede:	66 23       	and	r22, r22
    6ee0:	d1 f1       	breq	.+116    	; 0x6f56 <setGreenLed+0x10a>
    6ee2:	80 91 0b 01 	lds	r24, 0x010B
    6ee6:	8f 7d       	andi	r24, 0xDF	; 223
    6ee8:	80 93 0b 01 	sts	0x010B, r24
    6eec:	80 91 0b 01 	lds	r24, 0x010B
    6ef0:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    6ef2:	66 23       	and	r22, r22
    6ef4:	c1 f1       	breq	.+112    	; 0x6f66 <setGreenLed+0x11a>
    6ef6:	80 91 0b 01 	lds	r24, 0x010B
    6efa:	8d 7f       	andi	r24, 0xFD	; 253
    6efc:	80 93 0b 01 	sts	0x010B, r24
    6f00:	80 91 0b 01 	lds	r24, 0x010B
    6f04:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    6f06:	66 23       	and	r22, r22
    6f08:	99 f0       	breq	.+38     	; 0x6f30 <setGreenLed+0xe4>
    6f0a:	a3 98       	cbi	0x14, 3	; 20
    6f0c:	84 b3       	in	r24, 0x14	; 20
    6f0e:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    6f10:	80 91 0b 01 	lds	r24, 0x010B
    6f14:	84 60       	ori	r24, 0x04	; 4
    6f16:	80 93 0b 01 	sts	0x010B, r24
    6f1a:	80 91 0b 01 	lds	r24, 0x010B
    6f1e:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    6f20:	80 91 0b 01 	lds	r24, 0x010B
    6f24:	80 64       	ori	r24, 0x40	; 64
    6f26:	80 93 0b 01 	sts	0x010B, r24
    6f2a:	80 91 0b 01 	lds	r24, 0x010B
    6f2e:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    6f30:	a3 9a       	sbi	0x14, 3	; 20
    6f32:	84 b3       	in	r24, 0x14	; 20
    6f34:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    6f36:	80 91 0b 01 	lds	r24, 0x010B
    6f3a:	80 61       	ori	r24, 0x10	; 16
    6f3c:	80 93 0b 01 	sts	0x010B, r24
    6f40:	80 91 0b 01 	lds	r24, 0x010B
    6f44:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    6f46:	80 91 0b 01 	lds	r24, 0x010B
    6f4a:	81 60       	ori	r24, 0x01	; 1
    6f4c:	80 93 0b 01 	sts	0x010B, r24
    6f50:	80 91 0b 01 	lds	r24, 0x010B
    6f54:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    6f56:	80 91 0b 01 	lds	r24, 0x010B
    6f5a:	80 62       	ori	r24, 0x20	; 32
    6f5c:	80 93 0b 01 	sts	0x010B, r24
    6f60:	80 91 0b 01 	lds	r24, 0x010B
    6f64:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    6f66:	80 91 0b 01 	lds	r24, 0x010B
    6f6a:	82 60       	ori	r24, 0x02	; 2
    6f6c:	80 93 0b 01 	sts	0x010B, r24
    6f70:	80 91 0b 01 	lds	r24, 0x010B
    6f74:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    6f76:	80 91 0b 01 	lds	r24, 0x010B
    6f7a:	8f 77       	andi	r24, 0x7F	; 127
    6f7c:	80 93 0b 01 	sts	0x010B, r24
    6f80:	80 91 0b 01 	lds	r24, 0x010B
    6f84:	08 95       	ret

00006f86 <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    6f86:	eb e0       	ldi	r30, 0x0B	; 11
    6f88:	f1 e0       	ldi	r31, 0x01	; 1
    6f8a:	80 81       	ld	r24, Z
    6f8c:	81 60       	ori	r24, 0x01	; 1
    6f8e:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    6f90:	80 81       	ld	r24, Z
    6f92:	82 60       	ori	r24, 0x02	; 2
    6f94:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    6f96:	80 81       	ld	r24, Z
    6f98:	84 60       	ori	r24, 0x04	; 4
    6f9a:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    6f9c:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    6f9e:	80 81       	ld	r24, Z
    6fa0:	80 61       	ori	r24, 0x10	; 16
    6fa2:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    6fa4:	80 81       	ld	r24, Z
    6fa6:	80 62       	ori	r24, 0x20	; 32
    6fa8:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    6faa:	80 81       	ld	r24, Z
    6fac:	80 64       	ori	r24, 0x40	; 64
    6fae:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    6fb0:	80 81       	ld	r24, Z
    6fb2:	80 68       	ori	r24, 0x80	; 128
    6fb4:	80 83       	st	Z, r24

}
    6fb6:	08 95       	ret

00006fb8 <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    6fb8:	eb e0       	ldi	r30, 0x0B	; 11
    6fba:	f1 e0       	ldi	r31, 0x01	; 1
    6fbc:	80 81       	ld	r24, Z
    6fbe:	8e 7f       	andi	r24, 0xFE	; 254
    6fc0:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    6fc2:	80 81       	ld	r24, Z
    6fc4:	8d 7f       	andi	r24, 0xFD	; 253
    6fc6:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    6fc8:	80 81       	ld	r24, Z
    6fca:	8b 7f       	andi	r24, 0xFB	; 251
    6fcc:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    6fce:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    6fd0:	80 81       	ld	r24, Z
    6fd2:	8f 7e       	andi	r24, 0xEF	; 239
    6fd4:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    6fd6:	80 81       	ld	r24, Z
    6fd8:	8f 7d       	andi	r24, 0xDF	; 223
    6fda:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    6fdc:	80 81       	ld	r24, Z
    6fde:	8f 7b       	andi	r24, 0xBF	; 191
    6fe0:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    6fe2:	80 81       	ld	r24, Z
    6fe4:	8f 77       	andi	r24, 0x7F	; 127
    6fe6:	80 83       	st	Z, r24

}
    6fe8:	08 95       	ret

00006fea <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    6fea:	0e 94 4c 1b 	call	0x3698	; 0x3698 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6fee:	80 91 14 02 	lds	r24, 0x0214
    6ff2:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6ff6:	88 23       	and	r24, r24
    6ff8:	49 f4       	brne	.+18     	; 0x700c <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    6ffa:	86 e1       	ldi	r24, 0x16	; 22
    6ffc:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    7000:	85 e4       	ldi	r24, 0x45	; 69
    7002:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7006:	0e 94 c7 1b 	call	0x378e	; 0x378e <i2c_stop>
    700a:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    700c:	0e 94 c7 1b 	call	0x378e	; 0x378e <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    7010:	86 ea       	ldi	r24, 0xA6	; 166
    7012:	90 e0       	ldi	r25, 0x00	; 0
    7014:	90 93 15 02 	sts	0x0215, r25
    7018:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    701c:	86 ea       	ldi	r24, 0xA6	; 166
    701e:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7022:	88 23       	and	r24, r24
    7024:	41 f5       	brne	.+80     	; 0x7076 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    7026:	8d e2       	ldi	r24, 0x2D	; 45
    7028:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
        i2c_write(0x08);	// measurement mode
    702c:	88 e0       	ldi	r24, 0x08	; 8
    702e:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7032:	0e 94 c7 1b 	call	0x378e	; 0x378e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7036:	80 91 14 02 	lds	r24, 0x0214
    703a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    703e:	88 23       	and	r24, r24
    7040:	d1 f4       	brne	.+52     	; 0x7076 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    7042:	81 e3       	ldi	r24, 0x31	; 49
    7044:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    7048:	80 e0       	ldi	r24, 0x00	; 0
    704a:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    704e:	0e 94 c7 1b 	call	0x378e	; 0x378e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7052:	80 91 14 02 	lds	r24, 0x0214
    7056:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    705a:	88 23       	and	r24, r24
    705c:	61 f4       	brne	.+24     	; 0x7076 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    705e:	8c e2       	ldi	r24, 0x2C	; 44
    7060:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    7064:	89 e0       	ldi	r24, 0x09	; 9
    7066:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    706a:	0e 94 c7 1b 	call	0x378e	; 0x378e <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    706e:	81 e0       	ldi	r24, 0x01	; 1
    7070:	80 93 27 04 	sts	0x0427, r24
    7074:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7076:	0e 94 c7 1b 	call	0x378e	; 0x378e <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    707a:	82 e0       	ldi	r24, 0x02	; 2
    707c:	80 93 27 04 	sts	0x0427, r24
    7080:	08 95       	ret

00007082 <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7082:	80 91 14 02 	lds	r24, 0x0214
    7086:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    708a:	88 23       	and	r24, r24
    708c:	51 f4       	brne	.+20     	; 0x70a2 <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    708e:	86 e1       	ldi	r24, 0x16	; 22
    7090:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    7094:	85 e4       	ldi	r24, 0x45	; 69
    7096:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    709a:	0e 94 c7 1b 	call	0x378e	; 0x378e <i2c_stop>
    }

	return 0;				// configuration ok
    709e:	80 e0       	ldi	r24, 0x00	; 0

}
    70a0:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    70a2:	0e 94 c7 1b 	call	0x378e	; 0x378e <i2c_stop>
		return 1;
    70a6:	81 e0       	ldi	r24, 0x01	; 1
    70a8:	08 95       	ret

000070aa <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    70aa:	80 91 14 02 	lds	r24, 0x0214
    70ae:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    70b2:	88 23       	and	r24, r24
    70b4:	31 f5       	brne	.+76     	; 0x7102 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    70b6:	8d e2       	ldi	r24, 0x2D	; 45
    70b8:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
        i2c_write(0x08);	// measurement mode
    70bc:	88 e0       	ldi	r24, 0x08	; 8
    70be:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    70c2:	0e 94 c7 1b 	call	0x378e	; 0x378e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    70c6:	80 91 14 02 	lds	r24, 0x0214
    70ca:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    70ce:	88 23       	and	r24, r24
    70d0:	c1 f4       	brne	.+48     	; 0x7102 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    70d2:	81 e3       	ldi	r24, 0x31	; 49
    70d4:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    70d8:	80 e0       	ldi	r24, 0x00	; 0
    70da:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    70de:	0e 94 c7 1b 	call	0x378e	; 0x378e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    70e2:	80 91 14 02 	lds	r24, 0x0214
    70e6:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    70ea:	88 23       	and	r24, r24
    70ec:	51 f4       	brne	.+20     	; 0x7102 <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    70ee:	8c e2       	ldi	r24, 0x2C	; 44
    70f0:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    70f4:	89 e0       	ldi	r24, 0x09	; 9
    70f6:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    70fa:	0e 94 c7 1b 	call	0x378e	; 0x378e <i2c_stop>
    }

	return 0;
    70fe:	80 e0       	ldi	r24, 0x00	; 0

}
    7100:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7102:	0e 94 c7 1b 	call	0x378e	; 0x378e <i2c_stop>
		return 1;
    7106:	81 e0       	ldi	r24, 0x01	; 1
    7108:	08 95       	ret

0000710a <readAccelXY>:

	return 0;

}

void readAccelXY() {
    710a:	ff 92       	push	r15
    710c:	0f 93       	push	r16
    710e:	1f 93       	push	r17
    7110:	df 93       	push	r29
    7112:	cf 93       	push	r28
    7114:	0f 92       	push	r0
    7116:	cd b7       	in	r28, 0x3d	; 61
    7118:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    711a:	80 91 27 04 	lds	r24, 0x0427
    711e:	88 23       	and	r24, r24
    7120:	91 f0       	breq	.+36     	; 0x7146 <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    7122:	81 30       	cpi	r24, 0x01	; 1
    7124:	09 f4       	brne	.+2      	; 0x7128 <readAccelXY+0x1e>
    7126:	88 c0       	rjmp	.+272    	; 0x7238 <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    7128:	10 92 29 04 	sts	0x0429, r1
    712c:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    7130:	10 92 2b 04 	sts	0x042B, r1
    7134:	10 92 2a 04 	sts	0x042A, r1

	}

}
    7138:	0f 90       	pop	r0
    713a:	cf 91       	pop	r28
    713c:	df 91       	pop	r29
    713e:	1f 91       	pop	r17
    7140:	0f 91       	pop	r16
    7142:	ff 90       	pop	r15
    7144:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7146:	80 91 14 02 	lds	r24, 0x0214
    714a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    714e:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    7150:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7154:	80 91 14 02 	lds	r24, 0x0214
    7158:	8f 5f       	subi	r24, 0xFF	; 255
    715a:	0e 94 a1 1b 	call	0x3742	; 0x3742 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    715e:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <i2c_readAck>
    7162:	08 2f       	mov	r16, r24
    7164:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <i2c_readAck>
    7168:	f8 2e       	mov	r15, r24
    716a:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <i2c_readAck>
    716e:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    7170:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    7174:	89 83       	std	Y+1, r24	; 0x01
    7176:	0e 94 c7 1b 	call	0x378e	; 0x378e <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    717a:	90 91 8b 05 	lds	r25, 0x058B
    717e:	89 81       	ldd	r24, Y+1	; 0x01
    7180:	99 23       	and	r25, r25
    7182:	39 f1       	breq	.+78     	; 0x71d2 <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    7184:	4f 2d       	mov	r20, r15
    7186:	55 27       	eor	r21, r21
    7188:	47 fd       	sbrc	r20, 7
    718a:	50 95       	com	r21
    718c:	54 2f       	mov	r21, r20
    718e:	44 27       	eor	r20, r20
    7190:	60 2f       	mov	r22, r16
    7192:	77 27       	eor	r23, r23
    7194:	67 fd       	sbrc	r22, 7
    7196:	70 95       	com	r23
    7198:	46 2b       	or	r20, r22
    719a:	57 2b       	or	r21, r23
    719c:	50 93 29 04 	sts	0x0429, r21
    71a0:	40 93 28 04 	sts	0x0428, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    71a4:	28 2f       	mov	r18, r24
    71a6:	33 27       	eor	r19, r19
    71a8:	27 fd       	sbrc	r18, 7
    71aa:	30 95       	com	r19
    71ac:	32 2f       	mov	r19, r18
    71ae:	22 27       	eor	r18, r18
    71b0:	81 2f       	mov	r24, r17
    71b2:	99 27       	eor	r25, r25
    71b4:	87 fd       	sbrc	r24, 7
    71b6:	90 95       	com	r25
    71b8:	28 2b       	or	r18, r24
    71ba:	39 2b       	or	r19, r25
    71bc:	30 93 2b 04 	sts	0x042B, r19
    71c0:	20 93 2a 04 	sts	0x042A, r18
		accX = 0;
		accY = 0;

	}

}
    71c4:	0f 90       	pop	r0
    71c6:	cf 91       	pop	r28
    71c8:	df 91       	pop	r29
    71ca:	1f 91       	pop	r17
    71cc:	0f 91       	pop	r16
    71ce:	ff 90       	pop	r15
    71d0:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    71d2:	4f 2d       	mov	r20, r15
    71d4:	55 27       	eor	r21, r21
    71d6:	47 fd       	sbrc	r20, 7
    71d8:	50 95       	com	r21
    71da:	54 2f       	mov	r21, r20
    71dc:	44 27       	eor	r20, r20
    71de:	60 2f       	mov	r22, r16
    71e0:	77 27       	eor	r23, r23
    71e2:	67 fd       	sbrc	r22, 7
    71e4:	70 95       	com	r23
    71e6:	46 2b       	or	r20, r22
    71e8:	57 2b       	or	r21, r23
    71ea:	60 91 2e 04 	lds	r22, 0x042E
    71ee:	70 91 2f 04 	lds	r23, 0x042F
    71f2:	46 1b       	sub	r20, r22
    71f4:	57 0b       	sbc	r21, r23
    71f6:	50 93 29 04 	sts	0x0429, r21
    71fa:	40 93 28 04 	sts	0x0428, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    71fe:	28 2f       	mov	r18, r24
    7200:	33 27       	eor	r19, r19
    7202:	27 fd       	sbrc	r18, 7
    7204:	30 95       	com	r19
    7206:	32 2f       	mov	r19, r18
    7208:	22 27       	eor	r18, r18
    720a:	81 2f       	mov	r24, r17
    720c:	99 27       	eor	r25, r25
    720e:	87 fd       	sbrc	r24, 7
    7210:	90 95       	com	r25
    7212:	28 2b       	or	r18, r24
    7214:	39 2b       	or	r19, r25
    7216:	80 91 30 04 	lds	r24, 0x0430
    721a:	90 91 31 04 	lds	r25, 0x0431
    721e:	28 1b       	sub	r18, r24
    7220:	39 0b       	sbc	r19, r25
    7222:	30 93 2b 04 	sts	0x042B, r19
    7226:	20 93 2a 04 	sts	0x042A, r18
		accX = 0;
		accY = 0;

	}

}
    722a:	0f 90       	pop	r0
    722c:	cf 91       	pop	r28
    722e:	df 91       	pop	r29
    7230:	1f 91       	pop	r17
    7232:	0f 91       	pop	r16
    7234:	ff 90       	pop	r15
    7236:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7238:	80 91 14 02 	lds	r24, 0x0214
    723c:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7240:	82 e3       	ldi	r24, 0x32	; 50
    7242:	86 cf       	rjmp	.-244    	; 0x7150 <readAccelXY+0x46>

00007244 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    7244:	df 93       	push	r29
    7246:	cf 93       	push	r28
    7248:	00 d0       	rcall	.+0      	; 0x724a <readAccelXYZ+0x6>
    724a:	00 d0       	rcall	.+0      	; 0x724c <readAccelXYZ+0x8>
    724c:	cd b7       	in	r28, 0x3d	; 61
    724e:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    7250:	80 91 27 04 	lds	r24, 0x0427
    7254:	88 23       	and	r24, r24
    7256:	c1 f0       	breq	.+48     	; 0x7288 <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    7258:	81 30       	cpi	r24, 0x01	; 1
    725a:	09 f4       	brne	.+2      	; 0x725e <readAccelXYZ+0x1a>
    725c:	ad c0       	rjmp	.+346    	; 0x73b8 <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    725e:	10 92 29 04 	sts	0x0429, r1
    7262:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    7266:	10 92 2b 04 	sts	0x042B, r1
    726a:	10 92 2a 04 	sts	0x042A, r1
		accZ = 0;
    726e:	10 92 2d 04 	sts	0x042D, r1
    7272:	10 92 2c 04 	sts	0x042C, r1

	}

}
    7276:	26 96       	adiw	r28, 0x06	; 6
    7278:	0f b6       	in	r0, 0x3f	; 63
    727a:	f8 94       	cli
    727c:	de bf       	out	0x3e, r29	; 62
    727e:	0f be       	out	0x3f, r0	; 63
    7280:	cd bf       	out	0x3d, r28	; 61
    7282:	cf 91       	pop	r28
    7284:	df 91       	pop	r29
    7286:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7288:	80 91 14 02 	lds	r24, 0x0214
    728c:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    7290:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    7292:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7296:	80 91 14 02 	lds	r24, 0x0214
    729a:	8f 5f       	subi	r24, 0xFF	; 255
    729c:	0e 94 a1 1b 	call	0x3742	; 0x3742 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    72a0:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <i2c_readAck>
    72a4:	89 83       	std	Y+1, r24	; 0x01
    72a6:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <i2c_readAck>
    72aa:	8a 83       	std	Y+2, r24	; 0x02
    72ac:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <i2c_readAck>
    72b0:	8b 83       	std	Y+3, r24	; 0x03
    72b2:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <i2c_readAck>
    72b6:	8c 83       	std	Y+4, r24	; 0x04
    72b8:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <i2c_readAck>
    72bc:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    72be:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <i2c_readNak>
    72c2:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    72c4:	0e 94 c7 1b 	call	0x378e	; 0x378e <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    72c8:	80 91 8b 05 	lds	r24, 0x058B
    72cc:	88 23       	and	r24, r24
    72ce:	89 f1       	breq	.+98     	; 0x7332 <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    72d0:	8a 81       	ldd	r24, Y+2	; 0x02
    72d2:	99 27       	eor	r25, r25
    72d4:	87 fd       	sbrc	r24, 7
    72d6:	90 95       	com	r25
    72d8:	98 2f       	mov	r25, r24
    72da:	88 27       	eor	r24, r24
    72dc:	29 81       	ldd	r18, Y+1	; 0x01
    72de:	33 27       	eor	r19, r19
    72e0:	27 fd       	sbrc	r18, 7
    72e2:	30 95       	com	r19
    72e4:	82 2b       	or	r24, r18
    72e6:	93 2b       	or	r25, r19
    72e8:	90 93 29 04 	sts	0x0429, r25
    72ec:	80 93 28 04 	sts	0x0428, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    72f0:	8c 81       	ldd	r24, Y+4	; 0x04
    72f2:	99 27       	eor	r25, r25
    72f4:	87 fd       	sbrc	r24, 7
    72f6:	90 95       	com	r25
    72f8:	98 2f       	mov	r25, r24
    72fa:	88 27       	eor	r24, r24
    72fc:	2b 81       	ldd	r18, Y+3	; 0x03
    72fe:	33 27       	eor	r19, r19
    7300:	27 fd       	sbrc	r18, 7
    7302:	30 95       	com	r19
    7304:	82 2b       	or	r24, r18
    7306:	93 2b       	or	r25, r19
    7308:	90 93 2b 04 	sts	0x042B, r25
    730c:	80 93 2a 04 	sts	0x042A, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    7310:	8e 81       	ldd	r24, Y+6	; 0x06
    7312:	99 27       	eor	r25, r25
    7314:	87 fd       	sbrc	r24, 7
    7316:	90 95       	com	r25
    7318:	98 2f       	mov	r25, r24
    731a:	88 27       	eor	r24, r24
    731c:	2d 81       	ldd	r18, Y+5	; 0x05
    731e:	33 27       	eor	r19, r19
    7320:	27 fd       	sbrc	r18, 7
    7322:	30 95       	com	r19
    7324:	82 2b       	or	r24, r18
    7326:	93 2b       	or	r25, r19
    7328:	90 93 2d 04 	sts	0x042D, r25
    732c:	80 93 2c 04 	sts	0x042C, r24
    7330:	a2 cf       	rjmp	.-188    	; 0x7276 <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    7332:	8a 81       	ldd	r24, Y+2	; 0x02
    7334:	99 27       	eor	r25, r25
    7336:	87 fd       	sbrc	r24, 7
    7338:	90 95       	com	r25
    733a:	98 2f       	mov	r25, r24
    733c:	88 27       	eor	r24, r24
    733e:	29 81       	ldd	r18, Y+1	; 0x01
    7340:	33 27       	eor	r19, r19
    7342:	27 fd       	sbrc	r18, 7
    7344:	30 95       	com	r19
    7346:	82 2b       	or	r24, r18
    7348:	93 2b       	or	r25, r19
    734a:	20 91 2e 04 	lds	r18, 0x042E
    734e:	30 91 2f 04 	lds	r19, 0x042F
    7352:	82 1b       	sub	r24, r18
    7354:	93 0b       	sbc	r25, r19
    7356:	90 93 29 04 	sts	0x0429, r25
    735a:	80 93 28 04 	sts	0x0428, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    735e:	8c 81       	ldd	r24, Y+4	; 0x04
    7360:	99 27       	eor	r25, r25
    7362:	87 fd       	sbrc	r24, 7
    7364:	90 95       	com	r25
    7366:	98 2f       	mov	r25, r24
    7368:	88 27       	eor	r24, r24
    736a:	2b 81       	ldd	r18, Y+3	; 0x03
    736c:	33 27       	eor	r19, r19
    736e:	27 fd       	sbrc	r18, 7
    7370:	30 95       	com	r19
    7372:	82 2b       	or	r24, r18
    7374:	93 2b       	or	r25, r19
    7376:	20 91 30 04 	lds	r18, 0x0430
    737a:	30 91 31 04 	lds	r19, 0x0431
    737e:	82 1b       	sub	r24, r18
    7380:	93 0b       	sbc	r25, r19
    7382:	90 93 2b 04 	sts	0x042B, r25
    7386:	80 93 2a 04 	sts	0x042A, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    738a:	8e 81       	ldd	r24, Y+6	; 0x06
    738c:	99 27       	eor	r25, r25
    738e:	87 fd       	sbrc	r24, 7
    7390:	90 95       	com	r25
    7392:	98 2f       	mov	r25, r24
    7394:	88 27       	eor	r24, r24
    7396:	2d 81       	ldd	r18, Y+5	; 0x05
    7398:	33 27       	eor	r19, r19
    739a:	27 fd       	sbrc	r18, 7
    739c:	30 95       	com	r19
    739e:	82 2b       	or	r24, r18
    73a0:	93 2b       	or	r25, r19
    73a2:	20 91 32 04 	lds	r18, 0x0432
    73a6:	30 91 33 04 	lds	r19, 0x0433
    73aa:	82 1b       	sub	r24, r18
    73ac:	93 0b       	sbc	r25, r19
    73ae:	90 93 2d 04 	sts	0x042D, r25
    73b2:	80 93 2c 04 	sts	0x042C, r24
    73b6:	5f cf       	rjmp	.-322    	; 0x7276 <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    73b8:	80 91 14 02 	lds	r24, 0x0214
    73bc:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    73c0:	82 e3       	ldi	r24, 0x32	; 50
    73c2:	67 cf       	rjmp	.-306    	; 0x7292 <readAccelXYZ+0x4e>

000073c4 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    73c4:	cf 93       	push	r28
    73c6:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    73c8:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    73cc:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    73d0:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    73d4:	80 e0       	ldi	r24, 0x00	; 0
    73d6:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <updateRedLed>
	updateGreenLed(pwm_green);
    73da:	80 91 0d 02 	lds	r24, 0x020D
    73de:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <updateGreenLed>
	updateBlueLed(pwm_blue);
    73e2:	80 91 0e 02 	lds	r24, 0x020E
    73e6:	0e 94 12 37 	call	0x6e24	; 0x6e24 <updateBlueLed>

	calibrationCycle = 0;
    73ea:	10 92 4a 04 	sts	0x044A, r1
    73ee:	10 92 49 04 	sts	0x0449, r1
	startCalibration = 1;
    73f2:	81 e0       	ldi	r24, 0x01	; 1
    73f4:	80 93 8b 05 	sts	0x058B, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    73f8:	c1 e0       	ldi	r28, 0x01	; 1
    73fa:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    73fc:	0e 94 22 39 	call	0x7244	; 0x7244 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    7400:	20 91 49 04 	lds	r18, 0x0449
    7404:	30 91 4a 04 	lds	r19, 0x044A
    7408:	21 31       	cpi	r18, 0x11	; 17
    740a:	31 05       	cpc	r19, r1
    740c:	0c f4       	brge	.+2      	; 0x7410 <calibrateSensors+0x4c>
    740e:	35 c1       	rjmp	.+618    	; 0x767a <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    7410:	80 91 87 02 	lds	r24, 0x0287
    7414:	90 91 88 02 	lds	r25, 0x0288
    7418:	a0 91 89 02 	lds	r26, 0x0289
    741c:	b0 91 8a 02 	lds	r27, 0x028A
    7420:	54 e0       	ldi	r21, 0x04	; 4
    7422:	b6 95       	lsr	r27
    7424:	a7 95       	ror	r26
    7426:	97 95       	ror	r25
    7428:	87 95       	ror	r24
    742a:	5a 95       	dec	r21
    742c:	d1 f7       	brne	.-12     	; 0x7422 <calibrateSensors+0x5e>
    742e:	90 93 70 02 	sts	0x0270, r25
    7432:	80 93 6f 02 	sts	0x026F, r24
    7436:	80 91 8b 02 	lds	r24, 0x028B
    743a:	90 91 8c 02 	lds	r25, 0x028C
    743e:	a0 91 8d 02 	lds	r26, 0x028D
    7442:	b0 91 8e 02 	lds	r27, 0x028E
    7446:	44 e0       	ldi	r20, 0x04	; 4
    7448:	b6 95       	lsr	r27
    744a:	a7 95       	ror	r26
    744c:	97 95       	ror	r25
    744e:	87 95       	ror	r24
    7450:	4a 95       	dec	r20
    7452:	d1 f7       	brne	.-12     	; 0x7448 <calibrateSensors+0x84>
    7454:	90 93 72 02 	sts	0x0272, r25
    7458:	80 93 71 02 	sts	0x0271, r24
    745c:	80 91 8f 02 	lds	r24, 0x028F
    7460:	90 91 90 02 	lds	r25, 0x0290
    7464:	a0 91 91 02 	lds	r26, 0x0291
    7468:	b0 91 92 02 	lds	r27, 0x0292
    746c:	34 e0       	ldi	r19, 0x04	; 4
    746e:	b6 95       	lsr	r27
    7470:	a7 95       	ror	r26
    7472:	97 95       	ror	r25
    7474:	87 95       	ror	r24
    7476:	3a 95       	dec	r19
    7478:	d1 f7       	brne	.-12     	; 0x746e <calibrateSensors+0xaa>
    747a:	90 93 74 02 	sts	0x0274, r25
    747e:	80 93 73 02 	sts	0x0273, r24
    7482:	80 91 93 02 	lds	r24, 0x0293
    7486:	90 91 94 02 	lds	r25, 0x0294
    748a:	a0 91 95 02 	lds	r26, 0x0295
    748e:	b0 91 96 02 	lds	r27, 0x0296
    7492:	24 e0       	ldi	r18, 0x04	; 4
    7494:	b6 95       	lsr	r27
    7496:	a7 95       	ror	r26
    7498:	97 95       	ror	r25
    749a:	87 95       	ror	r24
    749c:	2a 95       	dec	r18
    749e:	d1 f7       	brne	.-12     	; 0x7494 <calibrateSensors+0xd0>
    74a0:	90 93 76 02 	sts	0x0276, r25
    74a4:	80 93 75 02 	sts	0x0275, r24
    74a8:	80 91 97 02 	lds	r24, 0x0297
    74ac:	90 91 98 02 	lds	r25, 0x0298
    74b0:	a0 91 99 02 	lds	r26, 0x0299
    74b4:	b0 91 9a 02 	lds	r27, 0x029A
    74b8:	f4 e0       	ldi	r31, 0x04	; 4
    74ba:	b6 95       	lsr	r27
    74bc:	a7 95       	ror	r26
    74be:	97 95       	ror	r25
    74c0:	87 95       	ror	r24
    74c2:	fa 95       	dec	r31
    74c4:	d1 f7       	brne	.-12     	; 0x74ba <calibrateSensors+0xf6>
    74c6:	90 93 78 02 	sts	0x0278, r25
    74ca:	80 93 77 02 	sts	0x0277, r24
    74ce:	80 91 9b 02 	lds	r24, 0x029B
    74d2:	90 91 9c 02 	lds	r25, 0x029C
    74d6:	a0 91 9d 02 	lds	r26, 0x029D
    74da:	b0 91 9e 02 	lds	r27, 0x029E
    74de:	e4 e0       	ldi	r30, 0x04	; 4
    74e0:	b6 95       	lsr	r27
    74e2:	a7 95       	ror	r26
    74e4:	97 95       	ror	r25
    74e6:	87 95       	ror	r24
    74e8:	ea 95       	dec	r30
    74ea:	d1 f7       	brne	.-12     	; 0x74e0 <calibrateSensors+0x11c>
    74ec:	90 93 7a 02 	sts	0x027A, r25
    74f0:	80 93 79 02 	sts	0x0279, r24
    74f4:	80 91 9f 02 	lds	r24, 0x029F
    74f8:	90 91 a0 02 	lds	r25, 0x02A0
    74fc:	a0 91 a1 02 	lds	r26, 0x02A1
    7500:	b0 91 a2 02 	lds	r27, 0x02A2
    7504:	74 e0       	ldi	r23, 0x04	; 4
    7506:	b6 95       	lsr	r27
    7508:	a7 95       	ror	r26
    750a:	97 95       	ror	r25
    750c:	87 95       	ror	r24
    750e:	7a 95       	dec	r23
    7510:	d1 f7       	brne	.-12     	; 0x7506 <calibrateSensors+0x142>
    7512:	90 93 7c 02 	sts	0x027C, r25
    7516:	80 93 7b 02 	sts	0x027B, r24
    751a:	80 91 a3 02 	lds	r24, 0x02A3
    751e:	90 91 a4 02 	lds	r25, 0x02A4
    7522:	a0 91 a5 02 	lds	r26, 0x02A5
    7526:	b0 91 a6 02 	lds	r27, 0x02A6
    752a:	64 e0       	ldi	r22, 0x04	; 4
    752c:	b6 95       	lsr	r27
    752e:	a7 95       	ror	r26
    7530:	97 95       	ror	r25
    7532:	87 95       	ror	r24
    7534:	6a 95       	dec	r22
    7536:	d1 f7       	brne	.-12     	; 0x752c <calibrateSensors+0x168>
    7538:	90 93 7e 02 	sts	0x027E, r25
    753c:	80 93 7d 02 	sts	0x027D, r24
    7540:	80 91 ab 02 	lds	r24, 0x02AB
    7544:	90 91 ac 02 	lds	r25, 0x02AC
    7548:	a0 91 ad 02 	lds	r26, 0x02AD
    754c:	b0 91 ae 02 	lds	r27, 0x02AE
    7550:	54 e0       	ldi	r21, 0x04	; 4
    7552:	b6 95       	lsr	r27
    7554:	a7 95       	ror	r26
    7556:	97 95       	ror	r25
    7558:	87 95       	ror	r24
    755a:	5a 95       	dec	r21
    755c:	d1 f7       	brne	.-12     	; 0x7552 <calibrateSensors+0x18e>
    755e:	9c 01       	movw	r18, r24
    7560:	80 91 af 02 	lds	r24, 0x02AF
    7564:	90 91 b0 02 	lds	r25, 0x02B0
    7568:	a0 91 b1 02 	lds	r26, 0x02B1
    756c:	b0 91 b2 02 	lds	r27, 0x02B2
    7570:	44 e0       	ldi	r20, 0x04	; 4
    7572:	b6 95       	lsr	r27
    7574:	a7 95       	ror	r26
    7576:	97 95       	ror	r25
    7578:	87 95       	ror	r24
    757a:	4a 95       	dec	r20
    757c:	d1 f7       	brne	.-12     	; 0x7572 <calibrateSensors+0x1ae>
    757e:	bc 01       	movw	r22, r24
    7580:	80 91 b3 02 	lds	r24, 0x02B3
    7584:	90 91 b4 02 	lds	r25, 0x02B4
    7588:	a0 91 b5 02 	lds	r26, 0x02B5
    758c:	b0 91 b6 02 	lds	r27, 0x02B6
    7590:	f4 e0       	ldi	r31, 0x04	; 4
    7592:	b6 95       	lsr	r27
    7594:	a7 95       	ror	r26
    7596:	97 95       	ror	r25
    7598:	87 95       	ror	r24
    759a:	fa 95       	dec	r31
    759c:	d1 f7       	brne	.-12     	; 0x7592 <calibrateSensors+0x1ce>
    759e:	ac 01       	movw	r20, r24
    75a0:	80 91 a7 02 	lds	r24, 0x02A7
    75a4:	90 91 a8 02 	lds	r25, 0x02A8
    75a8:	a0 91 a9 02 	lds	r26, 0x02A9
    75ac:	b0 91 aa 02 	lds	r27, 0x02AA
    75b0:	e4 e0       	ldi	r30, 0x04	; 4
    75b2:	b6 95       	lsr	r27
    75b4:	a7 95       	ror	r26
    75b6:	97 95       	ror	r25
    75b8:	87 95       	ror	r24
    75ba:	ea 95       	dec	r30
    75bc:	d1 f7       	brne	.-12     	; 0x75b2 <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    75be:	80 50       	subi	r24, 0x00	; 0
    75c0:	92 40       	sbci	r25, 0x02	; 2
    75c2:	90 93 80 02 	sts	0x0280, r25
    75c6:	80 93 7f 02 	sts	0x027F, r24
    75ca:	20 50       	subi	r18, 0x00	; 0
    75cc:	32 40       	sbci	r19, 0x02	; 2
    75ce:	30 93 82 02 	sts	0x0282, r19
    75d2:	20 93 81 02 	sts	0x0281, r18
    75d6:	60 50       	subi	r22, 0x00	; 0
    75d8:	72 40       	sbci	r23, 0x02	; 2
    75da:	70 93 84 02 	sts	0x0284, r23
    75de:	60 93 83 02 	sts	0x0283, r22
    75e2:	40 50       	subi	r20, 0x00	; 0
    75e4:	52 40       	sbci	r21, 0x02	; 2
    75e6:	50 93 86 02 	sts	0x0286, r21
    75ea:	40 93 85 02 	sts	0x0285, r20
			}

			accOffsetX = accOffsetXSum>>4;
    75ee:	80 91 34 04 	lds	r24, 0x0434
    75f2:	90 91 35 04 	lds	r25, 0x0435
    75f6:	95 95       	asr	r25
    75f8:	87 95       	ror	r24
    75fa:	95 95       	asr	r25
    75fc:	87 95       	ror	r24
    75fe:	95 95       	asr	r25
    7600:	87 95       	ror	r24
    7602:	95 95       	asr	r25
    7604:	87 95       	ror	r24
    7606:	90 93 2f 04 	sts	0x042F, r25
    760a:	80 93 2e 04 	sts	0x042E, r24
			accOffsetY = accOffsetYSum>>4;
    760e:	80 91 36 04 	lds	r24, 0x0436
    7612:	90 91 37 04 	lds	r25, 0x0437
    7616:	95 95       	asr	r25
    7618:	87 95       	ror	r24
    761a:	95 95       	asr	r25
    761c:	87 95       	ror	r24
    761e:	95 95       	asr	r25
    7620:	87 95       	ror	r24
    7622:	95 95       	asr	r25
    7624:	87 95       	ror	r24
    7626:	90 93 31 04 	sts	0x0431, r25
    762a:	80 93 30 04 	sts	0x0430, r24
			accOffsetZ = accOffsetZSum>>4;
    762e:	80 91 38 04 	lds	r24, 0x0438
    7632:	90 91 39 04 	lds	r25, 0x0439
    7636:	95 95       	asr	r25
    7638:	87 95       	ror	r24
    763a:	95 95       	asr	r25
    763c:	87 95       	ror	r24
    763e:	95 95       	asr	r25
    7640:	87 95       	ror	r24
    7642:	95 95       	asr	r25
    7644:	87 95       	ror	r24
    7646:	90 93 33 04 	sts	0x0433, r25
    764a:	80 93 32 04 	sts	0x0432, r24

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    764e:	10 92 8b 05 	sts	0x058B, r1

		}

	}

	pwm_red = 255;
    7652:	8f ef       	ldi	r24, 0xFF	; 255
    7654:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    7658:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    765c:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    7660:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <updateRedLed>
	updateGreenLed(pwm_green);
    7664:	80 91 0d 02 	lds	r24, 0x020D
    7668:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <updateGreenLed>
	updateBlueLed(pwm_blue);
    766c:	80 91 0e 02 	lds	r24, 0x020E
    7670:	0e 94 12 37 	call	0x6e24	; 0x6e24 <updateBlueLed>

}
    7674:	df 91       	pop	r29
    7676:	cf 91       	pop	r28
    7678:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    767a:	80 91 be 02 	lds	r24, 0x02BE
    767e:	88 23       	and	r24, r24
    7680:	09 f4       	brne	.+2      	; 0x7684 <calibrateSensors+0x2c0>
    7682:	86 c1       	rjmp	.+780    	; 0x7990 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    7684:	10 92 be 02 	sts	0x02BE, r1

				if(calibrationCycle==0) {		// reset all variables
    7688:	21 15       	cp	r18, r1
    768a:	31 05       	cpc	r19, r1
    768c:	09 f4       	brne	.+2      	; 0x7690 <calibrateSensors+0x2cc>
    768e:	86 c1       	rjmp	.+780    	; 0x799c <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    7690:	80 91 57 02 	lds	r24, 0x0257
    7694:	90 91 58 02 	lds	r25, 0x0258
    7698:	aa 27       	eor	r26, r26
    769a:	97 fd       	sbrc	r25, 7
    769c:	a0 95       	com	r26
    769e:	ba 2f       	mov	r27, r26
    76a0:	40 91 87 02 	lds	r20, 0x0287
    76a4:	50 91 88 02 	lds	r21, 0x0288
    76a8:	60 91 89 02 	lds	r22, 0x0289
    76ac:	70 91 8a 02 	lds	r23, 0x028A
    76b0:	84 0f       	add	r24, r20
    76b2:	95 1f       	adc	r25, r21
    76b4:	a6 1f       	adc	r26, r22
    76b6:	b7 1f       	adc	r27, r23
    76b8:	80 93 87 02 	sts	0x0287, r24
    76bc:	90 93 88 02 	sts	0x0288, r25
    76c0:	a0 93 89 02 	sts	0x0289, r26
    76c4:	b0 93 8a 02 	sts	0x028A, r27
    76c8:	80 91 59 02 	lds	r24, 0x0259
    76cc:	90 91 5a 02 	lds	r25, 0x025A
    76d0:	aa 27       	eor	r26, r26
    76d2:	97 fd       	sbrc	r25, 7
    76d4:	a0 95       	com	r26
    76d6:	ba 2f       	mov	r27, r26
    76d8:	40 91 8b 02 	lds	r20, 0x028B
    76dc:	50 91 8c 02 	lds	r21, 0x028C
    76e0:	60 91 8d 02 	lds	r22, 0x028D
    76e4:	70 91 8e 02 	lds	r23, 0x028E
    76e8:	84 0f       	add	r24, r20
    76ea:	95 1f       	adc	r25, r21
    76ec:	a6 1f       	adc	r26, r22
    76ee:	b7 1f       	adc	r27, r23
    76f0:	80 93 8b 02 	sts	0x028B, r24
    76f4:	90 93 8c 02 	sts	0x028C, r25
    76f8:	a0 93 8d 02 	sts	0x028D, r26
    76fc:	b0 93 8e 02 	sts	0x028E, r27
    7700:	80 91 5b 02 	lds	r24, 0x025B
    7704:	90 91 5c 02 	lds	r25, 0x025C
    7708:	aa 27       	eor	r26, r26
    770a:	97 fd       	sbrc	r25, 7
    770c:	a0 95       	com	r26
    770e:	ba 2f       	mov	r27, r26
    7710:	40 91 8f 02 	lds	r20, 0x028F
    7714:	50 91 90 02 	lds	r21, 0x0290
    7718:	60 91 91 02 	lds	r22, 0x0291
    771c:	70 91 92 02 	lds	r23, 0x0292
    7720:	84 0f       	add	r24, r20
    7722:	95 1f       	adc	r25, r21
    7724:	a6 1f       	adc	r26, r22
    7726:	b7 1f       	adc	r27, r23
    7728:	80 93 8f 02 	sts	0x028F, r24
    772c:	90 93 90 02 	sts	0x0290, r25
    7730:	a0 93 91 02 	sts	0x0291, r26
    7734:	b0 93 92 02 	sts	0x0292, r27
    7738:	80 91 5d 02 	lds	r24, 0x025D
    773c:	90 91 5e 02 	lds	r25, 0x025E
    7740:	aa 27       	eor	r26, r26
    7742:	97 fd       	sbrc	r25, 7
    7744:	a0 95       	com	r26
    7746:	ba 2f       	mov	r27, r26
    7748:	40 91 93 02 	lds	r20, 0x0293
    774c:	50 91 94 02 	lds	r21, 0x0294
    7750:	60 91 95 02 	lds	r22, 0x0295
    7754:	70 91 96 02 	lds	r23, 0x0296
    7758:	84 0f       	add	r24, r20
    775a:	95 1f       	adc	r25, r21
    775c:	a6 1f       	adc	r26, r22
    775e:	b7 1f       	adc	r27, r23
    7760:	80 93 93 02 	sts	0x0293, r24
    7764:	90 93 94 02 	sts	0x0294, r25
    7768:	a0 93 95 02 	sts	0x0295, r26
    776c:	b0 93 96 02 	sts	0x0296, r27
    7770:	80 91 5f 02 	lds	r24, 0x025F
    7774:	90 91 60 02 	lds	r25, 0x0260
    7778:	aa 27       	eor	r26, r26
    777a:	97 fd       	sbrc	r25, 7
    777c:	a0 95       	com	r26
    777e:	ba 2f       	mov	r27, r26
    7780:	40 91 97 02 	lds	r20, 0x0297
    7784:	50 91 98 02 	lds	r21, 0x0298
    7788:	60 91 99 02 	lds	r22, 0x0299
    778c:	70 91 9a 02 	lds	r23, 0x029A
    7790:	84 0f       	add	r24, r20
    7792:	95 1f       	adc	r25, r21
    7794:	a6 1f       	adc	r26, r22
    7796:	b7 1f       	adc	r27, r23
    7798:	80 93 97 02 	sts	0x0297, r24
    779c:	90 93 98 02 	sts	0x0298, r25
    77a0:	a0 93 99 02 	sts	0x0299, r26
    77a4:	b0 93 9a 02 	sts	0x029A, r27
    77a8:	80 91 61 02 	lds	r24, 0x0261
    77ac:	90 91 62 02 	lds	r25, 0x0262
    77b0:	aa 27       	eor	r26, r26
    77b2:	97 fd       	sbrc	r25, 7
    77b4:	a0 95       	com	r26
    77b6:	ba 2f       	mov	r27, r26
    77b8:	40 91 9b 02 	lds	r20, 0x029B
    77bc:	50 91 9c 02 	lds	r21, 0x029C
    77c0:	60 91 9d 02 	lds	r22, 0x029D
    77c4:	70 91 9e 02 	lds	r23, 0x029E
    77c8:	84 0f       	add	r24, r20
    77ca:	95 1f       	adc	r25, r21
    77cc:	a6 1f       	adc	r26, r22
    77ce:	b7 1f       	adc	r27, r23
    77d0:	80 93 9b 02 	sts	0x029B, r24
    77d4:	90 93 9c 02 	sts	0x029C, r25
    77d8:	a0 93 9d 02 	sts	0x029D, r26
    77dc:	b0 93 9e 02 	sts	0x029E, r27
    77e0:	80 91 63 02 	lds	r24, 0x0263
    77e4:	90 91 64 02 	lds	r25, 0x0264
    77e8:	aa 27       	eor	r26, r26
    77ea:	97 fd       	sbrc	r25, 7
    77ec:	a0 95       	com	r26
    77ee:	ba 2f       	mov	r27, r26
    77f0:	40 91 9f 02 	lds	r20, 0x029F
    77f4:	50 91 a0 02 	lds	r21, 0x02A0
    77f8:	60 91 a1 02 	lds	r22, 0x02A1
    77fc:	70 91 a2 02 	lds	r23, 0x02A2
    7800:	84 0f       	add	r24, r20
    7802:	95 1f       	adc	r25, r21
    7804:	a6 1f       	adc	r26, r22
    7806:	b7 1f       	adc	r27, r23
    7808:	80 93 9f 02 	sts	0x029F, r24
    780c:	90 93 a0 02 	sts	0x02A0, r25
    7810:	a0 93 a1 02 	sts	0x02A1, r26
    7814:	b0 93 a2 02 	sts	0x02A2, r27
    7818:	80 91 65 02 	lds	r24, 0x0265
    781c:	90 91 66 02 	lds	r25, 0x0266
    7820:	aa 27       	eor	r26, r26
    7822:	97 fd       	sbrc	r25, 7
    7824:	a0 95       	com	r26
    7826:	ba 2f       	mov	r27, r26
    7828:	40 91 a3 02 	lds	r20, 0x02A3
    782c:	50 91 a4 02 	lds	r21, 0x02A4
    7830:	60 91 a5 02 	lds	r22, 0x02A5
    7834:	70 91 a6 02 	lds	r23, 0x02A6
    7838:	84 0f       	add	r24, r20
    783a:	95 1f       	adc	r25, r21
    783c:	a6 1f       	adc	r26, r22
    783e:	b7 1f       	adc	r27, r23
    7840:	80 93 a3 02 	sts	0x02A3, r24
    7844:	90 93 a4 02 	sts	0x02A4, r25
    7848:	a0 93 a5 02 	sts	0x02A5, r26
    784c:	b0 93 a6 02 	sts	0x02A6, r27
    7850:	80 91 67 02 	lds	r24, 0x0267
    7854:	90 91 68 02 	lds	r25, 0x0268
    7858:	aa 27       	eor	r26, r26
    785a:	97 fd       	sbrc	r25, 7
    785c:	a0 95       	com	r26
    785e:	ba 2f       	mov	r27, r26
    7860:	40 91 a7 02 	lds	r20, 0x02A7
    7864:	50 91 a8 02 	lds	r21, 0x02A8
    7868:	60 91 a9 02 	lds	r22, 0x02A9
    786c:	70 91 aa 02 	lds	r23, 0x02AA
    7870:	84 0f       	add	r24, r20
    7872:	95 1f       	adc	r25, r21
    7874:	a6 1f       	adc	r26, r22
    7876:	b7 1f       	adc	r27, r23
    7878:	80 93 a7 02 	sts	0x02A7, r24
    787c:	90 93 a8 02 	sts	0x02A8, r25
    7880:	a0 93 a9 02 	sts	0x02A9, r26
    7884:	b0 93 aa 02 	sts	0x02AA, r27
    7888:	80 91 69 02 	lds	r24, 0x0269
    788c:	90 91 6a 02 	lds	r25, 0x026A
    7890:	aa 27       	eor	r26, r26
    7892:	97 fd       	sbrc	r25, 7
    7894:	a0 95       	com	r26
    7896:	ba 2f       	mov	r27, r26
    7898:	40 91 ab 02 	lds	r20, 0x02AB
    789c:	50 91 ac 02 	lds	r21, 0x02AC
    78a0:	60 91 ad 02 	lds	r22, 0x02AD
    78a4:	70 91 ae 02 	lds	r23, 0x02AE
    78a8:	84 0f       	add	r24, r20
    78aa:	95 1f       	adc	r25, r21
    78ac:	a6 1f       	adc	r26, r22
    78ae:	b7 1f       	adc	r27, r23
    78b0:	80 93 ab 02 	sts	0x02AB, r24
    78b4:	90 93 ac 02 	sts	0x02AC, r25
    78b8:	a0 93 ad 02 	sts	0x02AD, r26
    78bc:	b0 93 ae 02 	sts	0x02AE, r27
    78c0:	80 91 6b 02 	lds	r24, 0x026B
    78c4:	90 91 6c 02 	lds	r25, 0x026C
    78c8:	aa 27       	eor	r26, r26
    78ca:	97 fd       	sbrc	r25, 7
    78cc:	a0 95       	com	r26
    78ce:	ba 2f       	mov	r27, r26
    78d0:	40 91 af 02 	lds	r20, 0x02AF
    78d4:	50 91 b0 02 	lds	r21, 0x02B0
    78d8:	60 91 b1 02 	lds	r22, 0x02B1
    78dc:	70 91 b2 02 	lds	r23, 0x02B2
    78e0:	84 0f       	add	r24, r20
    78e2:	95 1f       	adc	r25, r21
    78e4:	a6 1f       	adc	r26, r22
    78e6:	b7 1f       	adc	r27, r23
    78e8:	80 93 af 02 	sts	0x02AF, r24
    78ec:	90 93 b0 02 	sts	0x02B0, r25
    78f0:	a0 93 b1 02 	sts	0x02B1, r26
    78f4:	b0 93 b2 02 	sts	0x02B2, r27
    78f8:	80 91 6d 02 	lds	r24, 0x026D
    78fc:	90 91 6e 02 	lds	r25, 0x026E
    7900:	aa 27       	eor	r26, r26
    7902:	97 fd       	sbrc	r25, 7
    7904:	a0 95       	com	r26
    7906:	ba 2f       	mov	r27, r26
    7908:	40 91 b3 02 	lds	r20, 0x02B3
    790c:	50 91 b4 02 	lds	r21, 0x02B4
    7910:	60 91 b5 02 	lds	r22, 0x02B5
    7914:	70 91 b6 02 	lds	r23, 0x02B6
    7918:	84 0f       	add	r24, r20
    791a:	95 1f       	adc	r25, r21
    791c:	a6 1f       	adc	r26, r22
    791e:	b7 1f       	adc	r27, r23
    7920:	80 93 b3 02 	sts	0x02B3, r24
    7924:	90 93 b4 02 	sts	0x02B4, r25
    7928:	a0 93 b5 02 	sts	0x02B5, r26
    792c:	b0 93 b6 02 	sts	0x02B6, r27
				}

				accOffsetXSum += accX;
    7930:	80 91 34 04 	lds	r24, 0x0434
    7934:	90 91 35 04 	lds	r25, 0x0435
    7938:	40 91 28 04 	lds	r20, 0x0428
    793c:	50 91 29 04 	lds	r21, 0x0429
    7940:	84 0f       	add	r24, r20
    7942:	95 1f       	adc	r25, r21
    7944:	90 93 35 04 	sts	0x0435, r25
    7948:	80 93 34 04 	sts	0x0434, r24
				accOffsetYSum += accY;
    794c:	80 91 36 04 	lds	r24, 0x0436
    7950:	90 91 37 04 	lds	r25, 0x0437
    7954:	40 91 2a 04 	lds	r20, 0x042A
    7958:	50 91 2b 04 	lds	r21, 0x042B
    795c:	84 0f       	add	r24, r20
    795e:	95 1f       	adc	r25, r21
    7960:	90 93 37 04 	sts	0x0437, r25
    7964:	80 93 36 04 	sts	0x0436, r24
				accOffsetZSum += accZ;
    7968:	80 91 38 04 	lds	r24, 0x0438
    796c:	90 91 39 04 	lds	r25, 0x0439
    7970:	40 91 2c 04 	lds	r20, 0x042C
    7974:	50 91 2d 04 	lds	r21, 0x042D
    7978:	84 0f       	add	r24, r20
    797a:	95 1f       	adc	r25, r21
    797c:	90 93 39 04 	sts	0x0439, r25
    7980:	80 93 38 04 	sts	0x0438, r24

				calibrationCycle++;
    7984:	2f 5f       	subi	r18, 0xFF	; 255
    7986:	3f 4f       	sbci	r19, 0xFF	; 255
    7988:	30 93 4a 04 	sts	0x044A, r19
    798c:	20 93 49 04 	sts	0x0449, r18
    7990:	80 91 8b 05 	lds	r24, 0x058B
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    7994:	88 23       	and	r24, r24
    7996:	09 f0       	breq	.+2      	; 0x799a <calibrateSensors+0x5d6>
    7998:	31 cd       	rjmp	.-1438   	; 0x73fc <calibrateSensors+0x38>
    799a:	5b ce       	rjmp	.-842    	; 0x7652 <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    799c:	10 92 87 02 	sts	0x0287, r1
    79a0:	10 92 88 02 	sts	0x0288, r1
    79a4:	10 92 89 02 	sts	0x0289, r1
    79a8:	10 92 8a 02 	sts	0x028A, r1
						proximityOffset[i] = 0;
    79ac:	10 92 70 02 	sts	0x0270, r1
    79b0:	10 92 6f 02 	sts	0x026F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    79b4:	10 92 8b 02 	sts	0x028B, r1
    79b8:	10 92 8c 02 	sts	0x028C, r1
    79bc:	10 92 8d 02 	sts	0x028D, r1
    79c0:	10 92 8e 02 	sts	0x028E, r1
						proximityOffset[i] = 0;
    79c4:	10 92 72 02 	sts	0x0272, r1
    79c8:	10 92 71 02 	sts	0x0271, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    79cc:	10 92 8f 02 	sts	0x028F, r1
    79d0:	10 92 90 02 	sts	0x0290, r1
    79d4:	10 92 91 02 	sts	0x0291, r1
    79d8:	10 92 92 02 	sts	0x0292, r1
						proximityOffset[i] = 0;
    79dc:	10 92 74 02 	sts	0x0274, r1
    79e0:	10 92 73 02 	sts	0x0273, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    79e4:	10 92 93 02 	sts	0x0293, r1
    79e8:	10 92 94 02 	sts	0x0294, r1
    79ec:	10 92 95 02 	sts	0x0295, r1
    79f0:	10 92 96 02 	sts	0x0296, r1
						proximityOffset[i] = 0;
    79f4:	10 92 76 02 	sts	0x0276, r1
    79f8:	10 92 75 02 	sts	0x0275, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    79fc:	10 92 97 02 	sts	0x0297, r1
    7a00:	10 92 98 02 	sts	0x0298, r1
    7a04:	10 92 99 02 	sts	0x0299, r1
    7a08:	10 92 9a 02 	sts	0x029A, r1
						proximityOffset[i] = 0;
    7a0c:	10 92 78 02 	sts	0x0278, r1
    7a10:	10 92 77 02 	sts	0x0277, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7a14:	10 92 9b 02 	sts	0x029B, r1
    7a18:	10 92 9c 02 	sts	0x029C, r1
    7a1c:	10 92 9d 02 	sts	0x029D, r1
    7a20:	10 92 9e 02 	sts	0x029E, r1
						proximityOffset[i] = 0;
    7a24:	10 92 7a 02 	sts	0x027A, r1
    7a28:	10 92 79 02 	sts	0x0279, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7a2c:	10 92 9f 02 	sts	0x029F, r1
    7a30:	10 92 a0 02 	sts	0x02A0, r1
    7a34:	10 92 a1 02 	sts	0x02A1, r1
    7a38:	10 92 a2 02 	sts	0x02A2, r1
						proximityOffset[i] = 0;
    7a3c:	10 92 7c 02 	sts	0x027C, r1
    7a40:	10 92 7b 02 	sts	0x027B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7a44:	10 92 a3 02 	sts	0x02A3, r1
    7a48:	10 92 a4 02 	sts	0x02A4, r1
    7a4c:	10 92 a5 02 	sts	0x02A5, r1
    7a50:	10 92 a6 02 	sts	0x02A6, r1
						proximityOffset[i] = 0;
    7a54:	10 92 7e 02 	sts	0x027E, r1
    7a58:	10 92 7d 02 	sts	0x027D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7a5c:	10 92 a7 02 	sts	0x02A7, r1
    7a60:	10 92 a8 02 	sts	0x02A8, r1
    7a64:	10 92 a9 02 	sts	0x02A9, r1
    7a68:	10 92 aa 02 	sts	0x02AA, r1
						proximityOffset[i] = 0;
    7a6c:	10 92 80 02 	sts	0x0280, r1
    7a70:	10 92 7f 02 	sts	0x027F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7a74:	10 92 ab 02 	sts	0x02AB, r1
    7a78:	10 92 ac 02 	sts	0x02AC, r1
    7a7c:	10 92 ad 02 	sts	0x02AD, r1
    7a80:	10 92 ae 02 	sts	0x02AE, r1
						proximityOffset[i] = 0;
    7a84:	10 92 82 02 	sts	0x0282, r1
    7a88:	10 92 81 02 	sts	0x0281, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7a8c:	10 92 af 02 	sts	0x02AF, r1
    7a90:	10 92 b0 02 	sts	0x02B0, r1
    7a94:	10 92 b1 02 	sts	0x02B1, r1
    7a98:	10 92 b2 02 	sts	0x02B2, r1
						proximityOffset[i] = 0;
    7a9c:	10 92 84 02 	sts	0x0284, r1
    7aa0:	10 92 83 02 	sts	0x0283, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7aa4:	10 92 b3 02 	sts	0x02B3, r1
    7aa8:	10 92 b4 02 	sts	0x02B4, r1
    7aac:	10 92 b5 02 	sts	0x02B5, r1
    7ab0:	10 92 b6 02 	sts	0x02B6, r1
						proximityOffset[i] = 0;
    7ab4:	10 92 86 02 	sts	0x0286, r1
    7ab8:	10 92 85 02 	sts	0x0285, r1
					}
					accOffsetXSum = 0;
    7abc:	10 92 35 04 	sts	0x0435, r1
    7ac0:	10 92 34 04 	sts	0x0434, r1
					accOffsetYSum = 0;
    7ac4:	10 92 37 04 	sts	0x0437, r1
    7ac8:	10 92 36 04 	sts	0x0436, r1
					accOffsetZSum = 0;
    7acc:	10 92 39 04 	sts	0x0439, r1
    7ad0:	10 92 38 04 	sts	0x0438, r1

					calibrationCycle++;
    7ad4:	d0 93 4a 04 	sts	0x044A, r29
    7ad8:	c0 93 49 04 	sts	0x0449, r28
    7adc:	80 91 8b 05 	lds	r24, 0x058B

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    7ae0:	59 cf       	rjmp	.-334    	; 0x7994 <calibrateSensors+0x5d0>

00007ae2 <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    7ae2:	80 91 27 04 	lds	r24, 0x0427
    7ae6:	88 23       	and	r24, r24
    7ae8:	79 f0       	breq	.+30     	; 0x7b08 <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    7aea:	81 30       	cpi	r24, 0x01	; 1
    7aec:	11 f1       	breq	.+68     	; 0x7b32 <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    7aee:	10 92 29 04 	sts	0x0429, r1
    7af2:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    7af6:	10 92 2b 04 	sts	0x042B, r1
    7afa:	10 92 2a 04 	sts	0x042A, r1
		accZ = 0;
    7afe:	10 92 2d 04 	sts	0x042D, r1
    7b02:	10 92 2c 04 	sts	0x042C, r1
    7b06:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7b08:	80 91 14 02 	lds	r24, 0x0214
    7b0c:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    7b10:	80 e0       	ldi	r24, 0x00	; 0
    7b12:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7b16:	80 91 14 02 	lds	r24, 0x0214
    7b1a:	8f 5f       	subi	r24, 0xFF	; 255
    7b1c:	0e 94 a1 1b 	call	0x3742	; 0x3742 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    7b20:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <i2c_readAck>
    7b24:	80 93 3e 04 	sts	0x043E, r24
    7b28:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <i2c_readAck>
    7b2c:	80 93 3f 04 	sts	0x043F, r24
    7b30:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    7b32:	80 91 14 02 	lds	r24, 0x0214
    7b36:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7b3a:	82 e3       	ldi	r24, 0x32	; 50
    7b3c:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7b40:	80 91 14 02 	lds	r24, 0x0214
    7b44:	8f 5f       	subi	r24, 0xFF	; 255
    7b46:	0e 94 a1 1b 	call	0x3742	; 0x3742 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    7b4a:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <i2c_readAck>
    7b4e:	80 93 3e 04 	sts	0x043E, r24
    7b52:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <i2c_readAck>
    7b56:	80 93 3f 04 	sts	0x043F, r24
    7b5a:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <i2c_readAck>
    7b5e:	80 93 40 04 	sts	0x0440, r24
    7b62:	08 95       	ret

00007b64 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    7b64:	80 91 27 04 	lds	r24, 0x0427
    7b68:	88 23       	and	r24, r24
    7b6a:	09 f0       	breq	.+2      	; 0x7b6e <readAccelXYZ_2+0xa>
    7b6c:	4e c0       	rjmp	.+156    	; 0x7c0a <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    7b6e:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <i2c_readAck>
    7b72:	80 93 40 04 	sts	0x0440, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    7b76:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <i2c_readAck>
    7b7a:	80 93 41 04 	sts	0x0441, r24
    7b7e:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <i2c_readAck>
    7b82:	80 93 42 04 	sts	0x0442, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    7b86:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <i2c_readNak>
    7b8a:	80 93 43 04 	sts	0x0443, r24
		i2c_stop();													// set stop conditon = release bus
    7b8e:	0e 94 c7 1b 	call	0x378e	; 0x378e <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    7b92:	80 91 8b 05 	lds	r24, 0x058B
    7b96:	88 23       	and	r24, r24
    7b98:	09 f4       	brne	.+2      	; 0x7b9c <readAccelXYZ_2+0x38>
    7b9a:	47 c0       	rjmp	.+142    	; 0x7c2a <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    7b9c:	80 91 3f 04 	lds	r24, 0x043F
    7ba0:	99 27       	eor	r25, r25
    7ba2:	87 fd       	sbrc	r24, 7
    7ba4:	90 95       	com	r25
    7ba6:	98 2f       	mov	r25, r24
    7ba8:	88 27       	eor	r24, r24
    7baa:	20 91 3e 04 	lds	r18, 0x043E
    7bae:	33 27       	eor	r19, r19
    7bb0:	27 fd       	sbrc	r18, 7
    7bb2:	30 95       	com	r19
    7bb4:	82 2b       	or	r24, r18
    7bb6:	93 2b       	or	r25, r19
    7bb8:	90 93 29 04 	sts	0x0429, r25
    7bbc:	80 93 28 04 	sts	0x0428, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    7bc0:	80 91 41 04 	lds	r24, 0x0441
    7bc4:	99 27       	eor	r25, r25
    7bc6:	87 fd       	sbrc	r24, 7
    7bc8:	90 95       	com	r25
    7bca:	98 2f       	mov	r25, r24
    7bcc:	88 27       	eor	r24, r24
    7bce:	20 91 40 04 	lds	r18, 0x0440
    7bd2:	33 27       	eor	r19, r19
    7bd4:	27 fd       	sbrc	r18, 7
    7bd6:	30 95       	com	r19
    7bd8:	82 2b       	or	r24, r18
    7bda:	93 2b       	or	r25, r19
    7bdc:	90 93 2b 04 	sts	0x042B, r25
    7be0:	80 93 2a 04 	sts	0x042A, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    7be4:	80 91 43 04 	lds	r24, 0x0443
    7be8:	99 27       	eor	r25, r25
    7bea:	87 fd       	sbrc	r24, 7
    7bec:	90 95       	com	r25
    7bee:	98 2f       	mov	r25, r24
    7bf0:	88 27       	eor	r24, r24
    7bf2:	20 91 42 04 	lds	r18, 0x0442
    7bf6:	33 27       	eor	r19, r19
    7bf8:	27 fd       	sbrc	r18, 7
    7bfa:	30 95       	com	r19
    7bfc:	82 2b       	or	r24, r18
    7bfe:	93 2b       	or	r25, r19
    7c00:	90 93 2d 04 	sts	0x042D, r25
    7c04:	80 93 2c 04 	sts	0x042C, r24
    7c08:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    7c0a:	81 30       	cpi	r24, 0x01	; 1
    7c0c:	09 f4       	brne	.+2      	; 0x7c10 <readAccelXYZ_2+0xac>
    7c0e:	b3 cf       	rjmp	.-154    	; 0x7b76 <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    7c10:	10 92 29 04 	sts	0x0429, r1
    7c14:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    7c18:	10 92 2b 04 	sts	0x042B, r1
    7c1c:	10 92 2a 04 	sts	0x042A, r1
		accZ = 0;
    7c20:	10 92 2d 04 	sts	0x042D, r1
    7c24:	10 92 2c 04 	sts	0x042C, r1
    7c28:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    7c2a:	80 91 3f 04 	lds	r24, 0x043F
    7c2e:	99 27       	eor	r25, r25
    7c30:	87 fd       	sbrc	r24, 7
    7c32:	90 95       	com	r25
    7c34:	98 2f       	mov	r25, r24
    7c36:	88 27       	eor	r24, r24
    7c38:	20 91 3e 04 	lds	r18, 0x043E
    7c3c:	33 27       	eor	r19, r19
    7c3e:	27 fd       	sbrc	r18, 7
    7c40:	30 95       	com	r19
    7c42:	82 2b       	or	r24, r18
    7c44:	93 2b       	or	r25, r19
    7c46:	20 91 2e 04 	lds	r18, 0x042E
    7c4a:	30 91 2f 04 	lds	r19, 0x042F
    7c4e:	82 1b       	sub	r24, r18
    7c50:	93 0b       	sbc	r25, r19
    7c52:	90 93 29 04 	sts	0x0429, r25
    7c56:	80 93 28 04 	sts	0x0428, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    7c5a:	80 91 41 04 	lds	r24, 0x0441
    7c5e:	99 27       	eor	r25, r25
    7c60:	87 fd       	sbrc	r24, 7
    7c62:	90 95       	com	r25
    7c64:	98 2f       	mov	r25, r24
    7c66:	88 27       	eor	r24, r24
    7c68:	20 91 40 04 	lds	r18, 0x0440
    7c6c:	33 27       	eor	r19, r19
    7c6e:	27 fd       	sbrc	r18, 7
    7c70:	30 95       	com	r19
    7c72:	82 2b       	or	r24, r18
    7c74:	93 2b       	or	r25, r19
    7c76:	20 91 30 04 	lds	r18, 0x0430
    7c7a:	30 91 31 04 	lds	r19, 0x0431
    7c7e:	82 1b       	sub	r24, r18
    7c80:	93 0b       	sbc	r25, r19
    7c82:	90 93 2b 04 	sts	0x042B, r25
    7c86:	80 93 2a 04 	sts	0x042A, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    7c8a:	80 91 43 04 	lds	r24, 0x0443
    7c8e:	99 27       	eor	r25, r25
    7c90:	87 fd       	sbrc	r24, 7
    7c92:	90 95       	com	r25
    7c94:	98 2f       	mov	r25, r24
    7c96:	88 27       	eor	r24, r24
    7c98:	20 91 42 04 	lds	r18, 0x0442
    7c9c:	33 27       	eor	r19, r19
    7c9e:	27 fd       	sbrc	r18, 7
    7ca0:	30 95       	com	r19
    7ca2:	82 2b       	or	r24, r18
    7ca4:	93 2b       	or	r25, r19
    7ca6:	20 91 32 04 	lds	r18, 0x0432
    7caa:	30 91 33 04 	lds	r19, 0x0433
    7cae:	82 1b       	sub	r24, r18
    7cb0:	93 0b       	sbc	r25, r19
    7cb2:	90 93 2d 04 	sts	0x042D, r25
    7cb6:	80 93 2c 04 	sts	0x042C, r24
    7cba:	08 95       	ret

00007cbc <computeAngle>:

	}

}

void computeAngle() {
    7cbc:	ef 92       	push	r14
    7cbe:	ff 92       	push	r15
    7cc0:	0f 93       	push	r16
    7cc2:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    7cc4:	80 91 2c 04 	lds	r24, 0x042C
    7cc8:	90 91 2d 04 	lds	r25, 0x042D
    7ccc:	97 fd       	sbrc	r25, 7
    7cce:	6c c0       	rjmp	.+216    	; 0x7da8 <computeAngle+0xec>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    7cd0:	85 31       	cpi	r24, 0x15	; 21
    7cd2:	91 05       	cpc	r25, r1
    7cd4:	08 f0       	brcs	.+2      	; 0x7cd8 <computeAngle+0x1c>
    7cd6:	54 c0       	rjmp	.+168    	; 0x7d80 <computeAngle+0xc4>
		currPosition = HORIZONTAL_POS;
    7cd8:	81 e0       	ldi	r24, 0x01	; 1
    7cda:	80 93 15 02 	sts	0x0215, r24
    7cde:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    7ce0:	80 91 16 02 	lds	r24, 0x0216
    7ce4:	82 17       	cp	r24, r18
    7ce6:	09 f4       	brne	.+2      	; 0x7cea <computeAngle+0x2e>
    7ce8:	53 c0       	rjmp	.+166    	; 0x7d90 <computeAngle+0xd4>
		timesInSamePos++;
    7cea:	80 91 3c 04 	lds	r24, 0x043C
    7cee:	90 91 3d 04 	lds	r25, 0x043D
    7cf2:	01 96       	adiw	r24, 0x01	; 1
    7cf4:	90 93 3d 04 	sts	0x043D, r25
    7cf8:	80 93 3c 04 	sts	0x043C, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    7cfc:	88 3c       	cpi	r24, 0xC8	; 200
    7cfe:	91 05       	cpc	r25, r1
    7d00:	08 f0       	brcs	.+2      	; 0x7d04 <computeAngle+0x48>
    7d02:	4b c0       	rjmp	.+150    	; 0x7d9a <computeAngle+0xde>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    7d04:	60 91 28 04 	lds	r22, 0x0428
    7d08:	70 91 29 04 	lds	r23, 0x0429
    7d0c:	88 27       	eor	r24, r24
    7d0e:	77 fd       	sbrc	r23, 7
    7d10:	80 95       	com	r24
    7d12:	98 2f       	mov	r25, r24
    7d14:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    7d18:	7b 01       	movw	r14, r22
    7d1a:	8c 01       	movw	r16, r24
    7d1c:	60 91 2a 04 	lds	r22, 0x042A
    7d20:	70 91 2b 04 	lds	r23, 0x042B
    7d24:	88 27       	eor	r24, r24
    7d26:	77 fd       	sbrc	r23, 7
    7d28:	80 95       	com	r24
    7d2a:	98 2f       	mov	r25, r24
    7d2c:	0e 94 59 40 	call	0x80b2	; 0x80b2 <__floatsisf>
    7d30:	9b 01       	movw	r18, r22
    7d32:	ac 01       	movw	r20, r24
    7d34:	c8 01       	movw	r24, r16
    7d36:	b7 01       	movw	r22, r14
    7d38:	0e 94 64 3f 	call	0x7ec8	; 0x7ec8 <atan2>
    7d3c:	60 93 a0 04 	sts	0x04A0, r22
    7d40:	70 93 a1 04 	sts	0x04A1, r23
    7d44:	80 93 a2 04 	sts	0x04A2, r24
    7d48:	90 93 a3 04 	sts	0x04A3, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    7d4c:	21 ee       	ldi	r18, 0xE1	; 225
    7d4e:	3e e2       	ldi	r19, 0x2E	; 46
    7d50:	45 e6       	ldi	r20, 0x65	; 101
    7d52:	52 e4       	ldi	r21, 0x42	; 66
    7d54:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__mulsf3>
    7d58:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    7d5c:	9b 01       	movw	r18, r22
    7d5e:	70 93 3b 04 	sts	0x043B, r23
    7d62:	60 93 3a 04 	sts	0x043A, r22

	if(currentAngle < 0) {
    7d66:	77 ff       	sbrs	r23, 7
    7d68:	06 c0       	rjmp	.+12     	; 0x7d76 <computeAngle+0xba>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    7d6a:	28 59       	subi	r18, 0x98	; 152
    7d6c:	3e 4f       	sbci	r19, 0xFE	; 254
    7d6e:	30 93 3b 04 	sts	0x043B, r19
    7d72:	20 93 3a 04 	sts	0x043A, r18
	}

}
    7d76:	1f 91       	pop	r17
    7d78:	0f 91       	pop	r16
    7d7a:	ff 90       	pop	r15
    7d7c:	ef 90       	pop	r14
    7d7e:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    7d80:	10 92 15 02 	sts	0x0215, r1
    7d84:	20 e0       	ldi	r18, 0x00	; 0
	}
	if(currPosition != robotPosition) {			
    7d86:	80 91 16 02 	lds	r24, 0x0216
    7d8a:	82 17       	cp	r24, r18
    7d8c:	09 f0       	breq	.+2      	; 0x7d90 <computeAngle+0xd4>
    7d8e:	ad cf       	rjmp	.-166    	; 0x7cea <computeAngle+0x2e>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    7d90:	10 92 3d 04 	sts	0x043D, r1
    7d94:	10 92 3c 04 	sts	0x043C, r1
    7d98:	b5 cf       	rjmp	.-150    	; 0x7d04 <computeAngle+0x48>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    7d9a:	10 92 3d 04 	sts	0x043D, r1
    7d9e:	10 92 3c 04 	sts	0x043C, r1
			robotPosition = currPosition;
    7da2:	20 93 16 02 	sts	0x0216, r18
    7da6:	ae cf       	rjmp	.-164    	; 0x7d04 <computeAngle+0x48>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    7da8:	90 95       	com	r25
    7daa:	81 95       	neg	r24
    7dac:	9f 4f       	sbci	r25, 0xFF	; 255
    7dae:	90 cf       	rjmp	.-224    	; 0x7cd0 <computeAngle+0x14>

00007db0 <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    7db0:	8d ed       	ldi	r24, 0xDD	; 221
    7db2:	94 e0       	ldi	r25, 0x04	; 4
    7db4:	6c e6       	ldi	r22, 0x6C	; 108
    7db6:	7f e0       	ldi	r23, 0x0F	; 15
    7db8:	40 e9       	ldi	r20, 0x90	; 144
    7dba:	50 e0       	ldi	r21, 0x00	; 0
    7dbc:	0e 94 f8 42 	call	0x85f0	; 0x85f0 <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    7dc0:	8a e6       	ldi	r24, 0x6A	; 106
    7dc2:	9f e0       	ldi	r25, 0x0F	; 15
    7dc4:	65 e5       	ldi	r22, 0x55	; 85
    7dc6:	7a ea       	ldi	r23, 0xAA	; 170
    7dc8:	0e 94 1a 43 	call	0x8634	; 0x8634 <__eeupd_word_m2560>
}
    7dcc:	08 95       	ret

00007dce <readCalibrationFromFlash>:

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    7dce:	8d ed       	ldi	r24, 0xDD	; 221
    7dd0:	94 e0       	ldi	r25, 0x04	; 4
    7dd2:	6c e6       	ldi	r22, 0x6C	; 108
    7dd4:	7f e0       	ldi	r23, 0x0F	; 15
    7dd6:	40 e9       	ldi	r20, 0x90	; 144
    7dd8:	50 e0       	ldi	r21, 0x00	; 0
    7dda:	0e 94 da 42 	call	0x85b4	; 0x85b4 <__eerd_block_m2560>
}
    7dde:	08 95       	ret

00007de0 <__subsf3>:
    7de0:	50 58       	subi	r21, 0x80	; 128

00007de2 <__addsf3>:
    7de2:	bb 27       	eor	r27, r27
    7de4:	aa 27       	eor	r26, r26
    7de6:	0e d0       	rcall	.+28     	; 0x7e04 <__addsf3x>
    7de8:	27 c2       	rjmp	.+1102   	; 0x8238 <__fp_round>
    7dea:	f0 d1       	rcall	.+992    	; 0x81cc <__fp_pscA>
    7dec:	30 f0       	brcs	.+12     	; 0x7dfa <__addsf3+0x18>
    7dee:	f5 d1       	rcall	.+1002   	; 0x81da <__fp_pscB>
    7df0:	20 f0       	brcs	.+8      	; 0x7dfa <__addsf3+0x18>
    7df2:	31 f4       	brne	.+12     	; 0x7e00 <__addsf3+0x1e>
    7df4:	9f 3f       	cpi	r25, 0xFF	; 255
    7df6:	11 f4       	brne	.+4      	; 0x7dfc <__addsf3+0x1a>
    7df8:	1e f4       	brtc	.+6      	; 0x7e00 <__addsf3+0x1e>
    7dfa:	c0 c1       	rjmp	.+896    	; 0x817c <__fp_nan>
    7dfc:	0e f4       	brtc	.+2      	; 0x7e00 <__addsf3+0x1e>
    7dfe:	e0 95       	com	r30
    7e00:	e7 fb       	bst	r30, 7
    7e02:	b6 c1       	rjmp	.+876    	; 0x8170 <__fp_inf>

00007e04 <__addsf3x>:
    7e04:	e9 2f       	mov	r30, r25
    7e06:	3a d2       	rcall	.+1140   	; 0x827c <__fp_split3>
    7e08:	80 f3       	brcs	.-32     	; 0x7dea <__addsf3+0x8>
    7e0a:	ba 17       	cp	r27, r26
    7e0c:	62 07       	cpc	r22, r18
    7e0e:	73 07       	cpc	r23, r19
    7e10:	84 07       	cpc	r24, r20
    7e12:	95 07       	cpc	r25, r21
    7e14:	18 f0       	brcs	.+6      	; 0x7e1c <__addsf3x+0x18>
    7e16:	71 f4       	brne	.+28     	; 0x7e34 <__addsf3x+0x30>
    7e18:	9e f5       	brtc	.+102    	; 0x7e80 <__addsf3x+0x7c>
    7e1a:	52 c2       	rjmp	.+1188   	; 0x82c0 <__fp_zero>
    7e1c:	0e f4       	brtc	.+2      	; 0x7e20 <__addsf3x+0x1c>
    7e1e:	e0 95       	com	r30
    7e20:	0b 2e       	mov	r0, r27
    7e22:	ba 2f       	mov	r27, r26
    7e24:	a0 2d       	mov	r26, r0
    7e26:	0b 01       	movw	r0, r22
    7e28:	b9 01       	movw	r22, r18
    7e2a:	90 01       	movw	r18, r0
    7e2c:	0c 01       	movw	r0, r24
    7e2e:	ca 01       	movw	r24, r20
    7e30:	a0 01       	movw	r20, r0
    7e32:	11 24       	eor	r1, r1
    7e34:	ff 27       	eor	r31, r31
    7e36:	59 1b       	sub	r21, r25
    7e38:	99 f0       	breq	.+38     	; 0x7e60 <__addsf3x+0x5c>
    7e3a:	59 3f       	cpi	r21, 0xF9	; 249
    7e3c:	50 f4       	brcc	.+20     	; 0x7e52 <__addsf3x+0x4e>
    7e3e:	50 3e       	cpi	r21, 0xE0	; 224
    7e40:	68 f1       	brcs	.+90     	; 0x7e9c <__addsf3x+0x98>
    7e42:	1a 16       	cp	r1, r26
    7e44:	f0 40       	sbci	r31, 0x00	; 0
    7e46:	a2 2f       	mov	r26, r18
    7e48:	23 2f       	mov	r18, r19
    7e4a:	34 2f       	mov	r19, r20
    7e4c:	44 27       	eor	r20, r20
    7e4e:	58 5f       	subi	r21, 0xF8	; 248
    7e50:	f3 cf       	rjmp	.-26     	; 0x7e38 <__addsf3x+0x34>
    7e52:	46 95       	lsr	r20
    7e54:	37 95       	ror	r19
    7e56:	27 95       	ror	r18
    7e58:	a7 95       	ror	r26
    7e5a:	f0 40       	sbci	r31, 0x00	; 0
    7e5c:	53 95       	inc	r21
    7e5e:	c9 f7       	brne	.-14     	; 0x7e52 <__addsf3x+0x4e>
    7e60:	7e f4       	brtc	.+30     	; 0x7e80 <__addsf3x+0x7c>
    7e62:	1f 16       	cp	r1, r31
    7e64:	ba 0b       	sbc	r27, r26
    7e66:	62 0b       	sbc	r22, r18
    7e68:	73 0b       	sbc	r23, r19
    7e6a:	84 0b       	sbc	r24, r20
    7e6c:	ba f0       	brmi	.+46     	; 0x7e9c <__addsf3x+0x98>
    7e6e:	91 50       	subi	r25, 0x01	; 1
    7e70:	a1 f0       	breq	.+40     	; 0x7e9a <__addsf3x+0x96>
    7e72:	ff 0f       	add	r31, r31
    7e74:	bb 1f       	adc	r27, r27
    7e76:	66 1f       	adc	r22, r22
    7e78:	77 1f       	adc	r23, r23
    7e7a:	88 1f       	adc	r24, r24
    7e7c:	c2 f7       	brpl	.-16     	; 0x7e6e <__addsf3x+0x6a>
    7e7e:	0e c0       	rjmp	.+28     	; 0x7e9c <__addsf3x+0x98>
    7e80:	ba 0f       	add	r27, r26
    7e82:	62 1f       	adc	r22, r18
    7e84:	73 1f       	adc	r23, r19
    7e86:	84 1f       	adc	r24, r20
    7e88:	48 f4       	brcc	.+18     	; 0x7e9c <__addsf3x+0x98>
    7e8a:	87 95       	ror	r24
    7e8c:	77 95       	ror	r23
    7e8e:	67 95       	ror	r22
    7e90:	b7 95       	ror	r27
    7e92:	f7 95       	ror	r31
    7e94:	9e 3f       	cpi	r25, 0xFE	; 254
    7e96:	08 f0       	brcs	.+2      	; 0x7e9a <__addsf3x+0x96>
    7e98:	b3 cf       	rjmp	.-154    	; 0x7e00 <__addsf3+0x1e>
    7e9a:	93 95       	inc	r25
    7e9c:	88 0f       	add	r24, r24
    7e9e:	08 f0       	brcs	.+2      	; 0x7ea2 <__addsf3x+0x9e>
    7ea0:	99 27       	eor	r25, r25
    7ea2:	ee 0f       	add	r30, r30
    7ea4:	97 95       	ror	r25
    7ea6:	87 95       	ror	r24
    7ea8:	08 95       	ret
    7eaa:	90 d1       	rcall	.+800    	; 0x81cc <__fp_pscA>
    7eac:	58 f0       	brcs	.+22     	; 0x7ec4 <__addsf3x+0xc0>
    7eae:	80 e8       	ldi	r24, 0x80	; 128
    7eb0:	91 e0       	ldi	r25, 0x01	; 1
    7eb2:	09 f4       	brne	.+2      	; 0x7eb6 <__addsf3x+0xb2>
    7eb4:	9e ef       	ldi	r25, 0xFE	; 254
    7eb6:	91 d1       	rcall	.+802    	; 0x81da <__fp_pscB>
    7eb8:	28 f0       	brcs	.+10     	; 0x7ec4 <__addsf3x+0xc0>
    7eba:	40 e8       	ldi	r20, 0x80	; 128
    7ebc:	51 e0       	ldi	r21, 0x01	; 1
    7ebe:	59 f4       	brne	.+22     	; 0x7ed6 <atan2+0xe>
    7ec0:	5e ef       	ldi	r21, 0xFE	; 254
    7ec2:	09 c0       	rjmp	.+18     	; 0x7ed6 <atan2+0xe>
    7ec4:	5b c1       	rjmp	.+694    	; 0x817c <__fp_nan>
    7ec6:	fc c1       	rjmp	.+1016   	; 0x82c0 <__fp_zero>

00007ec8 <atan2>:
    7ec8:	e9 2f       	mov	r30, r25
    7eca:	e0 78       	andi	r30, 0x80	; 128
    7ecc:	d7 d1       	rcall	.+942    	; 0x827c <__fp_split3>
    7ece:	68 f3       	brcs	.-38     	; 0x7eaa <__addsf3x+0xa6>
    7ed0:	09 2e       	mov	r0, r25
    7ed2:	05 2a       	or	r0, r21
    7ed4:	c1 f3       	breq	.-16     	; 0x7ec6 <__addsf3x+0xc2>
    7ed6:	26 17       	cp	r18, r22
    7ed8:	37 07       	cpc	r19, r23
    7eda:	48 07       	cpc	r20, r24
    7edc:	59 07       	cpc	r21, r25
    7ede:	38 f0       	brcs	.+14     	; 0x7eee <atan2+0x26>
    7ee0:	0e 2e       	mov	r0, r30
    7ee2:	07 f8       	bld	r0, 7
    7ee4:	e0 25       	eor	r30, r0
    7ee6:	69 f0       	breq	.+26     	; 0x7f02 <atan2+0x3a>
    7ee8:	e0 25       	eor	r30, r0
    7eea:	e0 64       	ori	r30, 0x40	; 64
    7eec:	0a c0       	rjmp	.+20     	; 0x7f02 <atan2+0x3a>
    7eee:	ef 63       	ori	r30, 0x3F	; 63
    7ef0:	07 f8       	bld	r0, 7
    7ef2:	00 94       	com	r0
    7ef4:	07 fa       	bst	r0, 7
    7ef6:	db 01       	movw	r26, r22
    7ef8:	b9 01       	movw	r22, r18
    7efa:	9d 01       	movw	r18, r26
    7efc:	dc 01       	movw	r26, r24
    7efe:	ca 01       	movw	r24, r20
    7f00:	ad 01       	movw	r20, r26
    7f02:	ef 93       	push	r30
    7f04:	4a d0       	rcall	.+148    	; 0x7f9a <__divsf3_pse>
    7f06:	98 d1       	rcall	.+816    	; 0x8238 <__fp_round>
    7f08:	0a d0       	rcall	.+20     	; 0x7f1e <atan>
    7f0a:	5f 91       	pop	r21
    7f0c:	55 23       	and	r21, r21
    7f0e:	31 f0       	breq	.+12     	; 0x7f1c <atan2+0x54>
    7f10:	2b ed       	ldi	r18, 0xDB	; 219
    7f12:	3f e0       	ldi	r19, 0x0F	; 15
    7f14:	49 e4       	ldi	r20, 0x49	; 73
    7f16:	50 fd       	sbrc	r21, 0
    7f18:	49 ec       	ldi	r20, 0xC9	; 201
    7f1a:	63 cf       	rjmp	.-314    	; 0x7de2 <__addsf3>
    7f1c:	08 95       	ret

00007f1e <atan>:
    7f1e:	df 93       	push	r29
    7f20:	dd 27       	eor	r29, r29
    7f22:	b9 2f       	mov	r27, r25
    7f24:	bf 77       	andi	r27, 0x7F	; 127
    7f26:	40 e8       	ldi	r20, 0x80	; 128
    7f28:	5f e3       	ldi	r21, 0x3F	; 63
    7f2a:	16 16       	cp	r1, r22
    7f2c:	17 06       	cpc	r1, r23
    7f2e:	48 07       	cpc	r20, r24
    7f30:	5b 07       	cpc	r21, r27
    7f32:	10 f4       	brcc	.+4      	; 0x7f38 <atan+0x1a>
    7f34:	d9 2f       	mov	r29, r25
    7f36:	cb d1       	rcall	.+918    	; 0x82ce <inverse>
    7f38:	9f 93       	push	r25
    7f3a:	8f 93       	push	r24
    7f3c:	7f 93       	push	r23
    7f3e:	6f 93       	push	r22
    7f40:	36 d2       	rcall	.+1132   	; 0x83ae <square>
    7f42:	ee e4       	ldi	r30, 0x4E	; 78
    7f44:	f1 e0       	ldi	r31, 0x01	; 1
    7f46:	1d d1       	rcall	.+570    	; 0x8182 <__fp_powser>
    7f48:	77 d1       	rcall	.+750    	; 0x8238 <__fp_round>
    7f4a:	2f 91       	pop	r18
    7f4c:	3f 91       	pop	r19
    7f4e:	4f 91       	pop	r20
    7f50:	5f 91       	pop	r21
    7f52:	d0 d1       	rcall	.+928    	; 0x82f4 <__mulsf3x>
    7f54:	dd 23       	and	r29, r29
    7f56:	49 f0       	breq	.+18     	; 0x7f6a <atan+0x4c>
    7f58:	90 58       	subi	r25, 0x80	; 128
    7f5a:	a2 ea       	ldi	r26, 0xA2	; 162
    7f5c:	2a ed       	ldi	r18, 0xDA	; 218
    7f5e:	3f e0       	ldi	r19, 0x0F	; 15
    7f60:	49 ec       	ldi	r20, 0xC9	; 201
    7f62:	5f e3       	ldi	r21, 0x3F	; 63
    7f64:	d0 78       	andi	r29, 0x80	; 128
    7f66:	5d 27       	eor	r21, r29
    7f68:	4d df       	rcall	.-358    	; 0x7e04 <__addsf3x>
    7f6a:	df 91       	pop	r29
    7f6c:	65 c1       	rjmp	.+714    	; 0x8238 <__fp_round>

00007f6e <__cmpsf2>:
    7f6e:	dc d0       	rcall	.+440    	; 0x8128 <__fp_cmp>
    7f70:	08 f4       	brcc	.+2      	; 0x7f74 <__cmpsf2+0x6>
    7f72:	81 e0       	ldi	r24, 0x01	; 1
    7f74:	08 95       	ret

00007f76 <cos>:
    7f76:	39 d1       	rcall	.+626    	; 0x81ea <__fp_rempio2>
    7f78:	e3 95       	inc	r30
    7f7a:	6f c1       	rjmp	.+734    	; 0x825a <__fp_sinus>

00007f7c <__divsf3>:
    7f7c:	0c d0       	rcall	.+24     	; 0x7f96 <__divsf3x>
    7f7e:	5c c1       	rjmp	.+696    	; 0x8238 <__fp_round>
    7f80:	2c d1       	rcall	.+600    	; 0x81da <__fp_pscB>
    7f82:	40 f0       	brcs	.+16     	; 0x7f94 <__divsf3+0x18>
    7f84:	23 d1       	rcall	.+582    	; 0x81cc <__fp_pscA>
    7f86:	30 f0       	brcs	.+12     	; 0x7f94 <__divsf3+0x18>
    7f88:	21 f4       	brne	.+8      	; 0x7f92 <__divsf3+0x16>
    7f8a:	5f 3f       	cpi	r21, 0xFF	; 255
    7f8c:	19 f0       	breq	.+6      	; 0x7f94 <__divsf3+0x18>
    7f8e:	f0 c0       	rjmp	.+480    	; 0x8170 <__fp_inf>
    7f90:	51 11       	cpse	r21, r1
    7f92:	97 c1       	rjmp	.+814    	; 0x82c2 <__fp_szero>
    7f94:	f3 c0       	rjmp	.+486    	; 0x817c <__fp_nan>

00007f96 <__divsf3x>:
    7f96:	72 d1       	rcall	.+740    	; 0x827c <__fp_split3>
    7f98:	98 f3       	brcs	.-26     	; 0x7f80 <__divsf3+0x4>

00007f9a <__divsf3_pse>:
    7f9a:	99 23       	and	r25, r25
    7f9c:	c9 f3       	breq	.-14     	; 0x7f90 <__divsf3+0x14>
    7f9e:	55 23       	and	r21, r21
    7fa0:	b1 f3       	breq	.-20     	; 0x7f8e <__divsf3+0x12>
    7fa2:	95 1b       	sub	r25, r21
    7fa4:	55 0b       	sbc	r21, r21
    7fa6:	bb 27       	eor	r27, r27
    7fa8:	aa 27       	eor	r26, r26
    7faa:	62 17       	cp	r22, r18
    7fac:	73 07       	cpc	r23, r19
    7fae:	84 07       	cpc	r24, r20
    7fb0:	38 f0       	brcs	.+14     	; 0x7fc0 <__divsf3_pse+0x26>
    7fb2:	9f 5f       	subi	r25, 0xFF	; 255
    7fb4:	5f 4f       	sbci	r21, 0xFF	; 255
    7fb6:	22 0f       	add	r18, r18
    7fb8:	33 1f       	adc	r19, r19
    7fba:	44 1f       	adc	r20, r20
    7fbc:	aa 1f       	adc	r26, r26
    7fbe:	a9 f3       	breq	.-22     	; 0x7faa <__divsf3_pse+0x10>
    7fc0:	33 d0       	rcall	.+102    	; 0x8028 <__divsf3_pse+0x8e>
    7fc2:	0e 2e       	mov	r0, r30
    7fc4:	3a f0       	brmi	.+14     	; 0x7fd4 <__divsf3_pse+0x3a>
    7fc6:	e0 e8       	ldi	r30, 0x80	; 128
    7fc8:	30 d0       	rcall	.+96     	; 0x802a <__divsf3_pse+0x90>
    7fca:	91 50       	subi	r25, 0x01	; 1
    7fcc:	50 40       	sbci	r21, 0x00	; 0
    7fce:	e6 95       	lsr	r30
    7fd0:	00 1c       	adc	r0, r0
    7fd2:	ca f7       	brpl	.-14     	; 0x7fc6 <__divsf3_pse+0x2c>
    7fd4:	29 d0       	rcall	.+82     	; 0x8028 <__divsf3_pse+0x8e>
    7fd6:	fe 2f       	mov	r31, r30
    7fd8:	27 d0       	rcall	.+78     	; 0x8028 <__divsf3_pse+0x8e>
    7fda:	66 0f       	add	r22, r22
    7fdc:	77 1f       	adc	r23, r23
    7fde:	88 1f       	adc	r24, r24
    7fe0:	bb 1f       	adc	r27, r27
    7fe2:	26 17       	cp	r18, r22
    7fe4:	37 07       	cpc	r19, r23
    7fe6:	48 07       	cpc	r20, r24
    7fe8:	ab 07       	cpc	r26, r27
    7fea:	b0 e8       	ldi	r27, 0x80	; 128
    7fec:	09 f0       	breq	.+2      	; 0x7ff0 <__divsf3_pse+0x56>
    7fee:	bb 0b       	sbc	r27, r27
    7ff0:	80 2d       	mov	r24, r0
    7ff2:	bf 01       	movw	r22, r30
    7ff4:	ff 27       	eor	r31, r31
    7ff6:	93 58       	subi	r25, 0x83	; 131
    7ff8:	5f 4f       	sbci	r21, 0xFF	; 255
    7ffa:	2a f0       	brmi	.+10     	; 0x8006 <__divsf3_pse+0x6c>
    7ffc:	9e 3f       	cpi	r25, 0xFE	; 254
    7ffe:	51 05       	cpc	r21, r1
    8000:	68 f0       	brcs	.+26     	; 0x801c <__divsf3_pse+0x82>
    8002:	b6 c0       	rjmp	.+364    	; 0x8170 <__fp_inf>
    8004:	5e c1       	rjmp	.+700    	; 0x82c2 <__fp_szero>
    8006:	5f 3f       	cpi	r21, 0xFF	; 255
    8008:	ec f3       	brlt	.-6      	; 0x8004 <__divsf3_pse+0x6a>
    800a:	98 3e       	cpi	r25, 0xE8	; 232
    800c:	dc f3       	brlt	.-10     	; 0x8004 <__divsf3_pse+0x6a>
    800e:	86 95       	lsr	r24
    8010:	77 95       	ror	r23
    8012:	67 95       	ror	r22
    8014:	b7 95       	ror	r27
    8016:	f7 95       	ror	r31
    8018:	9f 5f       	subi	r25, 0xFF	; 255
    801a:	c9 f7       	brne	.-14     	; 0x800e <__divsf3_pse+0x74>
    801c:	88 0f       	add	r24, r24
    801e:	91 1d       	adc	r25, r1
    8020:	96 95       	lsr	r25
    8022:	87 95       	ror	r24
    8024:	97 f9       	bld	r25, 7
    8026:	08 95       	ret
    8028:	e1 e0       	ldi	r30, 0x01	; 1
    802a:	66 0f       	add	r22, r22
    802c:	77 1f       	adc	r23, r23
    802e:	88 1f       	adc	r24, r24
    8030:	bb 1f       	adc	r27, r27
    8032:	62 17       	cp	r22, r18
    8034:	73 07       	cpc	r23, r19
    8036:	84 07       	cpc	r24, r20
    8038:	ba 07       	cpc	r27, r26
    803a:	20 f0       	brcs	.+8      	; 0x8044 <__divsf3_pse+0xaa>
    803c:	62 1b       	sub	r22, r18
    803e:	73 0b       	sbc	r23, r19
    8040:	84 0b       	sbc	r24, r20
    8042:	ba 0b       	sbc	r27, r26
    8044:	ee 1f       	adc	r30, r30
    8046:	88 f7       	brcc	.-30     	; 0x802a <__divsf3_pse+0x90>
    8048:	e0 95       	com	r30
    804a:	08 95       	ret

0000804c <__fixsfsi>:
    804c:	04 d0       	rcall	.+8      	; 0x8056 <__fixunssfsi>
    804e:	68 94       	set
    8050:	b1 11       	cpse	r27, r1
    8052:	37 c1       	rjmp	.+622    	; 0x82c2 <__fp_szero>
    8054:	08 95       	ret

00008056 <__fixunssfsi>:
    8056:	1a d1       	rcall	.+564    	; 0x828c <__fp_splitA>
    8058:	88 f0       	brcs	.+34     	; 0x807c <__fixunssfsi+0x26>
    805a:	9f 57       	subi	r25, 0x7F	; 127
    805c:	90 f0       	brcs	.+36     	; 0x8082 <__fixunssfsi+0x2c>
    805e:	b9 2f       	mov	r27, r25
    8060:	99 27       	eor	r25, r25
    8062:	b7 51       	subi	r27, 0x17	; 23
    8064:	a0 f0       	brcs	.+40     	; 0x808e <__fixunssfsi+0x38>
    8066:	d1 f0       	breq	.+52     	; 0x809c <__fixunssfsi+0x46>
    8068:	66 0f       	add	r22, r22
    806a:	77 1f       	adc	r23, r23
    806c:	88 1f       	adc	r24, r24
    806e:	99 1f       	adc	r25, r25
    8070:	1a f0       	brmi	.+6      	; 0x8078 <__fixunssfsi+0x22>
    8072:	ba 95       	dec	r27
    8074:	c9 f7       	brne	.-14     	; 0x8068 <__fixunssfsi+0x12>
    8076:	12 c0       	rjmp	.+36     	; 0x809c <__fixunssfsi+0x46>
    8078:	b1 30       	cpi	r27, 0x01	; 1
    807a:	81 f0       	breq	.+32     	; 0x809c <__fixunssfsi+0x46>
    807c:	21 d1       	rcall	.+578    	; 0x82c0 <__fp_zero>
    807e:	b1 e0       	ldi	r27, 0x01	; 1
    8080:	08 95       	ret
    8082:	1e c1       	rjmp	.+572    	; 0x82c0 <__fp_zero>
    8084:	67 2f       	mov	r22, r23
    8086:	78 2f       	mov	r23, r24
    8088:	88 27       	eor	r24, r24
    808a:	b8 5f       	subi	r27, 0xF8	; 248
    808c:	39 f0       	breq	.+14     	; 0x809c <__fixunssfsi+0x46>
    808e:	b9 3f       	cpi	r27, 0xF9	; 249
    8090:	cc f3       	brlt	.-14     	; 0x8084 <__fixunssfsi+0x2e>
    8092:	86 95       	lsr	r24
    8094:	77 95       	ror	r23
    8096:	67 95       	ror	r22
    8098:	b3 95       	inc	r27
    809a:	d9 f7       	brne	.-10     	; 0x8092 <__fixunssfsi+0x3c>
    809c:	3e f4       	brtc	.+14     	; 0x80ac <__fixunssfsi+0x56>
    809e:	90 95       	com	r25
    80a0:	80 95       	com	r24
    80a2:	70 95       	com	r23
    80a4:	61 95       	neg	r22
    80a6:	7f 4f       	sbci	r23, 0xFF	; 255
    80a8:	8f 4f       	sbci	r24, 0xFF	; 255
    80aa:	9f 4f       	sbci	r25, 0xFF	; 255
    80ac:	08 95       	ret

000080ae <__floatunsisf>:
    80ae:	e8 94       	clt
    80b0:	09 c0       	rjmp	.+18     	; 0x80c4 <__floatsisf+0x12>

000080b2 <__floatsisf>:
    80b2:	97 fb       	bst	r25, 7
    80b4:	3e f4       	brtc	.+14     	; 0x80c4 <__floatsisf+0x12>
    80b6:	90 95       	com	r25
    80b8:	80 95       	com	r24
    80ba:	70 95       	com	r23
    80bc:	61 95       	neg	r22
    80be:	7f 4f       	sbci	r23, 0xFF	; 255
    80c0:	8f 4f       	sbci	r24, 0xFF	; 255
    80c2:	9f 4f       	sbci	r25, 0xFF	; 255
    80c4:	99 23       	and	r25, r25
    80c6:	a9 f0       	breq	.+42     	; 0x80f2 <__floatsisf+0x40>
    80c8:	f9 2f       	mov	r31, r25
    80ca:	96 e9       	ldi	r25, 0x96	; 150
    80cc:	bb 27       	eor	r27, r27
    80ce:	93 95       	inc	r25
    80d0:	f6 95       	lsr	r31
    80d2:	87 95       	ror	r24
    80d4:	77 95       	ror	r23
    80d6:	67 95       	ror	r22
    80d8:	b7 95       	ror	r27
    80da:	f1 11       	cpse	r31, r1
    80dc:	f8 cf       	rjmp	.-16     	; 0x80ce <__floatsisf+0x1c>
    80de:	fa f4       	brpl	.+62     	; 0x811e <__floatsisf+0x6c>
    80e0:	bb 0f       	add	r27, r27
    80e2:	11 f4       	brne	.+4      	; 0x80e8 <__floatsisf+0x36>
    80e4:	60 ff       	sbrs	r22, 0
    80e6:	1b c0       	rjmp	.+54     	; 0x811e <__floatsisf+0x6c>
    80e8:	6f 5f       	subi	r22, 0xFF	; 255
    80ea:	7f 4f       	sbci	r23, 0xFF	; 255
    80ec:	8f 4f       	sbci	r24, 0xFF	; 255
    80ee:	9f 4f       	sbci	r25, 0xFF	; 255
    80f0:	16 c0       	rjmp	.+44     	; 0x811e <__floatsisf+0x6c>
    80f2:	88 23       	and	r24, r24
    80f4:	11 f0       	breq	.+4      	; 0x80fa <__floatsisf+0x48>
    80f6:	96 e9       	ldi	r25, 0x96	; 150
    80f8:	11 c0       	rjmp	.+34     	; 0x811c <__floatsisf+0x6a>
    80fa:	77 23       	and	r23, r23
    80fc:	21 f0       	breq	.+8      	; 0x8106 <__floatsisf+0x54>
    80fe:	9e e8       	ldi	r25, 0x8E	; 142
    8100:	87 2f       	mov	r24, r23
    8102:	76 2f       	mov	r23, r22
    8104:	05 c0       	rjmp	.+10     	; 0x8110 <__floatsisf+0x5e>
    8106:	66 23       	and	r22, r22
    8108:	71 f0       	breq	.+28     	; 0x8126 <__floatsisf+0x74>
    810a:	96 e8       	ldi	r25, 0x86	; 134
    810c:	86 2f       	mov	r24, r22
    810e:	70 e0       	ldi	r23, 0x00	; 0
    8110:	60 e0       	ldi	r22, 0x00	; 0
    8112:	2a f0       	brmi	.+10     	; 0x811e <__floatsisf+0x6c>
    8114:	9a 95       	dec	r25
    8116:	66 0f       	add	r22, r22
    8118:	77 1f       	adc	r23, r23
    811a:	88 1f       	adc	r24, r24
    811c:	da f7       	brpl	.-10     	; 0x8114 <__floatsisf+0x62>
    811e:	88 0f       	add	r24, r24
    8120:	96 95       	lsr	r25
    8122:	87 95       	ror	r24
    8124:	97 f9       	bld	r25, 7
    8126:	08 95       	ret

00008128 <__fp_cmp>:
    8128:	99 0f       	add	r25, r25
    812a:	00 08       	sbc	r0, r0
    812c:	55 0f       	add	r21, r21
    812e:	aa 0b       	sbc	r26, r26
    8130:	e0 e8       	ldi	r30, 0x80	; 128
    8132:	fe ef       	ldi	r31, 0xFE	; 254
    8134:	16 16       	cp	r1, r22
    8136:	17 06       	cpc	r1, r23
    8138:	e8 07       	cpc	r30, r24
    813a:	f9 07       	cpc	r31, r25
    813c:	c0 f0       	brcs	.+48     	; 0x816e <__fp_cmp+0x46>
    813e:	12 16       	cp	r1, r18
    8140:	13 06       	cpc	r1, r19
    8142:	e4 07       	cpc	r30, r20
    8144:	f5 07       	cpc	r31, r21
    8146:	98 f0       	brcs	.+38     	; 0x816e <__fp_cmp+0x46>
    8148:	62 1b       	sub	r22, r18
    814a:	73 0b       	sbc	r23, r19
    814c:	84 0b       	sbc	r24, r20
    814e:	95 0b       	sbc	r25, r21
    8150:	39 f4       	brne	.+14     	; 0x8160 <__fp_cmp+0x38>
    8152:	0a 26       	eor	r0, r26
    8154:	61 f0       	breq	.+24     	; 0x816e <__fp_cmp+0x46>
    8156:	23 2b       	or	r18, r19
    8158:	24 2b       	or	r18, r20
    815a:	25 2b       	or	r18, r21
    815c:	21 f4       	brne	.+8      	; 0x8166 <__fp_cmp+0x3e>
    815e:	08 95       	ret
    8160:	0a 26       	eor	r0, r26
    8162:	09 f4       	brne	.+2      	; 0x8166 <__fp_cmp+0x3e>
    8164:	a1 40       	sbci	r26, 0x01	; 1
    8166:	a6 95       	lsr	r26
    8168:	8f ef       	ldi	r24, 0xFF	; 255
    816a:	81 1d       	adc	r24, r1
    816c:	81 1d       	adc	r24, r1
    816e:	08 95       	ret

00008170 <__fp_inf>:
    8170:	97 f9       	bld	r25, 7
    8172:	9f 67       	ori	r25, 0x7F	; 127
    8174:	80 e8       	ldi	r24, 0x80	; 128
    8176:	70 e0       	ldi	r23, 0x00	; 0
    8178:	60 e0       	ldi	r22, 0x00	; 0
    817a:	08 95       	ret

0000817c <__fp_nan>:
    817c:	9f ef       	ldi	r25, 0xFF	; 255
    817e:	80 ec       	ldi	r24, 0xC0	; 192
    8180:	08 95       	ret

00008182 <__fp_powser>:
    8182:	df 93       	push	r29
    8184:	cf 93       	push	r28
    8186:	1f 93       	push	r17
    8188:	0f 93       	push	r16
    818a:	ff 92       	push	r15
    818c:	ef 92       	push	r14
    818e:	df 92       	push	r13
    8190:	7b 01       	movw	r14, r22
    8192:	8c 01       	movw	r16, r24
    8194:	68 94       	set
    8196:	05 c0       	rjmp	.+10     	; 0x81a2 <__fp_powser+0x20>
    8198:	da 2e       	mov	r13, r26
    819a:	ef 01       	movw	r28, r30
    819c:	ab d0       	rcall	.+342    	; 0x82f4 <__mulsf3x>
    819e:	fe 01       	movw	r30, r28
    81a0:	e8 94       	clt
    81a2:	a5 91       	lpm	r26, Z+
    81a4:	25 91       	lpm	r18, Z+
    81a6:	35 91       	lpm	r19, Z+
    81a8:	45 91       	lpm	r20, Z+
    81aa:	55 91       	lpm	r21, Z+
    81ac:	ae f3       	brts	.-22     	; 0x8198 <__fp_powser+0x16>
    81ae:	ef 01       	movw	r28, r30
    81b0:	29 de       	rcall	.-942    	; 0x7e04 <__addsf3x>
    81b2:	fe 01       	movw	r30, r28
    81b4:	97 01       	movw	r18, r14
    81b6:	a8 01       	movw	r20, r16
    81b8:	da 94       	dec	r13
    81ba:	79 f7       	brne	.-34     	; 0x819a <__fp_powser+0x18>
    81bc:	df 90       	pop	r13
    81be:	ef 90       	pop	r14
    81c0:	ff 90       	pop	r15
    81c2:	0f 91       	pop	r16
    81c4:	1f 91       	pop	r17
    81c6:	cf 91       	pop	r28
    81c8:	df 91       	pop	r29
    81ca:	08 95       	ret

000081cc <__fp_pscA>:
    81cc:	00 24       	eor	r0, r0
    81ce:	0a 94       	dec	r0
    81d0:	16 16       	cp	r1, r22
    81d2:	17 06       	cpc	r1, r23
    81d4:	18 06       	cpc	r1, r24
    81d6:	09 06       	cpc	r0, r25
    81d8:	08 95       	ret

000081da <__fp_pscB>:
    81da:	00 24       	eor	r0, r0
    81dc:	0a 94       	dec	r0
    81de:	12 16       	cp	r1, r18
    81e0:	13 06       	cpc	r1, r19
    81e2:	14 06       	cpc	r1, r20
    81e4:	05 06       	cpc	r0, r21
    81e6:	08 95       	ret
    81e8:	c9 cf       	rjmp	.-110    	; 0x817c <__fp_nan>

000081ea <__fp_rempio2>:
    81ea:	50 d0       	rcall	.+160    	; 0x828c <__fp_splitA>
    81ec:	e8 f3       	brcs	.-6      	; 0x81e8 <__fp_pscB+0xe>
    81ee:	e8 94       	clt
    81f0:	e0 e0       	ldi	r30, 0x00	; 0
    81f2:	bb 27       	eor	r27, r27
    81f4:	9f 57       	subi	r25, 0x7F	; 127
    81f6:	f0 f0       	brcs	.+60     	; 0x8234 <__fp_rempio2+0x4a>
    81f8:	2a ed       	ldi	r18, 0xDA	; 218
    81fa:	3f e0       	ldi	r19, 0x0F	; 15
    81fc:	49 ec       	ldi	r20, 0xC9	; 201
    81fe:	06 c0       	rjmp	.+12     	; 0x820c <__fp_rempio2+0x22>
    8200:	ee 0f       	add	r30, r30
    8202:	bb 0f       	add	r27, r27
    8204:	66 1f       	adc	r22, r22
    8206:	77 1f       	adc	r23, r23
    8208:	88 1f       	adc	r24, r24
    820a:	28 f0       	brcs	.+10     	; 0x8216 <__fp_rempio2+0x2c>
    820c:	b2 3a       	cpi	r27, 0xA2	; 162
    820e:	62 07       	cpc	r22, r18
    8210:	73 07       	cpc	r23, r19
    8212:	84 07       	cpc	r24, r20
    8214:	28 f0       	brcs	.+10     	; 0x8220 <__fp_rempio2+0x36>
    8216:	b2 5a       	subi	r27, 0xA2	; 162
    8218:	62 0b       	sbc	r22, r18
    821a:	73 0b       	sbc	r23, r19
    821c:	84 0b       	sbc	r24, r20
    821e:	e3 95       	inc	r30
    8220:	9a 95       	dec	r25
    8222:	72 f7       	brpl	.-36     	; 0x8200 <__fp_rempio2+0x16>
    8224:	80 38       	cpi	r24, 0x80	; 128
    8226:	30 f4       	brcc	.+12     	; 0x8234 <__fp_rempio2+0x4a>
    8228:	9a 95       	dec	r25
    822a:	bb 0f       	add	r27, r27
    822c:	66 1f       	adc	r22, r22
    822e:	77 1f       	adc	r23, r23
    8230:	88 1f       	adc	r24, r24
    8232:	d2 f7       	brpl	.-12     	; 0x8228 <__fp_rempio2+0x3e>
    8234:	90 48       	sbci	r25, 0x80	; 128
    8236:	c0 c0       	rjmp	.+384    	; 0x83b8 <__fp_mpack_finite>

00008238 <__fp_round>:
    8238:	09 2e       	mov	r0, r25
    823a:	03 94       	inc	r0
    823c:	00 0c       	add	r0, r0
    823e:	11 f4       	brne	.+4      	; 0x8244 <__fp_round+0xc>
    8240:	88 23       	and	r24, r24
    8242:	52 f0       	brmi	.+20     	; 0x8258 <__fp_round+0x20>
    8244:	bb 0f       	add	r27, r27
    8246:	40 f4       	brcc	.+16     	; 0x8258 <__fp_round+0x20>
    8248:	bf 2b       	or	r27, r31
    824a:	11 f4       	brne	.+4      	; 0x8250 <__fp_round+0x18>
    824c:	60 ff       	sbrs	r22, 0
    824e:	04 c0       	rjmp	.+8      	; 0x8258 <__fp_round+0x20>
    8250:	6f 5f       	subi	r22, 0xFF	; 255
    8252:	7f 4f       	sbci	r23, 0xFF	; 255
    8254:	8f 4f       	sbci	r24, 0xFF	; 255
    8256:	9f 4f       	sbci	r25, 0xFF	; 255
    8258:	08 95       	ret

0000825a <__fp_sinus>:
    825a:	ef 93       	push	r30
    825c:	e0 ff       	sbrs	r30, 0
    825e:	06 c0       	rjmp	.+12     	; 0x826c <__fp_sinus+0x12>
    8260:	a2 ea       	ldi	r26, 0xA2	; 162
    8262:	2a ed       	ldi	r18, 0xDA	; 218
    8264:	3f e0       	ldi	r19, 0x0F	; 15
    8266:	49 ec       	ldi	r20, 0xC9	; 201
    8268:	5f eb       	ldi	r21, 0xBF	; 191
    826a:	cc dd       	rcall	.-1128   	; 0x7e04 <__addsf3x>
    826c:	e5 df       	rcall	.-54     	; 0x8238 <__fp_round>
    826e:	0f 90       	pop	r0
    8270:	03 94       	inc	r0
    8272:	01 fc       	sbrc	r0, 1
    8274:	90 58       	subi	r25, 0x80	; 128
    8276:	eb e7       	ldi	r30, 0x7B	; 123
    8278:	f1 e0       	ldi	r31, 0x01	; 1
    827a:	aa c0       	rjmp	.+340    	; 0x83d0 <__fp_powsodd>

0000827c <__fp_split3>:
    827c:	57 fd       	sbrc	r21, 7
    827e:	90 58       	subi	r25, 0x80	; 128
    8280:	44 0f       	add	r20, r20
    8282:	55 1f       	adc	r21, r21
    8284:	59 f0       	breq	.+22     	; 0x829c <__fp_splitA+0x10>
    8286:	5f 3f       	cpi	r21, 0xFF	; 255
    8288:	71 f0       	breq	.+28     	; 0x82a6 <__fp_splitA+0x1a>
    828a:	47 95       	ror	r20

0000828c <__fp_splitA>:
    828c:	88 0f       	add	r24, r24
    828e:	97 fb       	bst	r25, 7
    8290:	99 1f       	adc	r25, r25
    8292:	61 f0       	breq	.+24     	; 0x82ac <__fp_splitA+0x20>
    8294:	9f 3f       	cpi	r25, 0xFF	; 255
    8296:	79 f0       	breq	.+30     	; 0x82b6 <__fp_splitA+0x2a>
    8298:	87 95       	ror	r24
    829a:	08 95       	ret
    829c:	12 16       	cp	r1, r18
    829e:	13 06       	cpc	r1, r19
    82a0:	14 06       	cpc	r1, r20
    82a2:	55 1f       	adc	r21, r21
    82a4:	f2 cf       	rjmp	.-28     	; 0x828a <__fp_split3+0xe>
    82a6:	46 95       	lsr	r20
    82a8:	f1 df       	rcall	.-30     	; 0x828c <__fp_splitA>
    82aa:	08 c0       	rjmp	.+16     	; 0x82bc <__fp_splitA+0x30>
    82ac:	16 16       	cp	r1, r22
    82ae:	17 06       	cpc	r1, r23
    82b0:	18 06       	cpc	r1, r24
    82b2:	99 1f       	adc	r25, r25
    82b4:	f1 cf       	rjmp	.-30     	; 0x8298 <__fp_splitA+0xc>
    82b6:	86 95       	lsr	r24
    82b8:	71 05       	cpc	r23, r1
    82ba:	61 05       	cpc	r22, r1
    82bc:	08 94       	sec
    82be:	08 95       	ret

000082c0 <__fp_zero>:
    82c0:	e8 94       	clt

000082c2 <__fp_szero>:
    82c2:	bb 27       	eor	r27, r27
    82c4:	66 27       	eor	r22, r22
    82c6:	77 27       	eor	r23, r23
    82c8:	cb 01       	movw	r24, r22
    82ca:	97 f9       	bld	r25, 7
    82cc:	08 95       	ret

000082ce <inverse>:
    82ce:	9b 01       	movw	r18, r22
    82d0:	ac 01       	movw	r20, r24
    82d2:	60 e0       	ldi	r22, 0x00	; 0
    82d4:	70 e0       	ldi	r23, 0x00	; 0
    82d6:	80 e8       	ldi	r24, 0x80	; 128
    82d8:	9f e3       	ldi	r25, 0x3F	; 63
    82da:	50 ce       	rjmp	.-864    	; 0x7f7c <__divsf3>

000082dc <__mulsf3>:
    82dc:	0b d0       	rcall	.+22     	; 0x82f4 <__mulsf3x>
    82de:	ac cf       	rjmp	.-168    	; 0x8238 <__fp_round>
    82e0:	75 df       	rcall	.-278    	; 0x81cc <__fp_pscA>
    82e2:	28 f0       	brcs	.+10     	; 0x82ee <__mulsf3+0x12>
    82e4:	7a df       	rcall	.-268    	; 0x81da <__fp_pscB>
    82e6:	18 f0       	brcs	.+6      	; 0x82ee <__mulsf3+0x12>
    82e8:	95 23       	and	r25, r21
    82ea:	09 f0       	breq	.+2      	; 0x82ee <__mulsf3+0x12>
    82ec:	41 cf       	rjmp	.-382    	; 0x8170 <__fp_inf>
    82ee:	46 cf       	rjmp	.-372    	; 0x817c <__fp_nan>
    82f0:	11 24       	eor	r1, r1
    82f2:	e7 cf       	rjmp	.-50     	; 0x82c2 <__fp_szero>

000082f4 <__mulsf3x>:
    82f4:	c3 df       	rcall	.-122    	; 0x827c <__fp_split3>
    82f6:	a0 f3       	brcs	.-24     	; 0x82e0 <__mulsf3+0x4>

000082f8 <__mulsf3_pse>:
    82f8:	95 9f       	mul	r25, r21
    82fa:	d1 f3       	breq	.-12     	; 0x82f0 <__mulsf3+0x14>
    82fc:	95 0f       	add	r25, r21
    82fe:	50 e0       	ldi	r21, 0x00	; 0
    8300:	55 1f       	adc	r21, r21
    8302:	62 9f       	mul	r22, r18
    8304:	f0 01       	movw	r30, r0
    8306:	72 9f       	mul	r23, r18
    8308:	bb 27       	eor	r27, r27
    830a:	f0 0d       	add	r31, r0
    830c:	b1 1d       	adc	r27, r1
    830e:	63 9f       	mul	r22, r19
    8310:	aa 27       	eor	r26, r26
    8312:	f0 0d       	add	r31, r0
    8314:	b1 1d       	adc	r27, r1
    8316:	aa 1f       	adc	r26, r26
    8318:	64 9f       	mul	r22, r20
    831a:	66 27       	eor	r22, r22
    831c:	b0 0d       	add	r27, r0
    831e:	a1 1d       	adc	r26, r1
    8320:	66 1f       	adc	r22, r22
    8322:	82 9f       	mul	r24, r18
    8324:	22 27       	eor	r18, r18
    8326:	b0 0d       	add	r27, r0
    8328:	a1 1d       	adc	r26, r1
    832a:	62 1f       	adc	r22, r18
    832c:	73 9f       	mul	r23, r19
    832e:	b0 0d       	add	r27, r0
    8330:	a1 1d       	adc	r26, r1
    8332:	62 1f       	adc	r22, r18
    8334:	83 9f       	mul	r24, r19
    8336:	a0 0d       	add	r26, r0
    8338:	61 1d       	adc	r22, r1
    833a:	22 1f       	adc	r18, r18
    833c:	74 9f       	mul	r23, r20
    833e:	33 27       	eor	r19, r19
    8340:	a0 0d       	add	r26, r0
    8342:	61 1d       	adc	r22, r1
    8344:	23 1f       	adc	r18, r19
    8346:	84 9f       	mul	r24, r20
    8348:	60 0d       	add	r22, r0
    834a:	21 1d       	adc	r18, r1
    834c:	82 2f       	mov	r24, r18
    834e:	76 2f       	mov	r23, r22
    8350:	6a 2f       	mov	r22, r26
    8352:	11 24       	eor	r1, r1
    8354:	9f 57       	subi	r25, 0x7F	; 127
    8356:	50 40       	sbci	r21, 0x00	; 0
    8358:	8a f0       	brmi	.+34     	; 0x837c <__mulsf3_pse+0x84>
    835a:	e1 f0       	breq	.+56     	; 0x8394 <__mulsf3_pse+0x9c>
    835c:	88 23       	and	r24, r24
    835e:	4a f0       	brmi	.+18     	; 0x8372 <__mulsf3_pse+0x7a>
    8360:	ee 0f       	add	r30, r30
    8362:	ff 1f       	adc	r31, r31
    8364:	bb 1f       	adc	r27, r27
    8366:	66 1f       	adc	r22, r22
    8368:	77 1f       	adc	r23, r23
    836a:	88 1f       	adc	r24, r24
    836c:	91 50       	subi	r25, 0x01	; 1
    836e:	50 40       	sbci	r21, 0x00	; 0
    8370:	a9 f7       	brne	.-22     	; 0x835c <__mulsf3_pse+0x64>
    8372:	9e 3f       	cpi	r25, 0xFE	; 254
    8374:	51 05       	cpc	r21, r1
    8376:	70 f0       	brcs	.+28     	; 0x8394 <__mulsf3_pse+0x9c>
    8378:	fb ce       	rjmp	.-522    	; 0x8170 <__fp_inf>
    837a:	a3 cf       	rjmp	.-186    	; 0x82c2 <__fp_szero>
    837c:	5f 3f       	cpi	r21, 0xFF	; 255
    837e:	ec f3       	brlt	.-6      	; 0x837a <__mulsf3_pse+0x82>
    8380:	98 3e       	cpi	r25, 0xE8	; 232
    8382:	dc f3       	brlt	.-10     	; 0x837a <__mulsf3_pse+0x82>
    8384:	86 95       	lsr	r24
    8386:	77 95       	ror	r23
    8388:	67 95       	ror	r22
    838a:	b7 95       	ror	r27
    838c:	f7 95       	ror	r31
    838e:	e7 95       	ror	r30
    8390:	9f 5f       	subi	r25, 0xFF	; 255
    8392:	c1 f7       	brne	.-16     	; 0x8384 <__mulsf3_pse+0x8c>
    8394:	fe 2b       	or	r31, r30
    8396:	88 0f       	add	r24, r24
    8398:	91 1d       	adc	r25, r1
    839a:	96 95       	lsr	r25
    839c:	87 95       	ror	r24
    839e:	97 f9       	bld	r25, 7
    83a0:	08 95       	ret

000083a2 <sin>:
    83a2:	9f 93       	push	r25
    83a4:	22 df       	rcall	.-444    	; 0x81ea <__fp_rempio2>
    83a6:	0f 90       	pop	r0
    83a8:	07 fc       	sbrc	r0, 7
    83aa:	ee 5f       	subi	r30, 0xFE	; 254
    83ac:	56 cf       	rjmp	.-340    	; 0x825a <__fp_sinus>

000083ae <square>:
    83ae:	9b 01       	movw	r18, r22
    83b0:	ac 01       	movw	r20, r24
    83b2:	94 cf       	rjmp	.-216    	; 0x82dc <__mulsf3>

000083b4 <__fp_mpack>:
    83b4:	9f 3f       	cpi	r25, 0xFF	; 255
    83b6:	31 f0       	breq	.+12     	; 0x83c4 <__fp_mpack_finite+0xc>

000083b8 <__fp_mpack_finite>:
    83b8:	91 50       	subi	r25, 0x01	; 1
    83ba:	20 f4       	brcc	.+8      	; 0x83c4 <__fp_mpack_finite+0xc>
    83bc:	87 95       	ror	r24
    83be:	77 95       	ror	r23
    83c0:	67 95       	ror	r22
    83c2:	b7 95       	ror	r27
    83c4:	88 0f       	add	r24, r24
    83c6:	91 1d       	adc	r25, r1
    83c8:	96 95       	lsr	r25
    83ca:	87 95       	ror	r24
    83cc:	97 f9       	bld	r25, 7
    83ce:	08 95       	ret

000083d0 <__fp_powsodd>:
    83d0:	9f 93       	push	r25
    83d2:	8f 93       	push	r24
    83d4:	7f 93       	push	r23
    83d6:	6f 93       	push	r22
    83d8:	ff 93       	push	r31
    83da:	ef 93       	push	r30
    83dc:	9b 01       	movw	r18, r22
    83de:	ac 01       	movw	r20, r24
    83e0:	7d df       	rcall	.-262    	; 0x82dc <__mulsf3>
    83e2:	ef 91       	pop	r30
    83e4:	ff 91       	pop	r31
    83e6:	cd de       	rcall	.-614    	; 0x8182 <__fp_powser>
    83e8:	2f 91       	pop	r18
    83ea:	3f 91       	pop	r19
    83ec:	4f 91       	pop	r20
    83ee:	5f 91       	pop	r21
    83f0:	75 cf       	rjmp	.-278    	; 0x82dc <__mulsf3>

000083f2 <__mulsi3>:
    83f2:	62 9f       	mul	r22, r18
    83f4:	d0 01       	movw	r26, r0
    83f6:	73 9f       	mul	r23, r19
    83f8:	f0 01       	movw	r30, r0
    83fa:	82 9f       	mul	r24, r18
    83fc:	e0 0d       	add	r30, r0
    83fe:	f1 1d       	adc	r31, r1
    8400:	64 9f       	mul	r22, r20
    8402:	e0 0d       	add	r30, r0
    8404:	f1 1d       	adc	r31, r1
    8406:	92 9f       	mul	r25, r18
    8408:	f0 0d       	add	r31, r0
    840a:	83 9f       	mul	r24, r19
    840c:	f0 0d       	add	r31, r0
    840e:	74 9f       	mul	r23, r20
    8410:	f0 0d       	add	r31, r0
    8412:	65 9f       	mul	r22, r21
    8414:	f0 0d       	add	r31, r0
    8416:	99 27       	eor	r25, r25
    8418:	72 9f       	mul	r23, r18
    841a:	b0 0d       	add	r27, r0
    841c:	e1 1d       	adc	r30, r1
    841e:	f9 1f       	adc	r31, r25
    8420:	63 9f       	mul	r22, r19
    8422:	b0 0d       	add	r27, r0
    8424:	e1 1d       	adc	r30, r1
    8426:	f9 1f       	adc	r31, r25
    8428:	bd 01       	movw	r22, r26
    842a:	cf 01       	movw	r24, r30
    842c:	11 24       	eor	r1, r1
    842e:	08 95       	ret

00008430 <__udivmodhi4>:
    8430:	aa 1b       	sub	r26, r26
    8432:	bb 1b       	sub	r27, r27
    8434:	51 e1       	ldi	r21, 0x11	; 17
    8436:	07 c0       	rjmp	.+14     	; 0x8446 <__udivmodhi4_ep>

00008438 <__udivmodhi4_loop>:
    8438:	aa 1f       	adc	r26, r26
    843a:	bb 1f       	adc	r27, r27
    843c:	a6 17       	cp	r26, r22
    843e:	b7 07       	cpc	r27, r23
    8440:	10 f0       	brcs	.+4      	; 0x8446 <__udivmodhi4_ep>
    8442:	a6 1b       	sub	r26, r22
    8444:	b7 0b       	sbc	r27, r23

00008446 <__udivmodhi4_ep>:
    8446:	88 1f       	adc	r24, r24
    8448:	99 1f       	adc	r25, r25
    844a:	5a 95       	dec	r21
    844c:	a9 f7       	brne	.-22     	; 0x8438 <__udivmodhi4_loop>
    844e:	80 95       	com	r24
    8450:	90 95       	com	r25
    8452:	bc 01       	movw	r22, r24
    8454:	cd 01       	movw	r24, r26
    8456:	08 95       	ret

00008458 <__divmodhi4>:
    8458:	97 fb       	bst	r25, 7
    845a:	09 2e       	mov	r0, r25
    845c:	07 26       	eor	r0, r23
    845e:	0a d0       	rcall	.+20     	; 0x8474 <__divmodhi4_neg1>
    8460:	77 fd       	sbrc	r23, 7
    8462:	04 d0       	rcall	.+8      	; 0x846c <__divmodhi4_neg2>
    8464:	e5 df       	rcall	.-54     	; 0x8430 <__udivmodhi4>
    8466:	06 d0       	rcall	.+12     	; 0x8474 <__divmodhi4_neg1>
    8468:	00 20       	and	r0, r0
    846a:	1a f4       	brpl	.+6      	; 0x8472 <__divmodhi4_exit>

0000846c <__divmodhi4_neg2>:
    846c:	70 95       	com	r23
    846e:	61 95       	neg	r22
    8470:	7f 4f       	sbci	r23, 0xFF	; 255

00008472 <__divmodhi4_exit>:
    8472:	08 95       	ret

00008474 <__divmodhi4_neg1>:
    8474:	f6 f7       	brtc	.-4      	; 0x8472 <__divmodhi4_exit>
    8476:	90 95       	com	r25
    8478:	81 95       	neg	r24
    847a:	9f 4f       	sbci	r25, 0xFF	; 255
    847c:	08 95       	ret

0000847e <__divmodsi4>:
    847e:	97 fb       	bst	r25, 7
    8480:	09 2e       	mov	r0, r25
    8482:	05 26       	eor	r0, r21
    8484:	0e d0       	rcall	.+28     	; 0x84a2 <__divmodsi4_neg1>
    8486:	57 fd       	sbrc	r21, 7
    8488:	04 d0       	rcall	.+8      	; 0x8492 <__divmodsi4_neg2>
    848a:	14 d0       	rcall	.+40     	; 0x84b4 <__udivmodsi4>
    848c:	0a d0       	rcall	.+20     	; 0x84a2 <__divmodsi4_neg1>
    848e:	00 1c       	adc	r0, r0
    8490:	38 f4       	brcc	.+14     	; 0x84a0 <__divmodsi4_exit>

00008492 <__divmodsi4_neg2>:
    8492:	50 95       	com	r21
    8494:	40 95       	com	r20
    8496:	30 95       	com	r19
    8498:	21 95       	neg	r18
    849a:	3f 4f       	sbci	r19, 0xFF	; 255
    849c:	4f 4f       	sbci	r20, 0xFF	; 255
    849e:	5f 4f       	sbci	r21, 0xFF	; 255

000084a0 <__divmodsi4_exit>:
    84a0:	08 95       	ret

000084a2 <__divmodsi4_neg1>:
    84a2:	f6 f7       	brtc	.-4      	; 0x84a0 <__divmodsi4_exit>
    84a4:	90 95       	com	r25
    84a6:	80 95       	com	r24
    84a8:	70 95       	com	r23
    84aa:	61 95       	neg	r22
    84ac:	7f 4f       	sbci	r23, 0xFF	; 255
    84ae:	8f 4f       	sbci	r24, 0xFF	; 255
    84b0:	9f 4f       	sbci	r25, 0xFF	; 255
    84b2:	08 95       	ret

000084b4 <__udivmodsi4>:
    84b4:	a1 e2       	ldi	r26, 0x21	; 33
    84b6:	1a 2e       	mov	r1, r26
    84b8:	aa 1b       	sub	r26, r26
    84ba:	bb 1b       	sub	r27, r27
    84bc:	fd 01       	movw	r30, r26
    84be:	0d c0       	rjmp	.+26     	; 0x84da <__udivmodsi4_ep>

000084c0 <__udivmodsi4_loop>:
    84c0:	aa 1f       	adc	r26, r26
    84c2:	bb 1f       	adc	r27, r27
    84c4:	ee 1f       	adc	r30, r30
    84c6:	ff 1f       	adc	r31, r31
    84c8:	a2 17       	cp	r26, r18
    84ca:	b3 07       	cpc	r27, r19
    84cc:	e4 07       	cpc	r30, r20
    84ce:	f5 07       	cpc	r31, r21
    84d0:	20 f0       	brcs	.+8      	; 0x84da <__udivmodsi4_ep>
    84d2:	a2 1b       	sub	r26, r18
    84d4:	b3 0b       	sbc	r27, r19
    84d6:	e4 0b       	sbc	r30, r20
    84d8:	f5 0b       	sbc	r31, r21

000084da <__udivmodsi4_ep>:
    84da:	66 1f       	adc	r22, r22
    84dc:	77 1f       	adc	r23, r23
    84de:	88 1f       	adc	r24, r24
    84e0:	99 1f       	adc	r25, r25
    84e2:	1a 94       	dec	r1
    84e4:	69 f7       	brne	.-38     	; 0x84c0 <__udivmodsi4_loop>
    84e6:	60 95       	com	r22
    84e8:	70 95       	com	r23
    84ea:	80 95       	com	r24
    84ec:	90 95       	com	r25
    84ee:	9b 01       	movw	r18, r22
    84f0:	ac 01       	movw	r20, r24
    84f2:	bd 01       	movw	r22, r26
    84f4:	cf 01       	movw	r24, r30
    84f6:	08 95       	ret

000084f8 <do_rand>:
    84f8:	af 92       	push	r10
    84fa:	bf 92       	push	r11
    84fc:	cf 92       	push	r12
    84fe:	df 92       	push	r13
    8500:	ef 92       	push	r14
    8502:	ff 92       	push	r15
    8504:	0f 93       	push	r16
    8506:	1f 93       	push	r17
    8508:	cf 93       	push	r28
    850a:	df 93       	push	r29
    850c:	ec 01       	movw	r28, r24
    850e:	68 81       	ld	r22, Y
    8510:	79 81       	ldd	r23, Y+1	; 0x01
    8512:	8a 81       	ldd	r24, Y+2	; 0x02
    8514:	9b 81       	ldd	r25, Y+3	; 0x03
    8516:	61 15       	cp	r22, r1
    8518:	71 05       	cpc	r23, r1
    851a:	81 05       	cpc	r24, r1
    851c:	91 05       	cpc	r25, r1
    851e:	21 f4       	brne	.+8      	; 0x8528 <do_rand+0x30>
    8520:	64 e2       	ldi	r22, 0x24	; 36
    8522:	79 ed       	ldi	r23, 0xD9	; 217
    8524:	8b e5       	ldi	r24, 0x5B	; 91
    8526:	97 e0       	ldi	r25, 0x07	; 7
    8528:	2d e1       	ldi	r18, 0x1D	; 29
    852a:	33 ef       	ldi	r19, 0xF3	; 243
    852c:	41 e0       	ldi	r20, 0x01	; 1
    852e:	50 e0       	ldi	r21, 0x00	; 0
    8530:	0e 94 3f 42 	call	0x847e	; 0x847e <__divmodsi4>
    8534:	79 01       	movw	r14, r18
    8536:	8a 01       	movw	r16, r20
    8538:	27 ea       	ldi	r18, 0xA7	; 167
    853a:	31 e4       	ldi	r19, 0x41	; 65
    853c:	40 e0       	ldi	r20, 0x00	; 0
    853e:	50 e0       	ldi	r21, 0x00	; 0
    8540:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <__mulsi3>
    8544:	5b 01       	movw	r10, r22
    8546:	6c 01       	movw	r12, r24
    8548:	c8 01       	movw	r24, r16
    854a:	b7 01       	movw	r22, r14
    854c:	2c ee       	ldi	r18, 0xEC	; 236
    854e:	34 ef       	ldi	r19, 0xF4	; 244
    8550:	4f ef       	ldi	r20, 0xFF	; 255
    8552:	5f ef       	ldi	r21, 0xFF	; 255
    8554:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <__mulsi3>
    8558:	6a 0d       	add	r22, r10
    855a:	7b 1d       	adc	r23, r11
    855c:	8c 1d       	adc	r24, r12
    855e:	9d 1d       	adc	r25, r13
    8560:	97 ff       	sbrs	r25, 7
    8562:	04 c0       	rjmp	.+8      	; 0x856c <do_rand+0x74>
    8564:	61 50       	subi	r22, 0x01	; 1
    8566:	70 40       	sbci	r23, 0x00	; 0
    8568:	80 40       	sbci	r24, 0x00	; 0
    856a:	90 48       	sbci	r25, 0x80	; 128
    856c:	68 83       	st	Y, r22
    856e:	79 83       	std	Y+1, r23	; 0x01
    8570:	8a 83       	std	Y+2, r24	; 0x02
    8572:	9b 83       	std	Y+3, r25	; 0x03
    8574:	7f 77       	andi	r23, 0x7F	; 127
    8576:	cb 01       	movw	r24, r22
    8578:	df 91       	pop	r29
    857a:	cf 91       	pop	r28
    857c:	1f 91       	pop	r17
    857e:	0f 91       	pop	r16
    8580:	ff 90       	pop	r15
    8582:	ef 90       	pop	r14
    8584:	df 90       	pop	r13
    8586:	cf 90       	pop	r12
    8588:	bf 90       	pop	r11
    858a:	af 90       	pop	r10
    858c:	08 95       	ret

0000858e <rand_r>:
    858e:	0e 94 7c 42 	call	0x84f8	; 0x84f8 <do_rand>
    8592:	08 95       	ret

00008594 <rand>:
    8594:	88 e1       	ldi	r24, 0x18	; 24
    8596:	92 e0       	ldi	r25, 0x02	; 2
    8598:	0e 94 7c 42 	call	0x84f8	; 0x84f8 <do_rand>
    859c:	08 95       	ret

0000859e <srand>:
    859e:	a0 e0       	ldi	r26, 0x00	; 0
    85a0:	b0 e0       	ldi	r27, 0x00	; 0
    85a2:	80 93 18 02 	sts	0x0218, r24
    85a6:	90 93 19 02 	sts	0x0219, r25
    85aa:	a0 93 1a 02 	sts	0x021A, r26
    85ae:	b0 93 1b 02 	sts	0x021B, r27
    85b2:	08 95       	ret

000085b4 <__eerd_block_m2560>:
    85b4:	dc 01       	movw	r26, r24
    85b6:	cb 01       	movw	r24, r22

000085b8 <__eerd_blraw_m2560>:
    85b8:	fc 01       	movw	r30, r24
    85ba:	f9 99       	sbic	0x1f, 1	; 31
    85bc:	fe cf       	rjmp	.-4      	; 0x85ba <__eerd_blraw_m2560+0x2>
    85be:	06 c0       	rjmp	.+12     	; 0x85cc <__eerd_blraw_m2560+0x14>
    85c0:	f2 bd       	out	0x22, r31	; 34
    85c2:	e1 bd       	out	0x21, r30	; 33
    85c4:	f8 9a       	sbi	0x1f, 0	; 31
    85c6:	31 96       	adiw	r30, 0x01	; 1
    85c8:	00 b4       	in	r0, 0x20	; 32
    85ca:	0d 92       	st	X+, r0
    85cc:	41 50       	subi	r20, 0x01	; 1
    85ce:	50 40       	sbci	r21, 0x00	; 0
    85d0:	b8 f7       	brcc	.-18     	; 0x85c0 <__eerd_blraw_m2560+0x8>
    85d2:	08 95       	ret

000085d4 <__eerd_byte_m2560>:
    85d4:	f9 99       	sbic	0x1f, 1	; 31
    85d6:	fe cf       	rjmp	.-4      	; 0x85d4 <__eerd_byte_m2560>
    85d8:	92 bd       	out	0x22, r25	; 34
    85da:	81 bd       	out	0x21, r24	; 33
    85dc:	f8 9a       	sbi	0x1f, 0	; 31
    85de:	99 27       	eor	r25, r25
    85e0:	80 b5       	in	r24, 0x20	; 32
    85e2:	08 95       	ret

000085e4 <__eerd_word_m2560>:
    85e4:	a8 e1       	ldi	r26, 0x18	; 24
    85e6:	b0 e0       	ldi	r27, 0x00	; 0
    85e8:	42 e0       	ldi	r20, 0x02	; 2
    85ea:	50 e0       	ldi	r21, 0x00	; 0
    85ec:	0c 94 dc 42 	jmp	0x85b8	; 0x85b8 <__eerd_blraw_m2560>

000085f0 <__eeupd_block_m2560>:
    85f0:	dc 01       	movw	r26, r24
    85f2:	a4 0f       	add	r26, r20
    85f4:	b5 1f       	adc	r27, r21
    85f6:	41 50       	subi	r20, 0x01	; 1
    85f8:	50 40       	sbci	r21, 0x00	; 0
    85fa:	48 f0       	brcs	.+18     	; 0x860e <__eeupd_block_m2560+0x1e>
    85fc:	cb 01       	movw	r24, r22
    85fe:	84 0f       	add	r24, r20
    8600:	95 1f       	adc	r25, r21
    8602:	2e 91       	ld	r18, -X
    8604:	0e 94 09 43 	call	0x8612	; 0x8612 <__eeupd_r18_m2560>
    8608:	41 50       	subi	r20, 0x01	; 1
    860a:	50 40       	sbci	r21, 0x00	; 0
    860c:	d0 f7       	brcc	.-12     	; 0x8602 <__eeupd_block_m2560+0x12>
    860e:	08 95       	ret

00008610 <__eeupd_byte_m2560>:
    8610:	26 2f       	mov	r18, r22

00008612 <__eeupd_r18_m2560>:
    8612:	f9 99       	sbic	0x1f, 1	; 31
    8614:	fe cf       	rjmp	.-4      	; 0x8612 <__eeupd_r18_m2560>
    8616:	92 bd       	out	0x22, r25	; 34
    8618:	81 bd       	out	0x21, r24	; 33
    861a:	f8 9a       	sbi	0x1f, 0	; 31
    861c:	01 97       	sbiw	r24, 0x01	; 1
    861e:	00 b4       	in	r0, 0x20	; 32
    8620:	02 16       	cp	r0, r18
    8622:	39 f0       	breq	.+14     	; 0x8632 <__eeupd_r18_m2560+0x20>
    8624:	1f ba       	out	0x1f, r1	; 31
    8626:	20 bd       	out	0x20, r18	; 32
    8628:	0f b6       	in	r0, 0x3f	; 63
    862a:	f8 94       	cli
    862c:	fa 9a       	sbi	0x1f, 2	; 31
    862e:	f9 9a       	sbi	0x1f, 1	; 31
    8630:	0f be       	out	0x3f, r0	; 63
    8632:	08 95       	ret

00008634 <__eeupd_word_m2560>:
    8634:	01 96       	adiw	r24, 0x01	; 1
    8636:	27 2f       	mov	r18, r23
    8638:	0e 94 09 43 	call	0x8612	; 0x8612 <__eeupd_r18_m2560>
    863c:	0c 94 08 43 	jmp	0x8610	; 0x8610 <__eeupd_byte_m2560>

00008640 <__eewr_byte_m2560>:
    8640:	26 2f       	mov	r18, r22

00008642 <__eewr_r18_m2560>:
    8642:	f9 99       	sbic	0x1f, 1	; 31
    8644:	fe cf       	rjmp	.-4      	; 0x8642 <__eewr_r18_m2560>
    8646:	1f ba       	out	0x1f, r1	; 31
    8648:	92 bd       	out	0x22, r25	; 34
    864a:	81 bd       	out	0x21, r24	; 33
    864c:	20 bd       	out	0x20, r18	; 32
    864e:	0f b6       	in	r0, 0x3f	; 63
    8650:	f8 94       	cli
    8652:	fa 9a       	sbi	0x1f, 2	; 31
    8654:	f9 9a       	sbi	0x1f, 1	; 31
    8656:	0f be       	out	0x3f, r0	; 63
    8658:	01 96       	adiw	r24, 0x01	; 1
    865a:	08 95       	ret

0000865c <__eewr_word_m2560>:
    865c:	0e 94 20 43 	call	0x8640	; 0x8640 <__eewr_byte_m2560>
    8660:	27 2f       	mov	r18, r23
    8662:	0c 94 21 43 	jmp	0x8642	; 0x8642 <__eewr_r18_m2560>

00008666 <_exit>:
    8666:	ff cf       	rjmp	.-2      	; 0x8666 <_exit>
