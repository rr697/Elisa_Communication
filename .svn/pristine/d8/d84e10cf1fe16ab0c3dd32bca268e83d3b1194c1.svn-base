
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800200  00008310  000083a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008310  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000369  0080021c  0080021c  000083c0  2**0
                  ALLOC
  3 .stab         00003714  00000000  00000000  000083c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eb9  00000000  00000000  0000bad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000218  00000000  00000000  0000c98d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001952  00000000  00000000  0000cba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004abf  00000000  00000000  0000e4f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  00012fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005e78  00000000  00000000  00014088  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007f0  00000000  00000000  00019f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000128f  00000000  00000000  0001a6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002358  00000000  00000000  0001b97f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000278  00000000  00000000  0001dcd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000128  00000000  00000000  0001df4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__vector_10>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 63 10 	jmp	0x20c6	; 0x20c6 <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 14 1c 	jmp	0x3828	; 0x3828 <__vector_15>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 df 1a 	jmp	0x35be	; 0x35be <__vector_25>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__vector_29>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 be 32 	jmp	0x657c	; 0x657c <__vector_32>
      84:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__vector_33>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 31 32 	jmp	0x6462	; 0x6462 <__vector_35>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a8:	0c 94 05 32 	jmp	0x640a	; 0x640a <__vector_42>
      ac:	0c 94 1b 32 	jmp	0x6436	; 0x6436 <__vector_43>
      b0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b4:	0c 94 6e 31 	jmp	0x62dc	; 0x62dc <__vector_45>
      b8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      bc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      dc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e4:	40 13       	cpse	r20, r16
      e6:	24 13       	cpse	r18, r20
      e8:	f2 12       	cpse	r15, r18
      ea:	dd 12       	cpse	r13, r29
      ec:	b4 12       	cpse	r11, r20
      ee:	a2 12       	cpse	r10, r18
      f0:	79 12       	cpse	r7, r25
      f2:	5d 12       	cpse	r5, r29
      f4:	24 12       	cpse	r2, r20
      f6:	0c 12       	cpse	r0, r28
      f8:	a5 11       	cpse	r26, r5
      fa:	a5 11       	cpse	r26, r5
      fc:	a5 11       	cpse	r26, r5
      fe:	a5 11       	cpse	r26, r5
     100:	a5 11       	cpse	r26, r5
     102:	a5 11       	cpse	r26, r5
     104:	51 12       	cpse	r5, r17
     106:	01 12       	cpse	r0, r17
     108:	a5 11       	cpse	r26, r5
     10a:	a5 11       	cpse	r26, r5
     10c:	a5 11       	cpse	r26, r5
     10e:	a5 11       	cpse	r26, r5
     110:	a5 11       	cpse	r26, r5
     112:	a5 11       	cpse	r26, r5
     114:	a5 11       	cpse	r26, r5
     116:	a5 11       	cpse	r26, r5
     118:	a5 11       	cpse	r26, r5
     11a:	a5 11       	cpse	r26, r5
     11c:	a5 11       	cpse	r26, r5
     11e:	a5 11       	cpse	r26, r5
     120:	24 12       	cpse	r2, r20
     122:	f2 12       	cpse	r15, r18
     124:	d9 11       	cpse	r29, r9
     126:	cc 11       	cpse	r28, r12
     128:	a5 11       	cpse	r26, r5
     12a:	a5 11       	cpse	r26, r5
     12c:	a5 11       	cpse	r26, r5
     12e:	a5 11       	cpse	r26, r5
     130:	a5 11       	cpse	r26, r5
     132:	a5 11       	cpse	r26, r5
     134:	a5 11       	cpse	r26, r5
     136:	a5 11       	cpse	r26, r5
     138:	a5 11       	cpse	r26, r5
     13a:	a5 11       	cpse	r26, r5
     13c:	a5 11       	cpse	r26, r5
     13e:	a5 11       	cpse	r26, r5
     140:	b4 12       	cpse	r11, r20
     142:	79 12       	cpse	r7, r25
     144:	a5 11       	cpse	r26, r5
     146:	a5 11       	cpse	r26, r5
     148:	40 13       	cpse	r20, r16
     14a:	a2 12       	cpse	r10, r18
     14c:	e5 11       	cpse	r30, r5
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	e0 e1       	ldi	r30, 0x10	; 16
     1b2:	f3 e8       	ldi	r31, 0x83	; 131
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <.do_copy_data_start>

000001b6 <.do_copy_data_loop>:
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0

000001ba <.do_copy_data_start>:
     1ba:	ac 31       	cpi	r26, 0x1C	; 28
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <.do_copy_data_loop>

000001c0 <__do_clear_bss>:
     1c0:	15 e0       	ldi	r17, 0x05	; 5
     1c2:	ac e1       	ldi	r26, 0x1C	; 28
     1c4:	b2 e0       	ldi	r27, 0x02	; 2
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a5 38       	cpi	r26, 0x85	; 133
     1cc:	b1 07       	cpc	r27, r17
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
     1d4:	0c 94 87 41 	jmp	0x830e	; 0x830e <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"


int main(void) {
     1dc:	2f 92       	push	r2
     1de:	3f 92       	push	r3
     1e0:	4f 92       	push	r4
     1e2:	5f 92       	push	r5
     1e4:	6f 92       	push	r6
     1e6:	7f 92       	push	r7
     1e8:	8f 92       	push	r8
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	00 d0       	rcall	.+0      	; 0x202 <main+0x26>
     202:	0f 92       	push	r0
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;

	initPeripherals();
     208:	0e 94 b3 1b 	call	0x3766	; 0x3766 <initPeripherals>

	calibrateSensors();
     20c:	0e 94 36 38 	call	0x706c	; 0x706c <calibrateSensors>

	initBehaviors();
     210:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <initBehaviors>

	startTime = getTime100MicroSec();
     214:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
     218:	6b 01       	movw	r12, r22
     21a:	7c 01       	movw	r14, r24

	speedStepCounter = getTime100MicroSec();
     21c:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
     220:	9b 01       	movw	r18, r22
     222:	ac 01       	movw	r20, r24
     224:	60 93 58 04 	sts	0x0458, r22
     228:	30 93 59 04 	sts	0x0459, r19
     22c:	40 93 5a 04 	sts	0x045A, r20
     230:	50 93 5b 04 	sts	0x045B, r21
     234:	10 92 5c 04 	sts	0x045C, r1
     238:	10 92 5d 04 	sts	0x045D, r1
     23c:	10 92 5e 04 	sts	0x045E, r1
     240:	10 92 5f 04 	sts	0x045F, r1
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     244:	aa 24       	eor	r10, r10
     246:	bb 24       	eor	r11, r11


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     248:	00 e0       	ldi	r16, 0x00	; 0
#include "sensors.h"


int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     24a:	19 82       	std	Y+1, r1	; 0x01
     24c:	1a 82       	std	Y+2, r1	; 0x02
     24e:	1b 82       	std	Y+3, r1	; 0x03
     250:	1c 82       	std	Y+4, r1	; 0x04
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     252:	1f ef       	ldi	r17, 0xFF	; 255
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     254:	22 24       	eor	r2, r2
     256:	23 94       	inc	r2
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
*/

	while(1) {

		currentSelector = getSelector();	// update selector position
     258:	0e 94 8e 1b 	call	0x371c	; 0x371c <getSelector>
     25c:	80 93 48 04 	sts	0x0448, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     260:	0e 94 76 37 	call	0x6eec	; 0x6eec <readAccelXYZ>

		computeAngle();
     264:	0e 94 b2 3c 	call	0x7964	; 0x7964 <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     268:	80 91 48 04 	lds	r24, 0x0448
     26c:	87 30       	cpi	r24, 0x07	; 7
     26e:	09 f4       	brne	.+2      	; 0x272 <main+0x96>
     270:	b3 c1       	rjmp	.+870    	; 0x5d8 <main+0x3fc>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     272:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     276:	6c 19       	sub	r22, r12
     278:	7d 09       	sbc	r23, r13
     27a:	8e 09       	sbc	r24, r14
     27c:	9f 09       	sbc	r25, r15
     27e:	6e 31       	cpi	r22, 0x1E	; 30
     280:	4b e4       	ldi	r20, 0x4B	; 75
     282:	74 07       	cpc	r23, r20
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	84 07       	cpc	r24, r20
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	94 07       	cpc	r25, r20
     28c:	08 f0       	brcs	.+2      	; 0x290 <main+0xb4>
     28e:	90 c1       	rjmp	.+800    	; 0x5b0 <main+0x3d4>
			startTime = getTime100MicroSec();
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     290:	0e 94 93 11 	call	0x2326	; 0x2326 <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     294:	0e 94 4b 0c 	call	0x1896	; 0x1896 <handleRFCommands>
		//}


		if(calibrateOdomFlag==0) {
     298:	80 91 c0 04 	lds	r24, 0x04C0
     29c:	88 23       	and	r24, r24
     29e:	09 f4       	brne	.+2      	; 0x2a2 <main+0xc6>
     2a0:	72 c0       	rjmp	.+228    	; 0x386 <main+0x1aa>
				}

			}
		}

		if(currentSelector!=6 && currentSelector!=15) {
     2a2:	80 91 48 04 	lds	r24, 0x0448
     2a6:	86 30       	cpi	r24, 0x06	; 6
     2a8:	09 f4       	brne	.+2      	; 0x2ac <main+0xd0>
     2aa:	5c c1       	rjmp	.+696    	; 0x564 <main+0x388>
     2ac:	8f 30       	cpi	r24, 0x0F	; 15
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <main+0xd6>
     2b0:	4a c0       	rjmp	.+148    	; 0x346 <main+0x16a>
					break;

		}

		if(currentSelector!=0) {
			handleMotorsWithSpeedController();  
     2b2:	0e 94 bc 2c 	call	0x5978	; 0x5978 <handleMotorsWithSpeedController>
     2b6:	80 91 48 04 	lds	r24, 0x0448
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     2ba:	08 17       	cp	r16, r24
     2bc:	69 f2       	breq	.-102    	; 0x258 <main+0x7c>
			disableObstacleAvoidance();
     2be:	0e 94 f7 34 	call	0x69ee	; 0x69ee <disableObstacleAvoidance>
			disableCliffAvoidance();
     2c2:	0e 94 fe 34 	call	0x69fc	; 0x69fc <disableCliffAvoidance>
			GREEN_LED0_OFF;
     2c6:	80 91 0b 01 	lds	r24, 0x010B
     2ca:	81 60       	ori	r24, 0x01	; 1
     2cc:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     2d0:	80 91 0b 01 	lds	r24, 0x010B
     2d4:	82 60       	ori	r24, 0x02	; 2
     2d6:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     2da:	80 91 0b 01 	lds	r24, 0x010B
     2de:	84 60       	ori	r24, 0x04	; 4
     2e0:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     2e4:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     2e6:	80 91 0b 01 	lds	r24, 0x010B
     2ea:	80 61       	ori	r24, 0x10	; 16
     2ec:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     2f0:	80 91 0b 01 	lds	r24, 0x010B
     2f4:	80 62       	ori	r24, 0x20	; 32
     2f6:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     2fa:	80 91 0b 01 	lds	r24, 0x010B
     2fe:	80 64       	ori	r24, 0x40	; 64
     300:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     304:	80 91 0b 01 	lds	r24, 0x010B
     308:	80 68       	ori	r24, 0x80	; 128
     30a:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     30e:	10 93 0c 02 	sts	0x020C, r17
			pwm_green = 255;
     312:	10 93 0d 02 	sts	0x020D, r17
			pwm_blue = 255;
     316:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <updateRedLed>
			updateGreenLed(pwm_green);
     320:	80 91 0d 02 	lds	r24, 0x020D
     324:	0e 94 52 35 	call	0x6aa4	; 0x6aa4 <updateGreenLed>
			updateBlueLed(pwm_blue);
     328:	80 91 0e 02 	lds	r24, 0x020E
     32c:	0e 94 66 35 	call	0x6acc	; 0x6acc <updateBlueLed>
			setRightSpeed(0);
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
			setLeftSpeed(0);
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
			rgbState = 0;
     33c:	10 92 18 03 	sts	0x0318, r1
     340:	00 91 48 04 	lds	r16, 0x0448
     344:	89 cf       	rjmp	.-238    	; 0x258 <main+0x7c>

			}
		}

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
		}

		switch(currentSelector) {
     34c:	90 91 48 04 	lds	r25, 0x0448
     350:	89 2f       	mov	r24, r25
     352:	96 30       	cpi	r25, 0x06	; 6
     354:	09 f4       	brne	.+2      	; 0x358 <main+0x17c>
     356:	06 c1       	rjmp	.+524    	; 0x564 <main+0x388>
     358:	97 30       	cpi	r25, 0x07	; 7
     35a:	08 f0       	brcs	.+2      	; 0x35e <main+0x182>
     35c:	5e c1       	rjmp	.+700    	; 0x61a <main+0x43e>
     35e:	92 30       	cpi	r25, 0x02	; 2
     360:	09 f4       	brne	.+2      	; 0x364 <main+0x188>
     362:	56 c1       	rjmp	.+684    	; 0x610 <main+0x434>
     364:	93 30       	cpi	r25, 0x03	; 3
     366:	08 f0       	brcs	.+2      	; 0x36a <main+0x18e>
     368:	63 c2       	rjmp	.+1222   	; 0x830 <main+0x654>
     36a:	99 23       	and	r25, r25
     36c:	09 f4       	brne	.+2      	; 0x370 <main+0x194>
     36e:	9b c1       	rjmp	.+822    	; 0x6a6 <main+0x4ca>
     370:	91 30       	cpi	r25, 0x01	; 1
     372:	21 f4       	brne	.+8      	; 0x37c <main+0x1a0>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     374:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <enableObstacleAvoidance>
     378:	90 91 48 04 	lds	r25, 0x0448
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     37c:	99 23       	and	r25, r25
     37e:	09 f0       	breq	.+2      	; 0x382 <main+0x1a6>
     380:	98 cf       	rjmp	.-208    	; 0x2b2 <main+0xd6>
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	9a cf       	rjmp	.-204    	; 0x2ba <main+0xde>
			handleRFCommands();
		//}


		if(calibrateOdomFlag==0) {
			if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     386:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
     38a:	9b 01       	movw	r18, r22
     38c:	ac 01       	movw	r20, r24
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	cb 01       	movw	r24, r22
     394:	f0 91 58 04 	lds	r31, 0x0458
     398:	e0 91 59 04 	lds	r30, 0x0459
     39c:	80 90 5a 04 	lds	r8, 0x045A
     3a0:	40 90 5b 04 	lds	r4, 0x045B
     3a4:	30 90 5c 04 	lds	r3, 0x045C
     3a8:	50 90 5d 04 	lds	r5, 0x045D
     3ac:	60 90 5e 04 	lds	r6, 0x045E
     3b0:	70 90 5f 04 	lds	r7, 0x045F
     3b4:	b2 2f       	mov	r27, r18
     3b6:	bf 1b       	sub	r27, r31
     3b8:	a1 e0       	ldi	r26, 0x01	; 1
     3ba:	2b 17       	cp	r18, r27
     3bc:	08 f0       	brcs	.+2      	; 0x3c0 <main+0x1e4>
     3be:	a0 e0       	ldi	r26, 0x00	; 0
     3c0:	f3 2f       	mov	r31, r19
     3c2:	fe 1b       	sub	r31, r30
     3c4:	ef 2f       	mov	r30, r31
     3c6:	f1 e0       	ldi	r31, 0x01	; 1
     3c8:	3e 17       	cp	r19, r30
     3ca:	08 f0       	brcs	.+2      	; 0x3ce <main+0x1f2>
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	9e 2e       	mov	r9, r30
     3d0:	9a 1a       	sub	r9, r26
     3d2:	a9 2d       	mov	r26, r9
     3d4:	99 24       	eor	r9, r9
     3d6:	93 94       	inc	r9
     3d8:	ea 17       	cp	r30, r26
     3da:	08 f0       	brcs	.+2      	; 0x3de <main+0x202>
     3dc:	99 24       	eor	r9, r9
     3de:	f9 29       	or	r31, r9
     3e0:	e4 2f       	mov	r30, r20
     3e2:	e8 19       	sub	r30, r8
     3e4:	8e 2e       	mov	r8, r30
     3e6:	e1 e0       	ldi	r30, 0x01	; 1
     3e8:	48 15       	cp	r20, r8
     3ea:	08 f0       	brcs	.+2      	; 0x3ee <main+0x212>
     3ec:	e0 e0       	ldi	r30, 0x00	; 0
     3ee:	98 2c       	mov	r9, r8
     3f0:	9f 1a       	sub	r9, r31
     3f2:	f1 e0       	ldi	r31, 0x01	; 1
     3f4:	89 14       	cp	r8, r9
     3f6:	08 f0       	brcs	.+2      	; 0x3fa <main+0x21e>
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	ef 2b       	or	r30, r31
     3fc:	f5 2f       	mov	r31, r21
     3fe:	f4 19       	sub	r31, r4
     400:	4f 2e       	mov	r4, r31
     402:	f1 e0       	ldi	r31, 0x01	; 1
     404:	54 15       	cp	r21, r4
     406:	08 f0       	brcs	.+2      	; 0x40a <main+0x22e>
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	84 2c       	mov	r8, r4
     40c:	8e 1a       	sub	r8, r30
     40e:	e1 e0       	ldi	r30, 0x01	; 1
     410:	48 14       	cp	r4, r8
     412:	08 f0       	brcs	.+2      	; 0x416 <main+0x23a>
     414:	e0 e0       	ldi	r30, 0x00	; 0
     416:	fe 2b       	or	r31, r30
     418:	31 94       	neg	r3
     41a:	e1 e0       	ldi	r30, 0x01	; 1
     41c:	63 15       	cp	r22, r3
     41e:	08 f0       	brcs	.+2      	; 0x422 <main+0x246>
     420:	e0 e0       	ldi	r30, 0x00	; 0
     422:	43 2c       	mov	r4, r3
     424:	4f 1a       	sub	r4, r31
     426:	f1 e0       	ldi	r31, 0x01	; 1
     428:	34 14       	cp	r3, r4
     42a:	08 f0       	brcs	.+2      	; 0x42e <main+0x252>
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	ef 2b       	or	r30, r31
     430:	51 94       	neg	r5
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	75 15       	cp	r23, r5
     436:	08 f0       	brcs	.+2      	; 0x43a <main+0x25e>
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	35 2c       	mov	r3, r5
     43c:	3e 1a       	sub	r3, r30
     43e:	e1 e0       	ldi	r30, 0x01	; 1
     440:	53 14       	cp	r5, r3
     442:	08 f0       	brcs	.+2      	; 0x446 <main+0x26a>
     444:	e0 e0       	ldi	r30, 0x00	; 0
     446:	fe 2b       	or	r31, r30
     448:	61 94       	neg	r6
     44a:	e1 e0       	ldi	r30, 0x01	; 1
     44c:	86 15       	cp	r24, r6
     44e:	08 f0       	brcs	.+2      	; 0x452 <main+0x276>
     450:	e0 e0       	ldi	r30, 0x00	; 0
     452:	96 2d       	mov	r25, r6
     454:	9f 1b       	sub	r25, r31
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	69 16       	cp	r6, r25
     45a:	08 f0       	brcs	.+2      	; 0x45e <main+0x282>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	e8 2b       	or	r30, r24
     460:	71 94       	neg	r7
     462:	7e 16       	cp	r7, r30
     464:	91 f4       	brne	.+36     	; 0x48a <main+0x2ae>
     466:	99 23       	and	r25, r25
     468:	81 f4       	brne	.+32     	; 0x48a <main+0x2ae>
     46a:	33 20       	and	r3, r3
     46c:	71 f4       	brne	.+28     	; 0x48a <main+0x2ae>
     46e:	44 20       	and	r4, r4
     470:	61 f4       	brne	.+24     	; 0x48a <main+0x2ae>
     472:	88 20       	and	r8, r8
     474:	51 f4       	brne	.+20     	; 0x48a <main+0x2ae>
     476:	99 20       	and	r9, r9
     478:	41 f4       	brne	.+16     	; 0x48a <main+0x2ae>
     47a:	a2 30       	cpi	r26, 0x02	; 2
     47c:	30 f4       	brcc	.+12     	; 0x48a <main+0x2ae>
     47e:	a1 30       	cpi	r26, 0x01	; 1
     480:	09 f0       	breq	.+2      	; 0x484 <main+0x2a8>
     482:	0f cf       	rjmp	.-482    	; 0x2a2 <main+0xc6>
     484:	b0 39       	cpi	r27, 0x90	; 144
     486:	08 f4       	brcc	.+2      	; 0x48a <main+0x2ae>
     488:	0c cf       	rjmp	.-488    	; 0x2a2 <main+0xc6>
				speedStepCounter = getTime100MicroSec();
     48a:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
     48e:	9b 01       	movw	r18, r22
     490:	ac 01       	movw	r20, r24
     492:	60 93 58 04 	sts	0x0458, r22
     496:	30 93 59 04 	sts	0x0459, r19
     49a:	40 93 5a 04 	sts	0x045A, r20
     49e:	50 93 5b 04 	sts	0x045B, r21
     4a2:	10 92 5c 04 	sts	0x045C, r1
     4a6:	10 92 5d 04 	sts	0x045D, r1
     4aa:	10 92 5e 04 	sts	0x045E, r1
     4ae:	10 92 5f 04 	sts	0x045F, r1

				if(softAccEnabled) {
     4b2:	80 91 60 04 	lds	r24, 0x0460
     4b6:	88 23       	and	r24, r24
     4b8:	09 f4       	brne	.+2      	; 0x4bc <main+0x2e0>
     4ba:	fb c1       	rjmp	.+1014   	; 0x8b2 <main+0x6d6>
					if(pwm_right_desired == 0) {
     4bc:	80 91 f7 02 	lds	r24, 0x02F7
     4c0:	90 91 f8 02 	lds	r25, 0x02F8
     4c4:	00 97       	sbiw	r24, 0x00	; 0
     4c6:	09 f4       	brne	.+2      	; 0x4ca <main+0x2ee>
     4c8:	8c c2       	rjmp	.+1304   	; 0x9e2 <main+0x806>
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
     4ca:	20 91 fb 02 	lds	r18, 0x02FB
     4ce:	30 91 fc 02 	lds	r19, 0x02FC
     4d2:	28 9f       	mul	r18, r24
     4d4:	a0 01       	movw	r20, r0
     4d6:	29 9f       	mul	r18, r25
     4d8:	50 0d       	add	r21, r0
     4da:	38 9f       	mul	r19, r24
     4dc:	50 0d       	add	r21, r0
     4de:	11 24       	eor	r1, r1
     4e0:	57 fd       	sbrc	r21, 7
     4e2:	7f c2       	rjmp	.+1278   	; 0x9e2 <main+0x806>
						pwm_intermediate_right_desired = 0;
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
     4e4:	28 17       	cp	r18, r24
     4e6:	39 07       	cpc	r19, r25
     4e8:	0c f0       	brlt	.+2      	; 0x4ec <main+0x310>
     4ea:	e6 c6       	rjmp	.+3532   	; 0x12b8 <main+0x10dc>
						pwm_intermediate_right_desired += speedStep;
     4ec:	40 91 17 02 	lds	r20, 0x0217
     4f0:	24 0f       	add	r18, r20
     4f2:	31 1d       	adc	r19, r1
     4f4:	30 93 fc 02 	sts	0x02FC, r19
     4f8:	20 93 fb 02 	sts	0x02FB, r18
						if(pwm_intermediate_right_desired > pwm_right_desired) {
     4fc:	82 17       	cp	r24, r18
     4fe:	93 07       	cpc	r25, r19
     500:	24 f4       	brge	.+8      	; 0x50a <main+0x32e>
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired -= speedStep;
						if(pwm_intermediate_right_desired < pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
     502:	90 93 fc 02 	sts	0x02FC, r25
     506:	80 93 fb 02 	sts	0x02FB, r24
						}					
					}
	
					if(pwm_left_desired == 0) {
     50a:	80 91 f9 02 	lds	r24, 0x02F9
     50e:	90 91 fa 02 	lds	r25, 0x02FA
     512:	00 97       	sbiw	r24, 0x00	; 0
     514:	09 f4       	brne	.+2      	; 0x518 <main+0x33c>
     516:	60 c2       	rjmp	.+1216   	; 0x9d8 <main+0x7fc>
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
     518:	20 91 fd 02 	lds	r18, 0x02FD
     51c:	30 91 fe 02 	lds	r19, 0x02FE
     520:	28 9f       	mul	r18, r24
     522:	a0 01       	movw	r20, r0
     524:	29 9f       	mul	r18, r25
     526:	50 0d       	add	r21, r0
     528:	38 9f       	mul	r19, r24
     52a:	50 0d       	add	r21, r0
     52c:	11 24       	eor	r1, r1
     52e:	57 fd       	sbrc	r21, 7
     530:	53 c2       	rjmp	.+1190   	; 0x9d8 <main+0x7fc>
						pwm_intermediate_left_desired = 0;
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
     532:	28 17       	cp	r18, r24
     534:	39 07       	cpc	r19, r25
     536:	0c f0       	brlt	.+2      	; 0x53a <main+0x35e>
     538:	d0 c6       	rjmp	.+3488   	; 0x12da <main+0x10fe>
						pwm_intermediate_left_desired += speedStep;
     53a:	40 91 17 02 	lds	r20, 0x0217
     53e:	24 0f       	add	r18, r20
     540:	31 1d       	adc	r19, r1
     542:	30 93 fe 02 	sts	0x02FE, r19
     546:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_left_desired > pwm_left_desired) {
     54a:	82 17       	cp	r24, r18
     54c:	93 07       	cpc	r25, r19
     54e:	0c f0       	brlt	.+2      	; 0x552 <main+0x376>
     550:	a8 ce       	rjmp	.-688    	; 0x2a2 <main+0xc6>
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
					pwm_intermediate_left_desired = pwm_left_desired;
     552:	90 93 fe 02 	sts	0x02FE, r25
     556:	80 93 fd 02 	sts	0x02FD, r24
				}

			}
		}

		if(currentSelector!=6 && currentSelector!=15) {
     55a:	80 91 48 04 	lds	r24, 0x0448
     55e:	86 30       	cpi	r24, 0x06	; 6
     560:	09 f0       	breq	.+2      	; 0x564 <main+0x388>
     562:	a4 ce       	rjmp	.-696    	; 0x2ac <main+0xd0>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     564:	90 91 1f 04 	lds	r25, 0x041F
     568:	91 30       	cpi	r25, 0x01	; 1
     56a:	09 f4       	brne	.+2      	; 0x56e <main+0x392>
     56c:	ba c2       	rjmp	.+1396   	; 0xae2 <main+0x906>
     56e:	91 30       	cpi	r25, 0x01	; 1
     570:	08 f0       	brcs	.+2      	; 0x574 <main+0x398>
     572:	3c c2       	rjmp	.+1144   	; 0x9ec <main+0x810>
						case 0:
							setRightSpeed(0);
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
							setLeftSpeed(0);
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
							turnOffGreenLeds();
     580:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <turnOffGreenLeds>
							pwm_red=255;
     584:	10 93 0c 02 	sts	0x020C, r17
							pwm_green=255;
     588:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue=255;
     58c:	10 93 0e 02 	sts	0x020E, r17
							updateRedLed(pwm_red);
     590:	8f ef       	ldi	r24, 0xFF	; 255
     592:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <updateRedLed>
							updateGreenLed(pwm_green);
     596:	80 91 0d 02 	lds	r24, 0x020D
     59a:	0e 94 52 35 	call	0x6aa4	; 0x6aa4 <updateGreenLed>
							updateBlueLed(pwm_blue);
     59e:	80 91 0e 02 	lds	r24, 0x020E
     5a2:	0e 94 66 35 	call	0x6acc	; 0x6acc <updateBlueLed>
							LED_IR1_HIGH;
     5a6:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     5a8:	45 9a       	sbi	0x08, 5	; 8
     5aa:	90 91 48 04 	lds	r25, 0x0448
							break;
     5ae:	e6 ce       	rjmp	.-564    	; 0x37c <main+0x1a0>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     5b0:	0e 94 93 1c 	call	0x3926	; 0x3926 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     5b4:	80 91 48 04 	lds	r24, 0x0448
     5b8:	98 2f       	mov	r25, r24
     5ba:	94 50       	subi	r25, 0x04	; 4
     5bc:	92 30       	cpi	r25, 0x02	; 2
     5be:	08 f4       	brcc	.+2      	; 0x5c2 <main+0x3e6>
     5c0:	85 c1       	rjmp	.+778    	; 0x8cc <main+0x6f0>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     5c2:	87 30       	cpi	r24, 0x07	; 7
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <main+0x3ec>
     5c6:	ad c1       	rjmp	.+858    	; 0x922 <main+0x746>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     5c8:	86 30       	cpi	r24, 0x06	; 6
     5ca:	09 f4       	brne	.+2      	; 0x5ce <main+0x3f2>
     5cc:	e4 c0       	rjmp	.+456    	; 0x796 <main+0x5ba>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     5ce:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
     5d2:	6b 01       	movw	r12, r22
     5d4:	7c 01       	movw	r14, r24
     5d6:	5c ce       	rjmp	.-840    	; 0x290 <main+0xb4>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     5d8:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
     5dc:	29 81       	ldd	r18, Y+1	; 0x01
     5de:	3a 81       	ldd	r19, Y+2	; 0x02
     5e0:	4b 81       	ldd	r20, Y+3	; 0x03
     5e2:	5c 81       	ldd	r21, Y+4	; 0x04
     5e4:	62 1b       	sub	r22, r18
     5e6:	73 0b       	sbc	r23, r19
     5e8:	84 0b       	sbc	r24, r20
     5ea:	95 0b       	sbc	r25, r21
     5ec:	68 3c       	cpi	r22, 0xC8	; 200
     5ee:	32 e1       	ldi	r19, 0x12	; 18
     5f0:	73 07       	cpc	r23, r19
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	83 07       	cpc	r24, r19
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	93 07       	cpc	r25, r19
     5fa:	08 f4       	brcc	.+2      	; 0x5fe <main+0x422>
     5fc:	3a ce       	rjmp	.-908    	; 0x272 <main+0x96>
				pwm_red = 255;
     5fe:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
     602:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 255;			
     606:	10 93 0e 02 	sts	0x020E, r17
     60a:	33 ce       	rjmp	.-922    	; 0x272 <main+0x96>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     60c:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <enableObstacleAvoidance>
					enableCliffAvoidance();
     610:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <enableCliffAvoidance>
     614:	90 91 48 04 	lds	r25, 0x0448
					break;
     618:	b1 ce       	rjmp	.-670    	; 0x37c <main+0x1a0>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     61a:	9a 30       	cpi	r25, 0x0A	; 10
     61c:	09 f4       	brne	.+2      	; 0x620 <main+0x444>
     61e:	a1 c0       	rjmp	.+322    	; 0x762 <main+0x586>
     620:	9b 30       	cpi	r25, 0x0B	; 11
     622:	f8 f4       	brcc	.+62     	; 0x662 <main+0x486>
     624:	98 30       	cpi	r25, 0x08	; 8
     626:	09 f4       	brne	.+2      	; 0x62a <main+0x44e>
     628:	90 c0       	rjmp	.+288    	; 0x74a <main+0x56e>
     62a:	99 30       	cpi	r25, 0x09	; 9
     62c:	08 f4       	brcc	.+2      	; 0x630 <main+0x454>
     62e:	40 c0       	rjmp	.+128    	; 0x6b0 <main+0x4d4>
					if(calibrateOdomFlag==1) {
						handleCalibration();
					}
					break;

			case 9:	if(leftMotSteps <= 3000) {
     630:	60 91 d3 02 	lds	r22, 0x02D3
     634:	70 91 d4 02 	lds	r23, 0x02D4
     638:	80 91 d5 02 	lds	r24, 0x02D5
     63c:	90 91 d6 02 	lds	r25, 0x02D6
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e8       	ldi	r19, 0x80	; 128
     644:	4b e3       	ldi	r20, 0x3B	; 59
     646:	55 e4       	ldi	r21, 0x45	; 69
     648:	0e 94 0b 3e 	call	0x7c16	; 0x7c16 <__cmpsf2>
     64c:	18 16       	cp	r1, r24
     64e:	14 f5       	brge	.+68     	; 0x694 <main+0x4b8>

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
						setRightSpeed(0);
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
     65c:	90 91 48 04 	lds	r25, 0x0448
     660:	8d ce       	rjmp	.-742    	; 0x37c <main+0x1a0>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     662:	9c 30       	cpi	r25, 0x0C	; 12
     664:	09 f4       	brne	.+2      	; 0x668 <main+0x48c>
     666:	ca c0       	rjmp	.+404    	; 0x7fc <main+0x620>
     668:	9c 30       	cpi	r25, 0x0C	; 12
     66a:	08 f4       	brcc	.+2      	; 0x66e <main+0x492>
     66c:	ad c0       	rjmp	.+346    	; 0x7c8 <main+0x5ec>
     66e:	9d 30       	cpi	r25, 0x0D	; 13
     670:	09 f0       	breq	.+2      	; 0x674 <main+0x498>
     672:	84 ce       	rjmp	.-760    	; 0x37c <main+0x1a0>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
     674:	60 91 d3 02 	lds	r22, 0x02D3
     678:	70 91 d4 02 	lds	r23, 0x02D4
     67c:	80 91 d5 02 	lds	r24, 0x02D5
     680:	90 91 d6 02 	lds	r25, 0x02D6
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 ec       	ldi	r19, 0xC0	; 192
     688:	4a ed       	ldi	r20, 0xDA	; 218
     68a:	55 e4       	ldi	r21, 0x45	; 69
     68c:	0e 94 0b 3e 	call	0x7c16	; 0x7c16 <__cmpsf2>
     690:	18 16       	cp	r1, r24
     692:	f4 f2       	brlt	.-68     	; 0x650 <main+0x474>
						setLeftSpeed(40);
     694:	88 e2       	ldi	r24, 0x28	; 40
     696:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
						setRightSpeed(40);
     69a:	88 e2       	ldi	r24, 0x28	; 40
     69c:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
     6a0:	90 91 48 04 	lds	r25, 0x0448
     6a4:	6b ce       	rjmp	.-810    	; 0x37c <main+0x1a0>
		}

		switch(currentSelector) {
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     6a6:	0e 94 12 20 	call	0x4024	; 0x4024 <handleMotorsWithNoController>
     6aa:	90 91 48 04 	lds	r25, 0x0448
					break;
     6ae:	66 ce       	rjmp	.-820    	; 0x37c <main+0x1a0>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     6b0:	80 91 4c 04 	lds	r24, 0x044C
     6b4:	82 30       	cpi	r24, 0x02	; 2
     6b6:	09 f4       	brne	.+2      	; 0x6ba <main+0x4de>
     6b8:	50 c5       	rjmp	.+2720   	; 0x115a <main+0xf7e>
     6ba:	83 30       	cpi	r24, 0x03	; 3
     6bc:	08 f0       	brcs	.+2      	; 0x6c0 <main+0x4e4>
     6be:	b5 c1       	rjmp	.+874    	; 0xa2a <main+0x84e>
     6c0:	88 23       	and	r24, r24
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <main+0x4ea>
     6c4:	81 c4       	rjmp	.+2306   	; 0xfc8 <main+0xdec>
						case 0:	// move around
							turnOffGreenLeds();
     6c6:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <turnOffGreenLeds>
							GREEN_LED0_ON;
     6ca:	80 91 0b 01 	lds	r24, 0x010B
     6ce:	8e 7f       	andi	r24, 0xFE	; 254
     6d0:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     6d4:	10 92 4d 04 	sts	0x044D, r1
							enableObstacleAvoidance();
     6d8:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <enableObstacleAvoidance>
							setRightSpeed(20);
     6dc:	84 e1       	ldi	r24, 0x14	; 20
     6de:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
							setLeftSpeed(20);
     6e2:	84 e1       	ldi	r24, 0x14	; 20
     6e4:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     6e8:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
     6ec:	9b 01       	movw	r18, r22
     6ee:	ac 01       	movw	r20, r24
     6f0:	60 93 54 04 	sts	0x0454, r22
     6f4:	70 93 55 04 	sts	0x0455, r23
     6f8:	80 93 56 04 	sts	0x0456, r24
     6fc:	90 93 57 04 	sts	0x0457, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     700:	80 91 50 04 	lds	r24, 0x0450
     704:	90 91 51 04 	lds	r25, 0x0451
     708:	a0 91 52 04 	lds	r26, 0x0452
     70c:	b0 91 53 04 	lds	r27, 0x0453
     710:	28 1b       	sub	r18, r24
     712:	39 0b       	sbc	r19, r25
     714:	4a 0b       	sbc	r20, r26
     716:	5b 0b       	sbc	r21, r27
     718:	23 33       	cpi	r18, 0x33	; 51
     71a:	6f ee       	ldi	r22, 0xEF	; 239
     71c:	36 07       	cpc	r19, r22
     71e:	62 e0       	ldi	r22, 0x02	; 2
     720:	46 07       	cpc	r20, r22
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	56 07       	cpc	r21, r22
     726:	10 f0       	brcs	.+4      	; 0x72c <main+0x550>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     728:	20 92 4c 04 	sts	0x044C, r2
							//pwm_green = 0;
							//pwm_blue = 0;													
							break;							
					}

					updateRedLed(pwm_red);
     72c:	80 91 0c 02 	lds	r24, 0x020C
     730:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <updateRedLed>
					updateGreenLed(pwm_green);
     734:	80 91 0d 02 	lds	r24, 0x020D
     738:	0e 94 52 35 	call	0x6aa4	; 0x6aa4 <updateGreenLed>
					updateBlueLed(pwm_blue);
     73c:	80 91 0e 02 	lds	r24, 0x020E
     740:	0e 94 66 35 	call	0x6acc	; 0x6acc <updateBlueLed>
     744:	90 91 48 04 	lds	r25, 0x0448

					break;
     748:	19 ce       	rjmp	.-974    	; 0x37c <main+0x1a0>
  
			case 8:	// motors calibration
					irEnabled = 1;
     74a:	20 92 12 02 	sts	0x0212, r2
					if(calibrateOdomFlag==1) {
     74e:	80 91 c0 04 	lds	r24, 0x04C0
     752:	81 30       	cpi	r24, 0x01	; 1
     754:	09 f0       	breq	.+2      	; 0x758 <main+0x57c>
     756:	ad cd       	rjmp	.-1190   	; 0x2b2 <main+0xd6>
						handleCalibration();
     758:	0e 94 63 22 	call	0x44c6	; 0x44c6 <handleCalibration>
     75c:	90 91 48 04 	lds	r25, 0x0448
     760:	0d ce       	rjmp	.-998    	; 0x37c <main+0x1a0>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 10:if(leftMotSteps <= 4000) {
     762:	60 91 d3 02 	lds	r22, 0x02D3
     766:	70 91 d4 02 	lds	r23, 0x02D4
     76a:	80 91 d5 02 	lds	r24, 0x02D5
     76e:	90 91 d6 02 	lds	r25, 0x02D6
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	4a e7       	ldi	r20, 0x7A	; 122
     778:	55 e4       	ldi	r21, 0x45	; 69
     77a:	0e 94 0b 3e 	call	0x7c16	; 0x7c16 <__cmpsf2>
     77e:	18 16       	cp	r1, r24
     780:	0c f4       	brge	.+2      	; 0x784 <main+0x5a8>
     782:	66 cf       	rjmp	.-308    	; 0x650 <main+0x474>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     784:	88 e2       	ldi	r24, 0x28	; 40
     786:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
						setRightSpeed(40);
     78a:	88 e2       	ldi	r24, 0x28	; 40
     78c:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
     790:	90 91 48 04 	lds	r25, 0x0448
     794:	f3 cd       	rjmp	.-1050   	; 0x37c <main+0x1a0>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     796:	80 91 1f 04 	lds	r24, 0x041F
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	09 f0       	breq	.+2      	; 0x7a0 <main+0x5c4>
     79e:	17 cf       	rjmp	.-466    	; 0x5ce <main+0x3f2>
     7a0:	90 91 15 03 	lds	r25, 0x0315
     7a4:	92 30       	cpi	r25, 0x02	; 2
     7a6:	08 f0       	brcs	.+2      	; 0x7aa <main+0x5ce>
     7a8:	12 cf       	rjmp	.-476    	; 0x5ce <main+0x3f2>
					if(rgbState == 0) {
     7aa:	90 91 18 03 	lds	r25, 0x0318
     7ae:	99 23       	and	r25, r25
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <main+0x5d8>
     7b2:	04 c6       	rjmp	.+3080   	; 0x13bc <main+0x11e0>
						pwm_red = 254;
     7b4:	4e ef       	ldi	r20, 0xFE	; 254
     7b6:	40 93 0c 02 	sts	0x020C, r20
						pwm_green = 255;
     7ba:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 255;
     7be:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 1;
     7c2:	80 93 18 03 	sts	0x0318, r24
     7c6:	03 cf       	rjmp	.-506    	; 0x5ce <main+0x3f2>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 11:if(leftMotSteps <= 5000) {
     7c8:	60 91 d3 02 	lds	r22, 0x02D3
     7cc:	70 91 d4 02 	lds	r23, 0x02D4
     7d0:	80 91 d5 02 	lds	r24, 0x02D5
     7d4:	90 91 d6 02 	lds	r25, 0x02D6
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e4       	ldi	r19, 0x40	; 64
     7dc:	4c e9       	ldi	r20, 0x9C	; 156
     7de:	55 e4       	ldi	r21, 0x45	; 69
     7e0:	0e 94 0b 3e 	call	0x7c16	; 0x7c16 <__cmpsf2>
     7e4:	18 16       	cp	r1, r24
     7e6:	0c f4       	brge	.+2      	; 0x7ea <main+0x60e>
     7e8:	33 cf       	rjmp	.-410    	; 0x650 <main+0x474>
						setRightSpeed(0);
					}
					break;

			case 13:if(leftMotSteps <= 7000) {
						setLeftSpeed(40);
     7ea:	88 e2       	ldi	r24, 0x28	; 40
     7ec:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
						setRightSpeed(40);
     7f0:	88 e2       	ldi	r24, 0x28	; 40
     7f2:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
     7f6:	90 91 48 04 	lds	r25, 0x0448
     7fa:	c0 cd       	rjmp	.-1152   	; 0x37c <main+0x1a0>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
     7fc:	60 91 d3 02 	lds	r22, 0x02D3
     800:	70 91 d4 02 	lds	r23, 0x02D4
     804:	80 91 d5 02 	lds	r24, 0x02D5
     808:	90 91 d6 02 	lds	r25, 0x02D6
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e8       	ldi	r19, 0x80	; 128
     810:	4b eb       	ldi	r20, 0xBB	; 187
     812:	55 e4       	ldi	r21, 0x45	; 69
     814:	0e 94 0b 3e 	call	0x7c16	; 0x7c16 <__cmpsf2>
     818:	18 16       	cp	r1, r24
     81a:	0c f0       	brlt	.+2      	; 0x81e <main+0x642>
     81c:	3b cf       	rjmp	.-394    	; 0x694 <main+0x4b8>
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
						setRightSpeed(0);
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
     82a:	90 91 48 04 	lds	r25, 0x0448
     82e:	a6 cd       	rjmp	.-1204   	; 0x37c <main+0x1a0>

		if(currentSelector!=6 && currentSelector!=15) {
			usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		}

		switch(currentSelector) {
     830:	94 30       	cpi	r25, 0x04	; 4
     832:	d1 f0       	breq	.+52     	; 0x868 <main+0x68c>
     834:	95 30       	cpi	r25, 0x05	; 5
     836:	08 f4       	brcc	.+2      	; 0x83a <main+0x65e>
     838:	e9 ce       	rjmp	.-558    	; 0x60c <main+0x430>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     83a:	80 91 0c 02 	lds	r24, 0x020C
     83e:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <updateRedLed>
					updateGreenLed(pwm_green);
     842:	80 91 0d 02 	lds	r24, 0x020D
     846:	0e 94 52 35 	call	0x6aa4	; 0x6aa4 <updateGreenLed>
					updateBlueLed(pwm_blue);
     84a:	80 91 0e 02 	lds	r24, 0x020E
     84e:	0e 94 66 35 	call	0x6acc	; 0x6acc <updateBlueLed>
					enableObstacleAvoidance();
     852:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <enableObstacleAvoidance>
					setLeftSpeed(25);
     856:	89 e1       	ldi	r24, 0x19	; 25
     858:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
					setRightSpeed(25);
     85c:	89 e1       	ldi	r24, 0x19	; 25
     85e:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
     862:	90 91 48 04 	lds	r25, 0x0448
					break;
     866:	8a cd       	rjmp	.-1260   	; 0x37c <main+0x1a0>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     868:	80 91 0b 01 	lds	r24, 0x010B
     86c:	8e 7f       	andi	r24, 0xFE	; 254
     86e:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     872:	80 91 0b 01 	lds	r24, 0x010B
     876:	8d 7f       	andi	r24, 0xFD	; 253
     878:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     87c:	80 91 0b 01 	lds	r24, 0x010B
     880:	8b 7f       	andi	r24, 0xFB	; 251
     882:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     886:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     888:	80 91 0b 01 	lds	r24, 0x010B
     88c:	8f 7e       	andi	r24, 0xEF	; 239
     88e:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     892:	80 91 0b 01 	lds	r24, 0x010B
     896:	8f 7d       	andi	r24, 0xDF	; 223
     898:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     89c:	80 91 0b 01 	lds	r24, 0x010B
     8a0:	8f 7b       	andi	r24, 0xBF	; 191
     8a2:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     8a6:	80 91 0b 01 	lds	r24, 0x010B
     8aa:	8f 77       	andi	r24, 0x7F	; 127
     8ac:	80 93 0b 01 	sts	0x010B, r24
     8b0:	3d cf       	rjmp	.-390    	; 0x72c <main+0x550>
						if(pwm_intermediate_left_desired < pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
     8b2:	80 91 f7 02 	lds	r24, 0x02F7
     8b6:	90 91 f8 02 	lds	r25, 0x02F8
     8ba:	90 93 fc 02 	sts	0x02FC, r25
     8be:	80 93 fb 02 	sts	0x02FB, r24
					pwm_intermediate_left_desired = pwm_left_desired;
     8c2:	80 91 f9 02 	lds	r24, 0x02F9
     8c6:	90 91 fa 02 	lds	r25, 0x02FA
     8ca:	43 ce       	rjmp	.-890    	; 0x552 <main+0x376>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     8cc:	0e 94 1e 41 	call	0x823c	; 0x823c <rand>
     8d0:	6e e1       	ldi	r22, 0x1E	; 30
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	0e 94 80 40 	call	0x8100	; 0x8100 <__divmodhi4>
     8d8:	a8 0e       	add	r10, r24
     8da:	b9 1e       	adc	r11, r25
     8dc:	5f e7       	ldi	r21, 0x7F	; 127
     8de:	a5 22       	and	r10, r21
     8e0:	bb 24       	eor	r11, r11

				switch(rgbState) {
     8e2:	80 91 18 03 	lds	r24, 0x0318
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	09 f4       	brne	.+2      	; 0x8ec <main+0x710>
     8ea:	ee c3       	rjmp	.+2012   	; 0x10c8 <main+0xeec>
     8ec:	81 30       	cpi	r24, 0x01	; 1
     8ee:	08 f0       	brcs	.+2      	; 0x8f2 <main+0x716>
     8f0:	61 c3       	rjmp	.+1730   	; 0xfb4 <main+0xdd8>
					case 0:
						pwm_red = 255 - currRand;	
     8f2:	8a 2d       	mov	r24, r10
     8f4:	80 95       	com	r24
     8f6:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     8fa:	20 92 18 03 	sts	0x0318, r2
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     8fe:	80 e2       	ldi	r24, 0x20	; 32
     900:	a8 16       	cp	r10, r24
     902:	b1 04       	cpc	r11, r1
     904:	08 f0       	brcs	.+2      	; 0x908 <main+0x72c>
     906:	d4 c0       	rjmp	.+424    	; 0xab0 <main+0x8d4>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
     908:	80 91 0d 02 	lds	r24, 0x020D
     90c:	8f 3f       	cpi	r24, 0xFF	; 255
     90e:	09 f4       	brne	.+2      	; 0x912 <main+0x736>
     910:	5e ce       	rjmp	.-836    	; 0x5ce <main+0x3f2>
     912:	80 91 0e 02 	lds	r24, 0x020E
     916:	8f 3f       	cpi	r24, 0xFF	; 255
     918:	09 f4       	brne	.+2      	; 0x91c <main+0x740>
     91a:	59 ce       	rjmp	.-846    	; 0x5ce <main+0x3f2>
						pwm_red = 255;
     91c:	10 93 0c 02 	sts	0x020C, r17
     920:	56 ce       	rjmp	.-852    	; 0x5ce <main+0x3f2>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     922:	80 91 94 00 	lds	r24, 0x0094
     926:	90 91 95 00 	lds	r25, 0x0095
     92a:	0e 94 23 41 	call	0x8246	; 0x8246 <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     92e:	0e 94 1e 41 	call	0x823c	; 0x823c <rand>
     932:	6e e1       	ldi	r22, 0x1E	; 30
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	0e 94 80 40 	call	0x8100	; 0x8100 <__divmodhi4>
     93a:	4c 01       	movw	r8, r24
     93c:	8a 0c       	add	r8, r10
     93e:	9b 1c       	adc	r9, r11
     940:	ff e7       	ldi	r31, 0x7F	; 127
     942:	8f 22       	and	r8, r31
     944:	99 24       	eor	r9, r9

				pwm_red = 255 - currRand;
     946:	88 2d       	mov	r24, r8
     948:	80 95       	com	r24
     94a:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     94e:	80 91 94 00 	lds	r24, 0x0094
     952:	90 91 95 00 	lds	r25, 0x0095
     956:	0e 94 23 41 	call	0x8246	; 0x8246 <srand>
				currRand = (currRand + rand()%30) % 128;	
     95a:	0e 94 1e 41 	call	0x823c	; 0x823c <rand>
     95e:	6e e1       	ldi	r22, 0x1E	; 30
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	0e 94 80 40 	call	0x8100	; 0x8100 <__divmodhi4>
     966:	6c 01       	movw	r12, r24
     968:	c8 0c       	add	r12, r8
     96a:	d9 1c       	adc	r13, r9
     96c:	2f e7       	ldi	r18, 0x7F	; 127
     96e:	c2 22       	and	r12, r18
     970:	dd 24       	eor	r13, r13
				pwm_green = 255 - currRand;
     972:	8c 2d       	mov	r24, r12
     974:	80 95       	com	r24
     976:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     97a:	80 91 94 00 	lds	r24, 0x0094
     97e:	90 91 95 00 	lds	r25, 0x0095
     982:	0e 94 23 41 	call	0x8246	; 0x8246 <srand>
				currRand = (currRand + rand()%30) % 128;
     986:	0e 94 1e 41 	call	0x823c	; 0x823c <rand>
     98a:	6e e1       	ldi	r22, 0x1E	; 30
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	0e 94 80 40 	call	0x8100	; 0x8100 <__divmodhi4>
     992:	5c 01       	movw	r10, r24
     994:	ac 0c       	add	r10, r12
     996:	bd 1c       	adc	r11, r13
     998:	3f e7       	ldi	r19, 0x7F	; 127
     99a:	a3 22       	and	r10, r19
     99c:	bb 24       	eor	r11, r11
				pwm_blue = 255 - currRand;
     99e:	8a 2d       	mov	r24, r10
     9a0:	80 95       	com	r24
     9a2:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     9a6:	80 91 94 00 	lds	r24, 0x0094
     9aa:	90 91 95 00 	lds	r25, 0x0095
     9ae:	0e 94 23 41 	call	0x8246	; 0x8246 <srand>
				currRand2 = rand()%128;
     9b2:	0e 94 1e 41 	call	0x823c	; 0x823c <rand>
     9b6:	60 e8       	ldi	r22, 0x80	; 128
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	0e 94 80 40 	call	0x8100	; 0x8100 <__divmodhi4>
				if(currRand2<32) {
     9be:	80 32       	cpi	r24, 0x20	; 32
     9c0:	91 05       	cpc	r25, r1
     9c2:	08 f0       	brcs	.+2      	; 0x9c6 <main+0x7ea>
     9c4:	87 c0       	rjmp	.+270    	; 0xad4 <main+0x8f8>
					pwm_red = 255;
     9c6:	10 93 0c 02 	sts	0x020C, r17
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     9ca:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
     9ce:	69 83       	std	Y+1, r22	; 0x01
     9d0:	7a 83       	std	Y+2, r23	; 0x02
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	fb cd       	rjmp	.-1034   	; 0x5ce <main+0x3f2>
					}
	
					if(pwm_left_desired == 0) {
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
						pwm_intermediate_left_desired = 0;
     9d8:	10 92 fe 02 	sts	0x02FE, r1
     9dc:	10 92 fd 02 	sts	0x02FD, r1
     9e0:	60 cc       	rjmp	.-1856   	; 0x2a2 <main+0xc6>

				if(softAccEnabled) {
					if(pwm_right_desired == 0) {
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
						pwm_intermediate_right_desired = 0;
     9e2:	10 92 fc 02 	sts	0x02FC, r1
     9e6:	10 92 fb 02 	sts	0x02FB, r1
     9ea:	8f cd       	rjmp	.-1250   	; 0x50a <main+0x32e>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     9ec:	92 30       	cpi	r25, 0x02	; 2
     9ee:	11 f0       	breq	.+4      	; 0x9f4 <main+0x818>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     9f0:	98 2f       	mov	r25, r24
     9f2:	c4 cc       	rjmp	.-1656   	; 0x37c <main+0x1a0>
     9f4:	90 91 20 04 	lds	r25, 0x0420
     9f8:	99 23       	and	r25, r25
     9fa:	d1 f3       	breq	.-12     	; 0x9f0 <main+0x814>
								turnOnGreenLeds();
     9fc:	0e 94 30 36 	call	0x6c60	; 0x6c60 <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     a00:	60 91 13 03 	lds	r22, 0x0313
     a04:	70 91 14 03 	lds	r23, 0x0314
     a08:	8e ef       	ldi	r24, 0xFE	; 254
     a0a:	9f e0       	ldi	r25, 0x0F	; 15
     a0c:	0e 94 82 41 	call	0x8304	; 0x8304 <__eewr_word_m2560>
								turnOffGreenLeds();
     a10:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     a14:	8a ea       	ldi	r24, 0xAA	; 170
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								addressReceived = 0;
     a1c:	10 92 20 04 	sts	0x0420, r1
								menuChoice = 0;
     a20:	10 92 1f 04 	sts	0x041F, r1
     a24:	90 91 48 04 	lds	r25, 0x0448
     a28:	a9 cc       	rjmp	.-1710   	; 0x37c <main+0x1a0>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     a2a:	84 30       	cpi	r24, 0x04	; 4
     a2c:	09 f4       	brne	.+2      	; 0xa30 <main+0x854>
     a2e:	54 c3       	rjmp	.+1704   	; 0x10d8 <main+0xefc>
     a30:	84 30       	cpi	r24, 0x04	; 4
     a32:	08 f4       	brcc	.+2      	; 0xa36 <main+0x85a>
     a34:	04 c3       	rjmp	.+1544   	; 0x103e <main+0xe62>
     a36:	85 30       	cpi	r24, 0x05	; 5
     a38:	09 f0       	breq	.+2      	; 0xa3c <main+0x860>
     a3a:	78 ce       	rjmp	.-784    	; 0x72c <main+0x550>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     a3c:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <turnOffGreenLeds>
							GREEN_LED6_ON;
     a40:	80 91 0b 01 	lds	r24, 0x010B
     a44:	8f 7b       	andi	r24, 0xBF	; 191
     a46:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     a4a:	80 91 0b 01 	lds	r24, 0x010B
     a4e:	8f 77       	andi	r24, 0x7F	; 127
     a50:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     a54:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
     a58:	9b 01       	movw	r18, r22
     a5a:	ac 01       	movw	r20, r24
     a5c:	60 93 54 04 	sts	0x0454, r22
     a60:	70 93 55 04 	sts	0x0455, r23
     a64:	80 93 56 04 	sts	0x0456, r24
     a68:	90 93 57 04 	sts	0x0457, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     a6c:	80 91 50 04 	lds	r24, 0x0450
     a70:	90 91 51 04 	lds	r25, 0x0451
     a74:	a0 91 52 04 	lds	r26, 0x0452
     a78:	b0 91 53 04 	lds	r27, 0x0453
     a7c:	28 1b       	sub	r18, r24
     a7e:	39 0b       	sbc	r19, r25
     a80:	4a 0b       	sbc	r20, r26
     a82:	5b 0b       	sbc	r21, r27
     a84:	2b 32       	cpi	r18, 0x2B	; 43
     a86:	9c e1       	ldi	r25, 0x1C	; 28
     a88:	39 07       	cpc	r19, r25
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	49 07       	cpc	r20, r25
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	59 07       	cpc	r21, r25
     a92:	08 f4       	brcc	.+2      	; 0xa96 <main+0x8ba>
     a94:	4b ce       	rjmp	.-874    	; 0x72c <main+0x550>
								demoStartTime = getTime100MicroSec();
     a96:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
     a9a:	60 93 50 04 	sts	0x0450, r22
     a9e:	70 93 51 04 	sts	0x0451, r23
     aa2:	80 93 52 04 	sts	0x0452, r24
     aa6:	90 93 53 04 	sts	0x0453, r25
								demoState = 0;							
     aaa:	10 92 4c 04 	sts	0x044C, r1
     aae:	3e ce       	rjmp	.-900    	; 0x72c <main+0x550>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     ab0:	90 e4       	ldi	r25, 0x40	; 64
     ab2:	a9 16       	cp	r10, r25
     ab4:	b1 04       	cpc	r11, r1
     ab6:	08 f0       	brcs	.+2      	; 0xaba <main+0x8de>
     ab8:	cc c3       	rjmp	.+1944   	; 0x1252 <main+0x1076>
					if(pwm_red!=255 && pwm_blue!=255) {
     aba:	80 91 0c 02 	lds	r24, 0x020C
     abe:	8f 3f       	cpi	r24, 0xFF	; 255
     ac0:	09 f4       	brne	.+2      	; 0xac4 <main+0x8e8>
     ac2:	85 cd       	rjmp	.-1270   	; 0x5ce <main+0x3f2>
     ac4:	80 91 0e 02 	lds	r24, 0x020E
     ac8:	8f 3f       	cpi	r24, 0xFF	; 255
     aca:	09 f4       	brne	.+2      	; 0xace <main+0x8f2>
     acc:	80 cd       	rjmp	.-1280   	; 0x5ce <main+0x3f2>
						pwm_green = 255;
     ace:	10 93 0d 02 	sts	0x020D, r17
     ad2:	7d cd       	rjmp	.-1286   	; 0x5ce <main+0x3f2>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     ad4:	80 34       	cpi	r24, 0x40	; 64
     ad6:	91 05       	cpc	r25, r1
     ad8:	08 f0       	brcs	.+2      	; 0xadc <main+0x900>
     ada:	e7 c3       	rjmp	.+1998   	; 0x12aa <main+0x10ce>
					pwm_green = 255;
     adc:	10 93 0d 02 	sts	0x020D, r17
     ae0:	74 cf       	rjmp	.-280    	; 0x9ca <main+0x7ee>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     ae2:	0e 94 30 36 	call	0x6c60	; 0x6c60 <turnOnGreenLeds>
							updateRedLed(pwm_red);
     ae6:	80 91 0c 02 	lds	r24, 0x020C
     aea:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <updateRedLed>
							updateGreenLed(pwm_green);
     aee:	80 91 0d 02 	lds	r24, 0x020D
     af2:	0e 94 52 35 	call	0x6aa4	; 0x6aa4 <updateGreenLed>
							updateBlueLed(pwm_blue);
     af6:	80 91 0e 02 	lds	r24, 0x020E
     afa:	0e 94 66 35 	call	0x6acc	; 0x6acc <updateBlueLed>
							LED_IR1_LOW;
     afe:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     b00:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     b02:	80 91 22 04 	lds	r24, 0x0422
     b06:	88 23       	and	r24, r24
     b08:	09 f4       	brne	.+2      	; 0xb0c <main+0x930>
     b0a:	a8 cd       	rjmp	.-1200   	; 0x65c <main+0x480>
								getDataNow = 0;	
     b0c:	10 92 22 04 	sts	0x0422, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     b10:	80 91 57 02 	lds	r24, 0x0257
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     b1a:	80 91 58 02 	lds	r24, 0x0258
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     b24:	80 91 27 02 	lds	r24, 0x0227
     b28:	90 91 28 02 	lds	r25, 0x0228
     b2c:	61 e0       	ldi	r22, 0x01	; 1
     b2e:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     b32:	80 91 27 02 	lds	r24, 0x0227
     b36:	90 91 28 02 	lds	r25, 0x0228
     b3a:	89 2f       	mov	r24, r25
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     b42:	80 91 59 02 	lds	r24, 0x0259
     b46:	61 e0       	ldi	r22, 0x01	; 1
     b48:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     b4c:	80 91 5a 02 	lds	r24, 0x025A
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     b56:	80 91 2b 02 	lds	r24, 0x022B
     b5a:	90 91 2c 02 	lds	r25, 0x022C
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     b64:	80 91 2b 02 	lds	r24, 0x022B
     b68:	90 91 2c 02 	lds	r25, 0x022C
     b6c:	89 2f       	mov	r24, r25
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     b74:	80 91 5b 02 	lds	r24, 0x025B
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     b7e:	80 91 5c 02 	lds	r24, 0x025C
     b82:	61 e0       	ldi	r22, 0x01	; 1
     b84:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     b88:	80 91 2f 02 	lds	r24, 0x022F
     b8c:	90 91 30 02 	lds	r25, 0x0230
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     b96:	80 91 2f 02 	lds	r24, 0x022F
     b9a:	90 91 30 02 	lds	r25, 0x0230
     b9e:	89 2f       	mov	r24, r25
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ba6:	80 91 5d 02 	lds	r24, 0x025D
     baa:	61 e0       	ldi	r22, 0x01	; 1
     bac:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     bb0:	80 91 5e 02 	lds	r24, 0x025E
     bb4:	61 e0       	ldi	r22, 0x01	; 1
     bb6:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     bba:	80 91 33 02 	lds	r24, 0x0233
     bbe:	90 91 34 02 	lds	r25, 0x0234
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     bc8:	80 91 33 02 	lds	r24, 0x0233
     bcc:	90 91 34 02 	lds	r25, 0x0234
     bd0:	89 2f       	mov	r24, r25
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     bd8:	80 91 5f 02 	lds	r24, 0x025F
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     be2:	80 91 60 02 	lds	r24, 0x0260
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     bec:	80 91 37 02 	lds	r24, 0x0237
     bf0:	90 91 38 02 	lds	r25, 0x0238
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     bfa:	80 91 37 02 	lds	r24, 0x0237
     bfe:	90 91 38 02 	lds	r25, 0x0238
     c02:	89 2f       	mov	r24, r25
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c0a:	80 91 61 02 	lds	r24, 0x0261
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c14:	80 91 62 02 	lds	r24, 0x0262
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c1e:	80 91 3b 02 	lds	r24, 0x023B
     c22:	90 91 3c 02 	lds	r25, 0x023C
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c2c:	80 91 3b 02 	lds	r24, 0x023B
     c30:	90 91 3c 02 	lds	r25, 0x023C
     c34:	89 2f       	mov	r24, r25
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c3c:	80 91 63 02 	lds	r24, 0x0263
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c46:	80 91 64 02 	lds	r24, 0x0264
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c50:	80 91 3f 02 	lds	r24, 0x023F
     c54:	90 91 40 02 	lds	r25, 0x0240
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c5e:	80 91 3f 02 	lds	r24, 0x023F
     c62:	90 91 40 02 	lds	r25, 0x0240
     c66:	89 2f       	mov	r24, r25
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     c6e:	80 91 65 02 	lds	r24, 0x0265
     c72:	61 e0       	ldi	r22, 0x01	; 1
     c74:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     c78:	80 91 66 02 	lds	r24, 0x0266
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     c82:	80 91 43 02 	lds	r24, 0x0243
     c86:	90 91 44 02 	lds	r25, 0x0244
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     c90:	80 91 43 02 	lds	r24, 0x0243
     c94:	90 91 44 02 	lds	r25, 0x0244
     c98:	89 2f       	mov	r24, r25
     c9a:	61 e0       	ldi	r22, 0x01	; 1
     c9c:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ca0:	80 91 67 02 	lds	r24, 0x0267
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     caa:	80 91 68 02 	lds	r24, 0x0268
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     cb4:	80 91 47 02 	lds	r24, 0x0247
     cb8:	90 91 48 02 	lds	r25, 0x0248
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     cc2:	80 91 47 02 	lds	r24, 0x0247
     cc6:	90 91 48 02 	lds	r25, 0x0248
     cca:	89 2f       	mov	r24, r25
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     cd2:	80 91 69 02 	lds	r24, 0x0269
     cd6:	61 e0       	ldi	r22, 0x01	; 1
     cd8:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     cdc:	80 91 6a 02 	lds	r24, 0x026A
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ce6:	80 91 4b 02 	lds	r24, 0x024B
     cea:	90 91 4c 02 	lds	r25, 0x024C
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     cf4:	80 91 4b 02 	lds	r24, 0x024B
     cf8:	90 91 4c 02 	lds	r25, 0x024C
     cfc:	89 2f       	mov	r24, r25
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d04:	80 91 6b 02 	lds	r24, 0x026B
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d0e:	80 91 6c 02 	lds	r24, 0x026C
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d18:	80 91 4f 02 	lds	r24, 0x024F
     d1c:	90 91 50 02 	lds	r25, 0x0250
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d26:	80 91 4f 02 	lds	r24, 0x024F
     d2a:	90 91 50 02 	lds	r25, 0x0250
     d2e:	89 2f       	mov	r24, r25
     d30:	61 e0       	ldi	r22, 0x01	; 1
     d32:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d36:	80 91 6d 02 	lds	r24, 0x026D
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d40:	80 91 6e 02 	lds	r24, 0x026E
     d44:	61 e0       	ldi	r22, 0x01	; 1
     d46:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     d4a:	80 91 53 02 	lds	r24, 0x0253
     d4e:	90 91 54 02 	lds	r25, 0x0254
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     d58:	80 91 53 02 	lds	r24, 0x0253
     d5c:	90 91 54 02 	lds	r25, 0x0254
     d60:	89 2f       	mov	r24, r25
     d62:	61 e0       	ldi	r22, 0x01	; 1
     d64:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     d68:	80 91 28 04 	lds	r24, 0x0428
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(accX>>8,1);
     d72:	80 91 29 04 	lds	r24, 0x0429
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
     d7c:	80 91 2a 04 	lds	r24, 0x042A
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(accY>>8,1);
     d86:	80 91 2b 04 	lds	r24, 0x042B
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
     d90:	80 91 2c 04 	lds	r24, 0x042C
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(accZ>>8,1);
     d9a:	80 91 2d 04 	lds	r24, 0x042D
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(irCommand,1);
     da4:	80 91 23 04 	lds	r24, 0x0423
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(currentSelector,1);
     dae:	80 91 48 04 	lds	r24, 0x0448
     db2:	61 e0       	ldi	r22, 0x01	; 1
     db4:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(BUTTON0,1);
     db8:	80 91 03 01 	lds	r24, 0x0103
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	80 72       	andi	r24, 0x20	; 32
     dc0:	90 70       	andi	r25, 0x00	; 0
     dc2:	95 95       	asr	r25
     dc4:	87 95       	ror	r24
     dc6:	95 95       	asr	r25
     dc8:	87 95       	ror	r24
     dca:	95 95       	asr	r25
     dcc:	87 95       	ror	r24
     dce:	95 95       	asr	r25
     dd0:	87 95       	ror	r24
     dd2:	95 95       	asr	r25
     dd4:	87 95       	ror	r24
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(rfFlags,1);
     ddc:	80 91 15 03 	lds	r24, 0x0315
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))&0xFF,1);	// radians to degrees => 573 = 1800/PI
     de6:	60 91 64 04 	lds	r22, 0x0464
     dea:	70 91 65 04 	lds	r23, 0x0465
     dee:	80 91 66 04 	lds	r24, 0x0466
     df2:	90 91 67 04 	lds	r25, 0x0467
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e4       	ldi	r19, 0x40	; 64
     dfa:	4f e0       	ldi	r20, 0x0F	; 15
     dfc:	54 e4       	ldi	r21, 0x44	; 68
     dfe:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
     e02:	0e 94 7f 3e 	call	0x7cfe	; 0x7cfe <__fixunssfsi>
     e06:	86 2f       	mov	r24, r22
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))>>8,1);
     e0e:	60 91 64 04 	lds	r22, 0x0464
     e12:	70 91 65 04 	lds	r23, 0x0465
     e16:	80 91 66 04 	lds	r24, 0x0466
     e1a:	90 91 67 04 	lds	r25, 0x0467
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e4       	ldi	r19, 0x40	; 64
     e22:	4f e0       	ldi	r20, 0x0F	; 15
     e24:	54 e4       	ldi	r21, 0x44	; 68
     e26:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
     e2a:	0e 94 7f 3e 	call	0x7cfe	; 0x7cfe <__fixunssfsi>
     e2e:	87 2f       	mov	r24, r23
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)&0xFF,1);
     e36:	60 91 6c 04 	lds	r22, 0x046C
     e3a:	70 91 6d 04 	lds	r23, 0x046D
     e3e:	80 91 6e 04 	lds	r24, 0x046E
     e42:	90 91 6f 04 	lds	r25, 0x046F
     e46:	0e 94 7f 3e 	call	0x7cfe	; 0x7cfe <__fixunssfsi>
     e4a:	86 2f       	mov	r24, r22
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)>>8,1);
     e52:	60 91 6c 04 	lds	r22, 0x046C
     e56:	70 91 6d 04 	lds	r23, 0x046D
     e5a:	80 91 6e 04 	lds	r24, 0x046E
     e5e:	90 91 6f 04 	lds	r25, 0x046F
     e62:	0e 94 7f 3e 	call	0x7cfe	; 0x7cfe <__fixunssfsi>
     e66:	87 2f       	mov	r24, r23
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)&0xFF,1);
     e6e:	60 91 70 04 	lds	r22, 0x0470
     e72:	70 91 71 04 	lds	r23, 0x0471
     e76:	80 91 72 04 	lds	r24, 0x0472
     e7a:	90 91 73 04 	lds	r25, 0x0473
     e7e:	0e 94 7f 3e 	call	0x7cfe	; 0x7cfe <__fixunssfsi>
     e82:	86 2f       	mov	r24, r22
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)>>8,1);
     e8a:	60 91 70 04 	lds	r22, 0x0470
     e8e:	70 91 71 04 	lds	r23, 0x0471
     e92:	80 91 72 04 	lds	r24, 0x0472
     e96:	90 91 73 04 	lds	r25, 0x0473
     e9a:	0e 94 7f 3e 	call	0x7cfe	; 0x7cfe <__fixunssfsi>
     e9e:	87 2f       	mov	r24, r23
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)&0xFF,1);
     ea6:	60 91 d3 02 	lds	r22, 0x02D3
     eaa:	70 91 d4 02 	lds	r23, 0x02D4
     eae:	80 91 d5 02 	lds	r24, 0x02D5
     eb2:	90 91 d6 02 	lds	r25, 0x02D6
     eb6:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
     eba:	86 2f       	mov	r24, r22
     ebc:	61 e0       	ldi	r22, 0x01	; 1
     ebe:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>8,1);
     ec2:	60 91 d3 02 	lds	r22, 0x02D3
     ec6:	70 91 d4 02 	lds	r23, 0x02D4
     eca:	80 91 d5 02 	lds	r24, 0x02D5
     ece:	90 91 d6 02 	lds	r25, 0x02D6
     ed2:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
     ed6:	87 2f       	mov	r24, r23
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>16,1);
     ede:	60 91 d3 02 	lds	r22, 0x02D3
     ee2:	70 91 d4 02 	lds	r23, 0x02D4
     ee6:	80 91 d5 02 	lds	r24, 0x02D5
     eea:	90 91 d6 02 	lds	r25, 0x02D6
     eee:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
     ef2:	61 e0       	ldi	r22, 0x01	; 1
     ef4:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>24,1);
     ef8:	60 91 d3 02 	lds	r22, 0x02D3
     efc:	70 91 d4 02 	lds	r23, 0x02D4
     f00:	80 91 d5 02 	lds	r24, 0x02D5
     f04:	90 91 d6 02 	lds	r25, 0x02D6
     f08:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
     f0c:	89 2f       	mov	r24, r25
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)&0xFF,1);
     f14:	60 91 cf 02 	lds	r22, 0x02CF
     f18:	70 91 d0 02 	lds	r23, 0x02D0
     f1c:	80 91 d1 02 	lds	r24, 0x02D1
     f20:	90 91 d2 02 	lds	r25, 0x02D2
     f24:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
     f28:	86 2f       	mov	r24, r22
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>8,1);
     f30:	60 91 cf 02 	lds	r22, 0x02CF
     f34:	70 91 d0 02 	lds	r23, 0x02D0
     f38:	80 91 d1 02 	lds	r24, 0x02D1
     f3c:	90 91 d2 02 	lds	r25, 0x02D2
     f40:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
     f44:	87 2f       	mov	r24, r23
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>16,1);
     f4c:	60 91 cf 02 	lds	r22, 0x02CF
     f50:	70 91 d0 02 	lds	r23, 0x02D0
     f54:	80 91 d1 02 	lds	r24, 0x02D1
     f58:	90 91 d2 02 	lds	r25, 0x02D2
     f5c:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>24,1);
     f66:	60 91 cf 02 	lds	r22, 0x02CF
     f6a:	70 91 d0 02 	lds	r23, 0x02D0
     f6e:	80 91 d1 02 	lds	r24, 0x02D1
     f72:	90 91 d2 02 	lds	r25, 0x02D2
     f76:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
     f7a:	89 2f       	mov	r24, r25
     f7c:	61 e0       	ldi	r22, 0x01	; 1
     f7e:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(pwm_left_desired>>2, 1);
     f82:	80 91 f9 02 	lds	r24, 0x02F9
     f86:	90 91 fa 02 	lds	r25, 0x02FA
     f8a:	95 95       	asr	r25
     f8c:	87 95       	ror	r24
     f8e:	95 95       	asr	r25
     f90:	87 95       	ror	r24
     f92:	61 e0       	ldi	r22, 0x01	; 1
     f94:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
								usart0Transmit(pwm_right_desired>>2, 1);
     f98:	80 91 f7 02 	lds	r24, 0x02F7
     f9c:	90 91 f8 02 	lds	r25, 0x02F8
     fa0:	95 95       	asr	r25
     fa2:	87 95       	ror	r24
     fa4:	95 95       	asr	r25
     fa6:	87 95       	ror	r24
     fa8:	61 e0       	ldi	r22, 0x01	; 1
     faa:	0e 94 ae 1a 	call	0x355c	; 0x355c <usart0Transmit>
     fae:	90 91 48 04 	lds	r25, 0x0448
     fb2:	e4 c9       	rjmp	.-3128   	; 0x37c <main+0x1a0>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
     fb4:	82 30       	cpi	r24, 0x02	; 2
     fb6:	09 f0       	breq	.+2      	; 0xfba <main+0xdde>
     fb8:	a2 cc       	rjmp	.-1724   	; 0x8fe <main+0x722>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
     fba:	8a 2d       	mov	r24, r10
     fbc:	80 95       	com	r24
     fbe:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
     fc2:	10 92 18 03 	sts	0x0318, r1
						break;
     fc6:	9b cc       	rjmp	.-1738   	; 0x8fe <main+0x722>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	09 f0       	breq	.+2      	; 0xfce <main+0xdf2>
     fcc:	af cb       	rjmp	.-2210   	; 0x72c <main+0x550>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
     fce:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <turnOffGreenLeds>
							GREEN_LED2_ON;
     fd2:	80 91 0b 01 	lds	r24, 0x010B
     fd6:	8b 7f       	andi	r24, 0xFB	; 251
     fd8:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
     fdc:	10 92 4e 04 	sts	0x044E, r1
							enableObstacleAvoidance();
     fe0:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <enableObstacleAvoidance>
							setRightSpeed(15);
     fe4:	8f e0       	ldi	r24, 0x0F	; 15
     fe6:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
							setLeftSpeed(15);
     fea:	8f e0       	ldi	r24, 0x0F	; 15
     fec:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
     ff0:	80 91 69 02 	lds	r24, 0x0269
     ff4:	90 91 6a 02 	lds	r25, 0x026A
     ff8:	e1 e0       	ldi	r30, 0x01	; 1
     ffa:	80 39       	cpi	r24, 0x90	; 144
     ffc:	9e 07       	cpc	r25, r30
     ffe:	0c f4       	brge	.+2      	; 0x1002 <main+0xe26>
    1000:	3a c1       	rjmp	.+628    	; 0x1276 <main+0x109a>
    1002:	80 91 6b 02 	lds	r24, 0x026B
    1006:	90 91 6c 02 	lds	r25, 0x026C
    100a:	f1 e0       	ldi	r31, 0x01	; 1
    100c:	80 39       	cpi	r24, 0x90	; 144
    100e:	9f 07       	cpc	r25, r31
    1010:	0c f4       	brge	.+2      	; 0x1014 <main+0xe38>
    1012:	31 c1       	rjmp	.+610    	; 0x1276 <main+0x109a>
    1014:	80 91 67 02 	lds	r24, 0x0267
    1018:	90 91 68 02 	lds	r25, 0x0268
    101c:	21 e0       	ldi	r18, 0x01	; 1
    101e:	80 39       	cpi	r24, 0x90	; 144
    1020:	92 07       	cpc	r25, r18
    1022:	0c f4       	brge	.+2      	; 0x1026 <main+0xe4a>
    1024:	28 c1       	rjmp	.+592    	; 0x1276 <main+0x109a>
    1026:	80 91 6d 02 	lds	r24, 0x026D
    102a:	90 91 6e 02 	lds	r25, 0x026E
    102e:	31 e0       	ldi	r19, 0x01	; 1
    1030:	80 39       	cpi	r24, 0x90	; 144
    1032:	93 07       	cpc	r25, r19
    1034:	0c f4       	brge	.+2      	; 0x1038 <main+0xe5c>
    1036:	1f c1       	rjmp	.+574    	; 0x1276 <main+0x109a>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
    1038:	10 92 4d 04 	sts	0x044D, r1
    103c:	77 cb       	rjmp	.-2322   	; 0x72c <main+0x550>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
    103e:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <turnOffGreenLeds>
							GREEN_LED6_ON;
    1042:	80 91 0b 01 	lds	r24, 0x010B
    1046:	8f 7b       	andi	r24, 0xBF	; 191
    1048:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
    104c:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    1050:	9b 01       	movw	r18, r22
    1052:	ac 01       	movw	r20, r24
    1054:	60 93 54 04 	sts	0x0454, r22
    1058:	70 93 55 04 	sts	0x0455, r23
    105c:	80 93 56 04 	sts	0x0456, r24
    1060:	90 93 57 04 	sts	0x0457, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    1064:	80 91 50 04 	lds	r24, 0x0450
    1068:	90 91 51 04 	lds	r25, 0x0451
    106c:	a0 91 52 04 	lds	r26, 0x0452
    1070:	b0 91 53 04 	lds	r27, 0x0453
    1074:	28 1b       	sub	r18, r24
    1076:	39 0b       	sbc	r19, r25
    1078:	4a 0b       	sbc	r20, r26
    107a:	5b 0b       	sbc	r21, r27
    107c:	2d 3c       	cpi	r18, 0xCD	; 205
    107e:	66 e6       	ldi	r22, 0x66	; 102
    1080:	36 07       	cpc	r19, r22
    1082:	64 e0       	ldi	r22, 0x04	; 4
    1084:	46 07       	cpc	r20, r22
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	56 07       	cpc	r21, r22
    108a:	08 f4       	brcc	.+2      	; 0x108e <main+0xeb2>
    108c:	39 c1       	rjmp	.+626    	; 0x1300 <main+0x1124>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    108e:	80 91 bb 02 	lds	r24, 0x02BB
    1092:	90 91 bc 02 	lds	r25, 0x02BC
    1096:	e3 e0       	ldi	r30, 0x03	; 3
    1098:	8a 37       	cpi	r24, 0x7A	; 122
    109a:	9e 07       	cpc	r25, r30
    109c:	08 f4       	brcc	.+2      	; 0x10a0 <main+0xec4>
    109e:	3c c1       	rjmp	.+632    	; 0x1318 <main+0x113c>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-13);
    10a0:	83 ef       	ldi	r24, 0xF3	; 243
    10a2:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
									setLeftSpeed(-13);
    10a6:	83 ef       	ldi	r24, 0xF3	; 243
    10a8:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    10ac:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    10b0:	60 93 50 04 	sts	0x0450, r22
    10b4:	70 93 51 04 	sts	0x0451, r23
    10b8:	80 93 52 04 	sts	0x0452, r24
    10bc:	90 93 53 04 	sts	0x0453, r25
									demoState = 4;
    10c0:	f4 e0       	ldi	r31, 0x04	; 4
    10c2:	f0 93 4c 04 	sts	0x044C, r31
									break;
    10c6:	32 cb       	rjmp	.-2460   	; 0x72c <main+0x550>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
    10c8:	8a 2d       	mov	r24, r10
    10ca:	80 95       	com	r24
    10cc:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
    10d0:	62 e0       	ldi	r22, 0x02	; 2
    10d2:	60 93 18 03 	sts	0x0318, r22
						break;
    10d6:	13 cc       	rjmp	.-2010   	; 0x8fe <main+0x722>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    10d8:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <turnOffGreenLeds>
							GREEN_LED6_ON;
    10dc:	80 91 0b 01 	lds	r24, 0x010B
    10e0:	8f 7b       	andi	r24, 0xBF	; 191
    10e2:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    10e6:	80 91 0b 01 	lds	r24, 0x010B
    10ea:	8f 77       	andi	r24, 0x7F	; 127
    10ec:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    10f0:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    10f4:	9b 01       	movw	r18, r22
    10f6:	ac 01       	movw	r20, r24
    10f8:	60 93 54 04 	sts	0x0454, r22
    10fc:	70 93 55 04 	sts	0x0455, r23
    1100:	80 93 56 04 	sts	0x0456, r24
    1104:	90 93 57 04 	sts	0x0457, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    1108:	80 91 50 04 	lds	r24, 0x0450
    110c:	90 91 51 04 	lds	r25, 0x0451
    1110:	a0 91 52 04 	lds	r26, 0x0452
    1114:	b0 91 53 04 	lds	r27, 0x0453
    1118:	28 1b       	sub	r18, r24
    111a:	39 0b       	sbc	r19, r25
    111c:	4a 0b       	sbc	r20, r26
    111e:	5b 0b       	sbc	r21, r27
    1120:	2f 38       	cpi	r18, 0x8F	; 143
    1122:	65 e2       	ldi	r22, 0x25	; 37
    1124:	36 07       	cpc	r19, r22
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	46 07       	cpc	r20, r22
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	56 07       	cpc	r21, r22
    112e:	08 f4       	brcc	.+2      	; 0x1132 <main+0xf56>
    1130:	fd ca       	rjmp	.-2566   	; 0x72c <main+0x550>
								setRightSpeed(20);
    1132:	84 e1       	ldi	r24, 0x14	; 20
    1134:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
								setLeftSpeed(-20);								
    1138:	8c ee       	ldi	r24, 0xEC	; 236
    113a:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    113e:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    1142:	60 93 50 04 	sts	0x0450, r22
    1146:	70 93 51 04 	sts	0x0451, r23
    114a:	80 93 52 04 	sts	0x0452, r24
    114e:	90 93 53 04 	sts	0x0453, r25
								demoState = 5;							
    1152:	85 e0       	ldi	r24, 0x05	; 5
    1154:	80 93 4c 04 	sts	0x044C, r24
    1158:	e9 ca       	rjmp	.-2606   	; 0x72c <main+0x550>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
    115a:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <turnOffGreenLeds>
							GREEN_LED4_ON;
    115e:	80 91 0b 01 	lds	r24, 0x010B
    1162:	8f 7e       	andi	r24, 0xEF	; 239
    1164:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
    1168:	0e 94 f7 34 	call	0x69ee	; 0x69ee <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
    116c:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    1170:	9b 01       	movw	r18, r22
    1172:	ac 01       	movw	r20, r24
    1174:	60 93 54 04 	sts	0x0454, r22
    1178:	70 93 55 04 	sts	0x0455, r23
    117c:	80 93 56 04 	sts	0x0456, r24
    1180:	90 93 57 04 	sts	0x0457, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
    1184:	80 91 50 04 	lds	r24, 0x0450
    1188:	90 91 51 04 	lds	r25, 0x0451
    118c:	a0 91 52 04 	lds	r26, 0x0452
    1190:	b0 91 53 04 	lds	r27, 0x0453
    1194:	28 1b       	sub	r18, r24
    1196:	39 0b       	sbc	r19, r25
    1198:	4a 0b       	sbc	r20, r26
    119a:	5b 0b       	sbc	r21, r27
    119c:	23 33       	cpi	r18, 0x33	; 51
    119e:	6f ee       	ldi	r22, 0xEF	; 239
    11a0:	36 07       	cpc	r19, r22
    11a2:	62 e0       	ldi	r22, 0x02	; 2
    11a4:	46 07       	cpc	r20, r22
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	56 07       	cpc	r21, r22
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <main+0xfd2>
    11ac:	f0 c0       	rjmp	.+480    	; 0x138e <main+0x11b2>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
    11ae:	80 91 03 01 	lds	r24, 0x0103
    11b2:	84 ff       	sbrs	r24, 4
    11b4:	d1 c0       	rjmp	.+418    	; 0x1358 <main+0x117c>
								outOfLine = 0;
    11b6:	10 92 4e 04 	sts	0x044E, r1
								chargeContact++;
    11ba:	80 91 4f 04 	lds	r24, 0x044F
    11be:	8f 5f       	subi	r24, 0xFF	; 255
    11c0:	80 93 4f 04 	sts	0x044F, r24
								if(chargeContact > 20) {
    11c4:	85 31       	cpi	r24, 0x15	; 21
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <main+0xfee>
    11c8:	0f c1       	rjmp	.+542    	; 0x13e8 <main+0x120c>
    11ca:	80 91 69 02 	lds	r24, 0x0269
    11ce:	90 91 6a 02 	lds	r25, 0x026A
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    11d2:	20 91 67 02 	lds	r18, 0x0267
    11d6:	30 91 68 02 	lds	r19, 0x0268
    11da:	41 e0       	ldi	r20, 0x01	; 1
    11dc:	22 3c       	cpi	r18, 0xC2	; 194
    11de:	34 07       	cpc	r19, r20
    11e0:	ac f4       	brge	.+42     	; 0x120c <main+0x1030>
    11e2:	51 e0       	ldi	r21, 0x01	; 1
    11e4:	83 3c       	cpi	r24, 0xC3	; 195
    11e6:	95 07       	cpc	r25, r21
    11e8:	8c f0       	brlt	.+34     	; 0x120c <main+0x1030>
    11ea:	40 91 6b 02 	lds	r20, 0x026B
    11ee:	50 91 6c 02 	lds	r21, 0x026C
    11f2:	61 e0       	ldi	r22, 0x01	; 1
    11f4:	43 3c       	cpi	r20, 0xC3	; 195
    11f6:	56 07       	cpc	r21, r22
    11f8:	4c f0       	brlt	.+18     	; 0x120c <main+0x1030>
    11fa:	40 91 6d 02 	lds	r20, 0x026D
    11fe:	50 91 6e 02 	lds	r21, 0x026E
    1202:	e1 e0       	ldi	r30, 0x01	; 1
    1204:	43 3c       	cpi	r20, 0xC3	; 195
    1206:	5e 07       	cpc	r21, r30
    1208:	0c f0       	brlt	.+2      	; 0x120c <main+0x1030>
    120a:	0d c1       	rjmp	.+538    	; 0x1426 <main+0x124a>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    120c:	40 91 6d 02 	lds	r20, 0x026D
    1210:	50 91 6e 02 	lds	r21, 0x026E
    1214:	f1 e0       	ldi	r31, 0x01	; 1
    1216:	42 3c       	cpi	r20, 0xC2	; 194
    1218:	5f 07       	cpc	r21, r31
    121a:	0c f0       	brlt	.+2      	; 0x121e <main+0x1042>
    121c:	88 c0       	rjmp	.+272    	; 0x132e <main+0x1152>
    121e:	41 e0       	ldi	r20, 0x01	; 1
    1220:	23 3c       	cpi	r18, 0xC3	; 195
    1222:	34 07       	cpc	r19, r20
    1224:	0c f4       	brge	.+2      	; 0x1228 <main+0x104c>
    1226:	83 c0       	rjmp	.+262    	; 0x132e <main+0x1152>
    1228:	51 e0       	ldi	r21, 0x01	; 1
    122a:	83 3c       	cpi	r24, 0xC3	; 195
    122c:	95 07       	cpc	r25, r21
    122e:	0c f4       	brge	.+2      	; 0x1232 <main+0x1056>
    1230:	83 c0       	rjmp	.+262    	; 0x1338 <main+0x115c>
    1232:	80 91 6b 02 	lds	r24, 0x026B
    1236:	90 91 6c 02 	lds	r25, 0x026C
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	83 3c       	cpi	r24, 0xC3	; 195
    123e:	96 07       	cpc	r25, r22
    1240:	0c f0       	brlt	.+2      	; 0x1244 <main+0x1068>
    1242:	f8 c0       	rjmp	.+496    	; 0x1434 <main+0x1258>
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(15);
    1244:	8f e0       	ldi	r24, 0x0F	; 15
    1246:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
								setRightSpeed(-5);
    124a:	8b ef       	ldi	r24, 0xFB	; 251
    124c:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
    1250:	6d ca       	rjmp	.-2854   	; 0x72c <main+0x550>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    1252:	e0 e6       	ldi	r30, 0x60	; 96
    1254:	ae 16       	cp	r10, r30
    1256:	b1 04       	cpc	r11, r1
    1258:	08 f0       	brcs	.+2      	; 0x125c <main+0x1080>
    125a:	b9 c9       	rjmp	.-3214   	; 0x5ce <main+0x3f2>
					if(pwm_red!=255 && pwm_green!=255) {
    125c:	80 91 0c 02 	lds	r24, 0x020C
    1260:	8f 3f       	cpi	r24, 0xFF	; 255
    1262:	09 f4       	brne	.+2      	; 0x1266 <main+0x108a>
    1264:	b4 c9       	rjmp	.-3224   	; 0x5ce <main+0x3f2>
    1266:	80 91 0d 02 	lds	r24, 0x020D
    126a:	8f 3f       	cpi	r24, 0xFF	; 255
    126c:	09 f4       	brne	.+2      	; 0x1270 <main+0x1094>
    126e:	af c9       	rjmp	.-3234   	; 0x5ce <main+0x3f2>
						pwm_blue = 255;
    1270:	10 93 0e 02 	sts	0x020E, r17
    1274:	ac c9       	rjmp	.-3240   	; 0x5ce <main+0x3f2>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(15);
							setLeftSpeed(15);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    1276:	80 91 4d 04 	lds	r24, 0x044D
    127a:	8f 5f       	subi	r24, 0xFF	; 255
    127c:	80 93 4d 04 	sts	0x044D, r24
								if(lineFound > 10) {
    1280:	8b 30       	cpi	r24, 0x0B	; 11
    1282:	08 f4       	brcc	.+2      	; 0x1286 <main+0x10aa>
    1284:	53 ca       	rjmp	.-2906   	; 0x72c <main+0x550>
									outOfLine = 0;
    1286:	10 92 4e 04 	sts	0x044E, r1
									chargeContact = 0;
    128a:	10 92 4f 04 	sts	0x044F, r1
									demoStartTime = getTime100MicroSec();
    128e:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    1292:	60 93 50 04 	sts	0x0450, r22
    1296:	70 93 51 04 	sts	0x0451, r23
    129a:	80 93 52 04 	sts	0x0452, r24
    129e:	90 93 53 04 	sts	0x0453, r25
									demoState = 2;
    12a2:	42 e0       	ldi	r20, 0x02	; 2
    12a4:	40 93 4c 04 	sts	0x044C, r20
									break;
    12a8:	41 ca       	rjmp	.-2942   	; 0x72c <main+0x550>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    12aa:	80 36       	cpi	r24, 0x60	; 96
    12ac:	91 05       	cpc	r25, r1
    12ae:	08 f0       	brcs	.+2      	; 0x12b2 <main+0x10d6>
    12b0:	8c cb       	rjmp	.-2280   	; 0x9ca <main+0x7ee>
					pwm_blue = 255;
    12b2:	10 93 0e 02 	sts	0x020E, r17
    12b6:	89 cb       	rjmp	.-2286   	; 0x9ca <main+0x7ee>
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired += speedStep;
						if(pwm_intermediate_right_desired > pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    12b8:	82 17       	cp	r24, r18
    12ba:	93 07       	cpc	r25, r19
    12bc:	0c f0       	brlt	.+2      	; 0x12c0 <main+0x10e4>
    12be:	25 c9       	rjmp	.-3510   	; 0x50a <main+0x32e>
						pwm_intermediate_right_desired -= speedStep;
    12c0:	40 91 17 02 	lds	r20, 0x0217
    12c4:	24 1b       	sub	r18, r20
    12c6:	31 09       	sbc	r19, r1
    12c8:	30 93 fc 02 	sts	0x02FC, r19
    12cc:	20 93 fb 02 	sts	0x02FB, r18
						if(pwm_intermediate_right_desired < pwm_right_desired) {
    12d0:	28 17       	cp	r18, r24
    12d2:	39 07       	cpc	r19, r25
    12d4:	0c f0       	brlt	.+2      	; 0x12d8 <main+0x10fc>
    12d6:	19 c9       	rjmp	.-3534   	; 0x50a <main+0x32e>
    12d8:	14 c9       	rjmp	.-3544   	; 0x502 <main+0x326>
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
						pwm_intermediate_left_desired += speedStep;
						if(pwm_intermediate_left_desired > pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}
					} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    12da:	82 17       	cp	r24, r18
    12dc:	93 07       	cpc	r25, r19
    12de:	14 f0       	brlt	.+4      	; 0x12e4 <main+0x1108>
    12e0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
						pwm_intermediate_left_desired -= speedStep;
    12e4:	40 91 17 02 	lds	r20, 0x0217
    12e8:	24 1b       	sub	r18, r20
    12ea:	31 09       	sbc	r19, r1
    12ec:	30 93 fe 02 	sts	0x02FE, r19
    12f0:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_left_desired < pwm_left_desired) {
    12f4:	28 17       	cp	r18, r24
    12f6:	39 07       	cpc	r19, r25
    12f8:	14 f0       	brlt	.+4      	; 0x12fe <main+0x1122>
    12fa:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
    12fe:	29 c9       	rjmp	.-3502   	; 0x552 <main+0x376>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    1300:	80 91 03 01 	lds	r24, 0x0103
    1304:	84 fd       	sbrc	r24, 4
    1306:	12 ca       	rjmp	.-3036   	; 0x72c <main+0x550>
								chargeContact = 0;
    1308:	10 92 4f 04 	sts	0x044F, r1
								outOfLine = 0;
    130c:	10 92 4e 04 	sts	0x044E, r1
								demoState = 2;
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	98 2e       	mov	r9, r24
    1314:	90 92 4c 04 	sts	0x044C, r9
								demoStartTime = getTime100MicroSec();
    1318:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    131c:	60 93 50 04 	sts	0x0450, r22
    1320:	70 93 51 04 	sts	0x0451, r23
    1324:	80 93 52 04 	sts	0x0452, r24
    1328:	90 93 53 04 	sts	0x0453, r25
								break;						
    132c:	ff c9       	rjmp	.-3074   	; 0x72c <main+0x550>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    132e:	e1 e0       	ldi	r30, 0x01	; 1
    1330:	83 3c       	cpi	r24, 0xC3	; 195
    1332:	9e 07       	cpc	r25, r30
    1334:	0c f0       	brlt	.+2      	; 0x1338 <main+0x115c>
    1336:	86 cf       	rjmp	.-244    	; 0x1244 <main+0x1068>
								setRightSpeed(-5);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    1338:	80 91 6b 02 	lds	r24, 0x026B
    133c:	90 91 6c 02 	lds	r25, 0x026C
    1340:	f1 e0       	ldi	r31, 0x01	; 1
    1342:	83 3c       	cpi	r24, 0xC3	; 195
    1344:	9f 07       	cpc	r25, r31
    1346:	0c f4       	brge	.+2      	; 0x134a <main+0x116e>
    1348:	48 c0       	rjmp	.+144    	; 0x13da <main+0x11fe>
								setLeftSpeed(-5);
    134a:	8b ef       	ldi	r24, 0xFB	; 251
    134c:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
								setRightSpeed(15);
    1350:	8f e0       	ldi	r24, 0x0F	; 15
    1352:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
    1356:	ea c9       	rjmp	.-3116   	; 0x72c <main+0x550>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    1358:	10 92 4f 04 	sts	0x044F, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    135c:	80 91 69 02 	lds	r24, 0x0269
    1360:	90 91 6a 02 	lds	r25, 0x026A
    1364:	e1 e0       	ldi	r30, 0x01	; 1
    1366:	83 3c       	cpi	r24, 0xC3	; 195
    1368:	9e 07       	cpc	r25, r30
    136a:	2c f1       	brlt	.+74     	; 0x13b6 <main+0x11da>
    136c:	20 91 6b 02 	lds	r18, 0x026B
    1370:	30 91 6c 02 	lds	r19, 0x026C
    1374:	f1 e0       	ldi	r31, 0x01	; 1
    1376:	23 3c       	cpi	r18, 0xC3	; 195
    1378:	3f 07       	cpc	r19, r31
    137a:	ec f0       	brlt	.+58     	; 0x13b6 <main+0x11da>
									outOfLine++;
    137c:	20 91 4e 04 	lds	r18, 0x044E
    1380:	2f 5f       	subi	r18, 0xFF	; 255
    1382:	20 93 4e 04 	sts	0x044E, r18
									if(outOfLine > 250) {
    1386:	2b 3f       	cpi	r18, 0xFB	; 251
    1388:	08 f4       	brcc	.+2      	; 0x138c <main+0x11b0>
    138a:	23 cf       	rjmp	.-442    	; 0x11d2 <main+0xff6>
    138c:	cd c9       	rjmp	.-3174   	; 0x728 <main+0x54c>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    138e:	8c ee       	ldi	r24, 0xEC	; 236
    1390:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
								setLeftSpeed(-20);
    1394:	8c ee       	ldi	r24, 0xEC	; 236
    1396:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    139a:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    139e:	60 93 50 04 	sts	0x0450, r22
    13a2:	70 93 51 04 	sts	0x0451, r23
    13a6:	80 93 52 04 	sts	0x0452, r24
    13aa:	90 93 53 04 	sts	0x0453, r25
								demoState = 4;
    13ae:	84 e0       	ldi	r24, 0x04	; 4
    13b0:	80 93 4c 04 	sts	0x044C, r24
								break;
    13b4:	bb c9       	rjmp	.-3210   	; 0x72c <main+0x550>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    13b6:	10 92 4e 04 	sts	0x044E, r1
    13ba:	0b cf       	rjmp	.-490    	; 0x11d2 <main+0xff6>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    13bc:	91 30       	cpi	r25, 0x01	; 1
    13be:	41 f1       	breq	.+80     	; 0x1410 <main+0x1234>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    13c0:	92 30       	cpi	r25, 0x02	; 2
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <main+0x11ea>
    13c4:	04 c9       	rjmp	.-3576   	; 0x5ce <main+0x3f2>
						pwm_red = 255;
    13c6:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 255;
    13ca:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 254;
    13ce:	8e ef       	ldi	r24, 0xFE	; 254
    13d0:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    13d4:	10 92 18 03 	sts	0x0318, r1
    13d8:	fa c8       	rjmp	.-3596   	; 0x5ce <main+0x3f2>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(15);
    13da:	8f e0       	ldi	r24, 0x0F	; 15
    13dc:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
								setLeftSpeed(15);
    13e0:	8f e0       	ldi	r24, 0x0F	; 15
    13e2:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
    13e6:	a2 c9       	rjmp	.-3260   	; 0x72c <main+0x550>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
									setRightSpeed(0);
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    13f4:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    13f8:	60 93 50 04 	sts	0x0450, r22
    13fc:	70 93 51 04 	sts	0x0451, r23
    1400:	80 93 52 04 	sts	0x0452, r24
    1404:	90 93 53 04 	sts	0x0453, r25
									demoState = 3;
    1408:	93 e0       	ldi	r25, 0x03	; 3
    140a:	90 93 4c 04 	sts	0x044C, r25
									break;
    140e:	8e c9       	rjmp	.-3300   	; 0x72c <main+0x550>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    1410:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 254;
    1414:	5e ef       	ldi	r21, 0xFE	; 254
    1416:	50 93 0d 02 	sts	0x020D, r21
						pwm_blue = 255;
    141a:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 2;
    141e:	62 e0       	ldi	r22, 0x02	; 2
    1420:	60 93 18 03 	sts	0x0318, r22
    1424:	d4 c8       	rjmp	.-3672   	; 0x5ce <main+0x3f2>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
    1426:	86 ef       	ldi	r24, 0xF6	; 246
    1428:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
								setRightSpeed(15);
    142c:	8f e0       	ldi	r24, 0x0F	; 15
    142e:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
    1432:	7c c9       	rjmp	.-3336   	; 0x72c <main+0x550>
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
    1434:	8f e0       	ldi	r24, 0x0F	; 15
    1436:	0e 94 42 21 	call	0x4284	; 0x4284 <setLeftSpeed>
								setRightSpeed(-10);
    143a:	86 ef       	ldi	r24, 0xF6	; 246
    143c:	0e 94 5f 21 	call	0x42be	; 0x42be <setRightSpeed>
    1440:	75 c9       	rjmp	.-3350   	; 0x72c <main+0x550>

00001442 <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1446:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1448:	0d b4       	in	r0, 0x2d	; 45
    144a:	07 fc       	sbrc	r0, 7
    144c:	0a c0       	rjmp	.+20     	; 0x1462 <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    144e:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1450:	37 e2       	ldi	r19, 0x27	; 39
    1452:	80 31       	cpi	r24, 0x10	; 16
    1454:	93 07       	cpc	r25, r19
    1456:	c0 f3       	brcs	.-16     	; 0x1448 <SPI_WAIT+0x6>
			spiCommError = 1;
    1458:	20 93 16 03 	sts	0x0316, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    145c:	0d b4       	in	r0, 0x2d	; 45
    145e:	07 fe       	sbrs	r0, 7
    1460:	f6 cf       	rjmp	.-20     	; 0x144e <SPI_WAIT+0xc>
			return;
		}
	}
}
    1462:	08 95       	ret

00001464 <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    1464:	84 b1       	in	r24, 0x04	; 4
    1466:	80 7f       	andi	r24, 0xF0	; 240
    1468:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    146a:	84 b1       	in	r24, 0x04	; 4
    146c:	87 60       	ori	r24, 0x07	; 7
    146e:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    1470:	80 e5       	ldi	r24, 0x50	; 80
    1472:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    1474:	8d b5       	in	r24, 0x2d	; 45
    1476:	81 60       	ori	r24, 0x01	; 1
    1478:	8d bd       	out	0x2d, r24	; 45

}
    147a:	08 95       	ret

0000147c <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    147c:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    147e:	1d bc       	out	0x2d, r1	; 45
}
    1480:	08 95       	ret

00001482 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1482:	44 23       	and	r20, r20
    1484:	09 f1       	breq	.+66     	; 0x14c8 <SPI_ReadWrite_Block+0x46>
    1486:	a6 2f       	mov	r26, r22
    1488:	b7 2f       	mov	r27, r23
    148a:	e8 2f       	mov	r30, r24
    148c:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    148e:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    1490:	21 91       	ld	r18, Z+
    1492:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1494:	21 e0       	ldi	r18, 0x01	; 1
    1496:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1498:	0d b4       	in	r0, 0x2d	; 45
    149a:	07 fc       	sbrc	r0, 7
    149c:	0b c0       	rjmp	.+22     	; 0x14b4 <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    149e:	2f 5f       	subi	r18, 0xFF	; 255
    14a0:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    14a2:	57 e2       	ldi	r21, 0x27	; 39
    14a4:	20 31       	cpi	r18, 0x10	; 16
    14a6:	35 07       	cpc	r19, r21
    14a8:	b8 f3       	brcs	.-18     	; 0x1498 <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
    14aa:	90 93 16 03 	sts	0x0316, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    14ae:	0d b4       	in	r0, 0x2d	; 45
    14b0:	07 fe       	sbrs	r0, 7
    14b2:	f5 cf       	rjmp	.-22     	; 0x149e <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    14b4:	20 91 16 03 	lds	r18, 0x0316
    14b8:	22 23       	and	r18, r18
    14ba:	31 f4       	brne	.+12     	; 0x14c8 <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
    14bc:	2e b5       	in	r18, 0x2e	; 46
    14be:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    14c0:	2e 2f       	mov	r18, r30
    14c2:	28 1b       	sub	r18, r24
    14c4:	24 17       	cp	r18, r20
    14c6:	20 f3       	brcs	.-56     	; 0x1490 <SPI_ReadWrite_Block+0xe>
    14c8:	08 95       	ret

000014ca <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    14ca:	66 23       	and	r22, r22
    14cc:	e9 f0       	breq	.+58     	; 0x1508 <SPI_Write_Block+0x3e>
    14ce:	e8 2f       	mov	r30, r24
    14d0:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    14d2:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    14d4:	21 91       	ld	r18, Z+
    14d6:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    14d8:	21 e0       	ldi	r18, 0x01	; 1
    14da:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    14dc:	0d b4       	in	r0, 0x2d	; 45
    14de:	07 fc       	sbrc	r0, 7
    14e0:	0b c0       	rjmp	.+22     	; 0x14f8 <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    14e2:	2f 5f       	subi	r18, 0xFF	; 255
    14e4:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    14e6:	47 e2       	ldi	r20, 0x27	; 39
    14e8:	20 31       	cpi	r18, 0x10	; 16
    14ea:	34 07       	cpc	r19, r20
    14ec:	b8 f3       	brcs	.-18     	; 0x14dc <SPI_Write_Block+0x12>
			spiCommError = 1;
    14ee:	90 93 16 03 	sts	0x0316, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    14f2:	0d b4       	in	r0, 0x2d	; 45
    14f4:	07 fe       	sbrs	r0, 7
    14f6:	f5 cf       	rjmp	.-22     	; 0x14e2 <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    14f8:	20 91 16 03 	lds	r18, 0x0316
    14fc:	22 23       	and	r18, r18
    14fe:	21 f4       	brne	.+8      	; 0x1508 <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    1500:	2e 2f       	mov	r18, r30
    1502:	28 1b       	sub	r18, r24
    1504:	26 17       	cp	r18, r22
    1506:	30 f3       	brcs	.-52     	; 0x14d4 <SPI_Write_Block+0xa>
    1508:	08 95       	ret

0000150a <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    150a:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1510:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1512:	0d b4       	in	r0, 0x2d	; 45
    1514:	07 fc       	sbrc	r0, 7
    1516:	0a c0       	rjmp	.+20     	; 0x152c <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1518:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    151a:	37 e2       	ldi	r19, 0x27	; 39
    151c:	80 31       	cpi	r24, 0x10	; 16
    151e:	93 07       	cpc	r25, r19
    1520:	c0 f3       	brcs	.-16     	; 0x1512 <SPI_Write_Byte+0x8>
			spiCommError = 1;
    1522:	20 93 16 03 	sts	0x0316, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    1526:	0d b4       	in	r0, 0x2d	; 45
    1528:	07 fe       	sbrs	r0, 7
    152a:	f6 cf       	rjmp	.-20     	; 0x1518 <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    152c:	8e b5       	in	r24, 0x2e	; 46
}
    152e:	08 95       	ret

00001530 <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	00 d0       	rcall	.+0      	; 0x153a <mirf_config+0xa>
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    153e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1540:	80 e2       	ldi	r24, 0x20	; 32
    1542:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1546:	8d e0       	ldi	r24, 0x0D	; 13
    1548:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    154c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    154e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1550:	83 e2       	ldi	r24, 0x23	; 35
    1552:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    155c:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    155e:	80 91 13 03 	lds	r24, 0x0313
    1562:	90 91 14 03 	lds	r25, 0x0314
    1566:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    1568:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    156a:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    156c:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    156e:	80 e3       	ldi	r24, 0x30	; 48
    1570:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1574:	8e 01       	movw	r16, r28
    1576:	0f 5f       	subi	r16, 0xFF	; 255
    1578:	1f 4f       	sbci	r17, 0xFF	; 255
    157a:	c8 01       	movw	r24, r16
    157c:	63 e0       	ldi	r22, 0x03	; 3
    157e:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;
    1582:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1584:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1586:	8a e2       	ldi	r24, 0x2A	; 42
    1588:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    158c:	c8 01       	movw	r24, r16
    158e:	63 e0       	ldi	r22, 0x03	; 3
    1590:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;
    1594:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1596:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1598:	81 e2       	ldi	r24, 0x21	; 33
    159a:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15a4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15a6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15a8:	82 e2       	ldi	r24, 0x22	; 34
    15aa:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15b4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15b6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15b8:	84 e2       	ldi	r24, 0x24	; 36
    15ba:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15be:	82 e1       	ldi	r24, 0x12	; 18
    15c0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15c4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15c6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15c8:	85 e2       	ldi	r24, 0x25	; 37
    15ca:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15ce:	88 e2       	ldi	r24, 0x28	; 40
    15d0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15d4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15d6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15d8:	81 e3       	ldi	r24, 0x31	; 49
    15da:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15de:	8d e0       	ldi	r24, 0x0D	; 13
    15e0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15e4:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    15e6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    15e8:	80 e5       	ldi	r24, 0x50	; 80
    15ea:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    15ee:	83 e7       	ldi	r24, 0x73	; 115
    15f0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    15f4:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    15f6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15f8:	8c e3       	ldi	r24, 0x3C	; 60
    15fa:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1604:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1606:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1608:	8d e3       	ldi	r24, 0x3D	; 61
    160a:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    160e:	86 e0       	ldi	r24, 0x06	; 6
    1610:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1614:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1616:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1618:	80 e2       	ldi	r24, 0x20	; 32
    161a:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    161e:	8f e0       	ldi	r24, 0x0F	; 15
    1620:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1624:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	1f 91       	pop	r17
    1632:	0f 91       	pop	r16
    1634:	08 95       	ret

00001636 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1636:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    1638:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    163a:	0e 94 98 0a 	call	0x1530	; 0x1530 <mirf_config>
}
    163e:	08 95       	ret

00001640 <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    1646:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1648:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    164a:	8a e2       	ldi	r24, 0x2A	; 42
    164c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1650:	ce 01       	movw	r24, r28
    1652:	65 e0       	ldi	r22, 0x05	; 5
    1654:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;
    1658:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    165a:	2c 9a       	sbi	0x05, 4	; 5
}
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	08 95       	ret

00001662 <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1668:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    166a:	80 e3       	ldi	r24, 0x30	; 48
    166c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1670:	ce 01       	movw	r24, r28
    1672:	65 e0       	ldi	r22, 0x05	; 5
    1674:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;
    1678:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	08 95       	ret

00001680 <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1680:	80 91 b9 04 	lds	r24, 0x04B9
    1684:	88 23       	and	r24, r24
    1686:	11 f0       	breq	.+4      	; 0x168c <mirf_data_ready+0xc>
    1688:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    168a:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    168c:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    168e:	8f ef       	ldi	r24, 0xFF	; 255
    1690:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1694:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1696:	80 74       	andi	r24, 0x40	; 64
    1698:	08 95       	ret

0000169a <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	0f 92       	push	r0
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    16a4:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    16a6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    16a8:	87 e1       	ldi	r24, 0x17	; 23
    16aa:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    16ae:	be 01       	movw	r22, r28
    16b0:	6f 5f       	subi	r22, 0xFF	; 255
    16b2:	7f 4f       	sbci	r23, 0xFF	; 255
    16b4:	cb 01       	movw	r24, r22
    16b6:	41 e0       	ldi	r20, 0x01	; 1
    16b8:	0e 94 41 0a 	call	0x1482	; 0x1482 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    16bc:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    16be:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c0:	81 70       	andi	r24, 0x01	; 1
    16c2:	0f 90       	pop	r0
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    16ca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    16cc:	82 ee       	ldi	r24, 0xE2	; 226
    16ce:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    16d2:	28 9a       	sbi	0x05, 0	; 5

}
    16d4:	08 95       	ret

000016d6 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    16dc:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    16de:	81 e6       	ldi	r24, 0x61	; 97
    16e0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    16e4:	ce 01       	movw	r24, r28
    16e6:	be 01       	movw	r22, r28
    16e8:	4d e0       	ldi	r20, 0x0D	; 13
    16ea:	0e 94 41 0a 	call	0x1482	; 0x1482 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    16ee:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    16f0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    16f2:	87 e2       	ldi	r24, 0x27	; 39
    16f4:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    16f8:	80 e4       	ldi	r24, 0x40	; 64
    16fa:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    16fe:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	08 95       	ret

00001706 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	0f 92       	push	r0
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1710:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1712:	8f 71       	andi	r24, 0x1F	; 31
    1714:	80 62       	ori	r24, 0x20	; 32
    1716:	69 83       	std	Y+1, r22	; 0x01
    1718:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    171c:	69 81       	ldd	r22, Y+1	; 0x01
    171e:	86 2f       	mov	r24, r22
    1720:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1724:	28 9a       	sbi	0x05, 0	; 5
}
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	0f 92       	push	r0
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    173e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1740:	8f 71       	andi	r24, 0x1F	; 31
    1742:	49 83       	std	Y+1, r20	; 0x01
    1744:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1748:	c8 01       	movw	r24, r16
    174a:	b8 01       	movw	r22, r16
    174c:	49 81       	ldd	r20, Y+1	; 0x01
    174e:	0e 94 41 0a 	call	0x1482	; 0x1482 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1752:	28 9a       	sbi	0x05, 0	; 5
}
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	08 95       	ret

00001760 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	0f 92       	push	r0
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1770:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1772:	8f 71       	andi	r24, 0x1F	; 31
    1774:	80 62       	ori	r24, 0x20	; 32
    1776:	49 83       	std	Y+1, r20	; 0x01
    1778:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    177c:	c8 01       	movw	r24, r16
    177e:	49 81       	ldd	r20, Y+1	; 0x01
    1780:	64 2f       	mov	r22, r20
    1782:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;
    1786:	28 9a       	sbi	0x05, 0	; 5
}
    1788:	0f 90       	pop	r0
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	08 95       	ret

00001794 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1794:	0f 93       	push	r16
    1796:	1f 93       	push	r17
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	0f 92       	push	r0
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    17a4:	80 91 b9 04 	lds	r24, 0x04B9
    17a8:	88 23       	and	r24, r24
    17aa:	e1 f7       	brne	.-8      	; 0x17a4 <mirf_send+0x10>

    mirf_CE_lo;
    17ac:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	80 93 b9 04 	sts	0x04B9, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    17b4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    17b6:	80 e2       	ldi	r24, 0x20	; 32
    17b8:	69 83       	std	Y+1, r22	; 0x01
    17ba:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    17be:	8a e4       	ldi	r24, 0x4A	; 74
    17c0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    17c4:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    17c6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    17c8:	81 ee       	ldi	r24, 0xE1	; 225
    17ca:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    17ce:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    17d0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    17d2:	80 ea       	ldi	r24, 0xA0	; 160
    17d4:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    17d8:	c8 01       	movw	r24, r16
    17da:	69 81       	ldd	r22, Y+1	; 0x01
    17dc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    17e0:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    17e2:	2c 9a       	sbi	0x05, 4	; 5
}
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	08 95       	ret

000017f0 <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	0f 92       	push	r0
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	18 2f       	mov	r17, r24
    1804:	06 2f       	mov	r16, r22
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    1806:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1808:	81 ee       	ldi	r24, 0xE1	; 225
    180a:	99 83       	std	Y+1, r25	; 0x01
    180c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1810:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1812:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1814:	88 ea       	ldi	r24, 0xA8	; 168
    1816:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    181a:	99 81       	ldd	r25, Y+1	; 0x01
    181c:	00 23       	and	r16, r16
    181e:	61 f0       	breq	.+24     	; 0x1838 <writeAckPayload+0x48>
    1820:	61 2f       	mov	r22, r17
    1822:	79 2f       	mov	r23, r25
    1824:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1826:	f7 01       	movw	r30, r14
    1828:	81 91       	ld	r24, Z+
    182a:	7f 01       	movw	r14, r30
    182c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1830:	8e 2d       	mov	r24, r14
    1832:	81 1b       	sub	r24, r17
    1834:	80 17       	cp	r24, r16
    1836:	b8 f3       	brcs	.-18     	; 0x1826 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1838:	28 9a       	sbi	0x05, 0	; 5


}
    183a:	0f 90       	pop	r0
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	1f 91       	pop	r17
    1842:	0f 91       	pop	r16
    1844:	ff 90       	pop	r15
    1846:	ef 90       	pop	r14
    1848:	08 95       	ret

0000184a <readPayloadWidthFromTopFifo>:

uint8_t readPayloadWidthFromTopFifo() {
	uint8_t pWidth = 0;

    mirf_CSN_lo;
    184a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_R_RX_PL_WID);
    184c:	80 e6       	ldi	r24, 0x60	; 96
    184e:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
	pWidth = SPI_Write_Byte(NOP); 	// not specified in the datasheet but the "NRF_R_RX_PL_WID" has a parameter,
    1852:	8f ef       	ldi	r24, 0xFF	; 255
    1854:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
									// we need to send a NOP to receive the actual payload size
    mirf_CSN_hi;
    1858:	28 9a       	sbi	0x05, 0	; 5
	
	return pWidth;
}
    185a:	08 95       	ret

0000185c <readPayloadWidthFromPipe0>:

uint8_t readPayloadWidthFromPipe0() {
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	0f 92       	push	r0
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
	uint8_t pWidth = 0;
    1866:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1868:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    186a:	81 e1       	ldi	r24, 0x11	; 17
    186c:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1870:	be 01       	movw	r22, r28
    1872:	6f 5f       	subi	r22, 0xFF	; 255
    1874:	7f 4f       	sbci	r23, 0xFF	; 255
    1876:	cb 01       	movw	r24, r22
    1878:	41 e0       	ldi	r20, 0x01	; 1
    187a:	0e 94 41 0a 	call	0x1482	; 0x1482 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    187e:	28 9a       	sbi	0x05, 0	; 5
	uint8_t pWidth = 0;

	mirf_read_register(RX_PW_P0, &pWidth, 1);
	
	return pWidth;
}
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	0f 90       	pop	r0
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <flushTxFifo>:

void flushTxFifo() {

    mirf_CSN_lo;
    188a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    188c:	81 ee       	ldi	r24, 0xE1	; 225
    188e:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1892:	28 9a       	sbi	0x05, 0	; 5

}
    1894:	08 95       	ret

00001896 <handleRFCommands>:

void handleRFCommands() {
    1896:	ff 92       	push	r15
    1898:	0f 93       	push	r16
    189a:	1f 93       	push	r17
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	0f 92       	push	r0
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    18a6:	80 91 b9 04 	lds	r24, 0x04B9
    18aa:	88 23       	and	r24, r24
    18ac:	39 f0       	breq	.+14     	; 0x18bc <handleRFCommands+0x26>

		writeAckPayload(ackPayload, 16);

	}

}
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    18bc:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    18be:	8f ef       	ldi	r24, 0xFF	; 255
    18c0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    18c4:	28 9a       	sbi	0x05, 0	; 5

	unsigned int i=0;
	//uint8_t pWidth = 0;
	//uint8_t pWidthP0 = 0;

	if(mirf_data_ready()) {
    18c6:	86 ff       	sbrs	r24, 6
    18c8:	f2 cf       	rjmp	.-28     	; 0x18ae <handleRFCommands+0x18>
		//if(spiCommError) {
		//	usart0Transmit(0xFE,1);
		//	return;
		//}

		rfFlags |= 0x02;
    18ca:	80 91 15 03 	lds	r24, 0x0315
    18ce:	82 60       	ori	r24, 0x02	; 2
    18d0:	80 93 15 03 	sts	0x0315, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    18d4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    18d6:	87 e2       	ldi	r24, 0x27	; 39
    18d8:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    18dc:	80 e7       	ldi	r24, 0x70	; 112
    18de:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    18e2:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
    18e4:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    18e6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    18e8:	87 e1       	ldi	r24, 0x17	; 23
    18ea:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    18ee:	be 01       	movw	r22, r28
    18f0:	6f 5f       	subi	r22, 0xFF	; 255
    18f2:	7f 4f       	sbci	r23, 0xFF	; 255
    18f4:	cb 01       	movw	r24, r22
    18f6:	41 e0       	ldi	r20, 0x01	; 1
    18f8:	0e 94 41 0a 	call	0x1482	; 0x1482 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    18fc:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
		// aren't present in the fifo with consequent wrong data read and wrong behavior of the robot.
		// To avoid this situtation we add this check before actually reading from the fifo to be 
		// sure there are correct data to be read.
		// We don't know why the IRQ for data reception is raised, maybe is not correctly reset sometimes
		// or it is raised when it shouldn't...
		if(rx_fifo_is_empty()) {
    1900:	80 fd       	sbrc	r24, 0
    1902:	d5 cf       	rjmp	.-86     	; 0x18ae <handleRFCommands+0x18>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    1904:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1906:	81 e6       	ldi	r24, 0x61	; 97
    1908:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    190c:	8e e6       	ldi	r24, 0x6E	; 110
    190e:	95 e0       	ldi	r25, 0x05	; 5
    1910:	bc 01       	movw	r22, r24
    1912:	4d e0       	ldi	r20, 0x0D	; 13
    1914:	0e 94 41 0a 	call	0x1482	; 0x1482 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1918:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    191a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    191c:	87 e2       	ldi	r24, 0x27	; 39
    191e:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1922:	80 e4       	ldi	r24, 0x40	; 64
    1924:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1928:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    192a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    192c:	82 ee       	ldi	r24, 0xE2	; 226
    192e:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1932:	28 9a       	sbi	0x05, 0	; 5

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1934:	40 91 6e 05 	lds	r20, 0x056E
    1938:	24 2f       	mov	r18, r20
    193a:	44 23       	and	r20, r20
    193c:	09 f0       	breq	.+2      	; 0x1940 <handleRFCommands+0xaa>
    193e:	29 c1       	rjmp	.+594    	; 0x1b92 <handleRFCommands+0x2fc>
    1940:	50 91 6f 05 	lds	r21, 0x056F
    1944:	e5 2f       	mov	r30, r21
    1946:	55 23       	and	r21, r21
    1948:	09 f4       	brne	.+2      	; 0x194c <handleRFCommands+0xb6>
    194a:	10 c2       	rjmp	.+1056   	; 0x1d6c <handleRFCommands+0x4d6>

			sleep(60);
    194c:	00 91 70 05 	lds	r16, 0x0570

		}

		if(calibrateOdomFlag==0) { 
    1950:	80 91 c0 04 	lds	r24, 0x04C0
    1954:	88 23       	and	r24, r24
    1956:	41 f5       	brne	.+80     	; 0x19a8 <handleRFCommands+0x112>
			speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1958:	70 91 72 05 	lds	r23, 0x0572
    195c:	27 2f       	mov	r18, r23
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	2f 77       	andi	r18, 0x7F	; 127
    1962:	30 70       	andi	r19, 0x00	; 0
    1964:	30 93 12 03 	sts	0x0312, r19
    1968:	20 93 11 03 	sts	0x0311, r18
			speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    196c:	60 91 73 05 	lds	r22, 0x0573
    1970:	86 2f       	mov	r24, r22
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	8f 77       	andi	r24, 0x7F	; 127
    1976:	90 70       	andi	r25, 0x00	; 0
    1978:	90 93 10 03 	sts	0x0310, r25
    197c:	80 93 0f 03 	sts	0x030F, r24
										// in the same range of the measured speed that is 0..800.
										// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
										// this means that the range is more or less 0..400.


			if((rfData[4]&0x80)==0x80) {			// motor right forward
    1980:	77 fd       	sbrc	r23, 7
    1982:	03 c0       	rjmp	.+6      	; 0x198a <handleRFCommands+0xf4>
				pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
			} else {								// backward
				pwm_right_desired = -(speedr);
    1984:	30 95       	com	r19
    1986:	21 95       	neg	r18
    1988:	3f 4f       	sbci	r19, 0xFF	; 255
    198a:	30 93 f8 02 	sts	0x02F8, r19
    198e:	20 93 f7 02 	sts	0x02F7, r18
			}

			if((rfData[5]&0x80)==0x80) {			// motor left forward
    1992:	67 fd       	sbrc	r22, 7
    1994:	03 c0       	rjmp	.+6      	; 0x199c <handleRFCommands+0x106>
				pwm_left_desired = speedl;
			} else {								// backward
				pwm_left_desired = -(speedl);
    1996:	90 95       	com	r25
    1998:	81 95       	neg	r24
    199a:	9f 4f       	sbci	r25, 0xFF	; 255
    199c:	90 93 fa 02 	sts	0x02FA, r25
    19a0:	80 93 f9 02 	sts	0x02F9, r24
    19a4:	24 2f       	mov	r18, r20
    19a6:	e5 2f       	mov	r30, r21

		}


		for(i=0; i<3; i++) {
			dataLED[i]=rfData[i]&0xFF;
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	30 93 67 05 	sts	0x0567, r19
    19ae:	20 93 66 05 	sts	0x0566, r18
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	f0 93 69 05 	sts	0x0569, r31
    19b8:	e0 93 68 05 	sts	0x0568, r30
    19bc:	10 e0       	ldi	r17, 0x00	; 0
    19be:	10 93 6b 05 	sts	0x056B, r17
    19c2:	00 93 6a 05 	sts	0x056A, r16
		}
		pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    19c6:	92 2f       	mov	r25, r18
    19c8:	88 27       	eor	r24, r24
    19ca:	82 1b       	sub	r24, r18
    19cc:	93 0b       	sbc	r25, r19
    19ce:	24 e6       	ldi	r18, 0x64	; 100
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	b9 01       	movw	r22, r18
    19d4:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__udivmodhi4>
    19d8:	f6 2e       	mov	r15, r22
    19da:	f0 94       	com	r15
    19dc:	f0 92 0c 02 	sts	0x020C, r15
		pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    19e0:	5e 2f       	mov	r21, r30
    19e2:	44 27       	eor	r20, r20
    19e4:	4e 1b       	sub	r20, r30
    19e6:	5f 0b       	sbc	r21, r31
    19e8:	ca 01       	movw	r24, r20
    19ea:	b9 01       	movw	r22, r18
    19ec:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__udivmodhi4>
    19f0:	60 95       	com	r22
    19f2:	60 93 0e 02 	sts	0x020E, r22
		pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    19f6:	50 2f       	mov	r21, r16
    19f8:	44 27       	eor	r20, r20
    19fa:	40 1b       	sub	r20, r16
    19fc:	51 0b       	sbc	r21, r17
    19fe:	ca 01       	movw	r24, r20
    1a00:	b9 01       	movw	r22, r18
    1a02:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__udivmodhi4>
    1a06:	60 95       	com	r22
    1a08:	60 93 0d 02 	sts	0x020D, r22
		updateRedLed(pwm_red);
    1a0c:	8f 2d       	mov	r24, r15
    1a0e:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <updateRedLed>
		updateGreenLed(pwm_green);
    1a12:	80 91 0d 02 	lds	r24, 0x020D
    1a16:	0e 94 52 35 	call	0x6aa4	; 0x6aa4 <updateGreenLed>
		updateBlueLed(pwm_blue);
    1a1a:	80 91 0e 02 	lds	r24, 0x020E
    1a1e:	0e 94 66 35 	call	0x6acc	; 0x6acc <updateBlueLed>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    1a22:	80 91 71 05 	lds	r24, 0x0571
    1a26:	80 ff       	sbrs	r24, 0
    1a28:	e6 c0       	rjmp	.+460    	; 0x1bf6 <handleRFCommands+0x360>
			LED_IR1_LOW;
    1a2a:	44 98       	cbi	0x08, 4	; 8
		} else {
			LED_IR1_HIGH;
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    1a2c:	81 ff       	sbrs	r24, 1
    1a2e:	e1 c0       	rjmp	.+450    	; 0x1bf2 <handleRFCommands+0x35c>
			LED_IR2_LOW;
    1a30:	45 98       	cbi	0x08, 5	; 8
		} else {
			LED_IR2_HIGH;
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1a32:	98 2f       	mov	r25, r24
    1a34:	82 ff       	sbrs	r24, 2
    1a36:	da c0       	rjmp	.+436    	; 0x1bec <handleRFCommands+0x356>
			irEnabled = 1;
    1a38:	21 e0       	ldi	r18, 0x01	; 1
    1a3a:	20 93 12 02 	sts	0x0212, r18
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1a3e:	84 fd       	sbrc	r24, 4
    1a40:	5a c2       	rjmp	.+1204   	; 0x1ef6 <handleRFCommands+0x660>
			calibrateSensors();
			resetOdometry();
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1a42:	86 ff       	sbrs	r24, 6
    1a44:	d0 c0       	rjmp	.+416    	; 0x1be6 <handleRFCommands+0x350>
			obstacleAvoidanceEnabled = 1;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	80 93 61 04 	sts	0x0461, r24
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    1a4c:	97 fd       	sbrc	r25, 7
    1a4e:	7e c2       	rjmp	.+1276   	; 0x1f4c <handleRFCommands+0x6b6>
			cliffAvoidanceEnabled = 1;
		} else {
			cliffAvoidanceEnabled = 0;
    1a50:	10 92 62 04 	sts	0x0462, r1
		}

		// handle small green leds
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
    1a54:	80 91 74 05 	lds	r24, 0x0574
    1a58:	80 ff       	sbrs	r24, 0
    1a5a:	bf c0       	rjmp	.+382    	; 0x1bda <handleRFCommands+0x344>
				GREEN_LED0_ON;
    1a5c:	80 91 0b 01 	lds	r24, 0x010B
    1a60:	8e 7f       	andi	r24, 0xFE	; 254
    1a62:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED0_OFF;
			}
				
			if(bit_is_set(rfData[6], 1) ) {
    1a66:	80 91 74 05 	lds	r24, 0x0574
    1a6a:	81 ff       	sbrs	r24, 1
    1a6c:	b0 c0       	rjmp	.+352    	; 0x1bce <handleRFCommands+0x338>
				GREEN_LED1_ON;
    1a6e:	80 91 0b 01 	lds	r24, 0x010B
    1a72:	8d 7f       	andi	r24, 0xFD	; 253
    1a74:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED1_OFF;
			}
				
			if(bit_is_set(rfData[6], 2) ) {
    1a78:	80 91 74 05 	lds	r24, 0x0574
    1a7c:	82 ff       	sbrs	r24, 2
    1a7e:	a1 c0       	rjmp	.+322    	; 0x1bc2 <handleRFCommands+0x32c>
				GREEN_LED2_ON;
    1a80:	80 91 0b 01 	lds	r24, 0x010B
    1a84:	8b 7f       	andi	r24, 0xFB	; 251
    1a86:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED2_OFF;
			}												

			if(bit_is_set(rfData[6], 3) ) {
    1a8a:	80 91 74 05 	lds	r24, 0x0574
    1a8e:	83 ff       	sbrs	r24, 3
    1a90:	96 c0       	rjmp	.+300    	; 0x1bbe <handleRFCommands+0x328>
				GREEN_LED3_ON;
    1a92:	a3 98       	cbi	0x14, 3	; 20
			} else {
				GREEN_LED3_OFF;
			}

			if(bit_is_set(rfData[6], 4) ) {
    1a94:	80 91 74 05 	lds	r24, 0x0574
    1a98:	84 ff       	sbrs	r24, 4
    1a9a:	8b c0       	rjmp	.+278    	; 0x1bb2 <handleRFCommands+0x31c>
				GREEN_LED4_ON;
    1a9c:	80 91 0b 01 	lds	r24, 0x010B
    1aa0:	8f 7e       	andi	r24, 0xEF	; 239
    1aa2:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED4_OFF;
			}

			if(bit_is_set(rfData[6], 5) ) {
    1aa6:	80 91 74 05 	lds	r24, 0x0574
    1aaa:	85 ff       	sbrs	r24, 5
    1aac:	7c c0       	rjmp	.+248    	; 0x1ba6 <handleRFCommands+0x310>
				GREEN_LED5_ON;
    1aae:	80 91 0b 01 	lds	r24, 0x010B
    1ab2:	8f 7d       	andi	r24, 0xDF	; 223
    1ab4:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED5_OFF;
			}

			if(bit_is_set(rfData[6], 6) ) {
    1ab8:	80 91 74 05 	lds	r24, 0x0574
    1abc:	86 ff       	sbrs	r24, 6
    1abe:	6d c0       	rjmp	.+218    	; 0x1b9a <handleRFCommands+0x304>
				GREEN_LED6_ON;
    1ac0:	80 91 0b 01 	lds	r24, 0x010B
    1ac4:	8f 7b       	andi	r24, 0xBF	; 191
    1ac6:	80 93 0b 01 	sts	0x010B, r24
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
    1aca:	80 91 74 05 	lds	r24, 0x0574
    1ace:	87 fd       	sbrc	r24, 7
    1ad0:	37 c2       	rjmp	.+1134   	; 0x1f40 <handleRFCommands+0x6aa>
				GREEN_LED7_ON;
			} else {
				GREEN_LED7_OFF;
    1ad2:	80 91 0b 01 	lds	r24, 0x010B
    1ad6:	80 68       	ori	r24, 0x80	; 128
    1ad8:	80 93 0b 01 	sts	0x010B, r24
			}

		#endif
		
		if(currentSelector == 8) {
    1adc:	80 91 48 04 	lds	r24, 0x0448
    1ae0:	88 30       	cpi	r24, 0x08	; 8
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <handleRFCommands+0x250>
    1ae4:	10 c2       	rjmp	.+1056   	; 0x1f06 <handleRFCommands+0x670>
		}

		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;
    1ae6:	80 91 0b 02 	lds	r24, 0x020B
    1aea:	80 93 c6 04 	sts	0x04C6, r24

		switch(packetId) {
    1aee:	85 30       	cpi	r24, 0x05	; 5
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <handleRFCommands+0x25e>
    1af2:	30 c2       	rjmp	.+1120   	; 0x1f54 <handleRFCommands+0x6be>
    1af4:	86 30       	cpi	r24, 0x06	; 6
    1af6:	08 f0       	brcs	.+2      	; 0x1afa <handleRFCommands+0x264>
    1af8:	80 c0       	rjmp	.+256    	; 0x1bfa <handleRFCommands+0x364>
    1afa:	83 30       	cpi	r24, 0x03	; 3
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <handleRFCommands+0x26a>
    1afe:	95 c1       	rjmp	.+810    	; 0x1e2a <handleRFCommands+0x594>
    1b00:	84 30       	cpi	r24, 0x04	; 4
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <handleRFCommands+0x270>
    1b04:	e2 c0       	rjmp	.+452    	; 0x1cca <handleRFCommands+0x434>
				#endif
				packetId = 4;
				break;

			case 4:
				ackPayload[1] = proximityResult[4]&0xFF;
    1b06:	90 91 5f 02 	lds	r25, 0x025F
    1b0a:	80 91 60 02 	lds	r24, 0x0260
    1b0e:	90 93 c7 04 	sts	0x04C7, r25
				ackPayload[2] = proximityResult[4]>>8;
    1b12:	80 93 c8 04 	sts	0x04C8, r24
				ackPayload[3] = proximityResult[8]&0xFF;
    1b16:	90 91 67 02 	lds	r25, 0x0267
    1b1a:	80 91 68 02 	lds	r24, 0x0268
    1b1e:	90 93 c9 04 	sts	0x04C9, r25
				ackPayload[4] = proximityResult[8]>>8;
    1b22:	80 93 ca 04 	sts	0x04CA, r24
				ackPayload[5] = proximityResult[9]&0xFF;
    1b26:	90 91 69 02 	lds	r25, 0x0269
    1b2a:	80 91 6a 02 	lds	r24, 0x026A
    1b2e:	90 93 cb 04 	sts	0x04CB, r25
				ackPayload[6] = proximityResult[9]>>8;
    1b32:	80 93 cc 04 	sts	0x04CC, r24
				ackPayload[7] = proximityResult[10]&0xFF;
    1b36:	90 91 6b 02 	lds	r25, 0x026B
    1b3a:	80 91 6c 02 	lds	r24, 0x026C
    1b3e:	90 93 cd 04 	sts	0x04CD, r25
				ackPayload[8] = proximityResult[10]>>8;
    1b42:	80 93 ce 04 	sts	0x04CE, r24
				ackPayload[9] = proximityResult[11]&0xFF;
    1b46:	90 91 6d 02 	lds	r25, 0x026D
    1b4a:	80 91 6e 02 	lds	r24, 0x026E
    1b4e:	90 93 cf 04 	sts	0x04CF, r25
				ackPayload[10] = proximityResult[11]>>8;
    1b52:	80 93 d0 04 	sts	0x04D0, r24
				ackPayload[11] = accX&0xFF;
    1b56:	90 91 28 04 	lds	r25, 0x0428
    1b5a:	80 91 29 04 	lds	r24, 0x0429
    1b5e:	90 93 d1 04 	sts	0x04D1, r25
				ackPayload[12] = accX>>8;
    1b62:	80 93 d2 04 	sts	0x04D2, r24
				ackPayload[13] = accY&0xFF;
    1b66:	90 91 2a 04 	lds	r25, 0x042A
    1b6a:	80 91 2b 04 	lds	r24, 0x042B
    1b6e:	90 93 d3 04 	sts	0x04D3, r25
				ackPayload[14] = accY>>8;
    1b72:	80 93 d4 04 	sts	0x04D4, r24
				ackPayload[15] = irCommand;
    1b76:	80 91 23 04 	lds	r24, 0x0423
    1b7a:	80 93 d5 04 	sts	0x04D5, r24
				packetId = 5;
    1b7e:	85 e0       	ldi	r24, 0x05	; 5
    1b80:	80 93 0b 02 	sts	0x020B, r24
				break;
    1b84:	a2 c0       	rjmp	.+324    	; 0x1cca <handleRFCommands+0x434>
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

			sleep(60);
    1b86:	8c e3       	ldi	r24, 0x3C	; 60
    1b88:	0e 94 1e 1c 	call	0x383c	; 0x383c <sleep>
    1b8c:	40 91 6e 05 	lds	r20, 0x056E
    1b90:	24 2f       	mov	r18, r20
    1b92:	50 91 6f 05 	lds	r21, 0x056F
    1b96:	e5 2f       	mov	r30, r21
    1b98:	d9 ce       	rjmp	.-590    	; 0x194c <handleRFCommands+0xb6>
			}

			if(bit_is_set(rfData[6], 6) ) {
				GREEN_LED6_ON;
			} else {
				GREEN_LED6_OFF;
    1b9a:	80 91 0b 01 	lds	r24, 0x010B
    1b9e:	80 64       	ori	r24, 0x40	; 64
    1ba0:	80 93 0b 01 	sts	0x010B, r24
    1ba4:	92 cf       	rjmp	.-220    	; 0x1aca <handleRFCommands+0x234>
			}

			if(bit_is_set(rfData[6], 5) ) {
				GREEN_LED5_ON;
			} else {
				GREEN_LED5_OFF;
    1ba6:	80 91 0b 01 	lds	r24, 0x010B
    1baa:	80 62       	ori	r24, 0x20	; 32
    1bac:	80 93 0b 01 	sts	0x010B, r24
    1bb0:	83 cf       	rjmp	.-250    	; 0x1ab8 <handleRFCommands+0x222>
			}

			if(bit_is_set(rfData[6], 4) ) {
				GREEN_LED4_ON;
			} else {
				GREEN_LED4_OFF;
    1bb2:	80 91 0b 01 	lds	r24, 0x010B
    1bb6:	80 61       	ori	r24, 0x10	; 16
    1bb8:	80 93 0b 01 	sts	0x010B, r24
    1bbc:	74 cf       	rjmp	.-280    	; 0x1aa6 <handleRFCommands+0x210>
			}												

			if(bit_is_set(rfData[6], 3) ) {
				GREEN_LED3_ON;
			} else {
				GREEN_LED3_OFF;
    1bbe:	a3 9a       	sbi	0x14, 3	; 20
    1bc0:	69 cf       	rjmp	.-302    	; 0x1a94 <handleRFCommands+0x1fe>
			}
				
			if(bit_is_set(rfData[6], 2) ) {
				GREEN_LED2_ON;
			} else {
				GREEN_LED2_OFF;
    1bc2:	80 91 0b 01 	lds	r24, 0x010B
    1bc6:	84 60       	ori	r24, 0x04	; 4
    1bc8:	80 93 0b 01 	sts	0x010B, r24
    1bcc:	5e cf       	rjmp	.-324    	; 0x1a8a <handleRFCommands+0x1f4>
			}
				
			if(bit_is_set(rfData[6], 1) ) {
				GREEN_LED1_ON;
			} else {
				GREEN_LED1_OFF;
    1bce:	80 91 0b 01 	lds	r24, 0x010B
    1bd2:	82 60       	ori	r24, 0x02	; 2
    1bd4:	80 93 0b 01 	sts	0x010B, r24
    1bd8:	4f cf       	rjmp	.-354    	; 0x1a78 <handleRFCommands+0x1e2>
		#ifdef HW_REV_3_1			

			if(bit_is_set(rfData[6], 0) ) {
				GREEN_LED0_ON;
			} else {
				GREEN_LED0_OFF;
    1bda:	80 91 0b 01 	lds	r24, 0x010B
    1bde:	81 60       	ori	r24, 0x01	; 1
    1be0:	80 93 0b 01 	sts	0x010B, r24
    1be4:	40 cf       	rjmp	.-384    	; 0x1a66 <handleRFCommands+0x1d0>
		}

		if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
			obstacleAvoidanceEnabled = 1;
		} else {
			obstacleAvoidanceEnabled = 0;
    1be6:	10 92 61 04 	sts	0x0461, r1
    1bea:	30 cf       	rjmp	.-416    	; 0x1a4c <handleRFCommands+0x1b6>
		}

		if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
			irEnabled = 1;
		} else {
			irEnabled = 0;
    1bec:	10 92 12 02 	sts	0x0212, r1
    1bf0:	26 cf       	rjmp	.-436    	; 0x1a3e <handleRFCommands+0x1a8>
		}

		if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
			LED_IR2_LOW;
		} else {
			LED_IR2_HIGH;
    1bf2:	45 9a       	sbi	0x08, 5	; 8
    1bf4:	1e cf       	rjmp	.-452    	; 0x1a32 <handleRFCommands+0x19c>


		if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
			LED_IR1_LOW;
		} else {
			LED_IR1_HIGH;
    1bf6:	44 9a       	sbi	0x08, 4	; 8
    1bf8:	19 cf       	rjmp	.-462    	; 0x1a2c <handleRFCommands+0x196>
		// read and handle the remaining bytes of the payload (at the moment not used)

		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
    1bfa:	86 30       	cpi	r24, 0x06	; 6
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <handleRFCommands+0x36a>
    1bfe:	c3 c0       	rjmp	.+390    	; 0x1d86 <handleRFCommands+0x4f0>
    1c00:	87 30       	cpi	r24, 0x07	; 7
    1c02:	09 f0       	breq	.+2      	; 0x1c06 <handleRFCommands+0x370>
    1c04:	62 c0       	rjmp	.+196    	; 0x1cca <handleRFCommands+0x434>
				packetId = 7;
				break;


			case 7:
				ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
    1c06:	60 91 d3 02 	lds	r22, 0x02D3
    1c0a:	70 91 d4 02 	lds	r23, 0x02D4
    1c0e:	80 91 d5 02 	lds	r24, 0x02D5
    1c12:	90 91 d6 02 	lds	r25, 0x02D6
    1c16:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
    1c1a:	60 93 c7 04 	sts	0x04C7, r22
				ackPayload[2] = ((signed long int)leftMotSteps)>>8;
    1c1e:	70 93 c8 04 	sts	0x04C8, r23
				ackPayload[3] = ((signed long int)leftMotSteps)>>16;
    1c22:	80 93 c9 04 	sts	0x04C9, r24
				ackPayload[4] = ((signed long int)leftMotSteps)>>24;
    1c26:	90 93 ca 04 	sts	0x04CA, r25
				ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
    1c2a:	60 91 cf 02 	lds	r22, 0x02CF
    1c2e:	70 91 d0 02 	lds	r23, 0x02D0
    1c32:	80 91 d1 02 	lds	r24, 0x02D1
    1c36:	90 91 d2 02 	lds	r25, 0x02D2
    1c3a:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
    1c3e:	60 93 cb 04 	sts	0x04CB, r22
				ackPayload[6] = ((signed long int)rightMotSteps)>>8;
    1c42:	70 93 cc 04 	sts	0x04CC, r23
				ackPayload[7] = ((signed long int)rightMotSteps)>>16;
    1c46:	80 93 cd 04 	sts	0x04CD, r24
				ackPayload[8] = ((signed long int)rightMotSteps)>>24;
    1c4a:	90 93 ce 04 	sts	0x04CE, r25
				lastTheta = theta;
    1c4e:	60 91 64 04 	lds	r22, 0x0464
    1c52:	70 91 65 04 	lds	r23, 0x0465
    1c56:	80 91 66 04 	lds	r24, 0x0466
    1c5a:	90 91 67 04 	lds	r25, 0x0467
    1c5e:	60 93 68 04 	sts	0x0468, r22
    1c62:	70 93 69 04 	sts	0x0469, r23
    1c66:	80 93 6a 04 	sts	0x046A, r24
    1c6a:	90 93 6b 04 	sts	0x046B, r25
				ackPayload[9] = ((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e4       	ldi	r19, 0x40	; 64
    1c72:	4f e0       	ldi	r20, 0x0F	; 15
    1c74:	54 e4       	ldi	r21, 0x44	; 68
    1c76:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    1c7a:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
    1c7e:	26 2f       	mov	r18, r22
    1c80:	20 93 cf 04 	sts	0x04CF, r18
				ackPayload[10] = ((signed int)(lastTheta*573.0))>>8;				
    1c84:	70 93 d0 04 	sts	0x04D0, r23
				ackPayload[11] = ((unsigned int)xPos)&0xFF;
    1c88:	60 91 6c 04 	lds	r22, 0x046C
    1c8c:	70 91 6d 04 	lds	r23, 0x046D
    1c90:	80 91 6e 04 	lds	r24, 0x046E
    1c94:	90 91 6f 04 	lds	r25, 0x046F
    1c98:	0e 94 7f 3e 	call	0x7cfe	; 0x7cfe <__fixunssfsi>
    1c9c:	60 93 d1 04 	sts	0x04D1, r22
				ackPayload[12] = ((unsigned int)xPos)>>8;
    1ca0:	70 93 d2 04 	sts	0x04D2, r23
				ackPayload[13] = ((unsigned int)yPos)&0xFF;
    1ca4:	60 91 70 04 	lds	r22, 0x0470
    1ca8:	70 91 71 04 	lds	r23, 0x0471
    1cac:	80 91 72 04 	lds	r24, 0x0472
    1cb0:	90 91 73 04 	lds	r25, 0x0473
    1cb4:	0e 94 7f 3e 	call	0x7cfe	; 0x7cfe <__fixunssfsi>
    1cb8:	60 93 d3 04 	sts	0x04D3, r22
				ackPayload[14] = ((unsigned int)yPos)>>8;
    1cbc:	70 93 d4 04 	sts	0x04D4, r23
				//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
				//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
				//ackPayload[12] = ((unsigned int)xPosOld)>>8;
				//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
				//ackPayload[14] = ((unsigned int)yPosOld)>>8;
				ackPayload[15] = 0;
    1cc0:	10 92 d5 04 	sts	0x04D5, r1
				packetId = 3;
    1cc4:	83 e0       	ldi	r24, 0x03	; 3
    1cc6:	80 93 0b 02 	sts	0x020B, r24
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    1cca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1ccc:	81 ee       	ldi	r24, 0xE1	; 225
    1cce:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    mirf_CSN_hi;
    1cd2:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1cd4:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1cd6:	88 ea       	ldi	r24, 0xA8	; 168
    1cd8:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    1cdc:	80 91 c6 04 	lds	r24, 0x04C6
    1ce0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1ce4:	80 91 c7 04 	lds	r24, 0x04C7
    1ce8:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1cec:	80 91 c8 04 	lds	r24, 0x04C8
    1cf0:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1cf4:	80 91 c9 04 	lds	r24, 0x04C9
    1cf8:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1cfc:	80 91 ca 04 	lds	r24, 0x04CA
    1d00:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1d04:	80 91 cb 04 	lds	r24, 0x04CB
    1d08:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1d0c:	80 91 cc 04 	lds	r24, 0x04CC
    1d10:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1d14:	80 91 cd 04 	lds	r24, 0x04CD
    1d18:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1d1c:	80 91 ce 04 	lds	r24, 0x04CE
    1d20:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1d24:	80 91 cf 04 	lds	r24, 0x04CF
    1d28:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1d2c:	80 91 d0 04 	lds	r24, 0x04D0
    1d30:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1d34:	80 91 d1 04 	lds	r24, 0x04D1
    1d38:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1d3c:	80 91 d2 04 	lds	r24, 0x04D2
    1d40:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1d44:	80 91 d3 04 	lds	r24, 0x04D3
    1d48:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1d4c:	80 91 d4 04 	lds	r24, 0x04D4
    1d50:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
    1d54:	80 91 d5 04 	lds	r24, 0x04D5
    1d58:	0e 94 85 0a 	call	0x150a	; 0x150a <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    1d5c:	28 9a       	sbi	0x05, 0	; 5

		writeAckPayload(ackPayload, 16);

	}

}
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	1f 91       	pop	r17
    1d66:	0f 91       	pop	r16
    1d68:	ff 90       	pop	r15
    1d6a:	08 95       	ret

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1d6c:	00 91 70 05 	lds	r16, 0x0570
    1d70:	00 23       	and	r16, r16
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <handleRFCommands+0x4e0>
    1d74:	4b c1       	rjmp	.+662    	; 0x200c <handleRFCommands+0x776>
    1d76:	80 91 71 05 	lds	r24, 0x0571
    1d7a:	88 30       	cpi	r24, 0x08	; 8
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <handleRFCommands+0x4ea>
    1d7e:	48 c1       	rjmp	.+656    	; 0x2010 <handleRFCommands+0x77a>
    1d80:	e0 2f       	mov	r30, r16
    1d82:	20 2f       	mov	r18, r16
    1d84:	e5 cd       	rjmp	.-1078   	; 0x1950 <handleRFCommands+0xba>
				ackPayload[15] = currentSelector;
				packetId = 6;
				break;

			case 6:
				ackPayload[1] = proximityValue[8]&0xFF;
    1d86:	80 91 37 02 	lds	r24, 0x0237
    1d8a:	90 91 38 02 	lds	r25, 0x0238
    1d8e:	80 93 c7 04 	sts	0x04C7, r24
				ackPayload[2] = proximityValue[8]>>8;
    1d92:	80 91 37 02 	lds	r24, 0x0237
    1d96:	90 91 38 02 	lds	r25, 0x0238
    1d9a:	90 93 c8 04 	sts	0x04C8, r25
				ackPayload[3] = proximityValue[16]&0xFF;
    1d9e:	80 91 47 02 	lds	r24, 0x0247
    1da2:	90 91 48 02 	lds	r25, 0x0248
    1da6:	80 93 c9 04 	sts	0x04C9, r24
				ackPayload[4] = proximityValue[16]>>8;
    1daa:	80 91 47 02 	lds	r24, 0x0247
    1dae:	90 91 48 02 	lds	r25, 0x0248
    1db2:	90 93 ca 04 	sts	0x04CA, r25
				ackPayload[5] = proximityValue[18]&0xFF;
    1db6:	80 91 4b 02 	lds	r24, 0x024B
    1dba:	90 91 4c 02 	lds	r25, 0x024C
    1dbe:	80 93 cb 04 	sts	0x04CB, r24
				ackPayload[6] = proximityValue[18]>>8;
    1dc2:	80 91 4b 02 	lds	r24, 0x024B
    1dc6:	90 91 4c 02 	lds	r25, 0x024C
    1dca:	90 93 cc 04 	sts	0x04CC, r25
				ackPayload[7] = proximityValue[20]&0xFF;
    1dce:	80 91 4f 02 	lds	r24, 0x024F
    1dd2:	90 91 50 02 	lds	r25, 0x0250
    1dd6:	80 93 cd 04 	sts	0x04CD, r24
				ackPayload[8] = proximityValue[20]>>8;
    1dda:	80 91 4f 02 	lds	r24, 0x024F
    1dde:	90 91 50 02 	lds	r25, 0x0250
    1de2:	90 93 ce 04 	sts	0x04CE, r25
				ackPayload[9] = proximityValue[22]&0xFF;
    1de6:	80 91 53 02 	lds	r24, 0x0253
    1dea:	90 91 54 02 	lds	r25, 0x0254
    1dee:	80 93 cf 04 	sts	0x04CF, r24
				ackPayload[10] = proximityValue[22]>>8;
    1df2:	80 91 53 02 	lds	r24, 0x0253
    1df6:	90 91 54 02 	lds	r25, 0x0254
    1dfa:	90 93 d0 04 	sts	0x04D0, r25
				ackPayload[11] = accZ&0xFF;
    1dfe:	90 91 2c 04 	lds	r25, 0x042C
    1e02:	80 91 2d 04 	lds	r24, 0x042D
    1e06:	90 93 d1 04 	sts	0x04D1, r25
				ackPayload[12] = accZ>>8;	
    1e0a:	80 93 d2 04 	sts	0x04D2, r24
				ackPayload[13] = batteryLevel&0xFF;
    1e0e:	90 91 bb 02 	lds	r25, 0x02BB
    1e12:	80 91 bc 02 	lds	r24, 0x02BC
    1e16:	90 93 d3 04 	sts	0x04D3, r25
				ackPayload[14] = batteryLevel>>8;
    1e1a:	80 93 d4 04 	sts	0x04D4, r24
				ackPayload[15] = 0;
    1e1e:	10 92 d5 04 	sts	0x04D5, r1
				packetId = 7;
    1e22:	87 e0       	ldi	r24, 0x07	; 7
    1e24:	80 93 0b 02 	sts	0x020B, r24
				break;
    1e28:	50 cf       	rjmp	.-352    	; 0x1cca <handleRFCommands+0x434>
		// write back the ack payload
		ackPayload[0] = packetId&0xFF;

		switch(packetId) {
			case 3:
				ackPayload[1] = proximityResult[0]&0xFF;
    1e2a:	90 91 57 02 	lds	r25, 0x0257
    1e2e:	80 91 58 02 	lds	r24, 0x0258
    1e32:	90 93 c7 04 	sts	0x04C7, r25
				ackPayload[2] = proximityResult[0]>>8;
    1e36:	80 93 c8 04 	sts	0x04C8, r24
				ackPayload[3] = proximityResult[1]&0xFF;
    1e3a:	90 91 59 02 	lds	r25, 0x0259
    1e3e:	80 91 5a 02 	lds	r24, 0x025A
    1e42:	90 93 c9 04 	sts	0x04C9, r25
				ackPayload[4] = proximityResult[1]>>8;
    1e46:	80 93 ca 04 	sts	0x04CA, r24
				ackPayload[5] = proximityResult[2]&0xFF;
    1e4a:	90 91 5b 02 	lds	r25, 0x025B
    1e4e:	80 91 5c 02 	lds	r24, 0x025C
    1e52:	90 93 cb 04 	sts	0x04CB, r25
				ackPayload[6] = proximityResult[2]>>8;
    1e56:	80 93 cc 04 	sts	0x04CC, r24
				ackPayload[7] = proximityResult[3]&0xFF;
    1e5a:	90 91 5d 02 	lds	r25, 0x025D
    1e5e:	80 91 5e 02 	lds	r24, 0x025E
    1e62:	90 93 cd 04 	sts	0x04CD, r25
				ackPayload[8] = proximityResult[3]>>8;
    1e66:	80 93 ce 04 	sts	0x04CE, r24
				ackPayload[9] = proximityResult[5]&0xFF;
    1e6a:	90 91 61 02 	lds	r25, 0x0261
    1e6e:	80 91 62 02 	lds	r24, 0x0262
    1e72:	90 93 cf 04 	sts	0x04CF, r25
				ackPayload[10] = proximityResult[5]>>8;
    1e76:	80 93 d0 04 	sts	0x04D0, r24
				ackPayload[11] = proximityResult[6]&0xFF;
    1e7a:	90 91 63 02 	lds	r25, 0x0263
    1e7e:	80 91 64 02 	lds	r24, 0x0264
    1e82:	90 93 d1 04 	sts	0x04D1, r25
				ackPayload[12] = proximityResult[6]>>8;
    1e86:	80 93 d2 04 	sts	0x04D2, r24
				ackPayload[13] = proximityResult[7]&0xFF;
    1e8a:	90 91 65 02 	lds	r25, 0x0265
    1e8e:	80 91 66 02 	lds	r24, 0x0266
    1e92:	90 93 d3 04 	sts	0x04D3, r25
				ackPayload[14] = proximityResult[7]>>8;
    1e96:	80 93 d4 04 	sts	0x04D4, r24
				#ifdef HW_REV_3_1
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    1e9a:	30 91 03 01 	lds	r19, 0x0103
    1e9e:	80 91 03 01 	lds	r24, 0x0103
    1ea2:	20 91 03 01 	lds	r18, 0x0103
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	80 72       	andi	r24, 0x20	; 32
    1eaa:	90 70       	andi	r25, 0x00	; 0
    1eac:	95 95       	asr	r25
    1eae:	87 95       	ror	r24
    1eb0:	95 95       	asr	r25
    1eb2:	87 95       	ror	r24
    1eb4:	95 95       	asr	r25
    1eb6:	87 95       	ror	r24
    1eb8:	95 95       	asr	r25
    1eba:	87 95       	ror	r24
    1ebc:	95 95       	asr	r25
    1ebe:	87 95       	ror	r24
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	22 1f       	adc	r18, r18
    1ec6:	22 27       	eor	r18, r18
    1ec8:	22 1f       	adc	r18, r18
    1eca:	22 0f       	add	r18, r18
    1ecc:	22 0f       	add	r18, r18
    1ece:	28 2b       	or	r18, r24
    1ed0:	83 2f       	mov	r24, r19
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	80 71       	andi	r24, 0x10	; 16
    1ed6:	90 70       	andi	r25, 0x00	; 0
    1ed8:	95 95       	asr	r25
    1eda:	87 95       	ror	r24
    1edc:	95 95       	asr	r25
    1ede:	87 95       	ror	r24
    1ee0:	95 95       	asr	r25
    1ee2:	87 95       	ror	r24
    1ee4:	95 95       	asr	r25
    1ee6:	87 95       	ror	r24
    1ee8:	28 2b       	or	r18, r24
    1eea:	20 93 d5 04 	sts	0x04D5, r18
				#else
					ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
				#endif
				packetId = 4;
    1eee:	84 e0       	ldi	r24, 0x04	; 4
    1ef0:	80 93 0b 02 	sts	0x020B, r24
				break;
    1ef4:	ea ce       	rjmp	.-556    	; 0x1cca <handleRFCommands+0x434>
		} else {
			irEnabled = 0;
		}

		if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
			calibrateSensors();
    1ef6:	0e 94 36 38 	call	0x706c	; 0x706c <calibrateSensors>
			resetOdometry();
    1efa:	0e 94 97 1c 	call	0x392e	; 0x392e <resetOdometry>
    1efe:	90 91 71 05 	lds	r25, 0x0571
    1f02:	89 2f       	mov	r24, r25
    1f04:	9e cd       	rjmp	.-1220   	; 0x1a42 <handleRFCommands+0x1ac>
			}

		#endif
		
		if(currentSelector == 8) {
			if(calibrateOdomFlag==0) {
    1f06:	80 91 c0 04 	lds	r24, 0x04C0
    1f0a:	88 23       	and	r24, r24
    1f0c:	09 f0       	breq	.+2      	; 0x1f10 <handleRFCommands+0x67a>
    1f0e:	eb cd       	rjmp	.-1066   	; 0x1ae6 <handleRFCommands+0x250>
				if((rfData[7]&0b00000001)==0b00000001) {
    1f10:	80 91 75 05 	lds	r24, 0x0575
    1f14:	80 ff       	sbrs	r24, 0
    1f16:	e7 cd       	rjmp	.-1074   	; 0x1ae6 <handleRFCommands+0x250>
					calibrateSensors();
    1f18:	0e 94 36 38 	call	0x706c	; 0x706c <calibrateSensors>
					proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    1f1c:	8f ef       	ldi	r24, 0xFF	; 255
    1f1e:	93 e0       	ldi	r25, 0x03	; 3
    1f20:	90 93 68 02 	sts	0x0268, r25
    1f24:	80 93 67 02 	sts	0x0267, r24
					proximityResult[11] = 1023;	// and in that case a false black line will be detected
    1f28:	90 93 6e 02 	sts	0x026E, r25
    1f2c:	80 93 6d 02 	sts	0x026D, r24
					calibState = 0;
    1f30:	10 92 81 05 	sts	0x0581, r1
					calibVelIndex = 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	80 93 c3 04 	sts	0x04C3, r24
					calibrateOdomFlag = 1;
    1f3a:	80 93 c0 04 	sts	0x04C0, r24
    1f3e:	d3 cd       	rjmp	.-1114   	; 0x1ae6 <handleRFCommands+0x250>
			} else {
				GREEN_LED6_OFF;
			}

			if(bit_is_set(rfData[6], 7) ) {
				GREEN_LED7_ON;
    1f40:	80 91 0b 01 	lds	r24, 0x010B
    1f44:	8f 77       	andi	r24, 0x7F	; 127
    1f46:	80 93 0b 01 	sts	0x010B, r24
    1f4a:	c8 cd       	rjmp	.-1136   	; 0x1adc <handleRFCommands+0x246>
		} else {
			obstacleAvoidanceEnabled = 0;
		}

		if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
			cliffAvoidanceEnabled = 1;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	80 93 62 04 	sts	0x0462, r24
    1f52:	80 cd       	rjmp	.-1280   	; 0x1a54 <handleRFCommands+0x1be>
				ackPayload[15] = irCommand;
				packetId = 5;
				break;

			case 5:
				ackPayload[1] = proximityValue[0]&0xFF;
    1f54:	80 91 27 02 	lds	r24, 0x0227
    1f58:	90 91 28 02 	lds	r25, 0x0228
    1f5c:	80 93 c7 04 	sts	0x04C7, r24
				ackPayload[2] = proximityValue[0]>>8;
    1f60:	80 91 27 02 	lds	r24, 0x0227
    1f64:	90 91 28 02 	lds	r25, 0x0228
    1f68:	90 93 c8 04 	sts	0x04C8, r25
				ackPayload[3] = proximityValue[2]&0xFF;
    1f6c:	80 91 2b 02 	lds	r24, 0x022B
    1f70:	90 91 2c 02 	lds	r25, 0x022C
    1f74:	80 93 c9 04 	sts	0x04C9, r24
				ackPayload[4] = proximityValue[2]>>8;
    1f78:	80 91 2b 02 	lds	r24, 0x022B
    1f7c:	90 91 2c 02 	lds	r25, 0x022C
    1f80:	90 93 ca 04 	sts	0x04CA, r25
				ackPayload[5] = proximityValue[4]&0xFF;
    1f84:	80 91 2f 02 	lds	r24, 0x022F
    1f88:	90 91 30 02 	lds	r25, 0x0230
    1f8c:	80 93 cb 04 	sts	0x04CB, r24
				ackPayload[6] = proximityValue[4]>>8;
    1f90:	80 91 2f 02 	lds	r24, 0x022F
    1f94:	90 91 30 02 	lds	r25, 0x0230
    1f98:	90 93 cc 04 	sts	0x04CC, r25
				ackPayload[7] = proximityValue[6]&0xFF;
    1f9c:	80 91 33 02 	lds	r24, 0x0233
    1fa0:	90 91 34 02 	lds	r25, 0x0234
    1fa4:	80 93 cd 04 	sts	0x04CD, r24
				ackPayload[8] = proximityValue[6]>>8;
    1fa8:	80 91 33 02 	lds	r24, 0x0233
    1fac:	90 91 34 02 	lds	r25, 0x0234
    1fb0:	90 93 ce 04 	sts	0x04CE, r25
				ackPayload[9] = proximityValue[10]&0xFF;
    1fb4:	80 91 3b 02 	lds	r24, 0x023B
    1fb8:	90 91 3c 02 	lds	r25, 0x023C
    1fbc:	80 93 cf 04 	sts	0x04CF, r24
				ackPayload[10] = proximityValue[10]>>8;
    1fc0:	80 91 3b 02 	lds	r24, 0x023B
    1fc4:	90 91 3c 02 	lds	r25, 0x023C
    1fc8:	90 93 d0 04 	sts	0x04D0, r25
				ackPayload[11] = proximityValue[12]&0xFF;
    1fcc:	80 91 3f 02 	lds	r24, 0x023F
    1fd0:	90 91 40 02 	lds	r25, 0x0240
    1fd4:	80 93 d1 04 	sts	0x04D1, r24
				ackPayload[12] = proximityValue[12]>>8;
    1fd8:	80 91 3f 02 	lds	r24, 0x023F
    1fdc:	90 91 40 02 	lds	r25, 0x0240
    1fe0:	90 93 d2 04 	sts	0x04D2, r25
				ackPayload[13] = proximityValue[14]&0xFF;
    1fe4:	80 91 43 02 	lds	r24, 0x0243
    1fe8:	90 91 44 02 	lds	r25, 0x0244
    1fec:	80 93 d3 04 	sts	0x04D3, r24
				ackPayload[14] = proximityValue[14]>>8;
    1ff0:	80 91 43 02 	lds	r24, 0x0243
    1ff4:	90 91 44 02 	lds	r25, 0x0244
    1ff8:	90 93 d4 04 	sts	0x04D4, r25
				ackPayload[15] = currentSelector;
    1ffc:	80 91 48 04 	lds	r24, 0x0448
    2000:	80 93 d5 04 	sts	0x04D5, r24
				packetId = 6;
    2004:	86 e0       	ldi	r24, 0x06	; 6
    2006:	80 93 0b 02 	sts	0x020B, r24
				break;
    200a:	5f ce       	rjmp	.-834    	; 0x1cca <handleRFCommands+0x434>

		//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
		// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
		// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
		// sleep message should be completely zero, but the flag bit
		if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    200c:	25 2f       	mov	r18, r21
    200e:	a0 cc       	rjmp	.-1728   	; 0x1950 <handleRFCommands+0xba>
    2010:	80 91 72 05 	lds	r24, 0x0572
    2014:	88 23       	and	r24, r24
    2016:	09 f0       	breq	.+2      	; 0x201a <handleRFCommands+0x784>
    2018:	b3 ce       	rjmp	.-666    	; 0x1d80 <handleRFCommands+0x4ea>
    201a:	80 91 73 05 	lds	r24, 0x0573
    201e:	88 23       	and	r24, r24
    2020:	09 f4       	brne	.+2      	; 0x2024 <handleRFCommands+0x78e>
    2022:	b1 cd       	rjmp	.-1182   	; 0x1b86 <handleRFCommands+0x2f0>
    2024:	25 2f       	mov	r18, r21
    2026:	94 cc       	rjmp	.-1752   	; 0x1950 <handleRFCommands+0xba>

00002028 <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29

	PCICR = 0;
    202c:	c8 e6       	ldi	r28, 0x68	; 104
    202e:	d0 e0       	ldi	r29, 0x00	; 0
    2030:	18 82       	st	Y, r1
	PCMSK1 = 0;
    2032:	ac e6       	ldi	r26, 0x6C	; 108
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	1c 92       	st	X, r1
	TCCR2A = 0;
    2038:	e0 eb       	ldi	r30, 0xB0	; 176
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	10 82       	st	Z, r1
	TCCR2B = 0;
    203e:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    2042:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    2046:	88 81       	ld	r24, Y
    2048:	82 60       	ori	r24, 0x02	; 2
    204a:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    204c:	8c 91       	ld	r24, X
    204e:	80 68       	ori	r24, 0x80	; 128
    2050:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    2052:	80 81       	ld	r24, Z
    2054:	82 60       	ori	r24, 0x02	; 2
    2056:	80 83       	st	Z, r24

}
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	08 95       	ret

0000205e <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    205e:	1f 92       	push	r1
    2060:	0f 92       	push	r0
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	0f 92       	push	r0
    2066:	11 24       	eor	r1, r1
    2068:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    206a:	80 91 12 02 	lds	r24, 0x0212
    206e:	88 23       	and	r24, r24
    2070:	21 f1       	breq	.+72     	; 0x20ba <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    2072:	80 91 03 01 	lds	r24, 0x0103
    2076:	86 fd       	sbrc	r24, 6
    2078:	20 c0       	rjmp	.+64     	; 0x20ba <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    207a:	80 91 68 00 	lds	r24, 0x0068
    207e:	8d 7f       	andi	r24, 0xFD	; 253
    2080:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    2084:	80 91 6c 00 	lds	r24, 0x006C
    2088:	8f 77       	andi	r24, 0x7F	; 127
    208a:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    2094:	8d e0       	ldi	r24, 0x0D	; 13
    2096:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    209a:	80 91 b1 00 	lds	r24, 0x00B1
    209e:	86 60       	ori	r24, 0x06	; 6
    20a0:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    20a4:	80 91 70 00 	lds	r24, 0x0070
    20a8:	82 60       	ori	r24, 0x02	; 2
    20aa:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    20ae:	10 92 1e 02 	sts	0x021E, r1
    20b2:	10 92 1f 02 	sts	0x021F, r1
    20b6:	10 92 20 02 	sts	0x0220, r1

		}

	}
	
}
    20ba:	8f 91       	pop	r24
    20bc:	0f 90       	pop	r0
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	0f 90       	pop	r0
    20c2:	1f 90       	pop	r1
    20c4:	18 95       	reti

000020c6 <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    20c6:	1f 92       	push	r1
    20c8:	0f 92       	push	r0
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	0f 92       	push	r0
    20ce:	11 24       	eor	r1, r1
    20d0:	2f 93       	push	r18
    20d2:	3f 93       	push	r19
    20d4:	4f 93       	push	r20
    20d6:	5f 93       	push	r21
    20d8:	8f 93       	push	r24
    20da:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    20dc:	80 91 b1 00 	lds	r24, 0x00B1
    20e0:	88 7f       	andi	r24, 0xF8	; 248
    20e2:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    20e6:	80 91 13 02 	lds	r24, 0x0213
    20ea:	88 23       	and	r24, r24
    20ec:	a9 f0       	breq	.+42     	; 0x2118 <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    20ee:	80 91 03 01 	lds	r24, 0x0103
    20f2:	86 ff       	sbrs	r24, 6
    20f4:	65 c0       	rjmp	.+202    	; 0x21c0 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    20f6:	80 91 68 00 	lds	r24, 0x0068
    20fa:	82 60       	ori	r24, 0x02	; 2
    20fc:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2100:	80 91 6c 00 	lds	r24, 0x006C
    2104:	80 68       	ori	r24, 0x80	; 128
    2106:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    210a:	8f ef       	ldi	r24, 0xFF	; 255
    210c:	9f ef       	ldi	r25, 0xFF	; 255
    210e:	90 93 02 02 	sts	0x0202, r25
    2112:	80 93 01 02 	sts	0x0201, r24
    2116:	49 c0       	rjmp	.+146    	; 0x21aa <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    2118:	80 91 01 02 	lds	r24, 0x0201
    211c:	90 91 02 02 	lds	r25, 0x0202
    2120:	2f ef       	ldi	r18, 0xFF	; 255
    2122:	8f 3f       	cpi	r24, 0xFF	; 255
    2124:	92 07       	cpc	r25, r18
    2126:	09 f4       	brne	.+2      	; 0x212a <__vector_13+0x64>
    2128:	63 c0       	rjmp	.+198    	; 0x21f0 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    212a:	81 30       	cpi	r24, 0x01	; 1
    212c:	91 05       	cpc	r25, r1
    212e:	09 f4       	brne	.+2      	; 0x2132 <__vector_13+0x6c>
    2130:	98 c0       	rjmp	.+304    	; 0x2262 <__stack+0x63>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    2132:	9c 01       	movw	r18, r24
    2134:	22 50       	subi	r18, 0x02	; 2
    2136:	30 40       	sbci	r19, 0x00	; 0
    2138:	25 30       	cpi	r18, 0x05	; 5
    213a:	31 05       	cpc	r19, r1
    213c:	08 f4       	brcc	.+2      	; 0x2140 <__vector_13+0x7a>
    213e:	67 c0       	rjmp	.+206    	; 0x220e <__stack+0xf>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    2140:	9c 01       	movw	r18, r24
    2142:	27 50       	subi	r18, 0x07	; 7
    2144:	30 40       	sbci	r19, 0x00	; 0
    2146:	26 30       	cpi	r18, 0x06	; 6
    2148:	31 05       	cpc	r19, r1
    214a:	08 f0       	brcs	.+2      	; 0x214e <__vector_13+0x88>
    214c:	bd c0       	rjmp	.+378    	; 0x22c8 <__stack+0xc9>

				OCR2A = 54;
    214e:	26 e3       	ldi	r18, 0x36	; 54
    2150:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2154:	20 91 b1 00 	lds	r18, 0x00B1
    2158:	26 60       	ori	r18, 0x06	; 6
    215a:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    215e:	20 91 70 00 	lds	r18, 0x0070
    2162:	22 60       	ori	r18, 0x02	; 2
    2164:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2168:	20 91 03 01 	lds	r18, 0x0103
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	20 74       	andi	r18, 0x40	; 64
    2170:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    2172:	00 24       	eor	r0, r0
    2174:	22 0f       	add	r18, r18
    2176:	33 1f       	adc	r19, r19
    2178:	00 1c       	adc	r0, r0
    217a:	22 0f       	add	r18, r18
    217c:	33 1f       	adc	r19, r19
    217e:	00 1c       	adc	r0, r0
    2180:	23 2f       	mov	r18, r19
    2182:	30 2d       	mov	r19, r0
    2184:	4c e0       	ldi	r20, 0x0C	; 12
    2186:	50 e0       	ldi	r21, 0x00	; 0
    2188:	48 1b       	sub	r20, r24
    218a:	59 0b       	sbc	r21, r25
    218c:	02 c0       	rjmp	.+4      	; 0x2192 <__vector_13+0xcc>
    218e:	22 0f       	add	r18, r18
    2190:	33 1f       	adc	r19, r19
    2192:	4a 95       	dec	r20
    2194:	e2 f7       	brpl	.-8      	; 0x218e <__vector_13+0xc8>
				data_temp += temp;
    2196:	40 91 1e 02 	lds	r20, 0x021E
    219a:	42 0f       	add	r20, r18
    219c:	40 93 1e 02 	sts	0x021E, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    21a0:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    21a2:	90 93 02 02 	sts	0x0202, r25
    21a6:	80 93 01 02 	sts	0x0201, r24

		}

}
    21aa:	9f 91       	pop	r25
    21ac:	8f 91       	pop	r24
    21ae:	5f 91       	pop	r21
    21b0:	4f 91       	pop	r20
    21b2:	3f 91       	pop	r19
    21b4:	2f 91       	pop	r18
    21b6:	0f 90       	pop	r0
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	0f 90       	pop	r0
    21bc:	1f 90       	pop	r1
    21be:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    21c0:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    21c4:	83 e3       	ldi	r24, 0x33	; 51
    21c6:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    21ca:	80 91 b1 00 	lds	r24, 0x00B1
    21ce:	86 60       	ori	r24, 0x06	; 6
    21d0:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    21d4:	80 91 70 00 	lds	r24, 0x0070
    21d8:	82 60       	ori	r24, 0x02	; 2
    21da:	80 93 70 00 	sts	0x0070, r24
    21de:	80 91 01 02 	lds	r24, 0x0201
    21e2:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    21e6:	2f ef       	ldi	r18, 0xFF	; 255
    21e8:	8f 3f       	cpi	r24, 0xFF	; 255
    21ea:	92 07       	cpc	r25, r18
    21ec:	c9 f6       	brne	.-78     	; 0x21a0 <__vector_13+0xda>
    21ee:	dd cf       	rjmp	.-70     	; 0x21aa <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    21f0:	20 91 03 01 	lds	r18, 0x0103
    21f4:	26 ff       	sbrs	r18, 6
    21f6:	52 c0       	rjmp	.+164    	; 0x229c <__stack+0x9d>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    21f8:	20 91 68 00 	lds	r18, 0x0068
    21fc:	22 60       	ori	r18, 0x02	; 2
    21fe:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    2202:	20 91 6c 00 	lds	r18, 0x006C
    2206:	20 68       	ori	r18, 0x80	; 128
    2208:	20 93 6c 00 	sts	0x006C, r18
    220c:	ce cf       	rjmp	.-100    	; 0x21aa <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    220e:	26 e3       	ldi	r18, 0x36	; 54
    2210:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    2214:	20 91 b1 00 	lds	r18, 0x00B1
    2218:	26 60       	ori	r18, 0x06	; 6
    221a:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    221e:	20 91 70 00 	lds	r18, 0x0070
    2222:	22 60       	ori	r18, 0x02	; 2
    2224:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    2228:	20 91 03 01 	lds	r18, 0x0103
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	20 74       	andi	r18, 0x40	; 64
    2230:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    2232:	00 24       	eor	r0, r0
    2234:	22 0f       	add	r18, r18
    2236:	33 1f       	adc	r19, r19
    2238:	00 1c       	adc	r0, r0
    223a:	22 0f       	add	r18, r18
    223c:	33 1f       	adc	r19, r19
    223e:	00 1c       	adc	r0, r0
    2240:	23 2f       	mov	r18, r19
    2242:	30 2d       	mov	r19, r0
    2244:	46 e0       	ldi	r20, 0x06	; 6
    2246:	50 e0       	ldi	r21, 0x00	; 0
    2248:	48 1b       	sub	r20, r24
    224a:	59 0b       	sbc	r21, r25
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <__stack+0x53>
    224e:	22 0f       	add	r18, r18
    2250:	33 1f       	adc	r19, r19
    2252:	4a 95       	dec	r20
    2254:	e2 f7       	brpl	.-8      	; 0x224e <__stack+0x4f>
				address_temp += temp;
    2256:	40 91 1f 02 	lds	r20, 0x021F
    225a:	42 0f       	add	r20, r18
    225c:	40 93 1f 02 	sts	0x021F, r20
    2260:	9f cf       	rjmp	.-194    	; 0x21a0 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    2262:	20 91 03 01 	lds	r18, 0x0103
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	20 74       	andi	r18, 0x40	; 64
    226a:	30 70       	andi	r19, 0x00	; 0
    226c:	02 2e       	mov	r0, r18
    226e:	23 2f       	mov	r18, r19
    2270:	00 0c       	add	r0, r0
    2272:	22 1f       	adc	r18, r18
    2274:	33 0b       	sbc	r19, r19
    2276:	00 0c       	add	r0, r0
    2278:	22 1f       	adc	r18, r18
    227a:	33 1f       	adc	r19, r19
    227c:	20 93 20 02 	sts	0x0220, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    2280:	26 e3       	ldi	r18, 0x36	; 54
    2282:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2286:	20 91 b1 00 	lds	r18, 0x00B1
    228a:	26 60       	ori	r18, 0x06	; 6
    228c:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2290:	20 91 70 00 	lds	r18, 0x0070
    2294:	22 60       	ori	r18, 0x02	; 2
    2296:	20 93 70 00 	sts	0x0070, r18
    229a:	82 cf       	rjmp	.-252    	; 0x21a0 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    229c:	8c e1       	ldi	r24, 0x1C	; 28
    229e:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    22a2:	80 91 b1 00 	lds	r24, 0x00B1
    22a6:	86 60       	ori	r24, 0x06	; 6
    22a8:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    22ac:	80 91 70 00 	lds	r24, 0x0070
    22b0:	82 60       	ori	r24, 0x02	; 2
    22b2:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    22b6:	10 92 1e 02 	sts	0x021E, r1
    22ba:	10 92 1f 02 	sts	0x021F, r1
    22be:	10 92 20 02 	sts	0x0220, r1
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	6d cf       	rjmp	.-294    	; 0x21a2 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    22c8:	8d 30       	cpi	r24, 0x0D	; 13
    22ca:	91 05       	cpc	r25, r1
    22cc:	09 f0       	breq	.+2      	; 0x22d0 <__stack+0xd1>
    22ce:	68 cf       	rjmp	.-304    	; 0x21a0 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    22d0:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    22d4:	80 91 68 00 	lds	r24, 0x0068
    22d8:	82 60       	ori	r24, 0x02	; 2
    22da:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    22de:	80 91 6c 00 	lds	r24, 0x006C
    22e2:	80 68       	ori	r24, 0x80	; 128
    22e4:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    22e8:	8f ef       	ldi	r24, 0xFF	; 255
    22ea:	9f ef       	ldi	r25, 0xFF	; 255
    22ec:	90 93 02 02 	sts	0x0202, r25
    22f0:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    22f4:	80 91 20 02 	lds	r24, 0x0220
    22f8:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    22fc:	80 91 1f 02 	lds	r24, 0x021F
    2300:	80 93 1c 02 	sts	0x021C, r24
				data_ir = data_temp;
    2304:	80 91 1e 02 	lds	r24, 0x021E
    2308:	80 93 1d 02 	sts	0x021D, r24
				command_received=1;
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	80 93 24 04 	sts	0x0424, r24
    2312:	4b cf       	rjmp	.-362    	; 0x21aa <__vector_13+0xe4>

00002314 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    2314:	80 91 00 02 	lds	r24, 0x0200
    2318:	08 95       	ret

0000231a <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    231a:	80 91 1c 02 	lds	r24, 0x021C
    231e:	08 95       	ret

00002320 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    2320:	80 91 1d 02 	lds	r24, 0x021D
    2324:	08 95       	ret

00002326 <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    2326:	80 91 12 02 	lds	r24, 0x0212
    232a:	88 23       	and	r24, r24
    232c:	51 f1       	breq	.+84     	; 0x2382 <handleIRRemoteCommands+0x5c>

		if(command_received) {
    232e:	80 91 24 04 	lds	r24, 0x0424
    2332:	88 23       	and	r24, r24
    2334:	31 f1       	breq	.+76     	; 0x2382 <handleIRRemoteCommands+0x5c>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    2336:	e0 91 1d 02 	lds	r30, 0x021D

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    233a:	e0 93 23 04 	sts	0x0423, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    233e:	10 92 24 04 	sts	0x0424, r1

			switch(irCommand) {
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	e5 33       	cpi	r30, 0x35	; 53
    2346:	f1 05       	cpc	r31, r1
    2348:	e8 f0       	brcs	.+58     	; 0x2384 <handleIRRemoteCommands+0x5e>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 1;
    234a:	20 91 f7 02 	lds	r18, 0x02F7
    234e:	30 91 f8 02 	lds	r19, 0x02F8
    2352:	80 91 f9 02 	lds	r24, 0x02F9
    2356:	90 91 fa 02 	lds	r25, 0x02FA
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    235a:	37 fd       	sbrc	r19, 7
    235c:	b9 c1       	rjmp	.+882    	; 0x26d0 <handleIRRemoteCommands+0x3aa>
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    235e:	30 93 12 03 	sts	0x0312, r19
    2362:	20 93 11 03 	sts	0x0311, r18
			}
			if(pwm_left_desired >= 0) {
    2366:	97 fd       	sbrc	r25, 7
    2368:	05 c0       	rjmp	.+10     	; 0x2374 <handleIRRemoteCommands+0x4e>
				speedl = pwm_left_desired;
    236a:	90 93 10 03 	sts	0x0310, r25
    236e:	80 93 0f 03 	sts	0x030F, r24
    2372:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired);
    2374:	90 95       	com	r25
    2376:	81 95       	neg	r24
    2378:	9f 4f       	sbci	r25, 0xFF	; 255
    237a:	90 93 10 03 	sts	0x0310, r25
    237e:	80 93 0f 03 	sts	0x030F, r24
    2382:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    2384:	ee 58       	subi	r30, 0x8E	; 142
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	05 90       	lpm	r0, Z+
    238e:	f4 91       	lpm	r31, Z+
    2390:	e0 2d       	mov	r30, r0
    2392:	19 94       	eijmp
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    2394:	80 93 61 04 	sts	0x0461, r24
							cliffAvoidanceEnabled = 0;
    2398:	10 92 62 04 	sts	0x0462, r1
    239c:	20 91 f7 02 	lds	r18, 0x02F7
    23a0:	30 91 f8 02 	lds	r19, 0x02F8
    23a4:	80 91 f9 02 	lds	r24, 0x02F9
    23a8:	90 91 fa 02 	lds	r25, 0x02FA
							break;
    23ac:	d6 cf       	rjmp	.-84     	; 0x235a <handleIRRemoteCommands+0x34>
						case 2:
							obstacleAvoidanceEnabled = 0;
    23ae:	10 92 61 04 	sts	0x0461, r1
							cliffAvoidanceEnabled = 1;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	80 93 62 04 	sts	0x0462, r24
    23b8:	20 91 f7 02 	lds	r18, 0x02F7
    23bc:	30 91 f8 02 	lds	r19, 0x02F8
    23c0:	80 91 f9 02 	lds	r24, 0x02F9
    23c4:	90 91 fa 02 	lds	r25, 0x02FA
							break;
    23c8:	c8 cf       	rjmp	.-112    	; 0x235a <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    23ca:	80 91 26 04 	lds	r24, 0x0426
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	01 96       	adiw	r24, 0x01	; 1
    23d2:	83 70       	andi	r24, 0x03	; 3
    23d4:	90 70       	andi	r25, 0x00	; 0
    23d6:	80 93 26 04 	sts	0x0426, r24
					switch(behaviorState) {
    23da:	82 30       	cpi	r24, 0x02	; 2
    23dc:	41 f3       	breq	.-48     	; 0x23ae <handleIRRemoteCommands+0x88>
    23de:	83 30       	cpi	r24, 0x03	; 3
    23e0:	09 f4       	brne	.+2      	; 0x23e4 <handleIRRemoteCommands+0xbe>
    23e2:	8a c1       	rjmp	.+788    	; 0x26f8 <handleIRRemoteCommands+0x3d2>
    23e4:	81 30       	cpi	r24, 0x01	; 1
    23e6:	b1 f2       	breq	.-84     	; 0x2394 <handleIRRemoteCommands+0x6e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    23e8:	10 92 61 04 	sts	0x0461, r1
							cliffAvoidanceEnabled = 0;
    23ec:	10 92 62 04 	sts	0x0462, r1
    23f0:	20 91 f7 02 	lds	r18, 0x02F7
    23f4:	30 91 f8 02 	lds	r19, 0x02F8
    23f8:	80 91 f9 02 	lds	r24, 0x02F9
    23fc:	90 91 fa 02 	lds	r25, 0x02FA
							break;
    2400:	ac cf       	rjmp	.-168    	; 0x235a <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    2402:	10 92 61 04 	sts	0x0461, r1
    2406:	20 91 f7 02 	lds	r18, 0x02F7
    240a:	30 91 f8 02 	lds	r19, 0x02F8
    240e:	80 91 f9 02 	lds	r24, 0x02F9
    2412:	90 91 fa 02 	lds	r25, 0x02FA
					break;
    2416:	a1 cf       	rjmp	.-190    	; 0x235a <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    2418:	80 91 f9 02 	lds	r24, 0x02F9
    241c:	90 91 fa 02 	lds	r25, 0x02FA
    2420:	02 97       	sbiw	r24, 0x02	; 2
    2422:	90 93 fa 02 	sts	0x02FA, r25
    2426:	80 93 f9 02 	sts	0x02F9, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    242a:	2e ef       	ldi	r18, 0xFE	; 254
    242c:	80 30       	cpi	r24, 0x00	; 0
    242e:	92 07       	cpc	r25, r18
    2430:	9c f5       	brge	.+102    	; 0x2498 <handleIRRemoteCommands+0x172>
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	9e ef       	ldi	r25, 0xFE	; 254
    2436:	90 93 fa 02 	sts	0x02FA, r25
    243a:	80 93 f9 02 	sts	0x02F9, r24
    243e:	20 91 f7 02 	lds	r18, 0x02F7
    2442:	30 91 f8 02 	lds	r19, 0x02F8
    2446:	89 cf       	rjmp	.-238    	; 0x235a <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    2448:	20 91 f7 02 	lds	r18, 0x02F7
    244c:	30 91 f8 02 	lds	r19, 0x02F8
    2450:	80 91 f5 02 	lds	r24, 0x02F5
    2454:	90 91 f6 02 	lds	r25, 0x02F6
    2458:	28 17       	cp	r18, r24
    245a:	39 07       	cpc	r19, r25
    245c:	24 f0       	brlt	.+8      	; 0x2466 <handleIRRemoteCommands+0x140>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    245e:	20 91 f9 02 	lds	r18, 0x02F9
    2462:	30 91 fa 02 	lds	r19, 0x02FA
					}
					pwm_right_desired -= STEP_MOTORS;
    2466:	22 50       	subi	r18, 0x02	; 2
    2468:	30 40       	sbci	r19, 0x00	; 0
    246a:	30 93 f8 02 	sts	0x02F8, r19
    246e:	20 93 f7 02 	sts	0x02F7, r18
					pwm_left_desired -= STEP_MOTORS;
    2472:	c9 01       	movw	r24, r18
    2474:	30 93 fa 02 	sts	0x02FA, r19
    2478:	20 93 f9 02 	sts	0x02F9, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    247c:	4e ef       	ldi	r20, 0xFE	; 254
    247e:	20 30       	cpi	r18, 0x00	; 0
    2480:	34 07       	cpc	r19, r20
    2482:	34 f4       	brge	.+12     	; 0x2490 <handleIRRemoteCommands+0x16a>
    2484:	40 e0       	ldi	r20, 0x00	; 0
    2486:	5e ef       	ldi	r21, 0xFE	; 254
    2488:	50 93 f8 02 	sts	0x02F8, r21
    248c:	40 93 f7 02 	sts	0x02F7, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    2490:	4e ef       	ldi	r20, 0xFE	; 254
    2492:	20 30       	cpi	r18, 0x00	; 0
    2494:	34 07       	cpc	r19, r20
    2496:	6c f2       	brlt	.-102    	; 0x2432 <handleIRRemoteCommands+0x10c>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2498:	20 91 f7 02 	lds	r18, 0x02F7
    249c:	30 91 f8 02 	lds	r19, 0x02F8
    24a0:	5c cf       	rjmp	.-328    	; 0x235a <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	80 93 61 04 	sts	0x0461, r24
    24a8:	20 91 f7 02 	lds	r18, 0x02F7
    24ac:	30 91 f8 02 	lds	r19, 0x02F8
    24b0:	80 91 f9 02 	lds	r24, 0x02F9
    24b4:	90 91 fa 02 	lds	r25, 0x02FA
					break;
    24b8:	50 cf       	rjmp	.-352    	; 0x235a <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    24ba:	20 91 f7 02 	lds	r18, 0x02F7
    24be:	30 91 f8 02 	lds	r19, 0x02F8
    24c2:	22 50       	subi	r18, 0x02	; 2
    24c4:	30 40       	sbci	r19, 0x00	; 0
    24c6:	30 93 f8 02 	sts	0x02F8, r19
    24ca:	20 93 f7 02 	sts	0x02F7, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    24ce:	4e ef       	ldi	r20, 0xFE	; 254
    24d0:	20 30       	cpi	r18, 0x00	; 0
    24d2:	34 07       	cpc	r19, r20
    24d4:	0c f0       	brlt	.+2      	; 0x24d8 <handleIRRemoteCommands+0x1b2>
    24d6:	3d cf       	rjmp	.-390    	; 0x2352 <handleIRRemoteCommands+0x2c>
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	9e ef       	ldi	r25, 0xFE	; 254
    24dc:	90 93 f8 02 	sts	0x02F8, r25
    24e0:	80 93 f7 02 	sts	0x02F7, r24
    24e4:	80 91 f9 02 	lds	r24, 0x02F9
    24e8:	90 91 fa 02 	lds	r25, 0x02FA
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	32 e0       	ldi	r19, 0x02	; 2
    24f0:	36 cf       	rjmp	.-404    	; 0x235e <handleIRRemoteCommands+0x38>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    24f2:	20 91 f7 02 	lds	r18, 0x02F7
    24f6:	30 91 f8 02 	lds	r19, 0x02F8
    24fa:	22 50       	subi	r18, 0x02	; 2
    24fc:	30 40       	sbci	r19, 0x00	; 0
    24fe:	30 93 f8 02 	sts	0x02F8, r19
    2502:	20 93 f7 02 	sts	0x02F7, r18
					pwm_left_desired += STEP_MOTORS;
    2506:	80 91 f9 02 	lds	r24, 0x02F9
    250a:	90 91 fa 02 	lds	r25, 0x02FA
    250e:	02 96       	adiw	r24, 0x02	; 2
    2510:	90 93 fa 02 	sts	0x02FA, r25
    2514:	80 93 f9 02 	sts	0x02F9, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    2518:	4e ef       	ldi	r20, 0xFE	; 254
    251a:	20 30       	cpi	r18, 0x00	; 0
    251c:	34 07       	cpc	r19, r20
    251e:	34 f4       	brge	.+12     	; 0x252c <handleIRRemoteCommands+0x206>
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	3e ef       	ldi	r19, 0xFE	; 254
    2524:	30 93 f8 02 	sts	0x02F8, r19
    2528:	20 93 f7 02 	sts	0x02F7, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    252c:	42 e0       	ldi	r20, 0x02	; 2
    252e:	81 30       	cpi	r24, 0x01	; 1
    2530:	94 07       	cpc	r25, r20
    2532:	0c f4       	brge	.+2      	; 0x2536 <handleIRRemoteCommands+0x210>
    2534:	12 cf       	rjmp	.-476    	; 0x235a <handleIRRemoteCommands+0x34>
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	92 e0       	ldi	r25, 0x02	; 2
    253a:	90 93 fa 02 	sts	0x02FA, r25
    253e:	80 93 f9 02 	sts	0x02F9, r24
    2542:	0b cf       	rjmp	.-490    	; 0x235a <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    2544:	10 92 f8 02 	sts	0x02F8, r1
    2548:	10 92 f7 02 	sts	0x02F7, r1
					pwm_left_desired = 0;
    254c:	10 92 fa 02 	sts	0x02FA, r1
    2550:	10 92 f9 02 	sts	0x02F9, r1
					if(currentSelector == 8) {
    2554:	80 91 48 04 	lds	r24, 0x0448
    2558:	88 30       	cpi	r24, 0x08	; 8
    255a:	09 f4       	brne	.+2      	; 0x255e <handleIRRemoteCommands+0x238>
    255c:	db c0       	rjmp	.+438    	; 0x2714 <handleIRRemoteCommands+0x3ee>
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	fb ce       	rjmp	.-522    	; 0x235e <handleIRRemoteCommands+0x38>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    2568:	20 91 f7 02 	lds	r18, 0x02F7
    256c:	30 91 f8 02 	lds	r19, 0x02F8
    2570:	2e 5f       	subi	r18, 0xFE	; 254
    2572:	3f 4f       	sbci	r19, 0xFF	; 255
    2574:	30 93 f8 02 	sts	0x02F8, r19
    2578:	20 93 f7 02 	sts	0x02F7, r18
					pwm_left_desired -= STEP_MOTORS;
    257c:	80 91 f9 02 	lds	r24, 0x02F9
    2580:	90 91 fa 02 	lds	r25, 0x02FA
    2584:	02 97       	sbiw	r24, 0x02	; 2
    2586:	90 93 fa 02 	sts	0x02FA, r25
    258a:	80 93 f9 02 	sts	0x02F9, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    258e:	42 e0       	ldi	r20, 0x02	; 2
    2590:	21 30       	cpi	r18, 0x01	; 1
    2592:	34 07       	cpc	r19, r20
    2594:	34 f0       	brlt	.+12     	; 0x25a2 <handleIRRemoteCommands+0x27c>
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	32 e0       	ldi	r19, 0x02	; 2
    259a:	30 93 f8 02 	sts	0x02F8, r19
    259e:	20 93 f7 02 	sts	0x02F7, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    25a2:	4e ef       	ldi	r20, 0xFE	; 254
    25a4:	80 30       	cpi	r24, 0x00	; 0
    25a6:	94 07       	cpc	r25, r20
    25a8:	0c f0       	brlt	.+2      	; 0x25ac <handleIRRemoteCommands+0x286>
    25aa:	d7 ce       	rjmp	.-594    	; 0x235a <handleIRRemoteCommands+0x34>
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	9e ef       	ldi	r25, 0xFE	; 254
    25b0:	90 93 fa 02 	sts	0x02FA, r25
    25b4:	80 93 f9 02 	sts	0x02F9, r24
    25b8:	d0 ce       	rjmp	.-608    	; 0x235a <handleIRRemoteCommands+0x34>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    25ba:	80 91 f9 02 	lds	r24, 0x02F9
    25be:	90 91 fa 02 	lds	r25, 0x02FA
    25c2:	02 96       	adiw	r24, 0x02	; 2
    25c4:	90 93 fa 02 	sts	0x02FA, r25
    25c8:	80 93 f9 02 	sts	0x02F9, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    25cc:	22 e0       	ldi	r18, 0x02	; 2
    25ce:	81 30       	cpi	r24, 0x01	; 1
    25d0:	92 07       	cpc	r25, r18
    25d2:	0c f4       	brge	.+2      	; 0x25d6 <handleIRRemoteCommands+0x2b0>
    25d4:	61 cf       	rjmp	.-318    	; 0x2498 <handleIRRemoteCommands+0x172>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	92 e0       	ldi	r25, 0x02	; 2
    25da:	90 93 fa 02 	sts	0x02FA, r25
    25de:	80 93 f9 02 	sts	0x02F9, r24
    25e2:	5a cf       	rjmp	.-332    	; 0x2498 <handleIRRemoteCommands+0x172>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    25e4:	20 91 f7 02 	lds	r18, 0x02F7
    25e8:	30 91 f8 02 	lds	r19, 0x02F8
    25ec:	80 91 f9 02 	lds	r24, 0x02F9
    25f0:	90 91 fa 02 	lds	r25, 0x02FA
    25f4:	82 17       	cp	r24, r18
    25f6:	93 07       	cpc	r25, r19
    25f8:	0c f4       	brge	.+2      	; 0x25fc <handleIRRemoteCommands+0x2d6>
    25fa:	6e c0       	rjmp	.+220    	; 0x26d8 <handleIRRemoteCommands+0x3b2>
    25fc:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    25fe:	2e 5f       	subi	r18, 0xFE	; 254
    2600:	3f 4f       	sbci	r19, 0xFF	; 255
    2602:	30 93 f8 02 	sts	0x02F8, r19
    2606:	20 93 f7 02 	sts	0x02F7, r18
					pwm_left_desired += STEP_MOTORS;
    260a:	02 96       	adiw	r24, 0x02	; 2
    260c:	90 93 fa 02 	sts	0x02FA, r25
    2610:	80 93 f9 02 	sts	0x02F9, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    2614:	42 e0       	ldi	r20, 0x02	; 2
    2616:	21 30       	cpi	r18, 0x01	; 1
    2618:	34 07       	cpc	r19, r20
    261a:	34 f0       	brlt	.+12     	; 0x2628 <handleIRRemoteCommands+0x302>
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	32 e0       	ldi	r19, 0x02	; 2
    2620:	30 93 f8 02 	sts	0x02F8, r19
    2624:	20 93 f7 02 	sts	0x02F7, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    2628:	22 e0       	ldi	r18, 0x02	; 2
    262a:	81 30       	cpi	r24, 0x01	; 1
    262c:	92 07       	cpc	r25, r18
    262e:	0c f4       	brge	.+2      	; 0x2632 <handleIRRemoteCommands+0x30c>
    2630:	33 cf       	rjmp	.-410    	; 0x2498 <handleIRRemoteCommands+0x172>
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	92 e0       	ldi	r25, 0x02	; 2
    2636:	90 93 fa 02 	sts	0x02FA, r25
    263a:	80 93 f9 02 	sts	0x02F9, r24
    263e:	20 91 f7 02 	lds	r18, 0x02F7
    2642:	30 91 f8 02 	lds	r19, 0x02F8
    2646:	89 ce       	rjmp	.-750    	; 0x235a <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    2648:	20 91 f7 02 	lds	r18, 0x02F7
    264c:	30 91 f8 02 	lds	r19, 0x02F8
    2650:	2e 5f       	subi	r18, 0xFE	; 254
    2652:	3f 4f       	sbci	r19, 0xFF	; 255
    2654:	30 93 f8 02 	sts	0x02F8, r19
    2658:	20 93 f7 02 	sts	0x02F7, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    265c:	42 e0       	ldi	r20, 0x02	; 2
    265e:	21 30       	cpi	r18, 0x01	; 1
    2660:	34 07       	cpc	r19, r20
    2662:	0c f4       	brge	.+2      	; 0x2666 <handleIRRemoteCommands+0x340>
    2664:	76 ce       	rjmp	.-788    	; 0x2352 <handleIRRemoteCommands+0x2c>
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	92 e0       	ldi	r25, 0x02	; 2
    266a:	90 93 f8 02 	sts	0x02F8, r25
    266e:	80 93 f7 02 	sts	0x02F7, r24
    2672:	80 91 f9 02 	lds	r24, 0x02F9
    2676:	90 91 fa 02 	lds	r25, 0x02FA
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	32 e0       	ldi	r19, 0x02	; 2
    267e:	6f ce       	rjmp	.-802    	; 0x235e <handleIRRemoteCommands+0x38>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    2680:	80 91 25 04 	lds	r24, 0x0425
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	01 96       	adiw	r24, 0x01	; 1
    2688:	65 e0       	ldi	r22, 0x05	; 5
    268a:	70 e0       	ldi	r23, 0x00	; 0
    268c:	0e 94 80 40 	call	0x8100	; 0x8100 <__divmodhi4>
    2690:	80 93 25 04 	sts	0x0425, r24

					if(colorState==0) {			// turn on blue and off all IRs
    2694:	88 23       	and	r24, r24
    2696:	11 f5       	brne	.+68     	; 0x26dc <handleIRRemoteCommands+0x3b6>
						LED_IR1_HIGH;
    2698:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    269a:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    269c:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    26a0:	8f ef       	ldi	r24, 0xFF	; 255
    26a2:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    26a6:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    26aa:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <updateRedLed>
					updateGreenLed(pwm_green);
    26ae:	80 91 0d 02 	lds	r24, 0x020D
    26b2:	0e 94 52 35 	call	0x6aa4	; 0x6aa4 <updateGreenLed>
					updateBlueLed(pwm_blue);
    26b6:	80 91 0e 02 	lds	r24, 0x020E
    26ba:	0e 94 66 35 	call	0x6acc	; 0x6acc <updateBlueLed>
    26be:	20 91 f7 02 	lds	r18, 0x02F7
    26c2:	30 91 f8 02 	lds	r19, 0x02F8
    26c6:	80 91 f9 02 	lds	r24, 0x02F9
    26ca:	90 91 fa 02 	lds	r25, 0x02FA

	               	break;
    26ce:	45 ce       	rjmp	.-886    	; 0x235a <handleIRRemoteCommands+0x34>

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    26d0:	30 95       	com	r19
    26d2:	21 95       	neg	r18
    26d4:	3f 4f       	sbci	r19, 0xFF	; 255
    26d6:	43 ce       	rjmp	.-890    	; 0x235e <handleIRRemoteCommands+0x38>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    26d8:	c9 01       	movw	r24, r18
    26da:	91 cf       	rjmp	.-222    	; 0x25fe <handleIRRemoteCommands+0x2d8>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    26dc:	81 30       	cpi	r24, 0x01	; 1
    26de:	91 f0       	breq	.+36     	; 0x2704 <handleIRRemoteCommands+0x3de>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    26e0:	82 30       	cpi	r24, 0x02	; 2
    26e2:	a1 f1       	breq	.+104    	; 0x274c <handleIRRemoteCommands+0x426>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    26e4:	83 30       	cpi	r24, 0x03	; 3
    26e6:	e9 f1       	breq	.+122    	; 0x2762 <handleIRRemoteCommands+0x43c>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    26e8:	8f ef       	ldi	r24, 0xFF	; 255
    26ea:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    26ee:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    26f2:	80 93 0c 02 	sts	0x020C, r24
    26f6:	d9 cf       	rjmp	.-78     	; 0x26aa <handleIRRemoteCommands+0x384>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	80 93 61 04 	sts	0x0461, r24
							cliffAvoidanceEnabled = 1;
    26fe:	80 93 62 04 	sts	0x0462, r24
    2702:	23 ce       	rjmp	.-954    	; 0x234a <handleIRRemoteCommands+0x24>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    2704:	8f ef       	ldi	r24, 0xFF	; 255
    2706:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    270a:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    270e:	80 93 0c 02 	sts	0x020C, r24
    2712:	cb cf       	rjmp	.-106    	; 0x26aa <handleIRRemoteCommands+0x384>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    2714:	0e 94 36 38 	call	0x706c	; 0x706c <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    2718:	8f ef       	ldi	r24, 0xFF	; 255
    271a:	93 e0       	ldi	r25, 0x03	; 3
    271c:	90 93 68 02 	sts	0x0268, r25
    2720:	80 93 67 02 	sts	0x0267, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    2724:	90 93 6e 02 	sts	0x026E, r25
    2728:	80 93 6d 02 	sts	0x026D, r24
						calibState = 0;
    272c:	10 92 81 05 	sts	0x0581, r1
						calibVelIndex = 1;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	80 93 c3 04 	sts	0x04C3, r24
						calibrateOdomFlag = 1;
    2736:	80 93 c0 04 	sts	0x04C0, r24
    273a:	20 91 f7 02 	lds	r18, 0x02F7
    273e:	30 91 f8 02 	lds	r19, 0x02F8
    2742:	80 91 f9 02 	lds	r24, 0x02F9
    2746:	90 91 fa 02 	lds	r25, 0x02FA
    274a:	07 ce       	rjmp	.-1010   	; 0x235a <handleIRRemoteCommands+0x34>
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    274c:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    274e:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    2750:	8f ef       	ldi	r24, 0xFF	; 255
    2752:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    2756:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    275a:	10 92 0c 02 	sts	0x020C, r1
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	a4 cf       	rjmp	.-184    	; 0x26aa <handleIRRemoteCommands+0x384>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    2762:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    2766:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    276a:	10 92 0c 02 	sts	0x020C, r1
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	9c cf       	rjmp	.-200    	; 0x26aa <handleIRRemoteCommands+0x384>

00002772 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    2772:	08 95       	ret

00002774 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    2774:	cf 92       	push	r12
    2776:	df 92       	push	r13
    2778:	ef 92       	push	r14
    277a:	ff 92       	push	r15
    277c:	0f 93       	push	r16
    277e:	1f 93       	push	r17
    2780:	cf 93       	push	r28
    2782:	df 93       	push	r29
    2784:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    2786:	80 81       	ld	r24, Z
    2788:	91 81       	ldd	r25, Z+1	; 0x01
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	09 f4       	brne	.+2      	; 0x2790 <start_vertical_speed_control_left+0x1c>
    278e:	f7 c0       	rjmp	.+494    	; 0x297e <start_vertical_speed_control_left+0x20a>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2790:	20 91 3a 04 	lds	r18, 0x043A
    2794:	30 91 3b 04 	lds	r19, 0x043B
    2798:	41 e0       	ldi	r20, 0x01	; 1
    279a:	2e 30       	cpi	r18, 0x0E	; 14
    279c:	34 07       	cpc	r19, r20
    279e:	0c f4       	brge	.+2      	; 0x27a2 <start_vertical_speed_control_left+0x2e>
    27a0:	c7 c0       	rjmp	.+398    	; 0x2930 <start_vertical_speed_control_left+0x1bc>
		if(*pwm_left > 0) {
    27a2:	18 16       	cp	r1, r24
    27a4:	19 06       	cpc	r1, r25
    27a6:	0c f0       	brlt	.+2      	; 0x27aa <start_vertical_speed_control_left+0x36>
    27a8:	68 c1       	rjmp	.+720    	; 0x2a7a <start_vertical_speed_control_left+0x306>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    27aa:	88 e6       	ldi	r24, 0x68	; 104
    27ac:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    27ae:	82 1b       	sub	r24, r18
    27b0:	93 0b       	sbc	r25, r19
    27b2:	95 95       	asr	r25
    27b4:	87 95       	ror	r24
    27b6:	95 95       	asr	r25
    27b8:	87 95       	ror	r24
    27ba:	29 e1       	ldi	r18, 0x19	; 25
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	28 1b       	sub	r18, r24
    27c0:	39 0b       	sbc	r19, r25
    27c2:	30 93 04 02 	sts	0x0204, r19
    27c6:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    27ca:	c0 91 c1 04 	lds	r28, 0x04C1
    27ce:	d0 91 c2 04 	lds	r29, 0x04C2
    27d2:	d0 93 6d 05 	sts	0x056D, r29
    27d6:	c0 93 6c 05 	sts	0x056C, r28
	if(*pwm_left >= 0) {
    27da:	80 81       	ld	r24, Z
    27dc:	91 81       	ldd	r25, Z+1	; 0x01
    27de:	97 fd       	sbrc	r25, 7
    27e0:	2e c1       	rjmp	.+604    	; 0x2a3e <start_vertical_speed_control_left+0x2ca>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    27e2:	20 91 ef 02 	lds	r18, 0x02EF
    27e6:	30 91 f0 02 	lds	r19, 0x02F0
    27ea:	dc 01       	movw	r26, r24
    27ec:	a2 1b       	sub	r26, r18
    27ee:	b3 0b       	sbc	r27, r19
    27f0:	b0 93 c2 04 	sts	0x04C2, r27
    27f4:	a0 93 c1 04 	sts	0x04C1, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    27f8:	80 91 07 03 	lds	r24, 0x0307
    27fc:	90 91 08 03 	lds	r25, 0x0308
    2800:	8a 0f       	add	r24, r26
    2802:	9b 1f       	adc	r25, r27
    2804:	90 93 08 03 	sts	0x0308, r25
    2808:	80 93 07 03 	sts	0x0307, r24

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    280c:	66 e0       	ldi	r22, 0x06	; 6
    280e:	81 34       	cpi	r24, 0x41	; 65
    2810:	96 07       	cpc	r25, r22
    2812:	0c f4       	brge	.+2      	; 0x2816 <start_vertical_speed_control_left+0xa2>
    2814:	cb c0       	rjmp	.+406    	; 0x29ac <start_vertical_speed_control_left+0x238>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    2816:	80 e4       	ldi	r24, 0x40	; 64
    2818:	96 e0       	ldi	r25, 0x06	; 6
    281a:	90 93 08 03 	sts	0x0308, r25
    281e:	80 93 07 03 	sts	0x0307, r24
    2822:	10 ec       	ldi	r17, 0xC0	; 192
    2824:	c1 2e       	mov	r12, r17
    2826:	12 e1       	ldi	r17, 0x12	; 18
    2828:	d1 2e       	mov	r13, r17
    282a:	e1 2c       	mov	r14, r1
    282c:	f1 2c       	mov	r15, r1
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    282e:	00 81       	ld	r16, Z
    2830:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    2832:	9d 01       	movw	r18, r26
    2834:	22 0f       	add	r18, r18
    2836:	33 1f       	adc	r19, r19
    2838:	2a 0f       	add	r18, r26
    283a:	3b 1f       	adc	r19, r27
    283c:	22 0f       	add	r18, r18
    283e:	33 1f       	adc	r19, r19
    2840:	22 0f       	add	r18, r18
    2842:	33 1f       	adc	r19, r19
    2844:	22 0f       	add	r18, r18
    2846:	33 1f       	adc	r19, r19
    2848:	2a 0f       	add	r18, r26
    284a:	3b 1f       	adc	r19, r27
    284c:	44 27       	eor	r20, r20
    284e:	37 fd       	sbrc	r19, 7
    2850:	40 95       	com	r20
    2852:	54 2f       	mov	r21, r20
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    2854:	80 91 03 02 	lds	r24, 0x0203
    2858:	90 91 04 02 	lds	r25, 0x0204
    285c:	08 9f       	mul	r16, r24
    285e:	b0 01       	movw	r22, r0
    2860:	09 9f       	mul	r16, r25
    2862:	70 0d       	add	r23, r0
    2864:	18 9f       	mul	r17, r24
    2866:	70 0d       	add	r23, r0
    2868:	11 24       	eor	r1, r1
    286a:	88 27       	eor	r24, r24
    286c:	77 fd       	sbrc	r23, 7
    286e:	80 95       	com	r24
    2870:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    2872:	26 0f       	add	r18, r22
    2874:	37 1f       	adc	r19, r23
    2876:	48 1f       	adc	r20, r24
    2878:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    287a:	ac 1b       	sub	r26, r28
    287c:	bd 0b       	sbc	r27, r29
    287e:	aa 0f       	add	r26, r26
    2880:	bb 1f       	adc	r27, r27
    2882:	bd 01       	movw	r22, r26
    2884:	cb 01       	movw	r24, r22
    2886:	aa 27       	eor	r26, r26
    2888:	97 fd       	sbrc	r25, 7
    288a:	a0 95       	com	r26
    288c:	ba 2f       	mov	r27, r26
    288e:	28 0f       	add	r18, r24
    2890:	39 1f       	adc	r19, r25
    2892:	4a 1f       	adc	r20, r26
    2894:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);
    2896:	2c 0d       	add	r18, r12
    2898:	3d 1d       	adc	r19, r13
    289a:	4e 1d       	adc	r20, r14
    289c:	5f 1d       	adc	r21, r15
    289e:	20 93 03 03 	sts	0x0303, r18
    28a2:	30 93 04 03 	sts	0x0304, r19
    28a6:	40 93 05 03 	sts	0x0305, r20
    28aa:	50 93 06 03 	sts	0x0306, r21

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    28ae:	57 fd       	sbrc	r21, 7
    28b0:	9d c0       	rjmp	.+314    	; 0x29ec <start_vertical_speed_control_left+0x278>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    28b2:	12 16       	cp	r1, r18
    28b4:	13 06       	cpc	r1, r19
    28b6:	14 06       	cpc	r1, r20
    28b8:	15 06       	cpc	r1, r21
    28ba:	0c f0       	brlt	.+2      	; 0x28be <start_vertical_speed_control_left+0x14a>
    28bc:	a4 c0       	rjmp	.+328    	; 0x2a06 <start_vertical_speed_control_left+0x292>
    28be:	17 fd       	sbrc	r17, 7
    28c0:	c9 c0       	rjmp	.+402    	; 0x2a54 <start_vertical_speed_control_left+0x2e0>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    28c2:	21 3c       	cpi	r18, 0xC1	; 193
    28c4:	7d e5       	ldi	r23, 0x5D	; 93
    28c6:	37 07       	cpc	r19, r23
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	47 07       	cpc	r20, r23
    28cc:	70 e0       	ldi	r23, 0x00	; 0
    28ce:	57 07       	cpc	r21, r23
    28d0:	0c f4       	brge	.+2      	; 0x28d4 <start_vertical_speed_control_left+0x160>
    28d2:	99 c0       	rjmp	.+306    	; 0x2a06 <start_vertical_speed_control_left+0x292>
    28d4:	80 ec       	ldi	r24, 0xC0	; 192
    28d6:	9d e5       	ldi	r25, 0x5D	; 93
    28d8:	a0 e0       	ldi	r26, 0x00	; 0
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	80 93 03 03 	sts	0x0303, r24
    28e0:	90 93 04 03 	sts	0x0304, r25
    28e4:	a0 93 05 03 	sts	0x0305, r26
    28e8:	b0 93 06 03 	sts	0x0306, r27
    28ec:	2c ed       	ldi	r18, 0xDC	; 220
    28ee:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    28f0:	31 83       	std	Z+1, r19	; 0x01
    28f2:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    28f4:	80 91 e9 02 	lds	r24, 0x02E9
    28f8:	90 91 ea 02 	lds	r25, 0x02EA
    28fc:	18 16       	cp	r1, r24
    28fe:	19 06       	cpc	r1, r25
    2900:	0c f0       	brlt	.+2      	; 0x2904 <start_vertical_speed_control_left+0x190>
    2902:	98 c0       	rjmp	.+304    	; 0x2a34 <start_vertical_speed_control_left+0x2c0>
		*pwm_left += 1;
    2904:	2f 5f       	subi	r18, 0xFF	; 255
    2906:	3f 4f       	sbci	r19, 0xFF	; 255
    2908:	31 83       	std	Z+1, r19	; 0x01
    290a:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    290c:	42 e0       	ldi	r20, 0x02	; 2
    290e:	21 30       	cpi	r18, 0x01	; 1
    2910:	34 07       	cpc	r19, r20
    2912:	0c f4       	brge	.+2      	; 0x2916 <start_vertical_speed_control_left+0x1a2>
    2914:	41 c0       	rjmp	.+130    	; 0x2998 <start_vertical_speed_control_left+0x224>
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	92 e0       	ldi	r25, 0x02	; 2
    291a:	91 83       	std	Z+1, r25	; 0x01
    291c:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	1f 91       	pop	r17
    2924:	0f 91       	pop	r16
    2926:	ff 90       	pop	r15
    2928:	ef 90       	pop	r14
    292a:	df 90       	pop	r13
    292c:	cf 90       	pop	r12
    292e:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2930:	24 3b       	cpi	r18, 0xB4	; 180
    2932:	31 05       	cpc	r19, r1
    2934:	94 f4       	brge	.+36     	; 0x295a <start_vertical_speed_control_left+0x1e6>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2936:	2a 35       	cpi	r18, 0x5A	; 90
    2938:	31 05       	cpc	r19, r1
    293a:	7c f4       	brge	.+30     	; 0x295a <start_vertical_speed_control_left+0x1e6>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    293c:	18 16       	cp	r1, r24
    293e:	19 06       	cpc	r1, r25
    2940:	0c f0       	brlt	.+2      	; 0x2944 <start_vertical_speed_control_left+0x1d0>
    2942:	a9 c0       	rjmp	.+338    	; 0x2a96 <start_vertical_speed_control_left+0x322>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    2944:	35 95       	asr	r19
    2946:	27 95       	ror	r18
    2948:	35 95       	asr	r19
    294a:	27 95       	ror	r18
    294c:	27 5e       	subi	r18, 0xE7	; 231
    294e:	3f 4f       	sbci	r19, 0xFF	; 255
    2950:	30 93 04 02 	sts	0x0204, r19
    2954:	20 93 03 02 	sts	0x0203, r18
    2958:	38 cf       	rjmp	.-400    	; 0x27ca <start_vertical_speed_control_left+0x56>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    295a:	18 16       	cp	r1, r24
    295c:	19 06       	cpc	r1, r25
    295e:	0c f0       	brlt	.+2      	; 0x2962 <start_vertical_speed_control_left+0x1ee>
    2960:	42 c0       	rjmp	.+132    	; 0x29e6 <start_vertical_speed_control_left+0x272>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    2962:	84 eb       	ldi	r24, 0xB4	; 180
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	82 1b       	sub	r24, r18
    2968:	93 0b       	sbc	r25, r19
    296a:	95 95       	asr	r25
    296c:	87 95       	ror	r24
    296e:	95 95       	asr	r25
    2970:	87 95       	ror	r24
    2972:	49 96       	adiw	r24, 0x19	; 25
    2974:	90 93 04 02 	sts	0x0204, r25
    2978:	80 93 03 02 	sts	0x0203, r24
    297c:	26 cf       	rjmp	.-436    	; 0x27ca <start_vertical_speed_control_left+0x56>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    297e:	10 92 08 03 	sts	0x0308, r1
    2982:	10 92 07 03 	sts	0x0307, r1
		delta_left_speed_current = 0;
    2986:	10 92 c2 04 	sts	0x04C2, r1
    298a:	10 92 c1 04 	sts	0x04C1, r1
		delta_left_speed_prev = 0;
    298e:	10 92 6d 05 	sts	0x056D, r1
    2992:	10 92 6c 05 	sts	0x056C, r1
		return;
    2996:	c3 cf       	rjmp	.-122    	; 0x291e <start_vertical_speed_control_left+0x1aa>
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2998:	6e ef       	ldi	r22, 0xFE	; 254
    299a:	20 30       	cpi	r18, 0x00	; 0
    299c:	36 07       	cpc	r19, r22
    299e:	0c f0       	brlt	.+2      	; 0x29a2 <start_vertical_speed_control_left+0x22e>
    29a0:	be cf       	rjmp	.-132    	; 0x291e <start_vertical_speed_control_left+0x1aa>
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	9e ef       	ldi	r25, 0xFE	; 254
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	80 83       	st	Z, r24
    29aa:	b9 cf       	rjmp	.-142    	; 0x291e <start_vertical_speed_control_left+0x1aa>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    29ac:	79 ef       	ldi	r23, 0xF9	; 249
    29ae:	80 3c       	cpi	r24, 0xC0	; 192
    29b0:	97 07       	cpc	r25, r23
    29b2:	7c f4       	brge	.+30     	; 0x29d2 <start_vertical_speed_control_left+0x25e>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    29b4:	80 ec       	ldi	r24, 0xC0	; 192
    29b6:	99 ef       	ldi	r25, 0xF9	; 249
    29b8:	90 93 08 03 	sts	0x0308, r25
    29bc:	80 93 07 03 	sts	0x0307, r24
    29c0:	60 e4       	ldi	r22, 0x40	; 64
    29c2:	c6 2e       	mov	r12, r22
    29c4:	6d ee       	ldi	r22, 0xED	; 237
    29c6:	d6 2e       	mov	r13, r22
    29c8:	6f ef       	ldi	r22, 0xFF	; 255
    29ca:	e6 2e       	mov	r14, r22
    29cc:	6f ef       	ldi	r22, 0xFF	; 255
    29ce:	f6 2e       	mov	r15, r22
    29d0:	2e cf       	rjmp	.-420    	; 0x282e <start_vertical_speed_control_left+0xba>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    29d2:	6c 01       	movw	r12, r24
    29d4:	cc 0c       	add	r12, r12
    29d6:	dd 1c       	adc	r13, r13
    29d8:	c8 0e       	add	r12, r24
    29da:	d9 1e       	adc	r13, r25
    29dc:	ee 24       	eor	r14, r14
    29de:	d7 fc       	sbrc	r13, 7
    29e0:	e0 94       	com	r14
    29e2:	fe 2c       	mov	r15, r14
    29e4:	24 cf       	rjmp	.-440    	; 0x282e <start_vertical_speed_control_left+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    29e6:	84 eb       	ldi	r24, 0xB4	; 180
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	e1 ce       	rjmp	.-574    	; 0x27ae <start_vertical_speed_control_left+0x3a>
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    29ec:	17 fd       	sbrc	r17, 7
    29ee:	0b c0       	rjmp	.+22     	; 0x2a06 <start_vertical_speed_control_left+0x292>
		pwm_left_speed_controller = 0;
    29f0:	10 92 03 03 	sts	0x0303, r1
    29f4:	10 92 04 03 	sts	0x0304, r1
    29f8:	10 92 05 03 	sts	0x0305, r1
    29fc:	10 92 06 03 	sts	0x0306, r1
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2a06:	20 34       	cpi	r18, 0x40	; 64
    2a08:	82 ea       	ldi	r24, 0xA2	; 162
    2a0a:	38 07       	cpc	r19, r24
    2a0c:	8f ef       	ldi	r24, 0xFF	; 255
    2a0e:	48 07       	cpc	r20, r24
    2a10:	8f ef       	ldi	r24, 0xFF	; 255
    2a12:	58 07       	cpc	r21, r24
    2a14:	54 f5       	brge	.+84     	; 0x2a6a <start_vertical_speed_control_left+0x2f6>
    2a16:	80 e4       	ldi	r24, 0x40	; 64
    2a18:	92 ea       	ldi	r25, 0xA2	; 162
    2a1a:	af ef       	ldi	r26, 0xFF	; 255
    2a1c:	bf ef       	ldi	r27, 0xFF	; 255
    2a1e:	80 93 03 03 	sts	0x0303, r24
    2a22:	90 93 04 03 	sts	0x0304, r25
    2a26:	a0 93 05 03 	sts	0x0305, r26
    2a2a:	b0 93 06 03 	sts	0x0306, r27
    2a2e:	24 e2       	ldi	r18, 0x24	; 36
    2a30:	3a ef       	ldi	r19, 0xFA	; 250
    2a32:	5e cf       	rjmp	.-324    	; 0x28f0 <start_vertical_speed_control_left+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    2a34:	21 50       	subi	r18, 0x01	; 1
    2a36:	30 40       	sbci	r19, 0x00	; 0
    2a38:	31 83       	std	Z+1, r19	; 0x01
    2a3a:	20 83       	st	Z, r18
    2a3c:	67 cf       	rjmp	.-306    	; 0x290c <start_vertical_speed_control_left+0x198>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2a3e:	a0 91 ef 02 	lds	r26, 0x02EF
    2a42:	b0 91 f0 02 	lds	r27, 0x02F0
    2a46:	a8 0f       	add	r26, r24
    2a48:	b9 1f       	adc	r27, r25
    2a4a:	b0 93 c2 04 	sts	0x04C2, r27
    2a4e:	a0 93 c1 04 	sts	0x04C1, r26
    2a52:	d2 ce       	rjmp	.-604    	; 0x27f8 <start_vertical_speed_control_left+0x84>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2a54:	10 92 03 03 	sts	0x0303, r1
    2a58:	10 92 04 03 	sts	0x0304, r1
    2a5c:	10 92 05 03 	sts	0x0305, r1
    2a60:	10 92 06 03 	sts	0x0306, r1
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2a6a:	84 e0       	ldi	r24, 0x04	; 4
    2a6c:	55 95       	asr	r21
    2a6e:	47 95       	ror	r20
    2a70:	37 95       	ror	r19
    2a72:	27 95       	ror	r18
    2a74:	8a 95       	dec	r24
    2a76:	d1 f7       	brne	.-12     	; 0x2a6c <start_vertical_speed_control_left+0x2f8>
    2a78:	3b cf       	rjmp	.-394    	; 0x28f0 <start_vertical_speed_control_left+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    2a7a:	88 e6       	ldi	r24, 0x68	; 104
    2a7c:	91 e0       	ldi	r25, 0x01	; 1
    2a7e:	82 1b       	sub	r24, r18
    2a80:	93 0b       	sbc	r25, r19
    2a82:	95 95       	asr	r25
    2a84:	87 95       	ror	r24
    2a86:	95 95       	asr	r25
    2a88:	87 95       	ror	r24
    2a8a:	49 96       	adiw	r24, 0x19	; 25
    2a8c:	90 93 04 02 	sts	0x0204, r25
    2a90:	80 93 03 02 	sts	0x0203, r24
    2a94:	9a ce       	rjmp	.-716    	; 0x27ca <start_vertical_speed_control_left+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    2a96:	35 95       	asr	r19
    2a98:	27 95       	ror	r18
    2a9a:	35 95       	asr	r19
    2a9c:	27 95       	ror	r18
    2a9e:	89 e1       	ldi	r24, 0x19	; 25
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	82 1b       	sub	r24, r18
    2aa4:	93 0b       	sbc	r25, r19
    2aa6:	90 93 04 02 	sts	0x0204, r25
    2aaa:	80 93 03 02 	sts	0x0203, r24
    2aae:	8d ce       	rjmp	.-742    	; 0x27ca <start_vertical_speed_control_left+0x56>

00002ab0 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    2ab0:	cf 92       	push	r12
    2ab2:	df 92       	push	r13
    2ab4:	ef 92       	push	r14
    2ab6:	ff 92       	push	r15
    2ab8:	0f 93       	push	r16
    2aba:	1f 93       	push	r17
    2abc:	cf 93       	push	r28
    2abe:	df 93       	push	r29
    2ac0:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    2ac2:	80 81       	ld	r24, Z
    2ac4:	91 81       	ldd	r25, Z+1	; 0x01
    2ac6:	00 97       	sbiw	r24, 0x00	; 0
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <start_vertical_speed_control_right+0x1c>
    2aca:	f7 c0       	rjmp	.+494    	; 0x2cba <start_vertical_speed_control_right+0x20a>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2acc:	20 91 3a 04 	lds	r18, 0x043A
    2ad0:	30 91 3b 04 	lds	r19, 0x043B
    2ad4:	41 e0       	ldi	r20, 0x01	; 1
    2ad6:	2e 30       	cpi	r18, 0x0E	; 14
    2ad8:	34 07       	cpc	r19, r20
    2ada:	0c f4       	brge	.+2      	; 0x2ade <start_vertical_speed_control_right+0x2e>
    2adc:	c7 c0       	rjmp	.+398    	; 0x2c6c <start_vertical_speed_control_right+0x1bc>
		if(*pwm_right > 0) {
    2ade:	18 16       	cp	r1, r24
    2ae0:	19 06       	cpc	r1, r25
    2ae2:	0c f0       	brlt	.+2      	; 0x2ae6 <start_vertical_speed_control_right+0x36>
    2ae4:	68 c1       	rjmp	.+720    	; 0x2db6 <start_vertical_speed_control_right+0x306>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    2ae6:	88 e6       	ldi	r24, 0x68	; 104
    2ae8:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2aea:	82 1b       	sub	r24, r18
    2aec:	93 0b       	sbc	r25, r19
    2aee:	95 95       	asr	r25
    2af0:	87 95       	ror	r24
    2af2:	95 95       	asr	r25
    2af4:	87 95       	ror	r24
    2af6:	29 e1       	ldi	r18, 0x19	; 25
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	28 1b       	sub	r18, r24
    2afc:	39 0b       	sbc	r19, r25
    2afe:	30 93 06 02 	sts	0x0206, r19
    2b02:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    2b06:	c0 91 7b 05 	lds	r28, 0x057B
    2b0a:	d0 91 7c 05 	lds	r29, 0x057C
    2b0e:	d0 93 c5 04 	sts	0x04C5, r29
    2b12:	c0 93 c4 04 	sts	0x04C4, r28
	if(*pwm_right >= 0) {
    2b16:	80 81       	ld	r24, Z
    2b18:	91 81       	ldd	r25, Z+1	; 0x01
    2b1a:	97 fd       	sbrc	r25, 7
    2b1c:	2e c1       	rjmp	.+604    	; 0x2d7a <start_vertical_speed_control_right+0x2ca>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2b1e:	20 91 f1 02 	lds	r18, 0x02F1
    2b22:	30 91 f2 02 	lds	r19, 0x02F2
    2b26:	dc 01       	movw	r26, r24
    2b28:	a2 1b       	sub	r26, r18
    2b2a:	b3 0b       	sbc	r27, r19
    2b2c:	b0 93 7c 05 	sts	0x057C, r27
    2b30:	a0 93 7b 05 	sts	0x057B, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2b34:	80 91 09 03 	lds	r24, 0x0309
    2b38:	90 91 0a 03 	lds	r25, 0x030A
    2b3c:	8a 0f       	add	r24, r26
    2b3e:	9b 1f       	adc	r25, r27
    2b40:	90 93 0a 03 	sts	0x030A, r25
    2b44:	80 93 09 03 	sts	0x0309, r24

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    2b48:	66 e0       	ldi	r22, 0x06	; 6
    2b4a:	81 34       	cpi	r24, 0x41	; 65
    2b4c:	96 07       	cpc	r25, r22
    2b4e:	0c f4       	brge	.+2      	; 0x2b52 <start_vertical_speed_control_right+0xa2>
    2b50:	cb c0       	rjmp	.+406    	; 0x2ce8 <start_vertical_speed_control_right+0x238>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    2b52:	80 e4       	ldi	r24, 0x40	; 64
    2b54:	96 e0       	ldi	r25, 0x06	; 6
    2b56:	90 93 0a 03 	sts	0x030A, r25
    2b5a:	80 93 09 03 	sts	0x0309, r24
    2b5e:	40 ec       	ldi	r20, 0xC0	; 192
    2b60:	c4 2e       	mov	r12, r20
    2b62:	42 e1       	ldi	r20, 0x12	; 18
    2b64:	d4 2e       	mov	r13, r20
    2b66:	e1 2c       	mov	r14, r1
    2b68:	f1 2c       	mov	r15, r1
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2b6a:	00 81       	ld	r16, Z
    2b6c:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    2b6e:	9d 01       	movw	r18, r26
    2b70:	22 0f       	add	r18, r18
    2b72:	33 1f       	adc	r19, r19
    2b74:	2a 0f       	add	r18, r26
    2b76:	3b 1f       	adc	r19, r27
    2b78:	22 0f       	add	r18, r18
    2b7a:	33 1f       	adc	r19, r19
    2b7c:	22 0f       	add	r18, r18
    2b7e:	33 1f       	adc	r19, r19
    2b80:	22 0f       	add	r18, r18
    2b82:	33 1f       	adc	r19, r19
    2b84:	2a 0f       	add	r18, r26
    2b86:	3b 1f       	adc	r19, r27
    2b88:	44 27       	eor	r20, r20
    2b8a:	37 fd       	sbrc	r19, 7
    2b8c:	40 95       	com	r20
    2b8e:	54 2f       	mov	r21, r20
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2b90:	80 91 05 02 	lds	r24, 0x0205
    2b94:	90 91 06 02 	lds	r25, 0x0206
    2b98:	08 9f       	mul	r16, r24
    2b9a:	b0 01       	movw	r22, r0
    2b9c:	09 9f       	mul	r16, r25
    2b9e:	70 0d       	add	r23, r0
    2ba0:	18 9f       	mul	r17, r24
    2ba2:	70 0d       	add	r23, r0
    2ba4:	11 24       	eor	r1, r1
    2ba6:	88 27       	eor	r24, r24
    2ba8:	77 fd       	sbrc	r23, 7
    2baa:	80 95       	com	r24
    2bac:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    2bae:	26 0f       	add	r18, r22
    2bb0:	37 1f       	adc	r19, r23
    2bb2:	48 1f       	adc	r20, r24
    2bb4:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    2bb6:	ac 1b       	sub	r26, r28
    2bb8:	bd 0b       	sbc	r27, r29
    2bba:	aa 0f       	add	r26, r26
    2bbc:	bb 1f       	adc	r27, r27
    2bbe:	bd 01       	movw	r22, r26
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	aa 27       	eor	r26, r26
    2bc4:	97 fd       	sbrc	r25, 7
    2bc6:	a0 95       	com	r26
    2bc8:	ba 2f       	mov	r27, r26
    2bca:	28 0f       	add	r18, r24
    2bcc:	39 1f       	adc	r19, r25
    2bce:	4a 1f       	adc	r20, r26
    2bd0:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);
    2bd2:	2c 0d       	add	r18, r12
    2bd4:	3d 1d       	adc	r19, r13
    2bd6:	4e 1d       	adc	r20, r14
    2bd8:	5f 1d       	adc	r21, r15
    2bda:	20 93 ff 02 	sts	0x02FF, r18
    2bde:	30 93 00 03 	sts	0x0300, r19
    2be2:	40 93 01 03 	sts	0x0301, r20
    2be6:	50 93 02 03 	sts	0x0302, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2bea:	57 fd       	sbrc	r21, 7
    2bec:	9d c0       	rjmp	.+314    	; 0x2d28 <start_vertical_speed_control_right+0x278>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    2bee:	12 16       	cp	r1, r18
    2bf0:	13 06       	cpc	r1, r19
    2bf2:	14 06       	cpc	r1, r20
    2bf4:	15 06       	cpc	r1, r21
    2bf6:	0c f0       	brlt	.+2      	; 0x2bfa <start_vertical_speed_control_right+0x14a>
    2bf8:	a4 c0       	rjmp	.+328    	; 0x2d42 <start_vertical_speed_control_right+0x292>
    2bfa:	17 fd       	sbrc	r17, 7
    2bfc:	c9 c0       	rjmp	.+402    	; 0x2d90 <start_vertical_speed_control_right+0x2e0>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2bfe:	21 3c       	cpi	r18, 0xC1	; 193
    2c00:	7d e5       	ldi	r23, 0x5D	; 93
    2c02:	37 07       	cpc	r19, r23
    2c04:	70 e0       	ldi	r23, 0x00	; 0
    2c06:	47 07       	cpc	r20, r23
    2c08:	70 e0       	ldi	r23, 0x00	; 0
    2c0a:	57 07       	cpc	r21, r23
    2c0c:	0c f4       	brge	.+2      	; 0x2c10 <start_vertical_speed_control_right+0x160>
    2c0e:	99 c0       	rjmp	.+306    	; 0x2d42 <start_vertical_speed_control_right+0x292>
    2c10:	80 ec       	ldi	r24, 0xC0	; 192
    2c12:	9d e5       	ldi	r25, 0x5D	; 93
    2c14:	a0 e0       	ldi	r26, 0x00	; 0
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	80 93 ff 02 	sts	0x02FF, r24
    2c1c:	90 93 00 03 	sts	0x0300, r25
    2c20:	a0 93 01 03 	sts	0x0301, r26
    2c24:	b0 93 02 03 	sts	0x0302, r27
    2c28:	2c ed       	ldi	r18, 0xDC	; 220
    2c2a:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    2c2c:	31 83       	std	Z+1, r19	; 0x01
    2c2e:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    2c30:	80 91 e7 02 	lds	r24, 0x02E7
    2c34:	90 91 e8 02 	lds	r25, 0x02E8
    2c38:	18 16       	cp	r1, r24
    2c3a:	19 06       	cpc	r1, r25
    2c3c:	0c f0       	brlt	.+2      	; 0x2c40 <start_vertical_speed_control_right+0x190>
    2c3e:	98 c0       	rjmp	.+304    	; 0x2d70 <start_vertical_speed_control_right+0x2c0>
		*pwm_right += 1;
    2c40:	2f 5f       	subi	r18, 0xFF	; 255
    2c42:	3f 4f       	sbci	r19, 0xFF	; 255
    2c44:	31 83       	std	Z+1, r19	; 0x01
    2c46:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2c48:	42 e0       	ldi	r20, 0x02	; 2
    2c4a:	21 30       	cpi	r18, 0x01	; 1
    2c4c:	34 07       	cpc	r19, r20
    2c4e:	0c f4       	brge	.+2      	; 0x2c52 <start_vertical_speed_control_right+0x1a2>
    2c50:	41 c0       	rjmp	.+130    	; 0x2cd4 <start_vertical_speed_control_right+0x224>
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	92 e0       	ldi	r25, 0x02	; 2
    2c56:	91 83       	std	Z+1, r25	; 0x01
    2c58:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	1f 91       	pop	r17
    2c60:	0f 91       	pop	r16
    2c62:	ff 90       	pop	r15
    2c64:	ef 90       	pop	r14
    2c66:	df 90       	pop	r13
    2c68:	cf 90       	pop	r12
    2c6a:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2c6c:	24 3b       	cpi	r18, 0xB4	; 180
    2c6e:	31 05       	cpc	r19, r1
    2c70:	94 f4       	brge	.+36     	; 0x2c96 <start_vertical_speed_control_right+0x1e6>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2c72:	2a 35       	cpi	r18, 0x5A	; 90
    2c74:	31 05       	cpc	r19, r1
    2c76:	7c f4       	brge	.+30     	; 0x2c96 <start_vertical_speed_control_right+0x1e6>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    2c78:	18 16       	cp	r1, r24
    2c7a:	19 06       	cpc	r1, r25
    2c7c:	0c f0       	brlt	.+2      	; 0x2c80 <start_vertical_speed_control_right+0x1d0>
    2c7e:	a9 c0       	rjmp	.+338    	; 0x2dd2 <start_vertical_speed_control_right+0x322>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    2c80:	35 95       	asr	r19
    2c82:	27 95       	ror	r18
    2c84:	35 95       	asr	r19
    2c86:	27 95       	ror	r18
    2c88:	27 5e       	subi	r18, 0xE7	; 231
    2c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c8c:	30 93 06 02 	sts	0x0206, r19
    2c90:	20 93 05 02 	sts	0x0205, r18
    2c94:	38 cf       	rjmp	.-400    	; 0x2b06 <start_vertical_speed_control_right+0x56>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    2c96:	18 16       	cp	r1, r24
    2c98:	19 06       	cpc	r1, r25
    2c9a:	0c f0       	brlt	.+2      	; 0x2c9e <start_vertical_speed_control_right+0x1ee>
    2c9c:	42 c0       	rjmp	.+132    	; 0x2d22 <start_vertical_speed_control_right+0x272>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    2c9e:	84 eb       	ldi	r24, 0xB4	; 180
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	82 1b       	sub	r24, r18
    2ca4:	93 0b       	sbc	r25, r19
    2ca6:	95 95       	asr	r25
    2ca8:	87 95       	ror	r24
    2caa:	95 95       	asr	r25
    2cac:	87 95       	ror	r24
    2cae:	49 96       	adiw	r24, 0x19	; 25
    2cb0:	90 93 06 02 	sts	0x0206, r25
    2cb4:	80 93 05 02 	sts	0x0205, r24
    2cb8:	26 cf       	rjmp	.-436    	; 0x2b06 <start_vertical_speed_control_right+0x56>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    2cba:	10 92 0a 03 	sts	0x030A, r1
    2cbe:	10 92 09 03 	sts	0x0309, r1
		delta_right_speed_current = 0;
    2cc2:	10 92 7c 05 	sts	0x057C, r1
    2cc6:	10 92 7b 05 	sts	0x057B, r1
		delta_right_speed_prev = 0;
    2cca:	10 92 c5 04 	sts	0x04C5, r1
    2cce:	10 92 c4 04 	sts	0x04C4, r1
		return;
    2cd2:	c3 cf       	rjmp	.-122    	; 0x2c5a <start_vertical_speed_control_right+0x1aa>
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    2cd4:	6e ef       	ldi	r22, 0xFE	; 254
    2cd6:	20 30       	cpi	r18, 0x00	; 0
    2cd8:	36 07       	cpc	r19, r22
    2cda:	0c f0       	brlt	.+2      	; 0x2cde <start_vertical_speed_control_right+0x22e>
    2cdc:	be cf       	rjmp	.-132    	; 0x2c5a <start_vertical_speed_control_right+0x1aa>
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	9e ef       	ldi	r25, 0xFE	; 254
    2ce2:	91 83       	std	Z+1, r25	; 0x01
    2ce4:	80 83       	st	Z, r24
    2ce6:	b9 cf       	rjmp	.-142    	; 0x2c5a <start_vertical_speed_control_right+0x1aa>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2ce8:	79 ef       	ldi	r23, 0xF9	; 249
    2cea:	80 3c       	cpi	r24, 0xC0	; 192
    2cec:	97 07       	cpc	r25, r23
    2cee:	7c f4       	brge	.+30     	; 0x2d0e <start_vertical_speed_control_right+0x25e>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    2cf0:	80 ec       	ldi	r24, 0xC0	; 192
    2cf2:	99 ef       	ldi	r25, 0xF9	; 249
    2cf4:	90 93 0a 03 	sts	0x030A, r25
    2cf8:	80 93 09 03 	sts	0x0309, r24
    2cfc:	20 e4       	ldi	r18, 0x40	; 64
    2cfe:	c2 2e       	mov	r12, r18
    2d00:	2d ee       	ldi	r18, 0xED	; 237
    2d02:	d2 2e       	mov	r13, r18
    2d04:	2f ef       	ldi	r18, 0xFF	; 255
    2d06:	e2 2e       	mov	r14, r18
    2d08:	2f ef       	ldi	r18, 0xFF	; 255
    2d0a:	f2 2e       	mov	r15, r18
    2d0c:	2e cf       	rjmp	.-420    	; 0x2b6a <start_vertical_speed_control_right+0xba>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    2d0e:	6c 01       	movw	r12, r24
    2d10:	cc 0c       	add	r12, r12
    2d12:	dd 1c       	adc	r13, r13
    2d14:	c8 0e       	add	r12, r24
    2d16:	d9 1e       	adc	r13, r25
    2d18:	ee 24       	eor	r14, r14
    2d1a:	d7 fc       	sbrc	r13, 7
    2d1c:	e0 94       	com	r14
    2d1e:	fe 2c       	mov	r15, r14
    2d20:	24 cf       	rjmp	.-440    	; 0x2b6a <start_vertical_speed_control_right+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2d22:	84 eb       	ldi	r24, 0xB4	; 180
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	e1 ce       	rjmp	.-574    	; 0x2aea <start_vertical_speed_control_right+0x3a>
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2d28:	17 fd       	sbrc	r17, 7
    2d2a:	0b c0       	rjmp	.+22     	; 0x2d42 <start_vertical_speed_control_right+0x292>
		pwm_right_speed_controller = 0;
    2d2c:	10 92 ff 02 	sts	0x02FF, r1
    2d30:	10 92 00 03 	sts	0x0300, r1
    2d34:	10 92 01 03 	sts	0x0301, r1
    2d38:	10 92 02 03 	sts	0x0302, r1
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2d42:	20 34       	cpi	r18, 0x40	; 64
    2d44:	82 ea       	ldi	r24, 0xA2	; 162
    2d46:	38 07       	cpc	r19, r24
    2d48:	8f ef       	ldi	r24, 0xFF	; 255
    2d4a:	48 07       	cpc	r20, r24
    2d4c:	8f ef       	ldi	r24, 0xFF	; 255
    2d4e:	58 07       	cpc	r21, r24
    2d50:	54 f5       	brge	.+84     	; 0x2da6 <start_vertical_speed_control_right+0x2f6>
    2d52:	80 e4       	ldi	r24, 0x40	; 64
    2d54:	92 ea       	ldi	r25, 0xA2	; 162
    2d56:	af ef       	ldi	r26, 0xFF	; 255
    2d58:	bf ef       	ldi	r27, 0xFF	; 255
    2d5a:	80 93 ff 02 	sts	0x02FF, r24
    2d5e:	90 93 00 03 	sts	0x0300, r25
    2d62:	a0 93 01 03 	sts	0x0301, r26
    2d66:	b0 93 02 03 	sts	0x0302, r27
    2d6a:	24 e2       	ldi	r18, 0x24	; 36
    2d6c:	3a ef       	ldi	r19, 0xFA	; 250
    2d6e:	5e cf       	rjmp	.-324    	; 0x2c2c <start_vertical_speed_control_right+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    2d70:	21 50       	subi	r18, 0x01	; 1
    2d72:	30 40       	sbci	r19, 0x00	; 0
    2d74:	31 83       	std	Z+1, r19	; 0x01
    2d76:	20 83       	st	Z, r18
    2d78:	67 cf       	rjmp	.-306    	; 0x2c48 <start_vertical_speed_control_right+0x198>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    2d7a:	a0 91 f1 02 	lds	r26, 0x02F1
    2d7e:	b0 91 f2 02 	lds	r27, 0x02F2
    2d82:	a8 0f       	add	r26, r24
    2d84:	b9 1f       	adc	r27, r25
    2d86:	b0 93 7c 05 	sts	0x057C, r27
    2d8a:	a0 93 7b 05 	sts	0x057B, r26
    2d8e:	d2 ce       	rjmp	.-604    	; 0x2b34 <start_vertical_speed_control_right+0x84>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    2d90:	10 92 ff 02 	sts	0x02FF, r1
    2d94:	10 92 00 03 	sts	0x0300, r1
    2d98:	10 92 01 03 	sts	0x0301, r1
    2d9c:	10 92 02 03 	sts	0x0302, r1
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2da6:	64 e0       	ldi	r22, 0x04	; 4
    2da8:	55 95       	asr	r21
    2daa:	47 95       	ror	r20
    2dac:	37 95       	ror	r19
    2dae:	27 95       	ror	r18
    2db0:	6a 95       	dec	r22
    2db2:	d1 f7       	brne	.-12     	; 0x2da8 <start_vertical_speed_control_right+0x2f8>
    2db4:	3b cf       	rjmp	.-394    	; 0x2c2c <start_vertical_speed_control_right+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    2db6:	88 e6       	ldi	r24, 0x68	; 104
    2db8:	91 e0       	ldi	r25, 0x01	; 1
    2dba:	82 1b       	sub	r24, r18
    2dbc:	93 0b       	sbc	r25, r19
    2dbe:	95 95       	asr	r25
    2dc0:	87 95       	ror	r24
    2dc2:	95 95       	asr	r25
    2dc4:	87 95       	ror	r24
    2dc6:	49 96       	adiw	r24, 0x19	; 25
    2dc8:	90 93 06 02 	sts	0x0206, r25
    2dcc:	80 93 05 02 	sts	0x0205, r24
    2dd0:	9a ce       	rjmp	.-716    	; 0x2b06 <start_vertical_speed_control_right+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    2dd2:	35 95       	asr	r19
    2dd4:	27 95       	ror	r18
    2dd6:	35 95       	asr	r19
    2dd8:	27 95       	ror	r18
    2dda:	89 e1       	ldi	r24, 0x19	; 25
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	82 1b       	sub	r24, r18
    2de0:	93 0b       	sbc	r25, r19
    2de2:	90 93 06 02 	sts	0x0206, r25
    2de6:	80 93 05 02 	sts	0x0205, r24
    2dea:	8d ce       	rjmp	.-742    	; 0x2b06 <start_vertical_speed_control_right+0x56>

00002dec <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    2dec:	cf 92       	push	r12
    2dee:	df 92       	push	r13
    2df0:	ef 92       	push	r14
    2df2:	ff 92       	push	r15
    2df4:	0f 93       	push	r16
    2df6:	1f 93       	push	r17
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    2dfe:	80 81       	ld	r24, Z
    2e00:	91 81       	ldd	r25, Z+1	; 0x01
    2e02:	00 97       	sbiw	r24, 0x00	; 0
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <start_horizontal_speed_control_right+0x1c>
    2e06:	b8 c0       	rjmp	.+368    	; 0x2f78 <start_horizontal_speed_control_right+0x18c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    2e08:	c0 91 7b 05 	lds	r28, 0x057B
    2e0c:	d0 91 7c 05 	lds	r29, 0x057C
    2e10:	d0 93 c5 04 	sts	0x04C5, r29
    2e14:	c0 93 c4 04 	sts	0x04C4, r28
	if(*pwm_right >= 0) {
    2e18:	80 81       	ld	r24, Z
    2e1a:	91 81       	ldd	r25, Z+1	; 0x01
    2e1c:	97 fd       	sbrc	r25, 7
    2e1e:	cd c0       	rjmp	.+410    	; 0x2fba <start_horizontal_speed_control_right+0x1ce>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2e20:	20 91 f1 02 	lds	r18, 0x02F1
    2e24:	30 91 f2 02 	lds	r19, 0x02F2
    2e28:	dc 01       	movw	r26, r24
    2e2a:	a2 1b       	sub	r26, r18
    2e2c:	b3 0b       	sbc	r27, r19
    2e2e:	b0 93 7c 05 	sts	0x057C, r27
    2e32:	a0 93 7b 05 	sts	0x057B, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2e36:	c0 90 09 03 	lds	r12, 0x0309
    2e3a:	d0 90 0a 03 	lds	r13, 0x030A
    2e3e:	ca 0e       	add	r12, r26
    2e40:	db 1e       	adc	r13, r27
    2e42:	d0 92 0a 03 	sts	0x030A, r13
    2e46:	c0 92 09 03 	sts	0x0309, r12

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    2e4a:	81 e4       	ldi	r24, 0x41	; 65
    2e4c:	c8 16       	cp	r12, r24
    2e4e:	86 e0       	ldi	r24, 0x06	; 6
    2e50:	d8 06       	cpc	r13, r24
    2e52:	0c f4       	brge	.+2      	; 0x2e56 <start_horizontal_speed_control_right+0x6a>
    2e54:	9e c0       	rjmp	.+316    	; 0x2f92 <start_horizontal_speed_control_right+0x1a6>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    2e56:	80 e4       	ldi	r24, 0x40	; 64
    2e58:	96 e0       	ldi	r25, 0x06	; 6
    2e5a:	90 93 0a 03 	sts	0x030A, r25
    2e5e:	80 93 09 03 	sts	0x0309, r24
    2e62:	10 e8       	ldi	r17, 0x80	; 128
    2e64:	c1 2e       	mov	r12, r17
    2e66:	1c e0       	ldi	r17, 0x0C	; 12
    2e68:	d1 2e       	mov	r13, r17
    2e6a:	e1 2c       	mov	r14, r1
    2e6c:	f1 2c       	mov	r15, r1
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    2e6e:	00 81       	ld	r16, Z
    2e70:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    2e72:	cd 01       	movw	r24, r26
    2e74:	88 0f       	add	r24, r24
    2e76:	99 1f       	adc	r25, r25
    2e78:	8a 0f       	add	r24, r26
    2e7a:	9b 1f       	adc	r25, r27
    2e7c:	9c 01       	movw	r18, r24
    2e7e:	22 0f       	add	r18, r18
    2e80:	33 1f       	adc	r19, r19
    2e82:	22 0f       	add	r18, r18
    2e84:	33 1f       	adc	r19, r19
    2e86:	28 0f       	add	r18, r24
    2e88:	39 1f       	adc	r19, r25
    2e8a:	44 27       	eor	r20, r20
    2e8c:	37 fd       	sbrc	r19, 7
    2e8e:	40 95       	com	r20
    2e90:	54 2f       	mov	r21, r20
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    2e92:	b8 01       	movw	r22, r16
    2e94:	66 0f       	add	r22, r22
    2e96:	77 1f       	adc	r23, r23
    2e98:	66 0f       	add	r22, r22
    2e9a:	77 1f       	adc	r23, r23
    2e9c:	66 0f       	add	r22, r22
    2e9e:	77 1f       	adc	r23, r23
    2ea0:	88 27       	eor	r24, r24
    2ea2:	77 fd       	sbrc	r23, 7
    2ea4:	80 95       	com	r24
    2ea6:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    2ea8:	26 0f       	add	r18, r22
    2eaa:	37 1f       	adc	r19, r23
    2eac:	48 1f       	adc	r20, r24
    2eae:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    2eb0:	ac 1b       	sub	r26, r28
    2eb2:	bd 0b       	sbc	r27, r29
    2eb4:	cd 01       	movw	r24, r26
    2eb6:	88 0f       	add	r24, r24
    2eb8:	99 1f       	adc	r25, r25
    2eba:	8a 0f       	add	r24, r26
    2ebc:	9b 1f       	adc	r25, r27
    2ebe:	aa 27       	eor	r26, r26
    2ec0:	97 fd       	sbrc	r25, 7
    2ec2:	a0 95       	com	r26
    2ec4:	ba 2f       	mov	r27, r26
    2ec6:	28 0f       	add	r18, r24
    2ec8:	39 1f       	adc	r19, r25
    2eca:	4a 1f       	adc	r20, r26
    2ecc:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);
    2ece:	2c 0d       	add	r18, r12
    2ed0:	3d 1d       	adc	r19, r13
    2ed2:	4e 1d       	adc	r20, r14
    2ed4:	5f 1d       	adc	r21, r15
    2ed6:	20 93 ff 02 	sts	0x02FF, r18
    2eda:	30 93 00 03 	sts	0x0300, r19
    2ede:	40 93 01 03 	sts	0x0301, r20
    2ee2:	50 93 02 03 	sts	0x0302, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2ee6:	57 fd       	sbrc	r21, 7
    2ee8:	7a c0       	rjmp	.+244    	; 0x2fde <start_horizontal_speed_control_right+0x1f2>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    2eea:	12 16       	cp	r1, r18
    2eec:	13 06       	cpc	r1, r19
    2eee:	14 06       	cpc	r1, r20
    2ef0:	15 06       	cpc	r1, r21
    2ef2:	0c f0       	brlt	.+2      	; 0x2ef6 <start_horizontal_speed_control_right+0x10a>
    2ef4:	81 c0       	rjmp	.+258    	; 0x2ff8 <start_horizontal_speed_control_right+0x20c>
    2ef6:	17 fd       	sbrc	r17, 7
    2ef8:	ad c0       	rjmp	.+346    	; 0x3054 <start_horizontal_speed_control_right+0x268>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2efa:	21 3c       	cpi	r18, 0xC1	; 193
    2efc:	8d e5       	ldi	r24, 0x5D	; 93
    2efe:	38 07       	cpc	r19, r24
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	48 07       	cpc	r20, r24
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	58 07       	cpc	r21, r24
    2f08:	0c f4       	brge	.+2      	; 0x2f0c <start_horizontal_speed_control_right+0x120>
    2f0a:	76 c0       	rjmp	.+236    	; 0x2ff8 <start_horizontal_speed_control_right+0x20c>
    2f0c:	80 ec       	ldi	r24, 0xC0	; 192
    2f0e:	9d e5       	ldi	r25, 0x5D	; 93
    2f10:	a0 e0       	ldi	r26, 0x00	; 0
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	80 93 ff 02 	sts	0x02FF, r24
    2f18:	90 93 00 03 	sts	0x0300, r25
    2f1c:	a0 93 01 03 	sts	0x0301, r26
    2f20:	b0 93 02 03 	sts	0x0302, r27
    2f24:	2c ed       	ldi	r18, 0xDC	; 220
    2f26:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    2f28:	31 83       	std	Z+1, r19	; 0x01
    2f2a:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    2f2c:	80 91 e7 02 	lds	r24, 0x02E7
    2f30:	90 91 e8 02 	lds	r25, 0x02E8
    2f34:	18 16       	cp	r1, r24
    2f36:	19 06       	cpc	r1, r25
    2f38:	0c f0       	brlt	.+2      	; 0x2f3c <start_horizontal_speed_control_right+0x150>
    2f3a:	87 c0       	rjmp	.+270    	; 0x304a <start_horizontal_speed_control_right+0x25e>
		*pwm_right += 1;
    2f3c:	2f 5f       	subi	r18, 0xFF	; 255
    2f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f40:	31 83       	std	Z+1, r19	; 0x01
    2f42:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    2f44:	12 16       	cp	r1, r18
    2f46:	13 06       	cpc	r1, r19
    2f48:	0c f0       	brlt	.+2      	; 0x2f4c <start_horizontal_speed_control_right+0x160>
    2f4a:	6d c0       	rjmp	.+218    	; 0x3026 <start_horizontal_speed_control_right+0x23a>
		*pwm_right += 30;
    2f4c:	22 5e       	subi	r18, 0xE2	; 226
    2f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f50:	31 83       	std	Z+1, r19	; 0x01
    2f52:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2f54:	82 e0       	ldi	r24, 0x02	; 2
    2f56:	21 30       	cpi	r18, 0x01	; 1
    2f58:	38 07       	cpc	r19, r24
    2f5a:	0c f4       	brge	.+2      	; 0x2f5e <start_horizontal_speed_control_right+0x172>
    2f5c:	6c c0       	rjmp	.+216    	; 0x3036 <start_horizontal_speed_control_right+0x24a>
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
    2f60:	92 e0       	ldi	r25, 0x02	; 2
    2f62:	91 83       	std	Z+1, r25	; 0x01
    2f64:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    2f66:	df 91       	pop	r29
    2f68:	cf 91       	pop	r28
    2f6a:	1f 91       	pop	r17
    2f6c:	0f 91       	pop	r16
    2f6e:	ff 90       	pop	r15
    2f70:	ef 90       	pop	r14
    2f72:	df 90       	pop	r13
    2f74:	cf 90       	pop	r12
    2f76:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    2f78:	10 92 0a 03 	sts	0x030A, r1
    2f7c:	10 92 09 03 	sts	0x0309, r1
		delta_right_speed_current = 0;
    2f80:	10 92 7c 05 	sts	0x057C, r1
    2f84:	10 92 7b 05 	sts	0x057B, r1
		delta_right_speed_prev = 0;
    2f88:	10 92 c5 04 	sts	0x04C5, r1
    2f8c:	10 92 c4 04 	sts	0x04C4, r1
		return;
    2f90:	ea cf       	rjmp	.-44     	; 0x2f66 <start_horizontal_speed_control_right+0x17a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2f92:	80 ec       	ldi	r24, 0xC0	; 192
    2f94:	c8 16       	cp	r12, r24
    2f96:	89 ef       	ldi	r24, 0xF9	; 249
    2f98:	d8 06       	cpc	r13, r24
    2f9a:	d4 f4       	brge	.+52     	; 0x2fd0 <start_horizontal_speed_control_right+0x1e4>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    2f9c:	80 ec       	ldi	r24, 0xC0	; 192
    2f9e:	99 ef       	ldi	r25, 0xF9	; 249
    2fa0:	90 93 0a 03 	sts	0x030A, r25
    2fa4:	80 93 09 03 	sts	0x0309, r24
    2fa8:	60 e8       	ldi	r22, 0x80	; 128
    2faa:	c6 2e       	mov	r12, r22
    2fac:	63 ef       	ldi	r22, 0xF3	; 243
    2fae:	d6 2e       	mov	r13, r22
    2fb0:	6f ef       	ldi	r22, 0xFF	; 255
    2fb2:	e6 2e       	mov	r14, r22
    2fb4:	6f ef       	ldi	r22, 0xFF	; 255
    2fb6:	f6 2e       	mov	r15, r22
    2fb8:	5a cf       	rjmp	.-332    	; 0x2e6e <start_horizontal_speed_control_right+0x82>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    2fba:	a0 91 f1 02 	lds	r26, 0x02F1
    2fbe:	b0 91 f2 02 	lds	r27, 0x02F2
    2fc2:	a8 0f       	add	r26, r24
    2fc4:	b9 1f       	adc	r27, r25
    2fc6:	b0 93 7c 05 	sts	0x057C, r27
    2fca:	a0 93 7b 05 	sts	0x057B, r26
    2fce:	33 cf       	rjmp	.-410    	; 0x2e36 <start_horizontal_speed_control_right+0x4a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    2fd0:	cc 0c       	add	r12, r12
    2fd2:	dd 1c       	adc	r13, r13
    2fd4:	ee 24       	eor	r14, r14
    2fd6:	d7 fc       	sbrc	r13, 7
    2fd8:	e0 94       	com	r14
    2fda:	fe 2c       	mov	r15, r14
    2fdc:	48 cf       	rjmp	.-368    	; 0x2e6e <start_horizontal_speed_control_right+0x82>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2fde:	17 fd       	sbrc	r17, 7
    2fe0:	0b c0       	rjmp	.+22     	; 0x2ff8 <start_horizontal_speed_control_right+0x20c>
		pwm_right_speed_controller = 0;
    2fe2:	10 92 ff 02 	sts	0x02FF, r1
    2fe6:	10 92 00 03 	sts	0x0300, r1
    2fea:	10 92 01 03 	sts	0x0301, r1
    2fee:	10 92 02 03 	sts	0x0302, r1
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    2ff8:	20 34       	cpi	r18, 0x40	; 64
    2ffa:	82 ea       	ldi	r24, 0xA2	; 162
    2ffc:	38 07       	cpc	r19, r24
    2ffe:	8f ef       	ldi	r24, 0xFF	; 255
    3000:	48 07       	cpc	r20, r24
    3002:	8f ef       	ldi	r24, 0xFF	; 255
    3004:	58 07       	cpc	r21, r24
    3006:	8c f5       	brge	.+98     	; 0x306a <start_horizontal_speed_control_right+0x27e>
    3008:	80 e4       	ldi	r24, 0x40	; 64
    300a:	92 ea       	ldi	r25, 0xA2	; 162
    300c:	af ef       	ldi	r26, 0xFF	; 255
    300e:	bf ef       	ldi	r27, 0xFF	; 255
    3010:	80 93 ff 02 	sts	0x02FF, r24
    3014:	90 93 00 03 	sts	0x0300, r25
    3018:	a0 93 01 03 	sts	0x0301, r26
    301c:	b0 93 02 03 	sts	0x0302, r27
    3020:	24 e2       	ldi	r18, 0x24	; 36
    3022:	3a ef       	ldi	r19, 0xFA	; 250
    3024:	81 cf       	rjmp	.-254    	; 0x2f28 <start_horizontal_speed_control_right+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    3026:	21 15       	cp	r18, r1
    3028:	31 05       	cpc	r19, r1
    302a:	09 f4       	brne	.+2      	; 0x302e <start_horizontal_speed_control_right+0x242>
    302c:	9c cf       	rjmp	.-200    	; 0x2f66 <start_horizontal_speed_control_right+0x17a>
		*pwm_right -= 30;
    302e:	2e 51       	subi	r18, 0x1E	; 30
    3030:	30 40       	sbci	r19, 0x00	; 0
    3032:	31 83       	std	Z+1, r19	; 0x01
    3034:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3036:	8e ef       	ldi	r24, 0xFE	; 254
    3038:	20 30       	cpi	r18, 0x00	; 0
    303a:	38 07       	cpc	r19, r24
    303c:	0c f0       	brlt	.+2      	; 0x3040 <start_horizontal_speed_control_right+0x254>
    303e:	93 cf       	rjmp	.-218    	; 0x2f66 <start_horizontal_speed_control_right+0x17a>
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	9e ef       	ldi	r25, 0xFE	; 254
    3044:	91 83       	std	Z+1, r25	; 0x01
    3046:	80 83       	st	Z, r24
    3048:	8e cf       	rjmp	.-228    	; 0x2f66 <start_horizontal_speed_control_right+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    304a:	21 50       	subi	r18, 0x01	; 1
    304c:	30 40       	sbci	r19, 0x00	; 0
    304e:	31 83       	std	Z+1, r19	; 0x01
    3050:	20 83       	st	Z, r18
    3052:	78 cf       	rjmp	.-272    	; 0x2f44 <start_horizontal_speed_control_right+0x158>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    3054:	10 92 ff 02 	sts	0x02FF, r1
    3058:	10 92 00 03 	sts	0x0300, r1
    305c:	10 92 01 03 	sts	0x0301, r1
    3060:	10 92 02 03 	sts	0x0302, r1
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    306a:	14 e0       	ldi	r17, 0x04	; 4
    306c:	55 95       	asr	r21
    306e:	47 95       	ror	r20
    3070:	37 95       	ror	r19
    3072:	27 95       	ror	r18
    3074:	1a 95       	dec	r17
    3076:	d1 f7       	brne	.-12     	; 0x306c <start_horizontal_speed_control_right+0x280>
    3078:	57 cf       	rjmp	.-338    	; 0x2f28 <start_horizontal_speed_control_right+0x13c>

0000307a <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    307a:	cf 92       	push	r12
    307c:	df 92       	push	r13
    307e:	ef 92       	push	r14
    3080:	ff 92       	push	r15
    3082:	0f 93       	push	r16
    3084:	1f 93       	push	r17
    3086:	cf 93       	push	r28
    3088:	df 93       	push	r29
    308a:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    308c:	80 81       	ld	r24, Z
    308e:	91 81       	ldd	r25, Z+1	; 0x01
    3090:	00 97       	sbiw	r24, 0x00	; 0
    3092:	09 f4       	brne	.+2      	; 0x3096 <start_horizontal_speed_control_left+0x1c>
    3094:	b8 c0       	rjmp	.+368    	; 0x3206 <start_horizontal_speed_control_left+0x18c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    3096:	c0 91 c1 04 	lds	r28, 0x04C1
    309a:	d0 91 c2 04 	lds	r29, 0x04C2
    309e:	d0 93 6d 05 	sts	0x056D, r29
    30a2:	c0 93 6c 05 	sts	0x056C, r28
	if(*pwm_left >= 0) {
    30a6:	80 81       	ld	r24, Z
    30a8:	91 81       	ldd	r25, Z+1	; 0x01
    30aa:	97 fd       	sbrc	r25, 7
    30ac:	cd c0       	rjmp	.+410    	; 0x3248 <start_horizontal_speed_control_left+0x1ce>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    30ae:	20 91 ef 02 	lds	r18, 0x02EF
    30b2:	30 91 f0 02 	lds	r19, 0x02F0
    30b6:	dc 01       	movw	r26, r24
    30b8:	a2 1b       	sub	r26, r18
    30ba:	b3 0b       	sbc	r27, r19
    30bc:	b0 93 c2 04 	sts	0x04C2, r27
    30c0:	a0 93 c1 04 	sts	0x04C1, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    30c4:	c0 90 07 03 	lds	r12, 0x0307
    30c8:	d0 90 08 03 	lds	r13, 0x0308
    30cc:	ca 0e       	add	r12, r26
    30ce:	db 1e       	adc	r13, r27
    30d0:	d0 92 08 03 	sts	0x0308, r13
    30d4:	c0 92 07 03 	sts	0x0307, r12

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    30d8:	81 e4       	ldi	r24, 0x41	; 65
    30da:	c8 16       	cp	r12, r24
    30dc:	86 e0       	ldi	r24, 0x06	; 6
    30de:	d8 06       	cpc	r13, r24
    30e0:	0c f4       	brge	.+2      	; 0x30e4 <start_horizontal_speed_control_left+0x6a>
    30e2:	9e c0       	rjmp	.+316    	; 0x3220 <start_horizontal_speed_control_left+0x1a6>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    30e4:	80 e4       	ldi	r24, 0x40	; 64
    30e6:	96 e0       	ldi	r25, 0x06	; 6
    30e8:	90 93 08 03 	sts	0x0308, r25
    30ec:	80 93 07 03 	sts	0x0307, r24
    30f0:	10 e8       	ldi	r17, 0x80	; 128
    30f2:	c1 2e       	mov	r12, r17
    30f4:	1c e0       	ldi	r17, 0x0C	; 12
    30f6:	d1 2e       	mov	r13, r17
    30f8:	e1 2c       	mov	r14, r1
    30fa:	f1 2c       	mov	r15, r1
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    30fc:	00 81       	ld	r16, Z
    30fe:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    3100:	cd 01       	movw	r24, r26
    3102:	88 0f       	add	r24, r24
    3104:	99 1f       	adc	r25, r25
    3106:	8a 0f       	add	r24, r26
    3108:	9b 1f       	adc	r25, r27
    310a:	9c 01       	movw	r18, r24
    310c:	22 0f       	add	r18, r18
    310e:	33 1f       	adc	r19, r19
    3110:	22 0f       	add	r18, r18
    3112:	33 1f       	adc	r19, r19
    3114:	28 0f       	add	r18, r24
    3116:	39 1f       	adc	r19, r25
    3118:	44 27       	eor	r20, r20
    311a:	37 fd       	sbrc	r19, 7
    311c:	40 95       	com	r20
    311e:	54 2f       	mov	r21, r20
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    3120:	b8 01       	movw	r22, r16
    3122:	66 0f       	add	r22, r22
    3124:	77 1f       	adc	r23, r23
    3126:	66 0f       	add	r22, r22
    3128:	77 1f       	adc	r23, r23
    312a:	66 0f       	add	r22, r22
    312c:	77 1f       	adc	r23, r23
    312e:	88 27       	eor	r24, r24
    3130:	77 fd       	sbrc	r23, 7
    3132:	80 95       	com	r24
    3134:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    3136:	26 0f       	add	r18, r22
    3138:	37 1f       	adc	r19, r23
    313a:	48 1f       	adc	r20, r24
    313c:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    313e:	ac 1b       	sub	r26, r28
    3140:	bd 0b       	sbc	r27, r29
    3142:	cd 01       	movw	r24, r26
    3144:	88 0f       	add	r24, r24
    3146:	99 1f       	adc	r25, r25
    3148:	8a 0f       	add	r24, r26
    314a:	9b 1f       	adc	r25, r27
    314c:	aa 27       	eor	r26, r26
    314e:	97 fd       	sbrc	r25, 7
    3150:	a0 95       	com	r26
    3152:	ba 2f       	mov	r27, r26
    3154:	28 0f       	add	r18, r24
    3156:	39 1f       	adc	r19, r25
    3158:	4a 1f       	adc	r20, r26
    315a:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);
    315c:	2c 0d       	add	r18, r12
    315e:	3d 1d       	adc	r19, r13
    3160:	4e 1d       	adc	r20, r14
    3162:	5f 1d       	adc	r21, r15
    3164:	20 93 03 03 	sts	0x0303, r18
    3168:	30 93 04 03 	sts	0x0304, r19
    316c:	40 93 05 03 	sts	0x0305, r20
    3170:	50 93 06 03 	sts	0x0306, r21

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3174:	57 fd       	sbrc	r21, 7
    3176:	7a c0       	rjmp	.+244    	; 0x326c <start_horizontal_speed_control_left+0x1f2>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    3178:	12 16       	cp	r1, r18
    317a:	13 06       	cpc	r1, r19
    317c:	14 06       	cpc	r1, r20
    317e:	15 06       	cpc	r1, r21
    3180:	0c f0       	brlt	.+2      	; 0x3184 <start_horizontal_speed_control_left+0x10a>
    3182:	81 c0       	rjmp	.+258    	; 0x3286 <start_horizontal_speed_control_left+0x20c>
    3184:	17 fd       	sbrc	r17, 7
    3186:	ad c0       	rjmp	.+346    	; 0x32e2 <start_horizontal_speed_control_left+0x268>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    3188:	21 3c       	cpi	r18, 0xC1	; 193
    318a:	8d e5       	ldi	r24, 0x5D	; 93
    318c:	38 07       	cpc	r19, r24
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	48 07       	cpc	r20, r24
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	58 07       	cpc	r21, r24
    3196:	0c f4       	brge	.+2      	; 0x319a <start_horizontal_speed_control_left+0x120>
    3198:	76 c0       	rjmp	.+236    	; 0x3286 <start_horizontal_speed_control_left+0x20c>
    319a:	80 ec       	ldi	r24, 0xC0	; 192
    319c:	9d e5       	ldi	r25, 0x5D	; 93
    319e:	a0 e0       	ldi	r26, 0x00	; 0
    31a0:	b0 e0       	ldi	r27, 0x00	; 0
    31a2:	80 93 03 03 	sts	0x0303, r24
    31a6:	90 93 04 03 	sts	0x0304, r25
    31aa:	a0 93 05 03 	sts	0x0305, r26
    31ae:	b0 93 06 03 	sts	0x0306, r27
    31b2:	2c ed       	ldi	r18, 0xDC	; 220
    31b4:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    31b6:	31 83       	std	Z+1, r19	; 0x01
    31b8:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    31ba:	80 91 e9 02 	lds	r24, 0x02E9
    31be:	90 91 ea 02 	lds	r25, 0x02EA
    31c2:	18 16       	cp	r1, r24
    31c4:	19 06       	cpc	r1, r25
    31c6:	0c f0       	brlt	.+2      	; 0x31ca <start_horizontal_speed_control_left+0x150>
    31c8:	87 c0       	rjmp	.+270    	; 0x32d8 <start_horizontal_speed_control_left+0x25e>
		*pwm_left += 1;
    31ca:	2f 5f       	subi	r18, 0xFF	; 255
    31cc:	3f 4f       	sbci	r19, 0xFF	; 255
    31ce:	31 83       	std	Z+1, r19	; 0x01
    31d0:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    31d2:	12 16       	cp	r1, r18
    31d4:	13 06       	cpc	r1, r19
    31d6:	0c f0       	brlt	.+2      	; 0x31da <start_horizontal_speed_control_left+0x160>
    31d8:	6d c0       	rjmp	.+218    	; 0x32b4 <start_horizontal_speed_control_left+0x23a>
		*pwm_left += 30;
    31da:	22 5e       	subi	r18, 0xE2	; 226
    31dc:	3f 4f       	sbci	r19, 0xFF	; 255
    31de:	31 83       	std	Z+1, r19	; 0x01
    31e0:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    31e2:	82 e0       	ldi	r24, 0x02	; 2
    31e4:	21 30       	cpi	r18, 0x01	; 1
    31e6:	38 07       	cpc	r19, r24
    31e8:	0c f4       	brge	.+2      	; 0x31ec <start_horizontal_speed_control_left+0x172>
    31ea:	6c c0       	rjmp	.+216    	; 0x32c4 <start_horizontal_speed_control_left+0x24a>
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	92 e0       	ldi	r25, 0x02	; 2
    31f0:	91 83       	std	Z+1, r25	; 0x01
    31f2:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    31f4:	df 91       	pop	r29
    31f6:	cf 91       	pop	r28
    31f8:	1f 91       	pop	r17
    31fa:	0f 91       	pop	r16
    31fc:	ff 90       	pop	r15
    31fe:	ef 90       	pop	r14
    3200:	df 90       	pop	r13
    3202:	cf 90       	pop	r12
    3204:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    3206:	10 92 08 03 	sts	0x0308, r1
    320a:	10 92 07 03 	sts	0x0307, r1
		delta_left_speed_current = 0;
    320e:	10 92 c2 04 	sts	0x04C2, r1
    3212:	10 92 c1 04 	sts	0x04C1, r1
		delta_left_speed_prev = 0;
    3216:	10 92 6d 05 	sts	0x056D, r1
    321a:	10 92 6c 05 	sts	0x056C, r1
		return;
    321e:	ea cf       	rjmp	.-44     	; 0x31f4 <start_horizontal_speed_control_left+0x17a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3220:	80 ec       	ldi	r24, 0xC0	; 192
    3222:	c8 16       	cp	r12, r24
    3224:	89 ef       	ldi	r24, 0xF9	; 249
    3226:	d8 06       	cpc	r13, r24
    3228:	d4 f4       	brge	.+52     	; 0x325e <start_horizontal_speed_control_left+0x1e4>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    322a:	80 ec       	ldi	r24, 0xC0	; 192
    322c:	99 ef       	ldi	r25, 0xF9	; 249
    322e:	90 93 08 03 	sts	0x0308, r25
    3232:	80 93 07 03 	sts	0x0307, r24
    3236:	60 e8       	ldi	r22, 0x80	; 128
    3238:	c6 2e       	mov	r12, r22
    323a:	63 ef       	ldi	r22, 0xF3	; 243
    323c:	d6 2e       	mov	r13, r22
    323e:	6f ef       	ldi	r22, 0xFF	; 255
    3240:	e6 2e       	mov	r14, r22
    3242:	6f ef       	ldi	r22, 0xFF	; 255
    3244:	f6 2e       	mov	r15, r22
    3246:	5a cf       	rjmp	.-332    	; 0x30fc <start_horizontal_speed_control_left+0x82>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    3248:	a0 91 ef 02 	lds	r26, 0x02EF
    324c:	b0 91 f0 02 	lds	r27, 0x02F0
    3250:	a8 0f       	add	r26, r24
    3252:	b9 1f       	adc	r27, r25
    3254:	b0 93 c2 04 	sts	0x04C2, r27
    3258:	a0 93 c1 04 	sts	0x04C1, r26
    325c:	33 cf       	rjmp	.-410    	; 0x30c4 <start_horizontal_speed_control_left+0x4a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    325e:	cc 0c       	add	r12, r12
    3260:	dd 1c       	adc	r13, r13
    3262:	ee 24       	eor	r14, r14
    3264:	d7 fc       	sbrc	r13, 7
    3266:	e0 94       	com	r14
    3268:	fe 2c       	mov	r15, r14
    326a:	48 cf       	rjmp	.-368    	; 0x30fc <start_horizontal_speed_control_left+0x82>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    326c:	17 fd       	sbrc	r17, 7
    326e:	0b c0       	rjmp	.+22     	; 0x3286 <start_horizontal_speed_control_left+0x20c>
		pwm_left_speed_controller = 0;
    3270:	10 92 03 03 	sts	0x0303, r1
    3274:	10 92 04 03 	sts	0x0304, r1
    3278:	10 92 05 03 	sts	0x0305, r1
    327c:	10 92 06 03 	sts	0x0306, r1
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    3286:	20 34       	cpi	r18, 0x40	; 64
    3288:	82 ea       	ldi	r24, 0xA2	; 162
    328a:	38 07       	cpc	r19, r24
    328c:	8f ef       	ldi	r24, 0xFF	; 255
    328e:	48 07       	cpc	r20, r24
    3290:	8f ef       	ldi	r24, 0xFF	; 255
    3292:	58 07       	cpc	r21, r24
    3294:	8c f5       	brge	.+98     	; 0x32f8 <start_horizontal_speed_control_left+0x27e>
    3296:	80 e4       	ldi	r24, 0x40	; 64
    3298:	92 ea       	ldi	r25, 0xA2	; 162
    329a:	af ef       	ldi	r26, 0xFF	; 255
    329c:	bf ef       	ldi	r27, 0xFF	; 255
    329e:	80 93 03 03 	sts	0x0303, r24
    32a2:	90 93 04 03 	sts	0x0304, r25
    32a6:	a0 93 05 03 	sts	0x0305, r26
    32aa:	b0 93 06 03 	sts	0x0306, r27
    32ae:	24 e2       	ldi	r18, 0x24	; 36
    32b0:	3a ef       	ldi	r19, 0xFA	; 250
    32b2:	81 cf       	rjmp	.-254    	; 0x31b6 <start_horizontal_speed_control_left+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    32b4:	21 15       	cp	r18, r1
    32b6:	31 05       	cpc	r19, r1
    32b8:	09 f4       	brne	.+2      	; 0x32bc <start_horizontal_speed_control_left+0x242>
    32ba:	9c cf       	rjmp	.-200    	; 0x31f4 <start_horizontal_speed_control_left+0x17a>
		*pwm_left -= 30;
    32bc:	2e 51       	subi	r18, 0x1E	; 30
    32be:	30 40       	sbci	r19, 0x00	; 0
    32c0:	31 83       	std	Z+1, r19	; 0x01
    32c2:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    32c4:	8e ef       	ldi	r24, 0xFE	; 254
    32c6:	20 30       	cpi	r18, 0x00	; 0
    32c8:	38 07       	cpc	r19, r24
    32ca:	0c f0       	brlt	.+2      	; 0x32ce <start_horizontal_speed_control_left+0x254>
    32cc:	93 cf       	rjmp	.-218    	; 0x31f4 <start_horizontal_speed_control_left+0x17a>
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	9e ef       	ldi	r25, 0xFE	; 254
    32d2:	91 83       	std	Z+1, r25	; 0x01
    32d4:	80 83       	st	Z, r24
    32d6:	8e cf       	rjmp	.-228    	; 0x31f4 <start_horizontal_speed_control_left+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    32d8:	21 50       	subi	r18, 0x01	; 1
    32da:	30 40       	sbci	r19, 0x00	; 0
    32dc:	31 83       	std	Z+1, r19	; 0x01
    32de:	20 83       	st	Z, r18
    32e0:	78 cf       	rjmp	.-272    	; 0x31d2 <start_horizontal_speed_control_left+0x158>
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    32e2:	10 92 03 03 	sts	0x0303, r1
    32e6:	10 92 04 03 	sts	0x0304, r1
    32ea:	10 92 05 03 	sts	0x0305, r1
    32ee:	10 92 06 03 	sts	0x0306, r1
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    32f8:	04 e0       	ldi	r16, 0x04	; 4
    32fa:	55 95       	asr	r21
    32fc:	47 95       	ror	r20
    32fe:	37 95       	ror	r19
    3300:	27 95       	ror	r18
    3302:	0a 95       	dec	r16
    3304:	d1 f7       	brne	.-12     	; 0x32fa <start_horizontal_speed_control_left+0x280>
    3306:	57 cf       	rjmp	.-338    	; 0x31b6 <start_horizontal_speed_control_left+0x13c>

00003308 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    3308:	85 b7       	in	r24, 0x35	; 53
    330a:	80 61       	ori	r24, 0x10	; 16
    330c:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    330e:	8f ef       	ldi	r24, 0xFF	; 255
    3310:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    3312:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    3314:	97 ef       	ldi	r25, 0xF7	; 247
    3316:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    3318:	90 ee       	ldi	r25, 0xE0	; 224
    331a:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    331c:	90 ef       	ldi	r25, 0xF0	; 240
    331e:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    3320:	90 eb       	ldi	r25, 0xB0	; 176
    3322:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    3324:	9c ef       	ldi	r25, 0xFC	; 252
    3326:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    3328:	93 e0       	ldi	r25, 0x03	; 3
    332a:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    332c:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    332e:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    3330:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    3332:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    3334:	80 91 4b 04 	lds	r24, 0x044B
    3338:	88 23       	and	r24, r24
    333a:	e1 f0       	breq	.+56     	; 0x3374 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    333c:	81 30       	cpi	r24, 0x01	; 1
    333e:	d1 f0       	breq	.+52     	; 0x3374 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3340:	82 30       	cpi	r24, 0x02	; 2
    3342:	51 f1       	breq	.+84     	; 0x3398 <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    3344:	9f ef       	ldi	r25, 0xFF	; 255
    3346:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    334a:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    334e:	9f e0       	ldi	r25, 0x0F	; 15
    3350:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    3354:	88 23       	and	r24, r24
    3356:	a9 f4       	brne	.+42     	; 0x3382 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    3358:	90 91 05 01 	lds	r25, 0x0105
    335c:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    3360:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    3364:	9f ef       	ldi	r25, 0xFF	; 255
    3366:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    336a:	88 23       	and	r24, r24
    336c:	29 f4       	brne	.+10     	; 0x3378 <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    336e:	10 92 0b 01 	sts	0x010B, r1
    3372:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    3374:	14 ba       	out	0x14, r1	; 20
    3376:	e6 cf       	rjmp	.-52     	; 0x3344 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    3378:	81 30       	cpi	r24, 0x01	; 1
    337a:	c9 f3       	breq	.-14     	; 0x336e <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    337c:	82 30       	cpi	r24, 0x02	; 2
    337e:	41 f0       	breq	.+16     	; 0x3390 <initPortsIO+0x88>
    3380:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    3382:	81 30       	cpi	r24, 0x01	; 1
    3384:	11 f0       	breq	.+4      	; 0x338a <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    3386:	82 30       	cpi	r24, 0x02	; 2
    3388:	59 f7       	brne	.-42     	; 0x3360 <initPortsIO+0x58>
		PORTJ = 0x0F;
    338a:	90 93 05 01 	sts	0x0105, r25
    338e:	e8 cf       	rjmp	.-48     	; 0x3360 <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    3390:	87 ef       	ldi	r24, 0xF7	; 247
    3392:	80 93 0b 01 	sts	0x010B, r24
    3396:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    3398:	98 e0       	ldi	r25, 0x08	; 8
    339a:	94 bb       	out	0x14, r25	; 20
    339c:	d3 cf       	rjmp	.-90     	; 0x3344 <initPortsIO+0x3c>

0000339e <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    339e:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    33a2:	10 92 bc 00 	sts	0x00BC, r1
}
    33a6:	08 95       	ret

000033a8 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    33a8:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    33aa:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    33ac:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    33b6:	08 95       	ret

000033b8 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    33b8:	94 ea       	ldi	r25, 0xA4	; 164
    33ba:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    33be:	90 91 bc 00 	lds	r25, 0x00BC
    33c2:	97 ff       	sbrs	r25, 7
    33c4:	fc cf       	rjmp	.-8      	; 0x33be <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    33c6:	90 91 b9 00 	lds	r25, 0x00B9
    33ca:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    33cc:	98 30       	cpi	r25, 0x08	; 8
    33ce:	21 f0       	breq	.+8      	; 0x33d8 <i2c_start+0x20>
    33d0:	90 31       	cpi	r25, 0x10	; 16
    33d2:	11 f0       	breq	.+4      	; 0x33d8 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	08 95       	ret
	}

	// send device address
	TWDR = address;
    33d8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    33dc:	84 e8       	ldi	r24, 0x84	; 132
    33de:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    33e2:	80 91 bc 00 	lds	r24, 0x00BC
    33e6:	87 ff       	sbrs	r24, 7
    33e8:	fc cf       	rjmp	.-8      	; 0x33e2 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    33ea:	90 91 b9 00 	lds	r25, 0x00B9
    33ee:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    33f0:	98 31       	cpi	r25, 0x18	; 24
    33f2:	21 f0       	breq	.+8      	; 0x33fc <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	90 34       	cpi	r25, 0x40	; 64
    33f8:	19 f0       	breq	.+6      	; 0x3400 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    33fa:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    33fc:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    33fe:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	08 95       	ret

00003404 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3404:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3406:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3408:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    340a:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    340e:	90 91 bc 00 	lds	r25, 0x00BC
    3412:	97 ff       	sbrs	r25, 7
    3414:	fc cf       	rjmp	.-8      	; 0x340e <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3416:	90 91 b9 00 	lds	r25, 0x00B9
    341a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    341c:	98 30       	cpi	r25, 0x08	; 8
    341e:	11 f0       	breq	.+4      	; 0x3424 <i2c_start_wait+0x20>
    3420:	90 31       	cpi	r25, 0x10	; 16
    3422:	99 f7       	brne	.-26     	; 0x340a <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    3424:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3428:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    342c:	90 91 bc 00 	lds	r25, 0x00BC
    3430:	97 ff       	sbrs	r25, 7
    3432:	fc cf       	rjmp	.-8      	; 0x342c <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3434:	90 91 b9 00 	lds	r25, 0x00B9
    3438:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    343a:	90 32       	cpi	r25, 0x20	; 32
    343c:	19 f0       	breq	.+6      	; 0x3444 <i2c_start_wait+0x40>
    343e:	98 35       	cpi	r25, 0x58	; 88
    3440:	09 f0       	breq	.+2      	; 0x3444 <i2c_start_wait+0x40>
    3442:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3444:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    3448:	90 91 bc 00 	lds	r25, 0x00BC
    344c:	94 fd       	sbrc	r25, 4
    344e:	fc cf       	rjmp	.-8      	; 0x3448 <i2c_start_wait+0x44>
    3450:	dc cf       	rjmp	.-72     	; 0x340a <i2c_start_wait+0x6>

00003452 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3452:	94 ea       	ldi	r25, 0xA4	; 164
    3454:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3458:	90 91 bc 00 	lds	r25, 0x00BC
    345c:	97 ff       	sbrs	r25, 7
    345e:	fc cf       	rjmp	.-8      	; 0x3458 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3460:	90 91 b9 00 	lds	r25, 0x00B9
    3464:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3466:	98 30       	cpi	r25, 0x08	; 8
    3468:	21 f0       	breq	.+8      	; 0x3472 <i2c_rep_start+0x20>
    346a:	90 31       	cpi	r25, 0x10	; 16
    346c:	11 f0       	breq	.+4      	; 0x3472 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3472:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3476:	84 e8       	ldi	r24, 0x84	; 132
    3478:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    347c:	80 91 bc 00 	lds	r24, 0x00BC
    3480:	87 ff       	sbrs	r24, 7
    3482:	fc cf       	rjmp	.-8      	; 0x347c <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3484:	90 91 b9 00 	lds	r25, 0x00B9
    3488:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    348a:	98 31       	cpi	r25, 0x18	; 24
    348c:	21 f0       	breq	.+8      	; 0x3496 <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	90 34       	cpi	r25, 0x40	; 64
    3492:	19 f0       	breq	.+6      	; 0x349a <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    3494:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    3496:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    3498:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	08 95       	ret

0000349e <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    349e:	84 e9       	ldi	r24, 0x94	; 148
    34a0:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    34a4:	80 91 bc 00 	lds	r24, 0x00BC
    34a8:	84 fd       	sbrc	r24, 4
    34aa:	fc cf       	rjmp	.-8      	; 0x34a4 <i2c_stop+0x6>

}/* i2c_stop */
    34ac:	08 95       	ret

000034ae <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    34ae:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    34b2:	84 e8       	ldi	r24, 0x84	; 132
    34b4:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    34b8:	80 91 bc 00 	lds	r24, 0x00BC
    34bc:	87 ff       	sbrs	r24, 7
    34be:	fc cf       	rjmp	.-8      	; 0x34b8 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    34c0:	90 91 b9 00 	lds	r25, 0x00B9
    34c4:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    34c6:	81 e0       	ldi	r24, 0x01	; 1
    34c8:	98 32       	cpi	r25, 0x28	; 40
    34ca:	09 f0       	breq	.+2      	; 0x34ce <i2c_write+0x20>
	return 0;

}/* i2c_write */
    34cc:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    34ce:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    34d0:	08 95       	ret

000034d2 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    34d2:	84 ec       	ldi	r24, 0xC4	; 196
    34d4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    34d8:	80 91 bc 00 	lds	r24, 0x00BC
    34dc:	87 ff       	sbrs	r24, 7
    34de:	fc cf       	rjmp	.-8      	; 0x34d8 <i2c_readAck+0x6>

    return TWDR;
    34e0:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    34e4:	08 95       	ret

000034e6 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    34e6:	84 e8       	ldi	r24, 0x84	; 132
    34e8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    34ec:	80 91 bc 00 	lds	r24, 0x00BC
    34f0:	87 ff       	sbrs	r24, 7
    34f2:	fc cf       	rjmp	.-8      	; 0x34ec <i2c_readNak+0x6>
	
    return TWDR;
    34f4:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    34f8:	08 95       	ret

000034fa <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    34fa:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    34fe:	80 e1       	ldi	r24, 0x10	; 16
    3500:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    3504:	e0 ec       	ldi	r30, 0xC0	; 192
    3506:	f0 e0       	ldi	r31, 0x00	; 0
    3508:	80 81       	ld	r24, Z
    350a:	82 60       	ori	r24, 0x02	; 2
    350c:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    350e:	e1 ec       	ldi	r30, 0xC1	; 193
    3510:	f0 e0       	ldi	r31, 0x00	; 0
    3512:	80 81       	ld	r24, Z
    3514:	88 69       	ori	r24, 0x98	; 152
    3516:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    3518:	e2 ec       	ldi	r30, 0xC2	; 194
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	80 81       	ld	r24, Z
    351e:	86 60       	ori	r24, 0x06	; 6
    3520:	80 83       	st	Z, r24



}
    3522:	08 95       	ret

00003524 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    3524:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    3528:	80 e1       	ldi	r24, 0x10	; 16
    352a:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    352e:	e8 ec       	ldi	r30, 0xC8	; 200
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	80 81       	ld	r24, Z
    3534:	82 60       	ori	r24, 0x02	; 2
    3536:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    3538:	e9 ec       	ldi	r30, 0xC9	; 201
    353a:	f0 e0       	ldi	r31, 0x00	; 0
    353c:	80 81       	ld	r24, Z
    353e:	88 61       	ori	r24, 0x18	; 24
    3540:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    3542:	ea ec       	ldi	r30, 0xCA	; 202
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	80 81       	ld	r24, Z
    3548:	86 60       	ori	r24, 0x06	; 6
    354a:	80 83       	st	Z, r24

}
    354c:	08 95       	ret

0000354e <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    354e:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    3552:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    3556:	10 92 c2 00 	sts	0x00C2, r1

}
    355a:	08 95       	ret

0000355c <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    355c:	90 91 c0 00 	lds	r25, 0x00C0
    3560:	95 ff       	sbrs	r25, 5
    3562:	fc cf       	rjmp	.-8      	; 0x355c <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    3564:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    3568:	66 23       	and	r22, r22
    356a:	21 f0       	breq	.+8      	; 0x3574 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    356c:	80 91 c0 00 	lds	r24, 0x00C0
    3570:	86 ff       	sbrs	r24, 6
    3572:	fc cf       	rjmp	.-8      	; 0x356c <usart0Transmit+0x10>
    3574:	08 95       	ret

00003576 <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    3576:	90 91 c8 00 	lds	r25, 0x00C8
    357a:	95 ff       	sbrs	r25, 5
    357c:	fc cf       	rjmp	.-8      	; 0x3576 <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    357e:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    3582:	66 23       	and	r22, r22
    3584:	21 f0       	breq	.+8      	; 0x358e <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    3586:	80 91 c8 00 	lds	r24, 0x00C8
    358a:	86 ff       	sbrs	r24, 6
    358c:	fc cf       	rjmp	.-8      	; 0x3586 <usart1Transmit+0x10>
    358e:	08 95       	ret

00003590 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    3590:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    3594:	80 95       	com	r24
	} else {
		return 1;
	}

}
    3596:	88 1f       	adc	r24, r24
    3598:	88 27       	eor	r24, r24
    359a:	88 1f       	adc	r24, r24
    359c:	08 95       	ret

0000359e <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    359e:	87 e9       	ldi	r24, 0x97	; 151
    35a0:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    35a2:	20 91 c0 00 	lds	r18, 0x00C0
    35a6:	27 fd       	sbrc	r18, 7
    35a8:	07 c0       	rjmp	.+14     	; 0x35b8 <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    35aa:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    35ac:	d1 f7       	brne	.-12     	; 0x35a2 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	80 93 1a 03 	sts	0x031A, r24
			return 0;				// timeout
    35b4:	80 e0       	ldi	r24, 0x00	; 0
    35b6:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    35b8:	80 91 c6 00 	lds	r24, 0x00C6

}
    35bc:	08 95       	ret

000035be <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    35be:	1f 92       	push	r1
    35c0:	0f 92       	push	r0
    35c2:	0f b6       	in	r0, 0x3f	; 63
    35c4:	0f 92       	push	r0
    35c6:	0b b6       	in	r0, 0x3b	; 59
    35c8:	0f 92       	push	r0
    35ca:	11 24       	eor	r1, r1
    35cc:	2f 93       	push	r18
    35ce:	3f 93       	push	r19
    35d0:	4f 93       	push	r20
    35d2:	5f 93       	push	r21
    35d4:	6f 93       	push	r22
    35d6:	7f 93       	push	r23
    35d8:	8f 93       	push	r24
    35da:	9f 93       	push	r25
    35dc:	af 93       	push	r26
    35de:	bf 93       	push	r27
    35e0:	ef 93       	push	r30
    35e2:	ff 93       	push	r31

	char receivedByte = UDR0;
    35e4:	80 91 c6 00 	lds	r24, 0x00C6

	if(currentSelector==15) {
    35e8:	90 91 48 04 	lds	r25, 0x0448
    35ec:	9f 30       	cpi	r25, 0x0F	; 15
    35ee:	21 f1       	breq	.+72     	; 0x3638 <__vector_25+0x7a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    35f0:	90 91 11 02 	lds	r25, 0x0211
    35f4:	99 23       	and	r25, r25
    35f6:	d9 f4       	brne	.+54     	; 0x362e <__vector_25+0x70>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    35f8:	90 91 1f 04 	lds	r25, 0x041F
    35fc:	91 30       	cpi	r25, 0x01	; 1
    35fe:	09 f4       	brne	.+2      	; 0x3602 <__vector_25+0x44>
    3600:	60 c0       	rjmp	.+192    	; 0x36c2 <__vector_25+0x104>
    3602:	92 30       	cpi	r25, 0x02	; 2
    3604:	09 f4       	brne	.+2      	; 0x3608 <__vector_25+0x4a>
    3606:	43 c0       	rjmp	.+134    	; 0x368e <__vector_25+0xd0>
			}
		}

	}

}
    3608:	ff 91       	pop	r31
    360a:	ef 91       	pop	r30
    360c:	bf 91       	pop	r27
    360e:	af 91       	pop	r26
    3610:	9f 91       	pop	r25
    3612:	8f 91       	pop	r24
    3614:	7f 91       	pop	r23
    3616:	6f 91       	pop	r22
    3618:	5f 91       	pop	r21
    361a:	4f 91       	pop	r20
    361c:	3f 91       	pop	r19
    361e:	2f 91       	pop	r18
    3620:	0f 90       	pop	r0
    3622:	0b be       	out	0x3b, r0	; 59
    3624:	0f 90       	pop	r0
    3626:	0f be       	out	0x3f, r0	; 63
    3628:	0f 90       	pop	r0
    362a:	1f 90       	pop	r1
    362c:	18 95       	reti
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    362e:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    3632:	80 93 1f 04 	sts	0x041F, r24
    3636:	e8 cf       	rjmp	.-48     	; 0x3608 <__vector_25+0x4a>

	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
    3638:	8b 32       	cpi	r24, 0x2B	; 43
    363a:	09 f4       	brne	.+2      	; 0x363e <__vector_25+0x80>
    363c:	4c c0       	rjmp	.+152    	; 0x36d6 <__vector_25+0x118>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    363e:	8d 32       	cpi	r24, 0x2D	; 45
    3640:	f1 f0       	breq	.+60     	; 0x367e <__vector_25+0xc0>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    3642:	87 36       	cpi	r24, 0x67	; 103
    3644:	09 f0       	breq	.+2      	; 0x3648 <__vector_25+0x8a>
    3646:	5b c0       	rjmp	.+182    	; 0x36fe <__vector_25+0x140>
			usart0Transmit(irCommand,1);
    3648:	90 91 23 04 	lds	r25, 0x0423

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    364c:	80 91 c0 00 	lds	r24, 0x00C0
    3650:	85 ff       	sbrs	r24, 5
    3652:	fc cf       	rjmp	.-8      	; 0x364c <__vector_25+0x8e>
	UDR0 = data;						// put data into buffer, sends the data
    3654:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3658:	80 91 c0 00 	lds	r24, 0x00C0
    365c:	86 ff       	sbrs	r24, 6
    365e:	fc cf       	rjmp	.-8      	; 0x3658 <__vector_25+0x9a>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    3660:	90 91 66 00 	lds	r25, 0x0066
    3664:	90 93 be 04 	sts	0x04BE, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3668:	80 91 c0 00 	lds	r24, 0x00C0
    366c:	85 ff       	sbrs	r24, 5
    366e:	fc cf       	rjmp	.-8      	; 0x3668 <__vector_25+0xaa>
	UDR0 = data;						// put data into buffer, sends the data
    3670:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3674:	80 91 c0 00 	lds	r24, 0x00C0
    3678:	86 ff       	sbrs	r24, 6
    367a:	fc cf       	rjmp	.-8      	; 0x3674 <__vector_25+0xb6>
    367c:	c5 cf       	rjmp	.-118    	; 0x3608 <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    367e:	80 91 be 04 	lds	r24, 0x04BE
    3682:	88 23       	and	r24, r24
    3684:	d1 f1       	breq	.+116    	; 0x36fa <__vector_25+0x13c>
				currentOsccal--;	
    3686:	81 50       	subi	r24, 0x01	; 1
    3688:	80 93 be 04 	sts	0x04BE, r24
    368c:	2b c0       	rjmp	.+86     	; 0x36e4 <__vector_25+0x126>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    368e:	40 91 21 04 	lds	r20, 0x0421
    3692:	44 23       	and	r20, r20
    3694:	51 f1       	breq	.+84     	; 0x36ea <__vector_25+0x12c>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    3696:	41 30       	cpi	r20, 0x01	; 1
    3698:	09 f0       	breq	.+2      	; 0x369c <__vector_25+0xde>
    369a:	b6 cf       	rjmp	.-148    	; 0x3608 <__vector_25+0x4a>
						rfAddress |= ((unsigned int)receivedByte<<8);
    369c:	38 2f       	mov	r19, r24
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	80 91 13 03 	lds	r24, 0x0313
    36a4:	90 91 14 03 	lds	r25, 0x0314
    36a8:	82 2b       	or	r24, r18
    36aa:	93 2b       	or	r25, r19
    36ac:	90 93 14 03 	sts	0x0314, r25
    36b0:	80 93 13 03 	sts	0x0313, r24
						addressReceived = 1;
    36b4:	40 93 20 04 	sts	0x0420, r20
						menuState = 0;
    36b8:	10 92 21 04 	sts	0x0421, r1
						chooseMenu = 1;
    36bc:	40 93 11 02 	sts	0x0211, r20
    36c0:	a3 cf       	rjmp	.-186    	; 0x3608 <__vector_25+0x4a>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    36c2:	8a 3a       	cpi	r24, 0xAA	; 170
    36c4:	31 f1       	breq	.+76     	; 0x3712 <__vector_25+0x154>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    36c6:	85 35       	cpi	r24, 0x55	; 85
    36c8:	09 f0       	breq	.+2      	; 0x36cc <__vector_25+0x10e>
    36ca:	9e cf       	rjmp	.-196    	; 0x3608 <__vector_25+0x4a>
						chooseMenu = 1;
    36cc:	90 93 11 02 	sts	0x0211, r25
						menuChoice = 0;
    36d0:	10 92 1f 04 	sts	0x041F, r1
    36d4:	99 cf       	rjmp	.-206    	; 0x3608 <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    36d6:	80 91 be 04 	lds	r24, 0x04BE
    36da:	8f 3f       	cpi	r24, 0xFF	; 255
    36dc:	e9 f0       	breq	.+58     	; 0x3718 <__vector_25+0x15a>
				currentOsccal++;
    36de:	8f 5f       	subi	r24, 0xFF	; 255
    36e0:	80 93 be 04 	sts	0x04BE, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    36e4:	80 93 66 00 	sts	0x0066, r24
    36e8:	8f cf       	rjmp	.-226    	; 0x3608 <__vector_25+0x4a>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    36ea:	80 93 13 03 	sts	0x0313, r24
    36ee:	10 92 14 03 	sts	0x0314, r1
						menuState = 1;
    36f2:	81 e0       	ldi	r24, 0x01	; 1
    36f4:	80 93 21 04 	sts	0x0421, r24
    36f8:	87 cf       	rjmp	.-242    	; 0x3608 <__vector_25+0x4a>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	f3 cf       	rjmp	.-26     	; 0x36e4 <__vector_25+0x126>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    36fe:	83 37       	cpi	r24, 0x73	; 115
    3700:	09 f0       	breq	.+2      	; 0x3704 <__vector_25+0x146>
    3702:	82 cf       	rjmp	.-252    	; 0x3608 <__vector_25+0x4a>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    3704:	8d ef       	ldi	r24, 0xFD	; 253
    3706:	9f e0       	ldi	r25, 0x0F	; 15
    3708:	60 91 be 04 	lds	r22, 0x04BE
    370c:	0e 94 74 41 	call	0x82e8	; 0x82e8 <__eewr_byte_m2560>
    3710:	7b cf       	rjmp	.-266    	; 0x3608 <__vector_25+0x4a>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    3712:	90 93 22 04 	sts	0x0422, r25
    3716:	78 cf       	rjmp	.-272    	; 0x3608 <__vector_25+0x4a>
	char receivedByte = UDR0;

	if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    3718:	8f ef       	ldi	r24, 0xFF	; 255
    371a:	e4 cf       	rjmp	.-56     	; 0x36e4 <__vector_25+0x126>

0000371c <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    371c:	86 b1       	in	r24, 0x06	; 6
    371e:	66 b1       	in	r22, 0x06	; 6
    3720:	26 b1       	in	r18, 0x06	; 6
    3722:	46 b1       	in	r20, 0x06	; 6
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	28 70       	andi	r18, 0x08	; 8
    3728:	30 70       	andi	r19, 0x00	; 0
    372a:	35 95       	asr	r19
    372c:	27 95       	ror	r18
    372e:	35 95       	asr	r19
    3730:	27 95       	ror	r18
    3732:	35 95       	asr	r19
    3734:	27 95       	ror	r18
    3736:	22 0f       	add	r18, r18
    3738:	33 1f       	adc	r19, r19
    373a:	70 e0       	ldi	r23, 0x00	; 0
    373c:	64 70       	andi	r22, 0x04	; 4
    373e:	70 70       	andi	r23, 0x00	; 0
    3740:	75 95       	asr	r23
    3742:	67 95       	ror	r22
    3744:	75 95       	asr	r23
    3746:	67 95       	ror	r22
    3748:	26 0f       	add	r18, r22
    374a:	37 1f       	adc	r19, r23
    374c:	22 0f       	add	r18, r18
    374e:	33 1f       	adc	r19, r19
    3750:	50 e0       	ldi	r21, 0x00	; 0
    3752:	42 70       	andi	r20, 0x02	; 2
    3754:	50 70       	andi	r21, 0x00	; 0
    3756:	55 95       	asr	r21
    3758:	47 95       	ror	r20
    375a:	24 0f       	add	r18, r20
    375c:	35 1f       	adc	r19, r21
    375e:	22 0f       	add	r18, r18
    3760:	81 70       	andi	r24, 0x01	; 1
}
    3762:	82 0f       	add	r24, r18
    3764:	08 95       	ret

00003766 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    3766:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    3768:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    376a:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    376c:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    3770:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    3774:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    3778:	8e ef       	ldi	r24, 0xFE	; 254
    377a:	9f e0       	ldi	r25, 0x0F	; 15
    377c:	0e 94 46 41 	call	0x828c	; 0x828c <__eerd_word_m2560>
    3780:	90 93 14 03 	sts	0x0314, r25
    3784:	80 93 13 03 	sts	0x0313, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    3788:	8d ef       	ldi	r24, 0xFD	; 253
    378a:	9f e0       	ldi	r25, 0x0F	; 15
    378c:	0e 94 3e 41 	call	0x827c	; 0x827c <__eerd_byte_m2560>
    3790:	80 93 be 04 	sts	0x04BE, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    3794:	98 2f       	mov	r25, r24
    3796:	91 50       	subi	r25, 0x01	; 1
    3798:	9e 3f       	cpi	r25, 0xFE	; 254
    379a:	e8 f5       	brcc	.+122    	; 0x3816 <initPeripherals+0xb0>
		OSCCAL = currentOsccal;
    379c:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    37a0:	80 91 13 03 	lds	r24, 0x0313
    37a4:	90 91 14 03 	lds	r25, 0x0314
    37a8:	9c 01       	movw	r18, r24
    37aa:	21 58       	subi	r18, 0x81	; 129
    37ac:	3c 40       	sbci	r19, 0x0C	; 12
    37ae:	23 30       	cpi	r18, 0x03	; 3
    37b0:	31 05       	cpc	r19, r1
    37b2:	08 f5       	brcc	.+66     	; 0x37f6 <initPeripherals+0x90>
		hardwareRevision = HW_REV_3_0;
    37b4:	10 92 4b 04 	sts	0x044B, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initCalibration();
    37b8:	0e 94 9f 2f 	call	0x5f3e	; 0x5f3e <initCalibration>
	initPortsIO();
    37bc:	0e 94 84 19 	call	0x3308	; 0x3308 <initPortsIO>
	initAdc();
    37c0:	0e 94 c3 1c 	call	0x3986	; 0x3986 <initAdc>
	initMotors();
    37c4:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <initMotors>
	initRGBleds();
    37c8:	0e 94 01 35 	call	0x6a02	; 0x6a02 <initRGBleds>
	initSPI();
    37cc:	0e 94 32 0a 	call	0x1464	; 0x1464 <initSPI>
	mirf_init();
    37d0:	0e 94 1b 0b 	call	0x1636	; 0x1636 <mirf_init>
	if(spiCommError==0) {
    37d4:	80 91 16 03 	lds	r24, 0x0316
    37d8:	88 23       	and	r24, r24
    37da:	29 f4       	brne	.+10     	; 0x37e6 <initPeripherals+0x80>
		rfFlags |= 1;
    37dc:	80 91 15 03 	lds	r24, 0x0315
    37e0:	81 60       	ori	r24, 0x01	; 1
    37e2:	80 93 15 03 	sts	0x0315, r24
	}
	initUsart0();
    37e6:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <initUsart0>
	initAccelerometer();
    37ea:	0e 94 49 36 	call	0x6c92	; 0x6c92 <initAccelerometer>
	init_ir_remote_control();
    37ee:	0e 94 14 10 	call	0x2028	; 0x2028 <init_ir_remote_control>

	sei();			// enable global interrupts
    37f2:	78 94       	sei

	
}
    37f4:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    37f6:	2c e0       	ldi	r18, 0x0C	; 12
    37f8:	80 38       	cpi	r24, 0x80	; 128
    37fa:	92 07       	cpc	r25, r18
    37fc:	21 f4       	brne	.+8      	; 0x3806 <initPeripherals+0xa0>
		hardwareRevision = HW_REV_3_0_1;
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	80 93 4b 04 	sts	0x044B, r24
    3804:	d9 cf       	rjmp	.-78     	; 0x37b8 <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    3806:	2c e0       	ldi	r18, 0x0C	; 12
    3808:	84 38       	cpi	r24, 0x84	; 132
    380a:	92 07       	cpc	r25, r18
    380c:	a8 f2       	brcs	.-86     	; 0x37b8 <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    380e:	82 e0       	ldi	r24, 0x02	; 2
    3810:	80 93 4b 04 	sts	0x044B, r24
    3814:	d1 cf       	rjmp	.-94     	; 0x37b8 <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    3816:	60 91 66 00 	lds	r22, 0x0066
    381a:	60 93 be 04 	sts	0x04BE, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    381e:	8d ef       	ldi	r24, 0xFD	; 253
    3820:	9f e0       	ldi	r25, 0x0F	; 15
    3822:	0e 94 74 41 	call	0x82e8	; 0x82e8 <__eewr_byte_m2560>
    3826:	bc cf       	rjmp	.-136    	; 0x37a0 <initPeripherals+0x3a>

00003828 <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    3828:	1f 92       	push	r1
    382a:	0f 92       	push	r0
    382c:	0f b6       	in	r0, 0x3f	; 63
    382e:	0f 92       	push	r0
    3830:	11 24       	eor	r1, r1

}
    3832:	0f 90       	pop	r0
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	0f 90       	pop	r0
    3838:	1f 90       	pop	r1
    383a:	18 95       	reti

0000383c <sleep>:

void sleep(unsigned char seconds) {
    383c:	cf 93       	push	r28
    383e:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    3840:	9e e1       	ldi	r25, 0x1E	; 30
    3842:	89 9f       	mul	r24, r25
    3844:	e0 01       	movw	r28, r0
    3846:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    3848:	80 91 68 00 	lds	r24, 0x0068
    384c:	8d 7f       	andi	r24, 0xFD	; 253
    384e:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    3852:	80 91 6c 00 	lds	r24, 0x006C
    3856:	8f 77       	andi	r24, 0x7F	; 127
    3858:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    385c:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    385e:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    3862:	80 91 7a 00 	lds	r24, 0x007A
    3866:	80 61       	ori	r24, 0x10	; 16
    3868:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    386c:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    3870:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    3874:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    3878:	88 b3       	in	r24, 0x18	; 24
    387a:	87 60       	ori	r24, 0x07	; 7
    387c:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    387e:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    3882:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    3886:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    388a:	89 b3       	in	r24, 0x19	; 25
    388c:	87 60       	ori	r24, 0x07	; 7
    388e:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    3890:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    3894:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    3898:	0e 94 a7 1a 	call	0x354e	; 0x354e <closeUsart>
	closeSPI();
    389c:	0e 94 3e 0a 	call	0x147c	; 0x147c <closeSPI>
	i2c_close();
    38a0:	0e 94 cf 19 	call	0x339e	; 0x339e <i2c_close>

	// set port pins
	initPortsIO();
    38a4:	0e 94 84 19 	call	0x3308	; 0x3308 <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    38a8:	83 b7       	in	r24, 0x33	; 51
    38aa:	8f 60       	ori	r24, 0x0F	; 15
    38ac:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    38b4:	80 91 b0 00 	lds	r24, 0x00B0
    38b8:	8d 7f       	andi	r24, 0xFD	; 253
    38ba:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    38be:	80 91 b1 00 	lds	r24, 0x00B1
    38c2:	87 60       	ori	r24, 0x07	; 7
    38c4:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    38c8:	20 97       	sbiw	r28, 0x00	; 0
    38ca:	19 f0       	breq	.+6      	; 0x38d2 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    38cc:	88 95       	sleep
		pause--;
    38ce:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    38d0:	e9 f7       	brne	.-6      	; 0x38cc <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    38d2:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    38d4:	80 91 b1 00 	lds	r24, 0x00B1
    38d8:	88 7f       	andi	r24, 0xF8	; 248
    38da:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    38de:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    38e2:	80 91 b0 00 	lds	r24, 0x00B0
    38e6:	82 60       	ori	r24, 0x02	; 2
    38e8:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    38ec:	8f ef       	ldi	r24, 0xFF	; 255
    38ee:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    38f2:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    38f6:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    38fa:	10 92 f4 02 	sts	0x02F4, r1
    38fe:	10 92 f3 02 	sts	0x02F3, r1
	pwm_left = 0;
    3902:	10 92 f6 02 	sts	0x02F6, r1
    3906:	10 92 f5 02 	sts	0x02F5, r1
	initPeripherals();
    390a:	0e 94 b3 1b 	call	0x3766	; 0x3766 <initPeripherals>

}
    390e:	df 91       	pop	r29
    3910:	cf 91       	pop	r28
    3912:	08 95       	ret

00003914 <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
    3914:	60 91 44 04 	lds	r22, 0x0444
    3918:	70 91 45 04 	lds	r23, 0x0445
	return clockTick;
}
    391c:	80 91 46 04 	lds	r24, 0x0446
    3920:	90 91 47 04 	lds	r25, 0x0447
    3924:	08 95       	ret

00003926 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	80 93 bd 02 	sts	0x02BD, r24
}
    392c:	08 95       	ret

0000392e <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	dc 01       	movw	r26, r24
    3934:	80 93 d3 02 	sts	0x02D3, r24
    3938:	90 93 d4 02 	sts	0x02D4, r25
    393c:	a0 93 d5 02 	sts	0x02D5, r26
    3940:	b0 93 d6 02 	sts	0x02D6, r27
	rightMotSteps = 0;
    3944:	80 93 cf 02 	sts	0x02CF, r24
    3948:	90 93 d0 02 	sts	0x02D0, r25
    394c:	a0 93 d1 02 	sts	0x02D1, r26
    3950:	b0 93 d2 02 	sts	0x02D2, r27
	theta = 0;
    3954:	80 93 64 04 	sts	0x0464, r24
    3958:	90 93 65 04 	sts	0x0465, r25
    395c:	a0 93 66 04 	sts	0x0466, r26
    3960:	b0 93 67 04 	sts	0x0467, r27
	xPos = 0;
    3964:	80 93 6c 04 	sts	0x046C, r24
    3968:	90 93 6d 04 	sts	0x046D, r25
    396c:	a0 93 6e 04 	sts	0x046E, r26
    3970:	b0 93 6f 04 	sts	0x046F, r27
	yPos = 0;
    3974:	80 93 70 04 	sts	0x0470, r24
    3978:	90 93 71 04 	sts	0x0471, r25
    397c:	a0 93 72 04 	sts	0x0472, r26
    3980:	b0 93 73 04 	sts	0x0473, r27
}
    3984:	08 95       	ret

00003986 <initAdc>:

#include "adc.h"


void initAdc(void) {
    3986:	cf 93       	push	r28
    3988:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    398a:	ea e7       	ldi	r30, 0x7A	; 122
    398c:	f0 e0       	ldi	r31, 0x00	; 0
    398e:	10 82       	st	Z, r1
	ADCSRB = 0;
    3990:	ab e7       	ldi	r26, 0x7B	; 123
    3992:	b0 e0       	ldi	r27, 0x00	; 0
    3994:	1c 92       	st	X, r1
	ADMUX = 0;
    3996:	cc e7       	ldi	r28, 0x7C	; 124
    3998:	d0 e0       	ldi	r29, 0x00	; 0
    399a:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    399c:	80 81       	ld	r24, Z
    399e:	86 60       	ori	r24, 0x06	; 6
    39a0:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    39a2:	88 81       	ld	r24, Y
    39a4:	80 64       	ori	r24, 0x40	; 64
    39a6:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    39a8:	80 81       	ld	r24, Z
    39aa:	80 62       	ori	r24, 0x20	; 32
    39ac:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    39ae:	8c 91       	ld	r24, X
    39b0:	88 7f       	andi	r24, 0xF8	; 248
    39b2:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    39b4:	80 81       	ld	r24, Z
    39b6:	88 60       	ori	r24, 0x08	; 8
    39b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    39ba:	80 81       	ld	r24, Z
    39bc:	80 68       	ori	r24, 0x80	; 128
    39be:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    39c0:	80 81       	ld	r24, Z
    39c2:	80 64       	ori	r24, 0x40	; 64
    39c4:	80 83       	st	Z, r24

}
    39c6:	df 91       	pop	r29
    39c8:	cf 91       	pop	r28
    39ca:	08 95       	ret

000039cc <__vector_29>:

ISR(ADC_vect) {
    39cc:	1f 92       	push	r1
    39ce:	0f 92       	push	r0
    39d0:	0f b6       	in	r0, 0x3f	; 63
    39d2:	0f 92       	push	r0
    39d4:	0b b6       	in	r0, 0x3b	; 59
    39d6:	0f 92       	push	r0
    39d8:	11 24       	eor	r1, r1
    39da:	2f 93       	push	r18
    39dc:	3f 93       	push	r19
    39de:	4f 93       	push	r20
    39e0:	5f 93       	push	r21
    39e2:	6f 93       	push	r22
    39e4:	8f 93       	push	r24
    39e6:	9f 93       	push	r25
    39e8:	af 93       	push	r26
    39ea:	bf 93       	push	r27
    39ec:	ef 93       	push	r30
    39ee:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    39f0:	80 91 44 04 	lds	r24, 0x0444
    39f4:	90 91 45 04 	lds	r25, 0x0445
    39f8:	a0 91 46 04 	lds	r26, 0x0446
    39fc:	b0 91 47 04 	lds	r27, 0x0447
    3a00:	01 96       	adiw	r24, 0x01	; 1
    3a02:	a1 1d       	adc	r26, r1
    3a04:	b1 1d       	adc	r27, r1
    3a06:	80 93 44 04 	sts	0x0444, r24
    3a0a:	90 93 45 04 	sts	0x0445, r25
    3a0e:	a0 93 46 04 	sts	0x0446, r26
    3a12:	b0 93 47 04 	sts	0x0447, r27
								// resolution of 104 us based on adc interrupts

	int value = ADCL;			// get the sample; low byte must be read first!!
    3a16:	20 91 78 00 	lds	r18, 0x0078
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
	value = (ADCH<<8) | value;
    3a1c:	40 91 79 00 	lds	r20, 0x0079
    3a20:	94 2f       	mov	r25, r20
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	28 2b       	or	r18, r24
    3a26:	39 2b       	or	r19, r25
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3a28:	80 91 b7 02 	lds	r24, 0x02B7
    3a2c:	82 30       	cpi	r24, 0x02	; 2
    3a2e:	09 f4       	brne	.+2      	; 0x3a32 <__vector_29+0x66>
    3a30:	b2 c1       	rjmp	.+868    	; 0x3d96 <__vector_29+0x3ca>
    3a32:	83 30       	cpi	r24, 0x03	; 3
    3a34:	08 f4       	brcc	.+2      	; 0x3a38 <__vector_29+0x6c>
    3a36:	45 c0       	rjmp	.+138    	; 0x3ac2 <__vector_29+0xf6>
    3a38:	83 30       	cpi	r24, 0x03	; 3
    3a3a:	09 f4       	brne	.+2      	; 0x3a3e <__vector_29+0x72>
    3a3c:	d5 c1       	rjmp	.+938    	; 0x3de8 <__vector_29+0x41c>
    3a3e:	84 30       	cpi	r24, 0x04	; 4
    3a40:	09 f4       	brne	.+2      	; 0x3a44 <__vector_29+0x78>
    3a42:	68 c1       	rjmp	.+720    	; 0x3d14 <__vector_29+0x348>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3a44:	80 91 b8 02 	lds	r24, 0x02B8
    3a48:	82 30       	cpi	r24, 0x02	; 2
    3a4a:	09 f4       	brne	.+2      	; 0x3a4e <__vector_29+0x82>
    3a4c:	4f c1       	rjmp	.+670    	; 0x3cec <__vector_29+0x320>
    3a4e:	83 30       	cpi	r24, 0x03	; 3
    3a50:	08 f0       	brcs	.+2      	; 0x3a54 <__vector_29+0x88>
    3a52:	cd c0       	rjmp	.+410    	; 0x3bee <__vector_29+0x222>
    3a54:	88 23       	and	r24, r24
    3a56:	09 f0       	breq	.+2      	; 0x3a5a <__vector_29+0x8e>
    3a58:	24 c1       	rjmp	.+584    	; 0x3ca2 <__vector_29+0x2d6>

		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    3a5a:	80 91 22 02 	lds	r24, 0x0222
    3a5e:	86 95       	lsr	r24
    3a60:	80 93 21 02 	sts	0x0221, r24
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    3a64:	80 91 b9 02 	lds	r24, 0x02B9
    3a68:	88 23       	and	r24, r24
    3a6a:	09 f0       	breq	.+2      	; 0x3a6e <__vector_29+0xa2>
    3a6c:	ed c1       	rjmp	.+986    	; 0x3e48 <__vector_29+0x47c>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	80 93 b7 02 	sts	0x02B7, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 1;
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	80 93 b8 02 	sts	0x02B8, r24

	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    3a7a:	90 91 21 02 	lds	r25, 0x0221
    3a7e:	98 30       	cpi	r25, 0x08	; 8
    3a80:	08 f0       	brcs	.+2      	; 0x3a84 <__vector_29+0xb8>
    3a82:	ed c0       	rjmp	.+474    	; 0x3c5e <__vector_29+0x292>
		ADCSRB &= ~(1 << MUX5);
    3a84:	90 91 7b 00 	lds	r25, 0x007B
    3a88:	97 7f       	andi	r25, 0xF7	; 247
    3a8a:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    3a8e:	90 91 21 02 	lds	r25, 0x0221
    3a92:	90 5c       	subi	r25, 0xC0	; 192
    3a94:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3a98:	82 30       	cpi	r24, 0x02	; 2
    3a9a:	09 f4       	brne	.+2      	; 0x3a9e <__vector_29+0xd2>
    3a9c:	ed c0       	rjmp	.+474    	; 0x3c78 <__vector_29+0x2ac>

	}

	//LED_BLUE_OFF;

}
    3a9e:	ff 91       	pop	r31
    3aa0:	ef 91       	pop	r30
    3aa2:	bf 91       	pop	r27
    3aa4:	af 91       	pop	r26
    3aa6:	9f 91       	pop	r25
    3aa8:	8f 91       	pop	r24
    3aaa:	6f 91       	pop	r22
    3aac:	5f 91       	pop	r21
    3aae:	4f 91       	pop	r20
    3ab0:	3f 91       	pop	r19
    3ab2:	2f 91       	pop	r18
    3ab4:	0f 90       	pop	r0
    3ab6:	0b be       	out	0x3b, r0	; 59
    3ab8:	0f 90       	pop	r0
    3aba:	0f be       	out	0x3f, r0	; 63
    3abc:	0f 90       	pop	r0
    3abe:	1f 90       	pop	r1
    3ac0:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3ac2:	88 23       	and	r24, r24
    3ac4:	09 f0       	breq	.+2      	; 0x3ac8 <__vector_29+0xfc>
    3ac6:	fe c0       	rjmp	.+508    	; 0x3cc4 <__vector_29+0x2f8>

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3ac8:	60 91 22 02 	lds	r22, 0x0222
    3acc:	6e 30       	cpi	r22, 0x0E	; 14
    3ace:	09 f4       	brne	.+2      	; 0x3ad2 <__vector_29+0x106>
    3ad0:	dc c1       	rjmp	.+952    	; 0x3e8a <__vector_29+0x4be>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    3ad2:	46 2f       	mov	r20, r22
    3ad4:	50 e0       	ldi	r21, 0x00	; 0
    3ad6:	fa 01       	movw	r30, r20
    3ad8:	ee 0f       	add	r30, r30
    3ada:	ff 1f       	adc	r31, r31
    3adc:	e9 5d       	subi	r30, 0xD9	; 217
    3ade:	fd 4f       	sbci	r31, 0xFD	; 253
    3ae0:	31 83       	std	Z+1, r19	; 0x01
    3ae2:	20 83       	st	Z, r18
			}

			if(currentProx & 0x01) {
    3ae4:	40 ff       	sbrs	r20, 0
    3ae6:	77 c0       	rjmp	.+238    	; 0x3bd6 <__vector_29+0x20a>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    3ae8:	fa 01       	movw	r30, r20
    3aea:	ee 0f       	add	r30, r30
    3aec:	ff 1f       	adc	r31, r31
    3aee:	eb 5d       	subi	r30, 0xDB	; 219
    3af0:	fd 4f       	sbci	r31, 0xFD	; 253
    3af2:	80 81       	ld	r24, Z
    3af4:	91 81       	ldd	r25, Z+1	; 0x01
    3af6:	fa 01       	movw	r30, r20
    3af8:	ee 0f       	add	r30, r30
    3afa:	ff 1f       	adc	r31, r31
    3afc:	e9 5d       	subi	r30, 0xD9	; 217
    3afe:	fd 4f       	sbci	r31, 0xFD	; 253
    3b00:	40 81       	ld	r20, Z
    3b02:	51 81       	ldd	r21, Z+1	; 0x01
    3b04:	26 2f       	mov	r18, r22
    3b06:	26 95       	lsr	r18
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	84 1b       	sub	r24, r20
    3b0c:	95 0b       	sbc	r25, r21
    3b0e:	22 0f       	add	r18, r18
    3b10:	33 1f       	adc	r19, r19
    3b12:	f9 01       	movw	r30, r18
    3b14:	e1 59       	subi	r30, 0x91	; 145
    3b16:	fd 4f       	sbci	r31, 0xFD	; 253
    3b18:	40 81       	ld	r20, Z
    3b1a:	51 81       	ldd	r21, Z+1	; 0x01
    3b1c:	84 1b       	sub	r24, r20
    3b1e:	95 0b       	sbc	r25, r21
    3b20:	f9 01       	movw	r30, r18
    3b22:	e9 5a       	subi	r30, 0xA9	; 169
    3b24:	fd 4f       	sbci	r31, 0xFD	; 253
    3b26:	91 83       	std	Z+1, r25	; 0x01
    3b28:	80 83       	st	Z, r24
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    3b2a:	97 fd       	sbrc	r25, 7
    3b2c:	c9 c1       	rjmp	.+914    	; 0x3ec0 <__vector_29+0x4f4>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    3b2e:	44 e0       	ldi	r20, 0x04	; 4
    3b30:	81 30       	cpi	r24, 0x01	; 1
    3b32:	94 07       	cpc	r25, r20
    3b34:	24 f0       	brlt	.+8      	; 0x3b3e <__vector_29+0x172>
					proximityResult[currentProx>>1] = 1024;
    3b36:	80 e0       	ldi	r24, 0x00	; 0
    3b38:	94 e0       	ldi	r25, 0x04	; 4
    3b3a:	91 83       	std	Z+1, r25	; 0x01
    3b3c:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    3b3e:	60 31       	cpi	r22, 0x10	; 16
    3b40:	48 f4       	brcc	.+18     	; 0x3b54 <__vector_29+0x188>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    3b42:	8c 33       	cpi	r24, 0x3C	; 60
    3b44:	91 05       	cpc	r25, r1
    3b46:	0c f0       	brlt	.+2      	; 0x3b4a <__vector_29+0x17e>
    3b48:	c0 c1       	rjmp	.+896    	; 0x3eca <__vector_29+0x4fe>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    3b4a:	21 54       	subi	r18, 0x41	; 65
    3b4c:	3d 4f       	sbci	r19, 0xFD	; 253
    3b4e:	f9 01       	movw	r30, r18
    3b50:	91 83       	std	Z+1, r25	; 0x01
    3b52:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    3b54:	80 91 62 04 	lds	r24, 0x0462
    3b58:	88 23       	and	r24, r24
    3b5a:	09 f4       	brne	.+2      	; 0x3b5e <__vector_29+0x192>
    3b5c:	81 c1       	rjmp	.+770    	; 0x3e60 <__vector_29+0x494>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    3b5e:	80 91 67 02 	lds	r24, 0x0267
    3b62:	90 91 68 02 	lds	r25, 0x0268
    3b66:	f1 e0       	ldi	r31, 0x01	; 1
    3b68:	84 3a       	cpi	r24, 0xA4	; 164
    3b6a:	9f 07       	cpc	r25, r31
    3b6c:	cc f0       	brlt	.+50     	; 0x3ba0 <__vector_29+0x1d4>
    3b6e:	80 91 69 02 	lds	r24, 0x0269
    3b72:	90 91 6a 02 	lds	r25, 0x026A
    3b76:	21 e0       	ldi	r18, 0x01	; 1
    3b78:	84 3a       	cpi	r24, 0xA4	; 164
    3b7a:	92 07       	cpc	r25, r18
    3b7c:	8c f0       	brlt	.+34     	; 0x3ba0 <__vector_29+0x1d4>
    3b7e:	80 91 6b 02 	lds	r24, 0x026B
    3b82:	90 91 6c 02 	lds	r25, 0x026C
    3b86:	41 e0       	ldi	r20, 0x01	; 1
    3b88:	84 3a       	cpi	r24, 0xA4	; 164
    3b8a:	94 07       	cpc	r25, r20
    3b8c:	4c f0       	brlt	.+18     	; 0x3ba0 <__vector_29+0x1d4>
    3b8e:	80 91 6d 02 	lds	r24, 0x026D
    3b92:	90 91 6e 02 	lds	r25, 0x026E
    3b96:	e1 e0       	ldi	r30, 0x01	; 1
    3b98:	84 3a       	cpi	r24, 0xA4	; 164
    3b9a:	9e 07       	cpc	r25, r30
    3b9c:	0c f0       	brlt	.+2      	; 0x3ba0 <__vector_29+0x1d4>
    3b9e:	60 c1       	rjmp	.+704    	; 0x3e60 <__vector_29+0x494>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	80 93 63 04 	sts	0x0463, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    3ba6:	10 92 f6 02 	sts	0x02F6, r1
    3baa:	10 92 f5 02 	sts	0x02F5, r1
						OCR4A = 0;
    3bae:	10 92 a9 00 	sts	0x00A9, r1
    3bb2:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    3bb6:	10 92 ab 00 	sts	0x00AB, r1
    3bba:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    3bbe:	10 92 f4 02 	sts	0x02F4, r1
    3bc2:	10 92 f3 02 	sts	0x02F3, r1
						OCR3A = 0;
    3bc6:	10 92 99 00 	sts	0x0099, r1
    3bca:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    3bce:	10 92 9b 00 	sts	0x009B, r1
    3bd2:	10 92 9a 00 	sts	0x009A, r1
					cliffDetectedFlag = 0;
				}

			}

			currentProx++;
    3bd6:	6f 5f       	subi	r22, 0xFF	; 255
    3bd8:	60 93 22 02 	sts	0x0222, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    3bdc:	68 31       	cpi	r22, 0x18	; 24
    3bde:	08 f4       	brcc	.+2      	; 0x3be2 <__vector_29+0x216>
    3be0:	31 cf       	rjmp	.-414    	; 0x3a44 <__vector_29+0x78>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    3be2:	10 92 22 02 	sts	0x0222, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    3be6:	81 e0       	ldi	r24, 0x01	; 1
    3be8:	80 93 be 02 	sts	0x02BE, r24
    3bec:	2b cf       	rjmp	.-426    	; 0x3a44 <__vector_29+0x78>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3bee:	83 30       	cpi	r24, 0x03	; 3
    3bf0:	09 f4       	brne	.+2      	; 0x3bf4 <__vector_29+0x228>
    3bf2:	bd c0       	rjmp	.+378    	; 0x3d6e <__vector_29+0x3a2>
    3bf4:	84 30       	cpi	r24, 0x04	; 4
    3bf6:	09 f0       	breq	.+2      	; 0x3bfa <__vector_29+0x22e>
    3bf8:	40 cf       	rjmp	.-384    	; 0x3a7a <__vector_29+0xae>
			}
			adcSamplingState = 4;
			break;

		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
    3bfa:	90 91 24 02 	lds	r25, 0x0224
    3bfe:	90 93 21 02 	sts	0x0221, r25
			rightChannelPhase = rightMotorPhase;
    3c02:	90 91 25 02 	lds	r25, 0x0225
    3c06:	90 93 b9 02 	sts	0x02B9, r25
			if(leftChannelPhase == ACTIVE_PHASE) {
    3c0a:	90 91 ba 02 	lds	r25, 0x02BA
    3c0e:	99 23       	and	r25, r25
    3c10:	09 f0       	breq	.+2      	; 0x3c14 <__vector_29+0x248>
    3c12:	14 c1       	rjmp	.+552    	; 0x3e3c <__vector_29+0x470>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3c14:	83 e0       	ldi	r24, 0x03	; 3
    3c16:	80 93 b7 02 	sts	0x02B7, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;
    3c1a:	10 92 b8 02 	sts	0x02B8, r1

			if(currentProx==14 && measBattery==1) {
    3c1e:	60 91 22 02 	lds	r22, 0x0222
    3c22:	6e 30       	cpi	r22, 0x0E	; 14
    3c24:	09 f4       	brne	.+2      	; 0x3c28 <__vector_29+0x25c>
    3c26:	2b c1       	rjmp	.+598    	; 0x3e7e <__vector_29+0x4b2>
				measBattery=2;
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
			}

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
    3c28:	86 2f       	mov	r24, r22
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	60 ff       	sbrs	r22, 0
    3c2e:	fd c0       	rjmp	.+506    	; 0x3e2a <__vector_29+0x45e>
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    3c30:	60 31       	cpi	r22, 0x10	; 16
    3c32:	08 f4       	brcc	.+2      	; 0x3c36 <__vector_29+0x26a>
    3c34:	18 c1       	rjmp	.+560    	; 0x3e66 <__vector_29+0x49a>
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
				} else {
					if(hardwareRevision == HW_REV_3_0) {
    3c36:	20 91 4b 04 	lds	r18, 0x044B
    3c3a:	22 23       	and	r18, r18
    3c3c:	09 f0       	breq	.+2      	; 0x3c40 <__vector_29+0x274>
    3c3e:	e1 c0       	rjmp	.+450    	; 0x3e02 <__vector_29+0x436>
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    3c40:	40 97       	sbiw	r24, 0x10	; 16
    3c42:	95 95       	asr	r25
    3c44:	87 95       	ror	r24
    3c46:	21 e0       	ldi	r18, 0x01	; 1
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	02 c0       	rjmp	.+4      	; 0x3c50 <__vector_29+0x284>
    3c4c:	22 0f       	add	r18, r18
    3c4e:	33 1f       	adc	r19, r19
    3c50:	8a 95       	dec	r24
    3c52:	e2 f7       	brpl	.-8      	; 0x3c4c <__vector_29+0x280>
    3c54:	20 93 05 01 	sts	0x0105, r18
    3c58:	80 91 b8 02 	lds	r24, 0x02B8
    3c5c:	0e cf       	rjmp	.-484    	; 0x3a7a <__vector_29+0xae>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    3c5e:	90 91 7b 00 	lds	r25, 0x007B
    3c62:	98 60       	ori	r25, 0x08	; 8
    3c64:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    3c68:	90 91 21 02 	lds	r25, 0x0221
    3c6c:	98 5c       	subi	r25, 0xC8	; 200
    3c6e:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {
    3c72:	82 30       	cpi	r24, 0x02	; 2
    3c74:	09 f0       	breq	.+2      	; 0x3c78 <__vector_29+0x2ac>
    3c76:	13 cf       	rjmp	.-474    	; 0x3a9e <__vector_29+0xd2>

		if(hardwareRevision == HW_REV_3_0) {
    3c78:	20 91 4b 04 	lds	r18, 0x044B
    3c7c:	22 23       	and	r18, r18
    3c7e:	51 f0       	breq	.+20     	; 0x3c94 <__vector_29+0x2c8>
			PORTJ &= 0xF0;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    3c80:	21 30       	cpi	r18, 0x01	; 1
    3c82:	19 f0       	breq	.+6      	; 0x3c8a <__vector_29+0x2be>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    3c84:	22 30       	cpi	r18, 0x02	; 2
    3c86:	09 f0       	breq	.+2      	; 0x3c8a <__vector_29+0x2be>
    3c88:	0a cf       	rjmp	.-492    	; 0x3a9e <__vector_29+0xd2>
			PORTJ = 0xFF;
    3c8a:	8f ef       	ldi	r24, 0xFF	; 255
    3c8c:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    3c90:	12 b8       	out	0x02, r1	; 2
    3c92:	05 cf       	rjmp	.-502    	; 0x3a9e <__vector_29+0xd2>

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if(adcSamplingState == 2) {

		if(hardwareRevision == HW_REV_3_0) {
			PORTJ &= 0xF0;
    3c94:	80 91 05 01 	lds	r24, 0x0105
    3c98:	80 7f       	andi	r24, 0xF0	; 240
    3c9a:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    3c9e:	12 b8       	out	0x02, r1	; 2
    3ca0:	fe ce       	rjmp	.-516    	; 0x3a9e <__vector_29+0xd2>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3ca2:	81 30       	cpi	r24, 0x01	; 1
    3ca4:	09 f0       	breq	.+2      	; 0x3ca8 <__vector_29+0x2dc>
    3ca6:	e9 ce       	rjmp	.-558    	; 0x3a7a <__vector_29+0xae>
			}
			adcSamplingState = 1;
			break;

		case 1:	// left motor
			currentAdChannel = currentMotLeftChannel;
    3ca8:	80 91 23 02 	lds	r24, 0x0223
    3cac:	80 93 21 02 	sts	0x0221, r24
			leftChannelPhase = leftMotorPhase;
    3cb0:	80 91 26 02 	lds	r24, 0x0226
    3cb4:	80 93 ba 02 	sts	0x02BA, r24
			adcSaveDataTo = SAVE_TO_PROX;
    3cb8:	10 92 b7 02 	sts	0x02B7, r1
			adcSamplingState = 2;
    3cbc:	82 e0       	ldi	r24, 0x02	; 2
    3cbe:	80 93 b8 02 	sts	0x02B8, r24
			break;
    3cc2:	db ce       	rjmp	.-586    	; 0x3a7a <__vector_29+0xae>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3cc4:	81 30       	cpi	r24, 0x01	; 1
    3cc6:	09 f0       	breq	.+2      	; 0x3cca <__vector_29+0x2fe>
    3cc8:	bd ce       	rjmp	.-646    	; 0x3a44 <__vector_29+0x78>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    3cca:	80 91 e1 02 	lds	r24, 0x02E1
    3cce:	90 91 e2 02 	lds	r25, 0x02E2
    3cd2:	82 0f       	add	r24, r18
    3cd4:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    3cd6:	96 95       	lsr	r25
    3cd8:	87 95       	ror	r24
    3cda:	90 93 e2 02 	sts	0x02E2, r25
    3cde:	80 93 e1 02 	sts	0x02E1, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	switch(adcSamplingState) {
    3ce2:	80 91 b8 02 	lds	r24, 0x02B8
    3ce6:	82 30       	cpi	r24, 0x02	; 2
    3ce8:	09 f0       	breq	.+2      	; 0x3cec <__vector_29+0x320>
    3cea:	b1 ce       	rjmp	.-670    	; 0x3a4e <__vector_29+0x82>
			adcSaveDataTo = SAVE_TO_PROX;
			adcSamplingState = 2;
			break;

		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
    3cec:	80 91 24 02 	lds	r24, 0x0224
    3cf0:	80 93 21 02 	sts	0x0221, r24
			rightChannelPhase = rightMotorPhase;
    3cf4:	80 91 25 02 	lds	r24, 0x0225
    3cf8:	80 93 b9 02 	sts	0x02B9, r24
			if(leftChannelPhase == ACTIVE_PHASE) {
    3cfc:	80 91 ba 02 	lds	r24, 0x02BA
    3d00:	88 23       	and	r24, r24
    3d02:	09 f0       	breq	.+2      	; 0x3d06 <__vector_29+0x33a>
    3d04:	a7 c0       	rjmp	.+334    	; 0x3e54 <__vector_29+0x488>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    3d06:	83 e0       	ldi	r24, 0x03	; 3
    3d08:	80 93 b7 02 	sts	0x02B7, r24
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 3;
    3d0c:	83 e0       	ldi	r24, 0x03	; 3
    3d0e:	80 93 b8 02 	sts	0x02B8, r24
			break;
    3d12:	b3 ce       	rjmp	.-666    	; 0x3a7a <__vector_29+0xae>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    3d14:	80 91 0a 02 	lds	r24, 0x020A
    3d18:	88 23       	and	r24, r24
    3d1a:	09 f4       	brne	.+2      	; 0x3d1e <__vector_29+0x352>
    3d1c:	93 ce       	rjmp	.-730    	; 0x3a44 <__vector_29+0x78>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    3d1e:	90 91 00 01 	lds	r25, 0x0100
    3d22:	93 fd       	sbrc	r25, 3
    3d24:	8f ce       	rjmp	.-738    	; 0x3a44 <__vector_29+0x78>
    3d26:	90 91 00 01 	lds	r25, 0x0100
    3d2a:	94 fd       	sbrc	r25, 4
    3d2c:	8b ce       	rjmp	.-746    	; 0x3a44 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    3d2e:	48 2f       	mov	r20, r24
    3d30:	4f 5f       	subi	r20, 0xFF	; 255
    3d32:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    3d36:	45 30       	cpi	r20, 0x05	; 5
    3d38:	08 f4       	brcc	.+2      	; 0x3d3c <__vector_29+0x370>
    3d3a:	84 ce       	rjmp	.-760    	; 0x3a44 <__vector_29+0x78>
					if(pwm_left != 0) {
    3d3c:	80 91 f5 02 	lds	r24, 0x02F5
    3d40:	90 91 f6 02 	lds	r25, 0x02F6
    3d44:	00 97       	sbiw	r24, 0x00	; 0
    3d46:	51 f0       	breq	.+20     	; 0x3d5c <__vector_29+0x390>
						left_vel_sum += value;
    3d48:	80 91 eb 02 	lds	r24, 0x02EB
    3d4c:	90 91 ec 02 	lds	r25, 0x02EC
    3d50:	82 0f       	add	r24, r18
    3d52:	93 1f       	adc	r25, r19
    3d54:	90 93 ec 02 	sts	0x02EC, r25
    3d58:	80 93 eb 02 	sts	0x02EB, r24
					}
					if(firstSampleLeft==8) {
    3d5c:	48 30       	cpi	r20, 0x08	; 8
    3d5e:	09 f0       	breq	.+2      	; 0x3d62 <__vector_29+0x396>
    3d60:	71 ce       	rjmp	.-798    	; 0x3a44 <__vector_29+0x78>
						firstSampleLeft = 0;
    3d62:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	80 93 07 02 	sts	0x0207, r24
    3d6c:	6b ce       	rjmp	.-810    	; 0x3a44 <__vector_29+0x78>
			}
			adcSamplingState = 3;
			break;

		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
    3d6e:	80 91 23 02 	lds	r24, 0x0223
    3d72:	80 93 21 02 	sts	0x0221, r24
			leftChannelPhase = leftMotorPhase;
    3d76:	80 91 26 02 	lds	r24, 0x0226
    3d7a:	80 93 ba 02 	sts	0x02BA, r24
			if(rightChannelPhase == ACTIVE_PHASE) {
    3d7e:	80 91 b9 02 	lds	r24, 0x02B9
    3d82:	88 23       	and	r24, r24
    3d84:	09 f0       	breq	.+2      	; 0x3d88 <__vector_29+0x3bc>
    3d86:	54 c0       	rjmp	.+168    	; 0x3e30 <__vector_29+0x464>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	80 93 b7 02 	sts	0x02B7, r24
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 4;
    3d8e:	84 e0       	ldi	r24, 0x04	; 4
    3d90:	80 93 b8 02 	sts	0x02B8, r24
			break;
    3d94:	72 ce       	rjmp	.-796    	; 0x3a7a <__vector_29+0xae>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    3d96:	80 91 09 02 	lds	r24, 0x0209
    3d9a:	88 23       	and	r24, r24
    3d9c:	09 f4       	brne	.+2      	; 0x3da0 <__vector_29+0x3d4>
    3d9e:	52 ce       	rjmp	.-860    	; 0x3a44 <__vector_29+0x78>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    3da0:	63 99       	sbic	0x0c, 3	; 12
    3da2:	50 ce       	rjmp	.-864    	; 0x3a44 <__vector_29+0x78>
    3da4:	64 99       	sbic	0x0c, 4	; 12
    3da6:	4e ce       	rjmp	.-868    	; 0x3a44 <__vector_29+0x78>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    3da8:	48 2f       	mov	r20, r24
    3daa:	4f 5f       	subi	r20, 0xFF	; 255
    3dac:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    3db0:	45 30       	cpi	r20, 0x05	; 5
    3db2:	08 f4       	brcc	.+2      	; 0x3db6 <__vector_29+0x3ea>
    3db4:	47 ce       	rjmp	.-882    	; 0x3a44 <__vector_29+0x78>
					if(pwm_right != 0) {
    3db6:	80 91 f3 02 	lds	r24, 0x02F3
    3dba:	90 91 f4 02 	lds	r25, 0x02F4
    3dbe:	00 97       	sbiw	r24, 0x00	; 0
    3dc0:	51 f0       	breq	.+20     	; 0x3dd6 <__vector_29+0x40a>
						right_vel_sum += value;
    3dc2:	80 91 ed 02 	lds	r24, 0x02ED
    3dc6:	90 91 ee 02 	lds	r25, 0x02EE
    3dca:	82 0f       	add	r24, r18
    3dcc:	93 1f       	adc	r25, r19
    3dce:	90 93 ee 02 	sts	0x02EE, r25
    3dd2:	80 93 ed 02 	sts	0x02ED, r24
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    3dd6:	48 30       	cpi	r20, 0x08	; 8
    3dd8:	09 f0       	breq	.+2      	; 0x3ddc <__vector_29+0x410>
    3dda:	34 ce       	rjmp	.-920    	; 0x3a44 <__vector_29+0x78>
						firstSampleRight = 0;
    3ddc:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    3de0:	81 e0       	ldi	r24, 0x01	; 1
    3de2:	80 93 08 02 	sts	0x0208, r24
    3de6:	2e ce       	rjmp	.-932    	; 0x3a44 <__vector_29+0x78>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    3de8:	80 91 df 02 	lds	r24, 0x02DF
    3dec:	90 91 e0 02 	lds	r25, 0x02E0
    3df0:	82 0f       	add	r24, r18
    3df2:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    3df4:	96 95       	lsr	r25
    3df6:	87 95       	ror	r24
    3df8:	90 93 e0 02 	sts	0x02E0, r25
    3dfc:	80 93 df 02 	sts	0x02DF, r24
			break;
    3e00:	21 ce       	rjmp	.-958    	; 0x3a44 <__vector_29+0x78>
				} else {
					if(hardwareRevision == HW_REV_3_0) {
						PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
					}

					if(hardwareRevision == HW_REV_3_0_1) {
    3e02:	21 30       	cpi	r18, 0x01	; 1
    3e04:	11 f0       	breq	.+4      	; 0x3e0a <__vector_29+0x43e>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
					}

					if(hardwareRevision == HW_REV_3_1) {
    3e06:	22 30       	cpi	r18, 0x02	; 2
    3e08:	81 f4       	brne	.+32     	; 0x3e2a <__vector_29+0x45e>
						PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    3e0a:	40 91 05 01 	lds	r20, 0x0105
    3e0e:	40 97       	sbiw	r24, 0x10	; 16
    3e10:	95 95       	asr	r25
    3e12:	87 95       	ror	r24
    3e14:	21 e0       	ldi	r18, 0x01	; 1
    3e16:	30 e0       	ldi	r19, 0x00	; 0
    3e18:	02 c0       	rjmp	.+4      	; 0x3e1e <__vector_29+0x452>
    3e1a:	22 0f       	add	r18, r18
    3e1c:	33 1f       	adc	r19, r19
    3e1e:	8a 95       	dec	r24
    3e20:	e2 f7       	brpl	.-8      	; 0x3e1a <__vector_29+0x44e>
    3e22:	20 95       	com	r18
    3e24:	24 23       	and	r18, r20
    3e26:	20 93 05 01 	sts	0x0105, r18
    3e2a:	80 91 b8 02 	lds	r24, 0x02B8
    3e2e:	25 ce       	rjmp	.-950    	; 0x3a7a <__vector_29+0xae>
		case 3:	// left motor
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    3e30:	81 30       	cpi	r24, 0x01	; 1
    3e32:	d1 f1       	breq	.+116    	; 0x3ea8 <__vector_29+0x4dc>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3e34:	85 e0       	ldi	r24, 0x05	; 5
    3e36:	80 93 b7 02 	sts	0x02B7, r24
    3e3a:	a9 cf       	rjmp	.-174    	; 0x3d8e <__vector_29+0x3c2>
		case 4:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3e3c:	91 30       	cpi	r25, 0x01	; 1
    3e3e:	09 f0       	breq	.+2      	; 0x3e42 <__vector_29+0x476>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3e40:	85 e0       	ldi	r24, 0x05	; 5
    3e42:	80 93 b7 02 	sts	0x02B7, r24
    3e46:	e9 ce       	rjmp	.-558    	; 0x3c1a <__vector_29+0x24e>
		case 0:	// proximity
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
    3e48:	81 30       	cpi	r24, 0x01	; 1
    3e4a:	b1 f1       	breq	.+108    	; 0x3eb8 <__vector_29+0x4ec>
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3e4c:	85 e0       	ldi	r24, 0x05	; 5
    3e4e:	80 93 b7 02 	sts	0x02B7, r24
    3e52:	10 ce       	rjmp	.-992    	; 0x3a74 <__vector_29+0xa8>
		case 2:	// right motor
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
    3e54:	81 30       	cpi	r24, 0x01	; 1
    3e56:	61 f1       	breq	.+88     	; 0x3eb0 <__vector_29+0x4e4>
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
    3e58:	85 e0       	ldi	r24, 0x05	; 5
    3e5a:	80 93 b7 02 	sts	0x02B7, r24
    3e5e:	56 cf       	rjmp	.-340    	; 0x3d0c <__vector_29+0x340>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    3e60:	10 92 63 04 	sts	0x0463, r1
    3e64:	b8 ce       	rjmp	.-656    	; 0x3bd6 <__vector_29+0x20a>

			// turn on the IR pulses for the proximities only in their active phases
			if(currentProx & 0x01) {
				if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
										// PORTA for proximity sensors, PORTJ for ground sensors
					PORTA = (1 << (currentProx>>1));	// pulse on
    3e66:	66 95       	lsr	r22
    3e68:	81 e0       	ldi	r24, 0x01	; 1
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	02 c0       	rjmp	.+4      	; 0x3e72 <__vector_29+0x4a6>
    3e6e:	88 0f       	add	r24, r24
    3e70:	99 1f       	adc	r25, r25
    3e72:	6a 95       	dec	r22
    3e74:	e2 f7       	brpl	.-8      	; 0x3e6e <__vector_29+0x4a2>
    3e76:	82 b9       	out	0x02, r24	; 2
    3e78:	80 91 b8 02 	lds	r24, 0x02B8
    3e7c:	fe cd       	rjmp	.-1028   	; 0x3a7a <__vector_29+0xae>
			} else {
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
    3e7e:	80 91 bd 02 	lds	r24, 0x02BD
    3e82:	81 30       	cpi	r24, 0x01	; 1
    3e84:	a1 f1       	breq	.+104    	; 0x3eee <__vector_29+0x522>
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	f8 cd       	rjmp	.-1040   	; 0x3a7a <__vector_29+0xae>
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3e8a:	80 91 bd 02 	lds	r24, 0x02BD
    3e8e:	82 30       	cpi	r24, 0x02	; 2
    3e90:	09 f0       	breq	.+2      	; 0x3e94 <__vector_29+0x4c8>
    3e92:	1f ce       	rjmp	.-962    	; 0x3ad2 <__vector_29+0x106>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    3e94:	30 93 bc 02 	sts	0x02BC, r19
    3e98:	20 93 bb 02 	sts	0x02BB, r18
				measBattery = 0;
    3e9c:	10 92 bd 02 	sts	0x02BD, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    3ea0:	46 98       	cbi	0x08, 6	; 8
    3ea2:	4e e0       	ldi	r20, 0x0E	; 14
    3ea4:	50 e0       	ldi	r21, 0x00	; 0
    3ea6:	1e ce       	rjmp	.-964    	; 0x3ae4 <__vector_29+0x118>
			currentAdChannel = currentMotLeftChannel;
			leftChannelPhase = leftMotorPhase;
			if(rightChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    3ea8:	82 e0       	ldi	r24, 0x02	; 2
    3eaa:	80 93 b7 02 	sts	0x02B7, r24
    3eae:	6f cf       	rjmp	.-290    	; 0x3d8e <__vector_29+0x3c2>
			currentAdChannel = currentMotRightChannel;
			rightChannelPhase = rightMotorPhase;
			if(leftChannelPhase == ACTIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
			} else if(leftChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    3eb0:	84 e0       	ldi	r24, 0x04	; 4
    3eb2:	80 93 b7 02 	sts	0x02B7, r24
    3eb6:	2a cf       	rjmp	.-428    	; 0x3d0c <__vector_29+0x340>
			currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
															// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
			if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
			} else if(rightChannelPhase == PASSIVE_PHASE) {
				adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    3eb8:	82 e0       	ldi	r24, 0x02	; 2
    3eba:	80 93 b7 02 	sts	0x02B7, r24
    3ebe:	da cd       	rjmp	.-1100   	; 0x3a74 <__vector_29+0xa8>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    3ec0:	11 82       	std	Z+1, r1	; 0x01
    3ec2:	10 82       	st	Z, r1
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	3a ce       	rjmp	.-908    	; 0x3b3e <__vector_29+0x172>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    3eca:	ac 01       	movw	r20, r24
    3ecc:	44 5c       	subi	r20, 0xC4	; 196
    3ece:	5f 4f       	sbci	r21, 0xFF	; 255
    3ed0:	55 95       	asr	r21
    3ed2:	47 95       	ror	r20
    3ed4:	48 37       	cpi	r20, 0x78	; 120
    3ed6:	51 05       	cpc	r21, r1
    3ed8:	7c f4       	brge	.+30     	; 0x3ef8 <__vector_29+0x52c>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    3eda:	21 54       	subi	r18, 0x41	; 65
    3edc:	3d 4f       	sbci	r19, 0xFD	; 253
    3ede:	cc 97       	sbiw	r24, 0x3c	; 60
    3ee0:	95 95       	asr	r25
    3ee2:	87 95       	ror	r24
    3ee4:	cc 96       	adiw	r24, 0x3c	; 60
    3ee6:	f9 01       	movw	r30, r18
    3ee8:	91 83       	std	Z+1, r25	; 0x01
    3eea:	80 83       	st	Z, r24
    3eec:	33 ce       	rjmp	.-922    	; 0x3b54 <__vector_29+0x188>
				adcSaveDataTo = SKIP_SAMPLE;
			}
			adcSamplingState = 0;

			if(currentProx==14 && measBattery==1) {
				measBattery=2;
    3eee:	82 e0       	ldi	r24, 0x02	; 2
    3ef0:	80 93 bd 02 	sts	0x02BD, r24
				SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    3ef4:	46 9a       	sbi	0x08, 6	; 8
    3ef6:	98 ce       	rjmp	.-720    	; 0x3c28 <__vector_29+0x25c>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    3ef8:	ac 01       	movw	r20, r24
    3efa:	44 5d       	subi	r20, 0xD4	; 212
    3efc:	5e 4f       	sbci	r21, 0xFE	; 254
    3efe:	55 95       	asr	r21
    3f00:	47 95       	ror	r20
    3f02:	55 95       	asr	r21
    3f04:	47 95       	ror	r20
    3f06:	44 3b       	cpi	r20, 0xB4	; 180
    3f08:	51 05       	cpc	r21, r1
    3f0a:	74 f4       	brge	.+28     	; 0x3f28 <__vector_29+0x55c>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    3f0c:	21 54       	subi	r18, 0x41	; 65
    3f0e:	3d 4f       	sbci	r19, 0xFD	; 253
    3f10:	84 5b       	subi	r24, 0xB4	; 180
    3f12:	90 40       	sbci	r25, 0x00	; 0
    3f14:	95 95       	asr	r25
    3f16:	87 95       	ror	r24
    3f18:	95 95       	asr	r25
    3f1a:	87 95       	ror	r24
    3f1c:	88 58       	subi	r24, 0x88	; 136
    3f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f20:	f9 01       	movw	r30, r18
    3f22:	91 83       	std	Z+1, r25	; 0x01
    3f24:	80 83       	st	Z, r24
    3f26:	16 ce       	rjmp	.-980    	; 0x3b54 <__vector_29+0x188>

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    3f28:	21 54       	subi	r18, 0x41	; 65
    3f2a:	3d 4f       	sbci	r19, 0xFD	; 253
    3f2c:	84 5a       	subi	r24, 0xA4	; 164
    3f2e:	91 40       	sbci	r25, 0x01	; 1
    3f30:	95 95       	asr	r25
    3f32:	87 95       	ror	r24
    3f34:	95 95       	asr	r25
    3f36:	87 95       	ror	r24
    3f38:	95 95       	asr	r25
    3f3a:	87 95       	ror	r24
    3f3c:	8c 54       	subi	r24, 0x4C	; 76
    3f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f40:	f9 01       	movw	r30, r18
    3f42:	91 83       	std	Z+1, r25	; 0x01
    3f44:	80 83       	st	Z, r24
    3f46:	06 ce       	rjmp	.-1012   	; 0x3b54 <__vector_29+0x188>

00003f48 <initMotors>:

#include "motors.h"

void initMotors() {
    3f48:	0f 93       	push	r16
    3f4a:	1f 93       	push	r17
    3f4c:	cf 93       	push	r28
    3f4e:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    3f50:	e0 e9       	ldi	r30, 0x90	; 144
    3f52:	f0 e0       	ldi	r31, 0x00	; 0
    3f54:	10 82       	st	Z, r1
	TCCR3B = 0;
    3f56:	41 e9       	ldi	r20, 0x91	; 145
    3f58:	50 e0       	ldi	r21, 0x00	; 0
    3f5a:	da 01       	movw	r26, r20
    3f5c:	1c 92       	st	X, r1
	TIMSK3 = 0;
    3f5e:	21 e7       	ldi	r18, 0x71	; 113
    3f60:	30 e0       	ldi	r19, 0x00	; 0
    3f62:	e9 01       	movw	r28, r18
    3f64:	18 82       	st	Y, r1
	TCCR4A = 0;
    3f66:	a0 ea       	ldi	r26, 0xA0	; 160
    3f68:	b0 e0       	ldi	r27, 0x00	; 0
    3f6a:	1c 92       	st	X, r1
	TCCR4B = 0;
    3f6c:	81 ea       	ldi	r24, 0xA1	; 161
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	ec 01       	movw	r28, r24
    3f72:	18 82       	st	Y, r1
	TIMSK4 = 0;
    3f74:	02 e7       	ldi	r16, 0x72	; 114
    3f76:	10 e0       	ldi	r17, 0x00	; 0
    3f78:	e8 01       	movw	r28, r16
    3f7a:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    3f7c:	60 81       	ld	r22, Z
    3f7e:	63 68       	ori	r22, 0x83	; 131
    3f80:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    3f82:	60 81       	ld	r22, Z
    3f84:	63 60       	ori	r22, 0x03	; 3
    3f86:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    3f88:	ea 01       	movw	r28, r20
    3f8a:	68 81       	ld	r22, Y
    3f8c:	6b 60       	ori	r22, 0x0B	; 11
    3f8e:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    3f90:	40 91 f3 02 	lds	r20, 0x02F3
    3f94:	50 91 f4 02 	lds	r21, 0x02F4
    3f98:	50 93 99 00 	sts	0x0099, r21
    3f9c:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    3fa0:	10 92 9b 00 	sts	0x009B, r1
    3fa4:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    3fa8:	e9 01       	movw	r28, r18
    3faa:	48 81       	ld	r20, Y
    3fac:	41 60       	ori	r20, 0x01	; 1
    3fae:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3fb0:	20 81       	ld	r18, Z
    3fb2:	2f 75       	andi	r18, 0x5F	; 95
    3fb4:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3fb6:	2e b1       	in	r18, 0x0e	; 14
    3fb8:	27 7e       	andi	r18, 0xE7	; 231
    3fba:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    3fbc:	2c 91       	ld	r18, X
    3fbe:	23 68       	ori	r18, 0x83	; 131
    3fc0:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	20 81       	ld	r18, Z
    3fc6:	2b 60       	ori	r18, 0x0B	; 11
    3fc8:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    3fca:	80 91 f5 02 	lds	r24, 0x02F5
    3fce:	90 91 f6 02 	lds	r25, 0x02F6
    3fd2:	90 93 a9 00 	sts	0x00A9, r25
    3fd6:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    3fda:	10 92 ab 00 	sts	0x00AB, r1
    3fde:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    3fe2:	e8 01       	movw	r28, r16
    3fe4:	88 81       	ld	r24, Y
    3fe6:	81 60       	ori	r24, 0x01	; 1
    3fe8:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    3fea:	8c 91       	ld	r24, X
    3fec:	8f 75       	andi	r24, 0x5F	; 95
    3fee:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3ff0:	e2 e0       	ldi	r30, 0x02	; 2
    3ff2:	f1 e0       	ldi	r31, 0x01	; 1
    3ff4:	80 81       	ld	r24, Z
    3ff6:	87 7e       	andi	r24, 0xE7	; 231
    3ff8:	80 83       	st	Z, r24


}
    3ffa:	df 91       	pop	r29
    3ffc:	cf 91       	pop	r28
    3ffe:	1f 91       	pop	r17
    4000:	0f 91       	pop	r16
    4002:	08 95       	ret

00004004 <cast_speed>:

signed int cast_speed(signed int vel) {
    4004:	28 2f       	mov	r18, r24
    4006:	39 2f       	mov	r19, r25
    4008:	8e ef       	ldi	r24, 0xFE	; 254
    400a:	20 30       	cpi	r18, 0x00	; 0
    400c:	38 07       	cpc	r19, r24
    400e:	14 f4       	brge	.+4      	; 0x4014 <cast_speed+0x10>
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	3e ef       	ldi	r19, 0xFE	; 254
    4014:	82 e0       	ldi	r24, 0x02	; 2
    4016:	21 30       	cpi	r18, 0x01	; 1
    4018:	38 07       	cpc	r19, r24
    401a:	14 f0       	brlt	.+4      	; 0x4020 <cast_speed+0x1c>
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	32 e0       	ldi	r19, 0x02	; 2
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    4020:	c9 01       	movw	r24, r18
    4022:	08 95       	ret

00004024 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    4024:	80 91 07 02 	lds	r24, 0x0207
    4028:	88 23       	and	r24, r24
    402a:	c1 f1       	breq	.+112    	; 0x409c <handleMotorsWithNoController+0x78>
		last_left_vel = left_vel_sum>>2;
    402c:	60 91 eb 02 	lds	r22, 0x02EB
    4030:	70 91 ec 02 	lds	r23, 0x02EC
    4034:	76 95       	lsr	r23
    4036:	67 95       	ror	r22
    4038:	76 95       	lsr	r23
    403a:	67 95       	ror	r22
    403c:	70 93 f0 02 	sts	0x02F0, r23
    4040:	60 93 ef 02 	sts	0x02EF, r22
		compute_left_vel = 0;
    4044:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    4048:	10 92 ec 02 	sts	0x02EC, r1
    404c:	10 92 eb 02 	sts	0x02EB, r1

		if(pwm_left_desired >= 0) {
    4050:	80 91 f9 02 	lds	r24, 0x02F9
    4054:	90 91 fa 02 	lds	r25, 0x02FA
    4058:	97 fd       	sbrc	r25, 7
    405a:	e3 c0       	rjmp	.+454    	; 0x4222 <handleMotorsWithNoController+0x1fe>
			leftMotSteps += (last_left_vel>>3);
    405c:	75 95       	asr	r23
    405e:	67 95       	ror	r22
    4060:	75 95       	asr	r23
    4062:	67 95       	ror	r22
    4064:	75 95       	asr	r23
    4066:	67 95       	ror	r22
    4068:	88 27       	eor	r24, r24
    406a:	77 fd       	sbrc	r23, 7
    406c:	80 95       	com	r24
    406e:	98 2f       	mov	r25, r24
    4070:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4074:	9b 01       	movw	r18, r22
    4076:	ac 01       	movw	r20, r24
    4078:	60 91 d3 02 	lds	r22, 0x02D3
    407c:	70 91 d4 02 	lds	r23, 0x02D4
    4080:	80 91 d5 02 	lds	r24, 0x02D5
    4084:	90 91 d6 02 	lds	r25, 0x02D6
    4088:	0e 94 45 3d 	call	0x7a8a	; 0x7a8a <__addsf3>
    408c:	60 93 d3 02 	sts	0x02D3, r22
    4090:	70 93 d4 02 	sts	0x02D4, r23
    4094:	80 93 d5 02 	sts	0x02D5, r24
    4098:	90 93 d6 02 	sts	0x02D6, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    409c:	80 91 08 02 	lds	r24, 0x0208
    40a0:	88 23       	and	r24, r24
    40a2:	c1 f1       	breq	.+112    	; 0x4114 <handleMotorsWithNoController+0xf0>
		last_right_vel = right_vel_sum>>2;
    40a4:	60 91 ed 02 	lds	r22, 0x02ED
    40a8:	70 91 ee 02 	lds	r23, 0x02EE
    40ac:	76 95       	lsr	r23
    40ae:	67 95       	ror	r22
    40b0:	76 95       	lsr	r23
    40b2:	67 95       	ror	r22
    40b4:	70 93 f2 02 	sts	0x02F2, r23
    40b8:	60 93 f1 02 	sts	0x02F1, r22
		compute_right_vel = 0;
    40bc:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    40c0:	10 92 ee 02 	sts	0x02EE, r1
    40c4:	10 92 ed 02 	sts	0x02ED, r1

		if(pwm_right_desired >= 0) {
    40c8:	80 91 f7 02 	lds	r24, 0x02F7
    40cc:	90 91 f8 02 	lds	r25, 0x02F8
    40d0:	97 fd       	sbrc	r25, 7
    40d2:	86 c0       	rjmp	.+268    	; 0x41e0 <handleMotorsWithNoController+0x1bc>
			rightMotSteps += (last_right_vel>>3);
    40d4:	75 95       	asr	r23
    40d6:	67 95       	ror	r22
    40d8:	75 95       	asr	r23
    40da:	67 95       	ror	r22
    40dc:	75 95       	asr	r23
    40de:	67 95       	ror	r22
    40e0:	88 27       	eor	r24, r24
    40e2:	77 fd       	sbrc	r23, 7
    40e4:	80 95       	com	r24
    40e6:	98 2f       	mov	r25, r24
    40e8:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    40ec:	9b 01       	movw	r18, r22
    40ee:	ac 01       	movw	r20, r24
    40f0:	60 91 cf 02 	lds	r22, 0x02CF
    40f4:	70 91 d0 02 	lds	r23, 0x02D0
    40f8:	80 91 d1 02 	lds	r24, 0x02D1
    40fc:	90 91 d2 02 	lds	r25, 0x02D2
    4100:	0e 94 45 3d 	call	0x7a8a	; 0x7a8a <__addsf3>
    4104:	60 93 cf 02 	sts	0x02CF, r22
    4108:	70 93 d0 02 	sts	0x02D0, r23
    410c:	80 93 d1 02 	sts	0x02D1, r24
    4110:	90 93 d2 02 	sts	0x02D2, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    4114:	20 91 fb 02 	lds	r18, 0x02FB
    4118:	30 91 fc 02 	lds	r19, 0x02FC
    411c:	c9 01       	movw	r24, r18
    411e:	88 0f       	add	r24, r24
    4120:	99 1f       	adc	r25, r25
    4122:	88 0f       	add	r24, r24
    4124:	99 1f       	adc	r25, r25
    4126:	82 0f       	add	r24, r18
    4128:	93 1f       	adc	r25, r19
    412a:	90 93 0c 03 	sts	0x030C, r25
    412e:	80 93 0b 03 	sts	0x030B, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    4132:	40 91 fd 02 	lds	r20, 0x02FD
    4136:	50 91 fe 02 	lds	r21, 0x02FE
    413a:	9a 01       	movw	r18, r20
    413c:	22 0f       	add	r18, r18
    413e:	33 1f       	adc	r19, r19
    4140:	22 0f       	add	r18, r18
    4142:	33 1f       	adc	r19, r19
    4144:	24 0f       	add	r18, r20
    4146:	35 1f       	adc	r19, r21
    4148:	52 2f       	mov	r21, r18
    414a:	43 2f       	mov	r20, r19
    414c:	20 93 0d 03 	sts	0x030D, r18
    4150:	30 93 0e 03 	sts	0x030E, r19
	if(obstacleAvoidanceEnabled) {
    4154:	20 91 61 04 	lds	r18, 0x0461
    4158:	22 23       	and	r18, r18
    415a:	39 f5       	brne	.+78     	; 0x41aa <handleMotorsWithNoController+0x186>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    415c:	50 93 f5 02 	sts	0x02F5, r21
    4160:	40 93 f6 02 	sts	0x02F6, r20
	pwm_right = pwm_right_working;
    4164:	90 93 f4 02 	sts	0x02F4, r25
    4168:	80 93 f3 02 	sts	0x02F3, r24

	if(pwm_right > 0) {
    416c:	18 16       	cp	r1, r24
    416e:	19 06       	cpc	r1, r25
    4170:	5c f5       	brge	.+86     	; 0x41c8 <handleMotorsWithNoController+0x1a4>
		OCR3A = (unsigned int)pwm_right;
    4172:	90 93 99 00 	sts	0x0099, r25
    4176:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    417a:	80 91 f5 02 	lds	r24, 0x02F5
    417e:	90 91 f6 02 	lds	r25, 0x02F6
    4182:	18 16       	cp	r1, r24
    4184:	19 06       	cpc	r1, r25
    4186:	2c f4       	brge	.+10     	; 0x4192 <handleMotorsWithNoController+0x16e>
		OCR4A = (unsigned int)pwm_left;
    4188:	90 93 a9 00 	sts	0x00A9, r25
    418c:	80 93 a8 00 	sts	0x00A8, r24
    4190:	08 95       	ret
	} else if(pwm_left < 0) {
    4192:	00 97       	sbiw	r24, 0x00	; 0
    4194:	09 f0       	breq	.+2      	; 0x4198 <handleMotorsWithNoController+0x174>
    4196:	6e c0       	rjmp	.+220    	; 0x4274 <handleMotorsWithNoController+0x250>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    4198:	10 92 a9 00 	sts	0x00A9, r1
    419c:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    41a0:	10 92 ab 00 	sts	0x00AB, r1
    41a4:	10 92 aa 00 	sts	0x00AA, r1
    41a8:	08 95       	ret
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    41aa:	8d e0       	ldi	r24, 0x0D	; 13
    41ac:	93 e0       	ldi	r25, 0x03	; 3
    41ae:	6b e0       	ldi	r22, 0x0B	; 11
    41b0:	73 e0       	ldi	r23, 0x03	; 3
    41b2:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <obstacleAvoidance>
    41b6:	50 91 0d 03 	lds	r21, 0x030D
    41ba:	40 91 0e 03 	lds	r20, 0x030E
    41be:	80 91 0b 03 	lds	r24, 0x030B
    41c2:	90 91 0c 03 	lds	r25, 0x030C
    41c6:	ca cf       	rjmp	.-108    	; 0x415c <handleMotorsWithNoController+0x138>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    41c8:	00 97       	sbiw	r24, 0x00	; 0
    41ca:	09 f0       	breq	.+2      	; 0x41ce <handleMotorsWithNoController+0x1aa>
    41cc:	4b c0       	rjmp	.+150    	; 0x4264 <handleMotorsWithNoController+0x240>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    41ce:	10 92 99 00 	sts	0x0099, r1
    41d2:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    41d6:	10 92 9b 00 	sts	0x009B, r1
    41da:	10 92 9a 00 	sts	0x009A, r1
    41de:	cd cf       	rjmp	.-102    	; 0x417a <handleMotorsWithNoController+0x156>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    41e0:	75 95       	asr	r23
    41e2:	67 95       	ror	r22
    41e4:	75 95       	asr	r23
    41e6:	67 95       	ror	r22
    41e8:	75 95       	asr	r23
    41ea:	67 95       	ror	r22
    41ec:	88 27       	eor	r24, r24
    41ee:	77 fd       	sbrc	r23, 7
    41f0:	80 95       	com	r24
    41f2:	98 2f       	mov	r25, r24
    41f4:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    41f8:	9b 01       	movw	r18, r22
    41fa:	ac 01       	movw	r20, r24
    41fc:	60 91 cf 02 	lds	r22, 0x02CF
    4200:	70 91 d0 02 	lds	r23, 0x02D0
    4204:	80 91 d1 02 	lds	r24, 0x02D1
    4208:	90 91 d2 02 	lds	r25, 0x02D2
    420c:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__subsf3>
    4210:	60 93 cf 02 	sts	0x02CF, r22
    4214:	70 93 d0 02 	sts	0x02D0, r23
    4218:	80 93 d1 02 	sts	0x02D1, r24
    421c:	90 93 d2 02 	sts	0x02D2, r25
    4220:	79 cf       	rjmp	.-270    	; 0x4114 <handleMotorsWithNoController+0xf0>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    4222:	75 95       	asr	r23
    4224:	67 95       	ror	r22
    4226:	75 95       	asr	r23
    4228:	67 95       	ror	r22
    422a:	75 95       	asr	r23
    422c:	67 95       	ror	r22
    422e:	88 27       	eor	r24, r24
    4230:	77 fd       	sbrc	r23, 7
    4232:	80 95       	com	r24
    4234:	98 2f       	mov	r25, r24
    4236:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    423a:	9b 01       	movw	r18, r22
    423c:	ac 01       	movw	r20, r24
    423e:	60 91 d3 02 	lds	r22, 0x02D3
    4242:	70 91 d4 02 	lds	r23, 0x02D4
    4246:	80 91 d5 02 	lds	r24, 0x02D5
    424a:	90 91 d6 02 	lds	r25, 0x02D6
    424e:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__subsf3>
    4252:	60 93 d3 02 	sts	0x02D3, r22
    4256:	70 93 d4 02 	sts	0x02D4, r23
    425a:	80 93 d5 02 	sts	0x02D5, r24
    425e:	90 93 d6 02 	sts	0x02D6, r25
    4262:	1c cf       	rjmp	.-456    	; 0x409c <handleMotorsWithNoController+0x78>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    4264:	90 95       	com	r25
    4266:	81 95       	neg	r24
    4268:	9f 4f       	sbci	r25, 0xFF	; 255
    426a:	90 93 9b 00 	sts	0x009B, r25
    426e:	80 93 9a 00 	sts	0x009A, r24
    4272:	83 cf       	rjmp	.-250    	; 0x417a <handleMotorsWithNoController+0x156>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    4274:	90 95       	com	r25
    4276:	81 95       	neg	r24
    4278:	9f 4f       	sbci	r25, 0xFF	; 255
    427a:	90 93 ab 00 	sts	0x00AB, r25
    427e:	80 93 aa 00 	sts	0x00AA, r24
    4282:	08 95       	ret

00004284 <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4284:	28 2f       	mov	r18, r24
    4286:	33 27       	eor	r19, r19
    4288:	27 fd       	sbrc	r18, 7
    428a:	30 95       	com	r19
    428c:	37 fd       	sbrc	r19, 7
    428e:	13 c0       	rjmp	.+38     	; 0x42b6 <setLeftSpeed+0x32>
    4290:	30 93 10 03 	sts	0x0310, r19
    4294:	20 93 0f 03 	sts	0x030F, r18

    if(vel >= 0) {
    4298:	87 fd       	sbrc	r24, 7
    429a:	05 c0       	rjmp	.+10     	; 0x42a6 <setLeftSpeed+0x22>
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    429c:	30 93 fa 02 	sts	0x02FA, r19
    42a0:	20 93 f9 02 	sts	0x02F9, r18
    42a4:	08 95       	ret
    42a6:	30 95       	com	r19
    42a8:	21 95       	neg	r18
    42aa:	3f 4f       	sbci	r19, 0xFF	; 255
    42ac:	30 93 fa 02 	sts	0x02FA, r19
    42b0:	20 93 f9 02 	sts	0x02F9, r18
    42b4:	08 95       	ret
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    42b6:	30 95       	com	r19
    42b8:	21 95       	neg	r18
    42ba:	3f 4f       	sbci	r19, 0xFF	; 255
    42bc:	e9 cf       	rjmp	.-46     	; 0x4290 <setLeftSpeed+0xc>

000042be <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    42be:	28 2f       	mov	r18, r24
    42c0:	33 27       	eor	r19, r19
    42c2:	27 fd       	sbrc	r18, 7
    42c4:	30 95       	com	r19
    42c6:	37 fd       	sbrc	r19, 7
    42c8:	13 c0       	rjmp	.+38     	; 0x42f0 <setRightSpeed+0x32>
    42ca:	30 93 12 03 	sts	0x0312, r19
    42ce:	20 93 11 03 	sts	0x0311, r18

    if(vel >= 0) {
    42d2:	87 fd       	sbrc	r24, 7
    42d4:	05 c0       	rjmp	.+10     	; 0x42e0 <setRightSpeed+0x22>
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    42d6:	30 93 f8 02 	sts	0x02F8, r19
    42da:	20 93 f7 02 	sts	0x02F7, r18
    42de:	08 95       	ret
    42e0:	30 95       	com	r19
    42e2:	21 95       	neg	r18
    42e4:	3f 4f       	sbci	r19, 0xFF	; 255
    42e6:	30 93 f8 02 	sts	0x02F8, r19
    42ea:	20 93 f7 02 	sts	0x02F7, r18
    42ee:	08 95       	ret

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    42f0:	30 95       	com	r19
    42f2:	21 95       	neg	r18
    42f4:	3f 4f       	sbci	r19, 0xFF	; 255
    42f6:	e9 cf       	rjmp	.-46     	; 0x42ca <setRightSpeed+0xc>

000042f8 <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    42f8:	80 91 bf 04 	lds	r24, 0x04BF
    42fc:	88 23       	and	r24, r24
    42fe:	89 f5       	brne	.+98     	; 0x4362 <updateOdomData+0x6a>
        if(calibVelIndex>1) {
    4300:	e0 91 c3 04 	lds	r30, 0x04C3
    4304:	e2 30       	cpi	r30, 0x02	; 2
    4306:	08 f4       	brcc	.+2      	; 0x430a <updateOdomData+0x12>
    4308:	96 c0       	rjmp	.+300    	; 0x4436 <updateOdomData+0x13e>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    430a:	f0 e0       	ldi	r31, 0x00	; 0
    430c:	df 01       	movw	r26, r30
    430e:	a2 95       	swap	r26
    4310:	b2 95       	swap	r27
    4312:	b0 7f       	andi	r27, 0xF0	; 240
    4314:	ba 27       	eor	r27, r26
    4316:	a0 7f       	andi	r26, 0xF0	; 240
    4318:	ba 27       	eor	r27, r26
    431a:	aa 54       	subi	r26, 0x4A	; 74
    431c:	bb 4f       	sbci	r27, 0xFB	; 251
    431e:	12 96       	adiw	r26, 0x02	; 2
    4320:	2d 91       	ld	r18, X+
    4322:	3c 91       	ld	r19, X
    4324:	13 97       	sbiw	r26, 0x03	; 3
    4326:	80 91 82 05 	lds	r24, 0x0582
    432a:	90 91 83 05 	lds	r25, 0x0583
    432e:	28 17       	cp	r18, r24
    4330:	39 07       	cpc	r19, r25
    4332:	34 f0       	brlt	.+12     	; 0x4340 <updateOdomData+0x48>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    4334:	c9 01       	movw	r24, r18
    4336:	01 96       	adiw	r24, 0x01	; 1
    4338:	90 93 83 05 	sts	0x0583, r25
    433c:	80 93 82 05 	sts	0x0582, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    4340:	e2 95       	swap	r30
    4342:	f2 95       	swap	r31
    4344:	f0 7f       	andi	r31, 0xF0	; 240
    4346:	fe 27       	eor	r31, r30
    4348:	e0 7f       	andi	r30, 0xF0	; 240
    434a:	fe 27       	eor	r31, r30
    434c:	ea 53       	subi	r30, 0x3A	; 58
    434e:	fb 4f       	sbci	r31, 0xFB	; 251
    4350:	20 91 a9 04 	lds	r18, 0x04A9
    4354:	30 91 aa 04 	lds	r19, 0x04AA
    4358:	31 83       	std	Z+1, r19	; 0x01
    435a:	20 83       	st	Z, r18
        calibration[calibVelIndex-1][1] = tempVel;
    435c:	93 83       	std	Z+3, r25	; 0x03
    435e:	82 83       	std	Z+2, r24	; 0x02
    4360:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    4362:	81 30       	cpi	r24, 0x01	; 1
    4364:	31 f0       	breq	.+12     	; 0x4372 <updateOdomData+0x7a>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    4366:	82 30       	cpi	r24, 0x02	; 2
    4368:	09 f4       	brne	.+2      	; 0x436c <updateOdomData+0x74>
    436a:	6b c0       	rjmp	.+214    	; 0x4442 <updateOdomData+0x14a>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    436c:	83 30       	cpi	r24, 0x03	; 3
    436e:	91 f1       	breq	.+100    	; 0x43d4 <updateOdomData+0xdc>
    4370:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4372:	e0 91 c3 04 	lds	r30, 0x04C3
    4376:	e2 30       	cpi	r30, 0x02	; 2
    4378:	08 f4       	brcc	.+2      	; 0x437c <updateOdomData+0x84>
    437a:	93 c0       	rjmp	.+294    	; 0x44a2 <updateOdomData+0x1aa>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    437c:	f0 e0       	ldi	r31, 0x00	; 0
    437e:	df 01       	movw	r26, r30
    4380:	a2 95       	swap	r26
    4382:	b2 95       	swap	r27
    4384:	b0 7f       	andi	r27, 0xF0	; 240
    4386:	ba 27       	eor	r27, r26
    4388:	a0 7f       	andi	r26, 0xF0	; 240
    438a:	ba 27       	eor	r27, r26
    438c:	aa 54       	subi	r26, 0x4A	; 74
    438e:	bb 4f       	sbci	r27, 0xFB	; 251
    4390:	16 96       	adiw	r26, 0x06	; 6
    4392:	2d 91       	ld	r18, X+
    4394:	3c 91       	ld	r19, X
    4396:	17 97       	sbiw	r26, 0x07	; 7
    4398:	80 91 82 05 	lds	r24, 0x0582
    439c:	90 91 83 05 	lds	r25, 0x0583
    43a0:	28 17       	cp	r18, r24
    43a2:	39 07       	cpc	r19, r25
    43a4:	34 f0       	brlt	.+12     	; 0x43b2 <updateOdomData+0xba>
                tempVel = calibration[calibVelIndex-2][3]+1;
    43a6:	c9 01       	movw	r24, r18
    43a8:	01 96       	adiw	r24, 0x01	; 1
    43aa:	90 93 83 05 	sts	0x0583, r25
    43ae:	80 93 82 05 	sts	0x0582, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    43b2:	e2 95       	swap	r30
    43b4:	f2 95       	swap	r31
    43b6:	f0 7f       	andi	r31, 0xF0	; 240
    43b8:	fe 27       	eor	r31, r30
    43ba:	e0 7f       	andi	r30, 0xF0	; 240
    43bc:	fe 27       	eor	r31, r30
    43be:	ea 53       	subi	r30, 0x3A	; 58
    43c0:	fb 4f       	sbci	r31, 0xFB	; 251
    43c2:	20 91 ab 04 	lds	r18, 0x04AB
    43c6:	30 91 ac 04 	lds	r19, 0x04AC
    43ca:	35 83       	std	Z+5, r19	; 0x05
    43cc:	24 83       	std	Z+4, r18	; 0x04
        calibration[calibVelIndex-1][3] = tempVel;
    43ce:	97 83       	std	Z+7, r25	; 0x07
    43d0:	86 83       	std	Z+6, r24	; 0x06
    43d2:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    43d4:	e0 91 c3 04 	lds	r30, 0x04C3
    43d8:	e2 30       	cpi	r30, 0x02	; 2
    43da:	08 f4       	brcc	.+2      	; 0x43de <updateOdomData+0xe6>
    43dc:	68 c0       	rjmp	.+208    	; 0x44ae <updateOdomData+0x1b6>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    43de:	f0 e0       	ldi	r31, 0x00	; 0
    43e0:	df 01       	movw	r26, r30
    43e2:	a2 95       	swap	r26
    43e4:	b2 95       	swap	r27
    43e6:	b0 7f       	andi	r27, 0xF0	; 240
    43e8:	ba 27       	eor	r27, r26
    43ea:	a0 7f       	andi	r26, 0xF0	; 240
    43ec:	ba 27       	eor	r27, r26
    43ee:	aa 54       	subi	r26, 0x4A	; 74
    43f0:	bb 4f       	sbci	r27, 0xFB	; 251
    43f2:	1e 96       	adiw	r26, 0x0e	; 14
    43f4:	2d 91       	ld	r18, X+
    43f6:	3c 91       	ld	r19, X
    43f8:	1f 97       	sbiw	r26, 0x0f	; 15
    43fa:	80 91 82 05 	lds	r24, 0x0582
    43fe:	90 91 83 05 	lds	r25, 0x0583
    4402:	28 17       	cp	r18, r24
    4404:	39 07       	cpc	r19, r25
    4406:	34 f0       	brlt	.+12     	; 0x4414 <updateOdomData+0x11c>
                tempVel = calibration[calibVelIndex-2][7]+1;
    4408:	c9 01       	movw	r24, r18
    440a:	01 96       	adiw	r24, 0x01	; 1
    440c:	90 93 83 05 	sts	0x0583, r25
    4410:	80 93 82 05 	sts	0x0582, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    4414:	e2 95       	swap	r30
    4416:	f2 95       	swap	r31
    4418:	f0 7f       	andi	r31, 0xF0	; 240
    441a:	fe 27       	eor	r31, r30
    441c:	e0 7f       	andi	r30, 0xF0	; 240
    441e:	fe 27       	eor	r31, r30
    4420:	ea 53       	subi	r30, 0x3A	; 58
    4422:	fb 4f       	sbci	r31, 0xFB	; 251
    4424:	20 91 ab 04 	lds	r18, 0x04AB
    4428:	30 91 ac 04 	lds	r19, 0x04AC
    442c:	35 87       	std	Z+13, r19	; 0x0d
    442e:	24 87       	std	Z+12, r18	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    4430:	97 87       	std	Z+15, r25	; 0x0f
    4432:	86 87       	std	Z+14, r24	; 0x0e
    4434:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4436:	f0 e0       	ldi	r31, 0x00	; 0
    4438:	80 91 82 05 	lds	r24, 0x0582
    443c:	90 91 83 05 	lds	r25, 0x0583
    4440:	7f cf       	rjmp	.-258    	; 0x4340 <updateOdomData+0x48>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4442:	e0 91 c3 04 	lds	r30, 0x04C3
    4446:	e2 30       	cpi	r30, 0x02	; 2
    4448:	c0 f1       	brcs	.+112    	; 0x44ba <updateOdomData+0x1c2>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    444a:	f0 e0       	ldi	r31, 0x00	; 0
    444c:	df 01       	movw	r26, r30
    444e:	a2 95       	swap	r26
    4450:	b2 95       	swap	r27
    4452:	b0 7f       	andi	r27, 0xF0	; 240
    4454:	ba 27       	eor	r27, r26
    4456:	a0 7f       	andi	r26, 0xF0	; 240
    4458:	ba 27       	eor	r27, r26
    445a:	aa 54       	subi	r26, 0x4A	; 74
    445c:	bb 4f       	sbci	r27, 0xFB	; 251
    445e:	1a 96       	adiw	r26, 0x0a	; 10
    4460:	2d 91       	ld	r18, X+
    4462:	3c 91       	ld	r19, X
    4464:	1b 97       	sbiw	r26, 0x0b	; 11
    4466:	80 91 82 05 	lds	r24, 0x0582
    446a:	90 91 83 05 	lds	r25, 0x0583
    446e:	28 17       	cp	r18, r24
    4470:	39 07       	cpc	r19, r25
    4472:	34 f0       	brlt	.+12     	; 0x4480 <updateOdomData+0x188>
                tempVel = calibration[calibVelIndex-2][5]+1;
    4474:	c9 01       	movw	r24, r18
    4476:	01 96       	adiw	r24, 0x01	; 1
    4478:	90 93 83 05 	sts	0x0583, r25
    447c:	80 93 82 05 	sts	0x0582, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    4480:	e2 95       	swap	r30
    4482:	f2 95       	swap	r31
    4484:	f0 7f       	andi	r31, 0xF0	; 240
    4486:	fe 27       	eor	r31, r30
    4488:	e0 7f       	andi	r30, 0xF0	; 240
    448a:	fe 27       	eor	r31, r30
    448c:	ea 53       	subi	r30, 0x3A	; 58
    448e:	fb 4f       	sbci	r31, 0xFB	; 251
    4490:	20 91 a9 04 	lds	r18, 0x04A9
    4494:	30 91 aa 04 	lds	r19, 0x04AA
    4498:	31 87       	std	Z+9, r19	; 0x09
    449a:	20 87       	std	Z+8, r18	; 0x08
        calibration[calibVelIndex-1][5] = tempVel;
    449c:	93 87       	std	Z+11, r25	; 0x0b
    449e:	82 87       	std	Z+10, r24	; 0x0a
    44a0:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    44a2:	f0 e0       	ldi	r31, 0x00	; 0
    44a4:	80 91 82 05 	lds	r24, 0x0582
    44a8:	90 91 83 05 	lds	r25, 0x0583
    44ac:	82 cf       	rjmp	.-252    	; 0x43b2 <updateOdomData+0xba>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    44ae:	f0 e0       	ldi	r31, 0x00	; 0
    44b0:	80 91 82 05 	lds	r24, 0x0582
    44b4:	90 91 83 05 	lds	r25, 0x0583
    44b8:	ad cf       	rjmp	.-166    	; 0x4414 <updateOdomData+0x11c>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    44ba:	f0 e0       	ldi	r31, 0x00	; 0
    44bc:	80 91 82 05 	lds	r24, 0x0582
    44c0:	90 91 83 05 	lds	r25, 0x0583
    44c4:	dd cf       	rjmp	.-70     	; 0x4480 <updateOdomData+0x188>

000044c6 <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    44c6:	80 91 81 05 	lds	r24, 0x0581
    44ca:	82 30       	cpi	r24, 0x02	; 2
    44cc:	09 f4       	brne	.+2      	; 0x44d0 <handleCalibration+0xa>
    44ce:	d0 c0       	rjmp	.+416    	; 0x4670 <handleCalibration+0x1aa>
    44d0:	83 30       	cpi	r24, 0x03	; 3
    44d2:	08 f4       	brcc	.+2      	; 0x44d6 <handleCalibration+0x10>
    44d4:	3f c0       	rjmp	.+126    	; 0x4554 <handleCalibration+0x8e>
    44d6:	84 30       	cpi	r24, 0x04	; 4
    44d8:	09 f4       	brne	.+2      	; 0x44dc <handleCalibration+0x16>
    44da:	91 c0       	rjmp	.+290    	; 0x45fe <handleCalibration+0x138>
    44dc:	84 30       	cpi	r24, 0x04	; 4
    44de:	08 f0       	brcs	.+2      	; 0x44e2 <handleCalibration+0x1c>
    44e0:	63 c0       	rjmp	.+198    	; 0x45a8 <handleCalibration+0xe2>
                calibState = 5;
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    44e2:	80 91 bf 04 	lds	r24, 0x04BF
    44e6:	88 23       	and	r24, r24
    44e8:	09 f4       	brne	.+2      	; 0x44ec <handleCalibration+0x26>
    44ea:	e1 c0       	rjmp	.+450    	; 0x46ae <handleCalibration+0x1e8>
    44ec:	82 30       	cpi	r24, 0x02	; 2
    44ee:	09 f4       	brne	.+2      	; 0x44f2 <handleCalibration+0x2c>
    44f0:	de c0       	rjmp	.+444    	; 0x46ae <handleCalibration+0x1e8>
                    updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    44f2:	80 91 6d 02 	lds	r24, 0x026D
    44f6:	90 91 6e 02 	lds	r25, 0x026E
    44fa:	21 e0       	ldi	r18, 0x01	; 1
    44fc:	8a 36       	cpi	r24, 0x6A	; 106
    44fe:	92 07       	cpc	r25, r18
    4500:	0c f4       	brge	.+2      	; 0x4504 <handleCalibration+0x3e>
    4502:	8a c1       	rjmp	.+788    	; 0x4818 <handleCalibration+0x352>
					updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    4504:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    4508:	20 91 7d 05 	lds	r18, 0x057D
    450c:	30 91 7e 05 	lds	r19, 0x057E
    4510:	40 91 7f 05 	lds	r20, 0x057F
    4514:	50 91 80 05 	lds	r21, 0x0580
    4518:	62 1b       	sub	r22, r18
    451a:	73 0b       	sbc	r23, r19
    451c:	84 0b       	sbc	r24, r20
    451e:	95 0b       	sbc	r25, r21
    4520:	6c 39       	cpi	r22, 0x9C	; 156
    4522:	2d ec       	ldi	r18, 0xCD	; 205
    4524:	72 07       	cpc	r23, r18
    4526:	28 e0       	ldi	r18, 0x08	; 8
    4528:	82 07       	cpc	r24, r18
    452a:	20 e0       	ldi	r18, 0x00	; 0
    452c:	92 07       	cpc	r25, r18
    452e:	d8 f1       	brcs	.+118    	; 0x45a6 <handleCalibration+0xe0>
            	tempVel = 0;
    4530:	10 92 83 05 	sts	0x0583, r1
    4534:	10 92 82 05 	sts	0x0582, r1
				avgLeftSpeed = 0;
    4538:	10 92 aa 04 	sts	0x04AA, r1
    453c:	10 92 a9 04 	sts	0x04A9, r1
				avgRightSpeed = 0;
    4540:	10 92 ac 04 	sts	0x04AC, r1
    4544:	10 92 ab 04 	sts	0x04AB, r1
                updateOdomData();
    4548:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <updateOdomData>
                calibState = 5;
    454c:	85 e0       	ldi	r24, 0x05	; 5
    454e:	80 93 81 05 	sts	0x0581, r24
    4552:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    4554:	88 23       	and	r24, r24
    4556:	29 f5       	brne	.+74     	; 0x45a2 <handleCalibration+0xdc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    4558:	80 91 bf 04 	lds	r24, 0x04BF
    455c:	88 23       	and	r24, r24
    455e:	09 f0       	breq	.+2      	; 0x4562 <handleCalibration+0x9c>
    4560:	3c c1       	rjmp	.+632    	; 0x47da <handleCalibration+0x314>
				pwm_intermediate_right_desired = 0;
    4562:	10 92 fc 02 	sts	0x02FC, r1
    4566:	10 92 fb 02 	sts	0x02FB, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    456a:	90 91 c3 04 	lds	r25, 0x04C3
    456e:	85 e0       	ldi	r24, 0x05	; 5
    4570:	98 9f       	mul	r25, r24
    4572:	c0 01       	movw	r24, r0
    4574:	11 24       	eor	r1, r1
    4576:	88 0f       	add	r24, r24
    4578:	99 1f       	adc	r25, r25
    457a:	88 0f       	add	r24, r24
    457c:	99 1f       	adc	r25, r25
    457e:	90 93 fe 02 	sts	0x02FE, r25
    4582:	80 93 fd 02 	sts	0x02FD, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = 1;
    4586:	81 e0       	ldi	r24, 0x01	; 1
    4588:	80 93 81 05 	sts	0x0581, r24
            timeoutOdometry = getTime100MicroSec();
    458c:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    4590:	60 93 7d 05 	sts	0x057D, r22
    4594:	70 93 7e 05 	sts	0x057E, r23
    4598:	80 93 7f 05 	sts	0x057F, r24
    459c:	90 93 80 05 	sts	0x0580, r25
            break;
    45a0:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    45a2:	81 30       	cpi	r24, 0x01	; 1
    45a4:	71 f0       	breq	.+28     	; 0x45c2 <handleCalibration+0xfc>
    45a6:	08 95       	ret
    45a8:	85 30       	cpi	r24, 0x05	; 5
    45aa:	e9 f7       	brne	.-6      	; 0x45a6 <handleCalibration+0xe0>
                calibState = 5;
			}
            break;

		case 5:
        	calibVelIndex++;
    45ac:	80 91 c3 04 	lds	r24, 0x04C3
    45b0:	8f 5f       	subi	r24, 0xFF	; 255
    45b2:	80 93 c3 04 	sts	0x04C3, r24
            if(calibVelIndex == 10) {
    45b6:	8a 30       	cpi	r24, 0x0A	; 10
    45b8:	09 f4       	brne	.+2      	; 0x45bc <handleCalibration+0xf6>
    45ba:	8b c1       	rjmp	.+790    	; 0x48d2 <handleCalibration+0x40c>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = 0;
    45bc:	10 92 81 05 	sts	0x0581, r1
    45c0:	08 95       	ret
            calibState = 1;
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    45c2:	80 91 bf 04 	lds	r24, 0x04BF
    45c6:	88 23       	and	r24, r24
    45c8:	09 f4       	brne	.+2      	; 0x45cc <handleCalibration+0x106>
    45ca:	d0 c0       	rjmp	.+416    	; 0x476c <handleCalibration+0x2a6>
    45cc:	82 30       	cpi	r24, 0x02	; 2
    45ce:	09 f4       	brne	.+2      	; 0x45d2 <handleCalibration+0x10c>
    45d0:	cd c0       	rjmp	.+410    	; 0x476c <handleCalibration+0x2a6>
                    timeOdometry = getTime100MicroSec();;
                    calibState = 2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    45d2:	80 91 6d 02 	lds	r24, 0x026D
    45d6:	90 91 6e 02 	lds	r25, 0x026E
    45da:	21 e0       	ldi	r18, 0x01	; 1
    45dc:	8a 36       	cpi	r24, 0x6A	; 106
    45de:	92 07       	cpc	r25, r18
    45e0:	0c f0       	brlt	.+2      	; 0x45e4 <handleCalibration+0x11e>
    45e2:	90 cf       	rjmp	.-224    	; 0x4504 <handleCalibration+0x3e>
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
    45e4:	10 92 a8 04 	sts	0x04A8, r1
    45e8:	10 92 a7 04 	sts	0x04A7, r1
					rightSpeedSumOdom = 0;
    45ec:	10 92 a1 04 	sts	0x04A1, r1
    45f0:	10 92 a2 04 	sts	0x04A2, r1
    45f4:	10 92 a3 04 	sts	0x04A3, r1
    45f8:	10 92 a4 04 	sts	0x04A4, r1
    45fc:	cc c0       	rjmp	.+408    	; 0x4796 <handleCalibration+0x2d0>
                calibState = 5;
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    45fe:	80 91 bf 04 	lds	r24, 0x04BF
    4602:	88 23       	and	r24, r24
    4604:	49 f1       	breq	.+82     	; 0x4658 <handleCalibration+0x192>
    4606:	82 30       	cpi	r24, 0x02	; 2
    4608:	39 f1       	breq	.+78     	; 0x4658 <handleCalibration+0x192>
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    460a:	80 91 6d 02 	lds	r24, 0x026D
    460e:	90 91 6e 02 	lds	r25, 0x026E
    4612:	21 e0       	ldi	r18, 0x01	; 1
    4614:	86 3b       	cpi	r24, 0xB6	; 182
    4616:	92 07       	cpc	r25, r18
    4618:	3c f5       	brge	.+78     	; 0x4668 <handleCalibration+0x1a2>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    461a:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    461e:	20 91 7d 05 	lds	r18, 0x057D
    4622:	30 91 7e 05 	lds	r19, 0x057E
    4626:	40 91 7f 05 	lds	r20, 0x057F
    462a:	50 91 80 05 	lds	r21, 0x0580
    462e:	62 1b       	sub	r22, r18
    4630:	73 0b       	sbc	r23, r19
    4632:	84 0b       	sbc	r24, r20
    4634:	95 0b       	sbc	r25, r21
    4636:	6c 39       	cpi	r22, 0x9C	; 156
    4638:	2d ec       	ldi	r18, 0xCD	; 205
    463a:	72 07       	cpc	r23, r18
    463c:	28 e0       	ldi	r18, 0x08	; 8
    463e:	82 07       	cpc	r24, r18
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	92 07       	cpc	r25, r18
    4644:	08 f4       	brcc	.+2      	; 0x4648 <handleCalibration+0x182>
    4646:	af cf       	rjmp	.-162    	; 0x45a6 <handleCalibration+0xe0>
            	tempVel = 0;
    4648:	10 92 83 05 	sts	0x0583, r1
    464c:	10 92 82 05 	sts	0x0582, r1
                //updateOdomData();
                calibState = 5;
    4650:	85 e0       	ldi	r24, 0x05	; 5
    4652:	80 93 81 05 	sts	0x0581, r24
    4656:	08 95       	ret
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    4658:	80 91 67 02 	lds	r24, 0x0267
    465c:	90 91 68 02 	lds	r25, 0x0268
    4660:	21 e0       	ldi	r18, 0x01	; 1
    4662:	86 3b       	cpi	r24, 0xB6	; 182
    4664:	92 07       	cpc	r25, r18
    4666:	cc f2       	brlt	.-78     	; 0x461a <handleCalibration+0x154>
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
    4668:	85 e0       	ldi	r24, 0x05	; 5
    466a:	80 93 81 05 	sts	0x0581, r24
    466e:	d5 cf       	rjmp	.-86     	; 0x461a <handleCalibration+0x154>
                calibState = 5;
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    4670:	80 91 bf 04 	lds	r24, 0x04BF
    4674:	88 23       	and	r24, r24
    4676:	09 f4       	brne	.+2      	; 0x467a <handleCalibration+0x1b4>
    4678:	a6 c0       	rjmp	.+332    	; 0x47c6 <handleCalibration+0x300>
    467a:	82 30       	cpi	r24, 0x02	; 2
    467c:	09 f4       	brne	.+2      	; 0x4680 <handleCalibration+0x1ba>
    467e:	a3 c0       	rjmp	.+326    	; 0x47c6 <handleCalibration+0x300>
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 3;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    4680:	80 91 6d 02 	lds	r24, 0x026D
    4684:	90 91 6e 02 	lds	r25, 0x026E
    4688:	21 e0       	ldi	r18, 0x01	; 1
    468a:	86 3b       	cpi	r24, 0xB6	; 182
    468c:	92 07       	cpc	r25, r18
    468e:	0c f4       	brge	.+2      	; 0x4692 <handleCalibration+0x1cc>
    4690:	39 cf       	rjmp	.-398    	; 0x4504 <handleCalibration+0x3e>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
                	calibState = 3;
    4692:	83 e0       	ldi	r24, 0x03	; 3
    4694:	80 93 81 05 	sts	0x0581, r24
                    timeoutOdometry = getTime100MicroSec();;
    4698:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    469c:	60 93 7d 05 	sts	0x057D, r22
    46a0:	70 93 7e 05 	sts	0x057E, r23
    46a4:	80 93 7f 05 	sts	0x057F, r24
    46a8:	90 93 80 05 	sts	0x0580, r25
    46ac:	2b cf       	rjmp	.-426    	; 0x4504 <handleCalibration+0x3e>
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    46ae:	80 91 67 02 	lds	r24, 0x0267
    46b2:	90 91 68 02 	lds	r25, 0x0268
    46b6:	21 e0       	ldi	r18, 0x01	; 1
    46b8:	8a 36       	cpi	r24, 0x6A	; 106
    46ba:	92 07       	cpc	r25, r18
    46bc:	0c f0       	brlt	.+2      	; 0x46c0 <handleCalibration+0x1fa>
    46be:	22 cf       	rjmp	.-444    	; 0x4504 <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    46c0:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    46c4:	20 91 ba 04 	lds	r18, 0x04BA
    46c8:	30 91 bb 04 	lds	r19, 0x04BB
    46cc:	40 91 bc 04 	lds	r20, 0x04BC
    46d0:	50 91 bd 04 	lds	r21, 0x04BD
    46d4:	62 1b       	sub	r22, r18
    46d6:	73 0b       	sbc	r23, r19
    46d8:	84 0b       	sbc	r24, r20
    46da:	95 0b       	sbc	r25, r21
    46dc:	60 93 ba 04 	sts	0x04BA, r22
    46e0:	70 93 bb 04 	sts	0x04BB, r23
    46e4:	80 93 bc 04 	sts	0x04BC, r24
    46e8:	90 93 bd 04 	sts	0x04BD, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    46ec:	0e 94 ab 3e 	call	0x7d56	; 0x7d56 <__floatunsisf>
    46f0:	20 e0       	ldi	r18, 0x00	; 0
    46f2:	30 e0       	ldi	r19, 0x00	; 0
    46f4:	40 ed       	ldi	r20, 0xD0	; 208
    46f6:	52 e4       	ldi	r21, 0x42	; 66
    46f8:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    46fc:	20 e0       	ldi	r18, 0x00	; 0
    46fe:	34 e2       	ldi	r19, 0x24	; 36
    4700:	44 e7       	ldi	r20, 0x74	; 116
    4702:	59 e4       	ldi	r21, 0x49	; 73
    4704:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    4708:	9b 01       	movw	r18, r22
    470a:	ac 01       	movw	r20, r24
    470c:	64 e1       	ldi	r22, 0x14	; 20
    470e:	7e e2       	ldi	r23, 0x2E	; 46
    4710:	88 e7       	ldi	r24, 0x78	; 120
    4712:	93 e4       	ldi	r25, 0x43	; 67
    4714:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    4718:	0e 94 7f 3e 	call	0x7cfe	; 0x7cfe <__fixunssfsi>
    471c:	70 93 83 05 	sts	0x0583, r23
    4720:	60 93 82 05 	sts	0x0582, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    4724:	20 91 a5 04 	lds	r18, 0x04A5
    4728:	30 91 a6 04 	lds	r19, 0x04A6
    472c:	40 e0       	ldi	r20, 0x00	; 0
    472e:	50 e0       	ldi	r21, 0x00	; 0
    4730:	60 91 9d 04 	lds	r22, 0x049D
    4734:	70 91 9e 04 	lds	r23, 0x049E
    4738:	80 91 9f 04 	lds	r24, 0x049F
    473c:	90 91 a0 04 	lds	r25, 0x04A0
    4740:	0e 94 93 40 	call	0x8126	; 0x8126 <__divmodsi4>
    4744:	30 93 aa 04 	sts	0x04AA, r19
    4748:	20 93 a9 04 	sts	0x04A9, r18
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
					updateOdomData();
    474c:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <updateOdomData>
                    calibState = 4;
    4750:	84 e0       	ldi	r24, 0x04	; 4
    4752:	80 93 81 05 	sts	0x0581, r24
                    timeoutOdometry = getTime100MicroSec();;
    4756:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    475a:	60 93 7d 05 	sts	0x057D, r22
    475e:	70 93 7e 05 	sts	0x057E, r23
    4762:	80 93 7f 05 	sts	0x057F, r24
    4766:	90 93 80 05 	sts	0x0580, r25
    476a:	cc ce       	rjmp	.-616    	; 0x4504 <handleCalibration+0x3e>
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    476c:	80 91 67 02 	lds	r24, 0x0267
    4770:	90 91 68 02 	lds	r25, 0x0268
    4774:	21 e0       	ldi	r18, 0x01	; 1
    4776:	8a 36       	cpi	r24, 0x6A	; 106
    4778:	92 07       	cpc	r25, r18
    477a:	0c f0       	brlt	.+2      	; 0x477e <handleCalibration+0x2b8>
    477c:	c3 ce       	rjmp	.-634    	; 0x4504 <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {				
                	leftSumCount = 0;
    477e:	10 92 a6 04 	sts	0x04A6, r1
    4782:	10 92 a5 04 	sts	0x04A5, r1
                    leftSpeedSumOdom = 0;
    4786:	10 92 9d 04 	sts	0x049D, r1
    478a:	10 92 9e 04 	sts	0x049E, r1
    478e:	10 92 9f 04 	sts	0x049F, r1
    4792:	10 92 a0 04 	sts	0x04A0, r1
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
					rightSpeedSumOdom = 0;
                    timeOdometry = getTime100MicroSec();;
    4796:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    479a:	60 93 ba 04 	sts	0x04BA, r22
    479e:	70 93 bb 04 	sts	0x04BB, r23
    47a2:	80 93 bc 04 	sts	0x04BC, r24
    47a6:	90 93 bd 04 	sts	0x04BD, r25
                    calibState = 2;
    47aa:	82 e0       	ldi	r24, 0x02	; 2
    47ac:	80 93 81 05 	sts	0x0581, r24
                    timeoutOdometry = getTime100MicroSec();;
    47b0:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    47b4:	60 93 7d 05 	sts	0x057D, r22
    47b8:	70 93 7e 05 	sts	0x057E, r23
    47bc:	80 93 7f 05 	sts	0x057F, r24
    47c0:	90 93 80 05 	sts	0x0580, r25
    47c4:	9f ce       	rjmp	.-706    	; 0x4504 <handleCalibration+0x3e>
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    47c6:	80 91 67 02 	lds	r24, 0x0267
    47ca:	90 91 68 02 	lds	r25, 0x0268
    47ce:	21 e0       	ldi	r18, 0x01	; 1
    47d0:	86 3b       	cpi	r24, 0xB6	; 182
    47d2:	92 07       	cpc	r25, r18
    47d4:	0c f4       	brge	.+2      	; 0x47d8 <handleCalibration+0x312>
    47d6:	96 ce       	rjmp	.-724    	; 0x4504 <handleCalibration+0x3e>
    47d8:	5c cf       	rjmp	.-328    	; 0x4692 <handleCalibration+0x1cc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    47da:	81 30       	cpi	r24, 0x01	; 1
    47dc:	09 f4       	brne	.+2      	; 0x47e0 <handleCalibration+0x31a>
    47de:	84 c0       	rjmp	.+264    	; 0x48e8 <handleCalibration+0x422>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    47e0:	82 30       	cpi	r24, 0x02	; 2
    47e2:	09 f4       	brne	.+2      	; 0x47e6 <handleCalibration+0x320>
    47e4:	60 c0       	rjmp	.+192    	; 0x48a6 <handleCalibration+0x3e0>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    47e6:	83 30       	cpi	r24, 0x03	; 3
    47e8:	09 f0       	breq	.+2      	; 0x47ec <handleCalibration+0x326>
    47ea:	cd ce       	rjmp	.-614    	; 0x4586 <handleCalibration+0xc0>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    47ec:	90 91 c3 04 	lds	r25, 0x04C3
    47f0:	85 e0       	ldi	r24, 0x05	; 5
    47f2:	98 9f       	mul	r25, r24
    47f4:	c0 01       	movw	r24, r0
    47f6:	11 24       	eor	r1, r1
    47f8:	88 0f       	add	r24, r24
    47fa:	99 1f       	adc	r25, r25
    47fc:	88 0f       	add	r24, r24
    47fe:	99 1f       	adc	r25, r25
    4800:	90 95       	com	r25
    4802:	81 95       	neg	r24
    4804:	9f 4f       	sbci	r25, 0xFF	; 255
    4806:	90 93 fc 02 	sts	0x02FC, r25
    480a:	80 93 fb 02 	sts	0x02FB, r24
				pwm_intermediate_left_desired = 0;
    480e:	10 92 fe 02 	sts	0x02FE, r1
    4812:	10 92 fd 02 	sts	0x02FD, r1
    4816:	b7 ce       	rjmp	.-658    	; 0x4586 <handleCalibration+0xc0>
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    4818:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    481c:	20 91 ba 04 	lds	r18, 0x04BA
    4820:	30 91 bb 04 	lds	r19, 0x04BB
    4824:	40 91 bc 04 	lds	r20, 0x04BC
    4828:	50 91 bd 04 	lds	r21, 0x04BD
    482c:	62 1b       	sub	r22, r18
    482e:	73 0b       	sbc	r23, r19
    4830:	84 0b       	sbc	r24, r20
    4832:	95 0b       	sbc	r25, r21
    4834:	60 93 ba 04 	sts	0x04BA, r22
    4838:	70 93 bb 04 	sts	0x04BB, r23
    483c:	80 93 bc 04 	sts	0x04BC, r24
    4840:	90 93 bd 04 	sts	0x04BD, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    4844:	0e 94 ab 3e 	call	0x7d56	; 0x7d56 <__floatunsisf>
    4848:	20 e0       	ldi	r18, 0x00	; 0
    484a:	30 e0       	ldi	r19, 0x00	; 0
    484c:	40 ed       	ldi	r20, 0xD0	; 208
    484e:	52 e4       	ldi	r21, 0x42	; 66
    4850:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	34 e2       	ldi	r19, 0x24	; 36
    4858:	44 e7       	ldi	r20, 0x74	; 116
    485a:	59 e4       	ldi	r21, 0x49	; 73
    485c:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    4860:	9b 01       	movw	r18, r22
    4862:	ac 01       	movw	r20, r24
    4864:	64 e1       	ldi	r22, 0x14	; 20
    4866:	7e e2       	ldi	r23, 0x2E	; 46
    4868:	88 e7       	ldi	r24, 0x78	; 120
    486a:	93 e4       	ldi	r25, 0x43	; 67
    486c:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    4870:	0e 94 7f 3e 	call	0x7cfe	; 0x7cfe <__fixunssfsi>
    4874:	70 93 83 05 	sts	0x0583, r23
    4878:	60 93 82 05 	sts	0x0582, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    487c:	20 91 a7 04 	lds	r18, 0x04A7
    4880:	30 91 a8 04 	lds	r19, 0x04A8
    4884:	40 e0       	ldi	r20, 0x00	; 0
    4886:	50 e0       	ldi	r21, 0x00	; 0
    4888:	60 91 a1 04 	lds	r22, 0x04A1
    488c:	70 91 a2 04 	lds	r23, 0x04A2
    4890:	80 91 a3 04 	lds	r24, 0x04A3
    4894:	90 91 a4 04 	lds	r25, 0x04A4
    4898:	0e 94 93 40 	call	0x8126	; 0x8126 <__divmodsi4>
    489c:	30 93 ac 04 	sts	0x04AC, r19
    48a0:	20 93 ab 04 	sts	0x04AB, r18
    48a4:	53 cf       	rjmp	.-346    	; 0x474c <handleCalibration+0x286>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    48a6:	10 92 fc 02 	sts	0x02FC, r1
    48aa:	10 92 fb 02 	sts	0x02FB, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    48ae:	90 91 c3 04 	lds	r25, 0x04C3
    48b2:	85 e0       	ldi	r24, 0x05	; 5
    48b4:	98 9f       	mul	r25, r24
    48b6:	c0 01       	movw	r24, r0
    48b8:	11 24       	eor	r1, r1
    48ba:	88 0f       	add	r24, r24
    48bc:	99 1f       	adc	r25, r25
    48be:	88 0f       	add	r24, r24
    48c0:	99 1f       	adc	r25, r25
    48c2:	90 95       	com	r25
    48c4:	81 95       	neg	r24
    48c6:	9f 4f       	sbci	r25, 0xFF	; 255
    48c8:	90 93 fe 02 	sts	0x02FE, r25
    48cc:	80 93 fd 02 	sts	0x02FD, r24
    48d0:	5a ce       	rjmp	.-844    	; 0x4586 <handleCalibration+0xc0>
            break;

		case 5:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    48d2:	91 e0       	ldi	r25, 0x01	; 1
    48d4:	90 93 c3 04 	sts	0x04C3, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    48d8:	80 91 bf 04 	lds	r24, 0x04BF
    48dc:	88 23       	and	r24, r24
    48de:	b9 f4       	brne	.+46     	; 0x490e <handleCalibration+0x448>
                	calibWheel = LEFT_WHEEL_BW_SC;
    48e0:	82 e0       	ldi	r24, 0x02	; 2
    48e2:	80 93 bf 04 	sts	0x04BF, r24
    48e6:	6a ce       	rjmp	.-812    	; 0x45bc <handleCalibration+0xf6>
    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    48e8:	90 91 c3 04 	lds	r25, 0x04C3
    48ec:	85 e0       	ldi	r24, 0x05	; 5
    48ee:	98 9f       	mul	r25, r24
    48f0:	c0 01       	movw	r24, r0
    48f2:	11 24       	eor	r1, r1
    48f4:	88 0f       	add	r24, r24
    48f6:	99 1f       	adc	r25, r25
    48f8:	88 0f       	add	r24, r24
    48fa:	99 1f       	adc	r25, r25
    48fc:	90 93 fc 02 	sts	0x02FC, r25
    4900:	80 93 fb 02 	sts	0x02FB, r24
				pwm_intermediate_left_desired = 0;
    4904:	10 92 fe 02 	sts	0x02FE, r1
    4908:	10 92 fd 02 	sts	0x02FD, r1
    490c:	3c ce       	rjmp	.-904    	; 0x4586 <handleCalibration+0xc0>
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    490e:	81 30       	cpi	r24, 0x01	; 1
    4910:	61 f0       	breq	.+24     	; 0x492a <handleCalibration+0x464>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    4912:	82 30       	cpi	r24, 0x02	; 2
    4914:	71 f0       	breq	.+28     	; 0x4932 <handleCalibration+0x46c>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    4916:	83 30       	cpi	r24, 0x03	; 3
    4918:	09 f0       	breq	.+2      	; 0x491c <handleCalibration+0x456>
    491a:	50 ce       	rjmp	.-864    	; 0x45bc <handleCalibration+0xf6>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    491c:	10 92 bf 04 	sts	0x04BF, r1
					// red off
					writeCalibrationToFlash();
    4920:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    4924:	10 92 c0 04 	sts	0x04C0, r1
    4928:	49 ce       	rjmp	.-878    	; 0x45bc <handleCalibration+0xf6>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    492a:	83 e0       	ldi	r24, 0x03	; 3
    492c:	80 93 bf 04 	sts	0x04BF, r24
    4930:	45 ce       	rjmp	.-886    	; 0x45bc <handleCalibration+0xf6>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    4932:	90 93 bf 04 	sts	0x04BF, r25
					calibrateOdomFlag = 0;
    4936:	10 92 c0 04 	sts	0x04C0, r1
    493a:	40 ce       	rjmp	.-896    	; 0x45bc <handleCalibration+0xf6>

0000493c <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    493c:	af 92       	push	r10
    493e:	bf 92       	push	r11
    4940:	cf 92       	push	r12
    4942:	df 92       	push	r13
    4944:	ef 92       	push	r14
    4946:	ff 92       	push	r15
    4948:	0f 93       	push	r16
    494a:	1f 93       	push	r17
    494c:	cf 93       	push	r28
    494e:	df 93       	push	r29
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    4950:	9c 01       	movw	r18, r24
    4952:	22 0f       	add	r18, r18
    4954:	33 1f       	adc	r19, r19
    4956:	22 0f       	add	r18, r18
    4958:	33 1f       	adc	r19, r19
    495a:	28 0f       	add	r18, r24
    495c:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    495e:	21 15       	cp	r18, r1
    4960:	31 05       	cpc	r19, r1
    4962:	09 f4       	brne	.+2      	; 0x4966 <getInputFromSpeed+0x2a>
    4964:	7b c0       	rjmp	.+246    	; 0x4a5c <getInputFromSpeed+0x120>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    4966:	86 2f       	mov	r24, r22
    4968:	82 50       	subi	r24, 0x02	; 2
    496a:	82 30       	cpi	r24, 0x02	; 2
    496c:	08 f4       	brcc	.+2      	; 0x4970 <getInputFromSpeed+0x34>
    496e:	84 c0       	rjmp	.+264    	; 0x4a78 <getInputFromSpeed+0x13c>
        currVel = -currVel; // consider only positive values
    4970:	66 23       	and	r22, r22
    4972:	09 f0       	breq	.+2      	; 0x4976 <getInputFromSpeed+0x3a>
    4974:	84 c0       	rjmp	.+264    	; 0x4a7e <getInputFromSpeed+0x142>
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    4976:	80 91 d8 04 	lds	r24, 0x04D8
    497a:	90 91 d9 04 	lds	r25, 0x04D9
    497e:	82 17       	cp	r24, r18
    4980:	93 07       	cpc	r25, r19
    4982:	0c f0       	brlt	.+2      	; 0x4986 <getInputFromSpeed+0x4a>
    4984:	1b c2       	rjmp	.+1078   	; 0x4dbc <getInputFromSpeed+0x480>
    4986:	80 91 e8 04 	lds	r24, 0x04E8
    498a:	90 91 e9 04 	lds	r25, 0x04E9
    498e:	82 17       	cp	r24, r18
    4990:	93 07       	cpc	r25, r19
    4992:	0c f0       	brlt	.+2      	; 0x4996 <getInputFromSpeed+0x5a>
    4994:	1c c2       	rjmp	.+1080   	; 0x4dce <getInputFromSpeed+0x492>
    4996:	80 91 f8 04 	lds	r24, 0x04F8
    499a:	90 91 f9 04 	lds	r25, 0x04F9
    499e:	82 17       	cp	r24, r18
    49a0:	93 07       	cpc	r25, r19
    49a2:	0c f0       	brlt	.+2      	; 0x49a6 <getInputFromSpeed+0x6a>
    49a4:	17 c2       	rjmp	.+1070   	; 0x4dd4 <getInputFromSpeed+0x498>
    49a6:	80 91 08 05 	lds	r24, 0x0508
    49aa:	90 91 09 05 	lds	r25, 0x0509
    49ae:	82 17       	cp	r24, r18
    49b0:	93 07       	cpc	r25, r19
    49b2:	0c f0       	brlt	.+2      	; 0x49b6 <getInputFromSpeed+0x7a>
    49b4:	12 c2       	rjmp	.+1060   	; 0x4dda <getInputFromSpeed+0x49e>
    49b6:	80 91 18 05 	lds	r24, 0x0518
    49ba:	90 91 19 05 	lds	r25, 0x0519
    49be:	82 17       	cp	r24, r18
    49c0:	93 07       	cpc	r25, r19
    49c2:	0c f0       	brlt	.+2      	; 0x49c6 <getInputFromSpeed+0x8a>
    49c4:	fe c1       	rjmp	.+1020   	; 0x4dc2 <getInputFromSpeed+0x486>
    49c6:	80 91 28 05 	lds	r24, 0x0528
    49ca:	90 91 29 05 	lds	r25, 0x0529
    49ce:	82 17       	cp	r24, r18
    49d0:	93 07       	cpc	r25, r19
    49d2:	0c f0       	brlt	.+2      	; 0x49d6 <getInputFromSpeed+0x9a>
    49d4:	f9 c1       	rjmp	.+1010   	; 0x4dc8 <getInputFromSpeed+0x48c>
    49d6:	80 91 38 05 	lds	r24, 0x0538
    49da:	90 91 39 05 	lds	r25, 0x0539
    49de:	82 17       	cp	r24, r18
    49e0:	93 07       	cpc	r25, r19
    49e2:	0c f0       	brlt	.+2      	; 0x49e6 <getInputFromSpeed+0xaa>
    49e4:	02 c2       	rjmp	.+1028   	; 0x4dea <getInputFromSpeed+0x4ae>
    49e6:	80 91 48 05 	lds	r24, 0x0548
    49ea:	90 91 49 05 	lds	r25, 0x0549
    49ee:	82 17       	cp	r24, r18
    49f0:	93 07       	cpc	r25, r19
    49f2:	0c f0       	brlt	.+2      	; 0x49f6 <getInputFromSpeed+0xba>
    49f4:	fd c1       	rjmp	.+1018   	; 0x4df0 <getInputFromSpeed+0x4b4>
    49f6:	c0 91 58 05 	lds	r28, 0x0558
    49fa:	d0 91 59 05 	lds	r29, 0x0559
    49fe:	c2 17       	cp	r28, r18
    4a00:	d3 07       	cpc	r29, r19
    4a02:	0c f0       	brlt	.+2      	; 0x4a06 <getInputFromSpeed+0xca>
    4a04:	7a c1       	rjmp	.+756    	; 0x4cfa <getInputFromSpeed+0x3be>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    4a06:	b9 01       	movw	r22, r18
    4a08:	88 27       	eor	r24, r24
    4a0a:	77 fd       	sbrc	r23, 7
    4a0c:	80 95       	com	r24
    4a0e:	98 2f       	mov	r25, r24
    4a10:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4a14:	7b 01       	movw	r14, r22
    4a16:	8c 01       	movw	r16, r24
    4a18:	60 91 56 05 	lds	r22, 0x0556
    4a1c:	70 91 57 05 	lds	r23, 0x0557
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    4a20:	88 27       	eor	r24, r24
    4a22:	77 fd       	sbrc	r23, 7
    4a24:	80 95       	com	r24
    4a26:	98 2f       	mov	r25, r24
    4a28:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4a2c:	9b 01       	movw	r18, r22
    4a2e:	ac 01       	movw	r20, r24
    4a30:	c8 01       	movw	r24, r16
    4a32:	b7 01       	movw	r22, r14
    4a34:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    4a38:	7b 01       	movw	r14, r22
    4a3a:	8c 01       	movw	r16, r24
    4a3c:	be 01       	movw	r22, r28
    4a3e:	88 27       	eor	r24, r24
    4a40:	77 fd       	sbrc	r23, 7
    4a42:	80 95       	com	r24
    4a44:	98 2f       	mov	r25, r24
    4a46:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4a4a:	9b 01       	movw	r18, r22
    4a4c:	ac 01       	movw	r20, r24
    4a4e:	c8 01       	movw	r24, r16
    4a50:	b7 01       	movw	r22, r14
    4a52:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    4a56:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
    4a5a:	02 c0       	rjmp	.+4      	; 0x4a60 <getInputFromSpeed+0x124>
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    signed int temp = 0;
    4a5c:	60 e0       	ldi	r22, 0x00	; 0
    4a5e:	70 e0       	ldi	r23, 0x00	; 0
            temp = -temp;
        }        
    }
    
    return temp;
}
    4a60:	cb 01       	movw	r24, r22
    4a62:	df 91       	pop	r29
    4a64:	cf 91       	pop	r28
    4a66:	1f 91       	pop	r17
    4a68:	0f 91       	pop	r16
    4a6a:	ff 90       	pop	r15
    4a6c:	ef 90       	pop	r14
    4a6e:	df 90       	pop	r13
    4a70:	cf 90       	pop	r12
    4a72:	bf 90       	pop	r11
    4a74:	af 90       	pop	r10
    4a76:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    4a78:	30 95       	com	r19
    4a7a:	21 95       	neg	r18
    4a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a7e:	63 30       	cpi	r22, 0x03	; 3
    4a80:	09 f4       	brne	.+2      	; 0x4a84 <getInputFromSpeed+0x148>
    4a82:	f3 c0       	rjmp	.+486    	; 0x4c6a <getInputFromSpeed+0x32e>
    4a84:	62 30       	cpi	r22, 0x02	; 2
    4a86:	01 f1       	breq	.+64     	; 0x4ac8 <getInputFromSpeed+0x18c>
    4a88:	61 30       	cpi	r22, 0x01	; 1
    4a8a:	09 f4       	brne	.+2      	; 0x4a8e <getInputFromSpeed+0x152>
    4a8c:	98 c0       	rjmp	.+304    	; 0x4bbe <getInputFromSpeed+0x282>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    4a8e:	66 23       	and	r22, r22
    4a90:	09 f4       	brne	.+2      	; 0x4a94 <getInputFromSpeed+0x158>
    4a92:	90 c0       	rjmp	.+288    	; 0x4bb4 <getInputFromSpeed+0x278>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    4a94:	61 30       	cpi	r22, 0x01	; 1
    4a96:	09 f4       	brne	.+2      	; 0x4a9a <getInputFromSpeed+0x15e>
    4a98:	8c c1       	rjmp	.+792    	; 0x4db2 <getInputFromSpeed+0x476>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    4a9a:	62 30       	cpi	r22, 0x02	; 2
    4a9c:	09 f4       	brne	.+2      	; 0x4aa0 <getInputFromSpeed+0x164>
    4a9e:	a0 c1       	rjmp	.+832    	; 0x4de0 <getInputFromSpeed+0x4a4>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    4aa0:	63 30       	cpi	r22, 0x03	; 3
    4aa2:	e1 f6       	brne	.-72     	; 0x4a5c <getInputFromSpeed+0x120>
    4aa4:	c0 91 64 05 	lds	r28, 0x0564
    4aa8:	d0 91 65 05 	lds	r29, 0x0565
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    4aac:	b9 01       	movw	r22, r18
    4aae:	88 27       	eor	r24, r24
    4ab0:	77 fd       	sbrc	r23, 7
    4ab2:	80 95       	com	r24
    4ab4:	98 2f       	mov	r25, r24
    4ab6:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4aba:	7b 01       	movw	r14, r22
    4abc:	8c 01       	movw	r16, r24
    4abe:	60 91 62 05 	lds	r22, 0x0562
    4ac2:	70 91 63 05 	lds	r23, 0x0563
    4ac6:	55 c0       	rjmp	.+170    	; 0x4b72 <getInputFromSpeed+0x236>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    4ac8:	80 91 e0 04 	lds	r24, 0x04E0
    4acc:	90 91 e1 04 	lds	r25, 0x04E1
    4ad0:	82 17       	cp	r24, r18
    4ad2:	93 07       	cpc	r25, r19
    4ad4:	0c f0       	brlt	.+2      	; 0x4ad8 <getInputFromSpeed+0x19c>
    4ad6:	72 c1       	rjmp	.+740    	; 0x4dbc <getInputFromSpeed+0x480>
    4ad8:	80 91 f0 04 	lds	r24, 0x04F0
    4adc:	90 91 f1 04 	lds	r25, 0x04F1
    4ae0:	82 17       	cp	r24, r18
    4ae2:	93 07       	cpc	r25, r19
    4ae4:	0c f0       	brlt	.+2      	; 0x4ae8 <getInputFromSpeed+0x1ac>
    4ae6:	73 c1       	rjmp	.+742    	; 0x4dce <getInputFromSpeed+0x492>
    4ae8:	80 91 00 05 	lds	r24, 0x0500
    4aec:	90 91 01 05 	lds	r25, 0x0501
    4af0:	82 17       	cp	r24, r18
    4af2:	93 07       	cpc	r25, r19
    4af4:	0c f0       	brlt	.+2      	; 0x4af8 <getInputFromSpeed+0x1bc>
    4af6:	6e c1       	rjmp	.+732    	; 0x4dd4 <getInputFromSpeed+0x498>
    4af8:	80 91 10 05 	lds	r24, 0x0510
    4afc:	90 91 11 05 	lds	r25, 0x0511
    4b00:	82 17       	cp	r24, r18
    4b02:	93 07       	cpc	r25, r19
    4b04:	0c f0       	brlt	.+2      	; 0x4b08 <getInputFromSpeed+0x1cc>
    4b06:	69 c1       	rjmp	.+722    	; 0x4dda <getInputFromSpeed+0x49e>
    4b08:	80 91 20 05 	lds	r24, 0x0520
    4b0c:	90 91 21 05 	lds	r25, 0x0521
    4b10:	82 17       	cp	r24, r18
    4b12:	93 07       	cpc	r25, r19
    4b14:	0c f0       	brlt	.+2      	; 0x4b18 <getInputFromSpeed+0x1dc>
    4b16:	55 c1       	rjmp	.+682    	; 0x4dc2 <getInputFromSpeed+0x486>
    4b18:	80 91 30 05 	lds	r24, 0x0530
    4b1c:	90 91 31 05 	lds	r25, 0x0531
    4b20:	82 17       	cp	r24, r18
    4b22:	93 07       	cpc	r25, r19
    4b24:	0c f0       	brlt	.+2      	; 0x4b28 <getInputFromSpeed+0x1ec>
    4b26:	50 c1       	rjmp	.+672    	; 0x4dc8 <getInputFromSpeed+0x48c>
    4b28:	80 91 40 05 	lds	r24, 0x0540
    4b2c:	90 91 41 05 	lds	r25, 0x0541
    4b30:	82 17       	cp	r24, r18
    4b32:	93 07       	cpc	r25, r19
    4b34:	0c f0       	brlt	.+2      	; 0x4b38 <getInputFromSpeed+0x1fc>
    4b36:	59 c1       	rjmp	.+690    	; 0x4dea <getInputFromSpeed+0x4ae>
    4b38:	80 91 50 05 	lds	r24, 0x0550
    4b3c:	90 91 51 05 	lds	r25, 0x0551
    4b40:	82 17       	cp	r24, r18
    4b42:	93 07       	cpc	r25, r19
    4b44:	0c f0       	brlt	.+2      	; 0x4b48 <getInputFromSpeed+0x20c>
    4b46:	54 c1       	rjmp	.+680    	; 0x4df0 <getInputFromSpeed+0x4b4>
    4b48:	c0 91 60 05 	lds	r28, 0x0560
    4b4c:	d0 91 61 05 	lds	r29, 0x0561
    4b50:	c2 17       	cp	r28, r18
    4b52:	d3 07       	cpc	r29, r19
    4b54:	0c f0       	brlt	.+2      	; 0x4b58 <getInputFromSpeed+0x21c>
    4b56:	d1 c0       	rjmp	.+418    	; 0x4cfa <getInputFromSpeed+0x3be>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    4b58:	b9 01       	movw	r22, r18
    4b5a:	88 27       	eor	r24, r24
    4b5c:	77 fd       	sbrc	r23, 7
    4b5e:	80 95       	com	r24
    4b60:	98 2f       	mov	r25, r24
    4b62:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4b66:	7b 01       	movw	r14, r22
    4b68:	8c 01       	movw	r16, r24
    4b6a:	60 91 5e 05 	lds	r22, 0x055E
    4b6e:	70 91 5f 05 	lds	r23, 0x055F
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    4b72:	88 27       	eor	r24, r24
    4b74:	77 fd       	sbrc	r23, 7
    4b76:	80 95       	com	r24
    4b78:	98 2f       	mov	r25, r24
    4b7a:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4b7e:	9b 01       	movw	r18, r22
    4b80:	ac 01       	movw	r20, r24
    4b82:	c8 01       	movw	r24, r16
    4b84:	b7 01       	movw	r22, r14
    4b86:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    4b8a:	7b 01       	movw	r14, r22
    4b8c:	8c 01       	movw	r16, r24
    4b8e:	be 01       	movw	r22, r28
    4b90:	88 27       	eor	r24, r24
    4b92:	77 fd       	sbrc	r23, 7
    4b94:	80 95       	com	r24
    4b96:	98 2f       	mov	r25, r24
    4b98:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4b9c:	9b 01       	movw	r18, r22
    4b9e:	ac 01       	movw	r20, r24
    4ba0:	c8 01       	movw	r24, r16
    4ba2:	b7 01       	movw	r22, r14
    4ba4:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    4ba8:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
            temp = -temp;
    4bac:	70 95       	com	r23
    4bae:	61 95       	neg	r22
    4bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    4bb2:	56 cf       	rjmp	.-340    	; 0x4a60 <getInputFromSpeed+0x124>
    4bb4:	c0 91 58 05 	lds	r28, 0x0558
    4bb8:	d0 91 59 05 	lds	r29, 0x0559
    4bbc:	24 cf       	rjmp	.-440    	; 0x4a06 <getInputFromSpeed+0xca>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    4bbe:	80 91 dc 04 	lds	r24, 0x04DC
    4bc2:	90 91 dd 04 	lds	r25, 0x04DD
    4bc6:	82 17       	cp	r24, r18
    4bc8:	93 07       	cpc	r25, r19
    4bca:	0c f0       	brlt	.+2      	; 0x4bce <getInputFromSpeed+0x292>
    4bcc:	f7 c0       	rjmp	.+494    	; 0x4dbc <getInputFromSpeed+0x480>
    4bce:	80 91 ec 04 	lds	r24, 0x04EC
    4bd2:	90 91 ed 04 	lds	r25, 0x04ED
    4bd6:	82 17       	cp	r24, r18
    4bd8:	93 07       	cpc	r25, r19
    4bda:	0c f0       	brlt	.+2      	; 0x4bde <getInputFromSpeed+0x2a2>
    4bdc:	f8 c0       	rjmp	.+496    	; 0x4dce <getInputFromSpeed+0x492>
    4bde:	80 91 fc 04 	lds	r24, 0x04FC
    4be2:	90 91 fd 04 	lds	r25, 0x04FD
    4be6:	82 17       	cp	r24, r18
    4be8:	93 07       	cpc	r25, r19
    4bea:	0c f0       	brlt	.+2      	; 0x4bee <getInputFromSpeed+0x2b2>
    4bec:	f3 c0       	rjmp	.+486    	; 0x4dd4 <getInputFromSpeed+0x498>
    4bee:	80 91 0c 05 	lds	r24, 0x050C
    4bf2:	90 91 0d 05 	lds	r25, 0x050D
    4bf6:	82 17       	cp	r24, r18
    4bf8:	93 07       	cpc	r25, r19
    4bfa:	0c f0       	brlt	.+2      	; 0x4bfe <getInputFromSpeed+0x2c2>
    4bfc:	ee c0       	rjmp	.+476    	; 0x4dda <getInputFromSpeed+0x49e>
    4bfe:	80 91 1c 05 	lds	r24, 0x051C
    4c02:	90 91 1d 05 	lds	r25, 0x051D
    4c06:	82 17       	cp	r24, r18
    4c08:	93 07       	cpc	r25, r19
    4c0a:	0c f0       	brlt	.+2      	; 0x4c0e <getInputFromSpeed+0x2d2>
    4c0c:	da c0       	rjmp	.+436    	; 0x4dc2 <getInputFromSpeed+0x486>
    4c0e:	80 91 2c 05 	lds	r24, 0x052C
    4c12:	90 91 2d 05 	lds	r25, 0x052D
    4c16:	82 17       	cp	r24, r18
    4c18:	93 07       	cpc	r25, r19
    4c1a:	0c f0       	brlt	.+2      	; 0x4c1e <getInputFromSpeed+0x2e2>
    4c1c:	d5 c0       	rjmp	.+426    	; 0x4dc8 <getInputFromSpeed+0x48c>
    4c1e:	80 91 3c 05 	lds	r24, 0x053C
    4c22:	90 91 3d 05 	lds	r25, 0x053D
    4c26:	82 17       	cp	r24, r18
    4c28:	93 07       	cpc	r25, r19
    4c2a:	0c f0       	brlt	.+2      	; 0x4c2e <getInputFromSpeed+0x2f2>
    4c2c:	de c0       	rjmp	.+444    	; 0x4dea <getInputFromSpeed+0x4ae>
    4c2e:	80 91 4c 05 	lds	r24, 0x054C
    4c32:	90 91 4d 05 	lds	r25, 0x054D
    4c36:	82 17       	cp	r24, r18
    4c38:	93 07       	cpc	r25, r19
    4c3a:	0c f0       	brlt	.+2      	; 0x4c3e <getInputFromSpeed+0x302>
    4c3c:	d9 c0       	rjmp	.+434    	; 0x4df0 <getInputFromSpeed+0x4b4>
    4c3e:	c0 91 5c 05 	lds	r28, 0x055C
    4c42:	d0 91 5d 05 	lds	r29, 0x055D
    4c46:	c2 17       	cp	r28, r18
    4c48:	d3 07       	cpc	r29, r19
    4c4a:	0c f0       	brlt	.+2      	; 0x4c4e <getInputFromSpeed+0x312>
    4c4c:	56 c0       	rjmp	.+172    	; 0x4cfa <getInputFromSpeed+0x3be>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    4c4e:	b9 01       	movw	r22, r18
    4c50:	88 27       	eor	r24, r24
    4c52:	77 fd       	sbrc	r23, 7
    4c54:	80 95       	com	r24
    4c56:	98 2f       	mov	r25, r24
    4c58:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4c5c:	7b 01       	movw	r14, r22
    4c5e:	8c 01       	movw	r16, r24
    4c60:	60 91 5a 05 	lds	r22, 0x055A
    4c64:	70 91 5b 05 	lds	r23, 0x055B
    4c68:	db ce       	rjmp	.-586    	; 0x4a20 <getInputFromSpeed+0xe4>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    4c6a:	80 91 e4 04 	lds	r24, 0x04E4
    4c6e:	90 91 e5 04 	lds	r25, 0x04E5
    4c72:	82 17       	cp	r24, r18
    4c74:	93 07       	cpc	r25, r19
    4c76:	0c f0       	brlt	.+2      	; 0x4c7a <getInputFromSpeed+0x33e>
    4c78:	a1 c0       	rjmp	.+322    	; 0x4dbc <getInputFromSpeed+0x480>
    4c7a:	80 91 f4 04 	lds	r24, 0x04F4
    4c7e:	90 91 f5 04 	lds	r25, 0x04F5
    4c82:	82 17       	cp	r24, r18
    4c84:	93 07       	cpc	r25, r19
    4c86:	0c f0       	brlt	.+2      	; 0x4c8a <getInputFromSpeed+0x34e>
    4c88:	a2 c0       	rjmp	.+324    	; 0x4dce <getInputFromSpeed+0x492>
    4c8a:	80 91 04 05 	lds	r24, 0x0504
    4c8e:	90 91 05 05 	lds	r25, 0x0505
    4c92:	82 17       	cp	r24, r18
    4c94:	93 07       	cpc	r25, r19
    4c96:	0c f0       	brlt	.+2      	; 0x4c9a <getInputFromSpeed+0x35e>
    4c98:	9d c0       	rjmp	.+314    	; 0x4dd4 <getInputFromSpeed+0x498>
    4c9a:	80 91 14 05 	lds	r24, 0x0514
    4c9e:	90 91 15 05 	lds	r25, 0x0515
    4ca2:	82 17       	cp	r24, r18
    4ca4:	93 07       	cpc	r25, r19
    4ca6:	0c f0       	brlt	.+2      	; 0x4caa <getInputFromSpeed+0x36e>
    4ca8:	98 c0       	rjmp	.+304    	; 0x4dda <getInputFromSpeed+0x49e>
    4caa:	80 91 24 05 	lds	r24, 0x0524
    4cae:	90 91 25 05 	lds	r25, 0x0525
    4cb2:	82 17       	cp	r24, r18
    4cb4:	93 07       	cpc	r25, r19
    4cb6:	0c f0       	brlt	.+2      	; 0x4cba <getInputFromSpeed+0x37e>
    4cb8:	84 c0       	rjmp	.+264    	; 0x4dc2 <getInputFromSpeed+0x486>
    4cba:	80 91 34 05 	lds	r24, 0x0534
    4cbe:	90 91 35 05 	lds	r25, 0x0535
    4cc2:	82 17       	cp	r24, r18
    4cc4:	93 07       	cpc	r25, r19
    4cc6:	0c f0       	brlt	.+2      	; 0x4cca <getInputFromSpeed+0x38e>
    4cc8:	7f c0       	rjmp	.+254    	; 0x4dc8 <getInputFromSpeed+0x48c>
    4cca:	80 91 44 05 	lds	r24, 0x0544
    4cce:	90 91 45 05 	lds	r25, 0x0545
    4cd2:	82 17       	cp	r24, r18
    4cd4:	93 07       	cpc	r25, r19
    4cd6:	0c f0       	brlt	.+2      	; 0x4cda <getInputFromSpeed+0x39e>
    4cd8:	88 c0       	rjmp	.+272    	; 0x4dea <getInputFromSpeed+0x4ae>
    4cda:	80 91 54 05 	lds	r24, 0x0554
    4cde:	90 91 55 05 	lds	r25, 0x0555
    4ce2:	82 17       	cp	r24, r18
    4ce4:	93 07       	cpc	r25, r19
    4ce6:	0c f0       	brlt	.+2      	; 0x4cea <getInputFromSpeed+0x3ae>
    4ce8:	83 c0       	rjmp	.+262    	; 0x4df0 <getInputFromSpeed+0x4b4>
    4cea:	c0 91 64 05 	lds	r28, 0x0564
    4cee:	d0 91 65 05 	lds	r29, 0x0565
    4cf2:	c2 17       	cp	r28, r18
    4cf4:	d3 07       	cpc	r29, r19
    4cf6:	0c f4       	brge	.+2      	; 0x4cfa <getInputFromSpeed+0x3be>
    4cf8:	d9 ce       	rjmp	.-590    	; 0x4aac <getInputFromSpeed+0x170>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    4cfa:	c8 e0       	ldi	r28, 0x08	; 8
    4cfc:	d0 e0       	ldi	r29, 0x00	; 0
                break;
            }
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
    4cfe:	20 97       	sbiw	r28, 0x00	; 0
    4d00:	09 f0       	breq	.+2      	; 0x4d04 <getInputFromSpeed+0x3c8>
    4d02:	79 c0       	rjmp	.+242    	; 0x4df6 <getInputFromSpeed+0x4ba>
        if(mode==LEFT_WHEEL_FW_SC) {
    4d04:	66 23       	and	r22, r22
    4d06:	91 f4       	brne	.+36     	; 0x4d2c <getInputFromSpeed+0x3f0>
            temp = (currVel*calibration[0][0])/calibration[0][1];
    4d08:	40 91 d6 04 	lds	r20, 0x04D6
    4d0c:	50 91 d7 04 	lds	r21, 0x04D7
    4d10:	24 9f       	mul	r18, r20
    4d12:	c0 01       	movw	r24, r0
    4d14:	25 9f       	mul	r18, r21
    4d16:	90 0d       	add	r25, r0
    4d18:	34 9f       	mul	r19, r20
    4d1a:	90 0d       	add	r25, r0
    4d1c:	11 24       	eor	r1, r1
    4d1e:	60 91 d8 04 	lds	r22, 0x04D8
    4d22:	70 91 d9 04 	lds	r23, 0x04D9
    4d26:	0e 94 80 40 	call	0x8100	; 0x8100 <__divmodhi4>
    4d2a:	9a ce       	rjmp	.-716    	; 0x4a60 <getInputFromSpeed+0x124>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    4d2c:	61 30       	cpi	r22, 0x01	; 1
    4d2e:	d1 f0       	breq	.+52     	; 0x4d64 <getInputFromSpeed+0x428>
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
    4d30:	62 30       	cpi	r22, 0x02	; 2
    4d32:	51 f1       	breq	.+84     	; 0x4d88 <getInputFromSpeed+0x44c>
            temp = currVel*calibration[0][4]/calibration[0][5];
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    4d34:	63 30       	cpi	r22, 0x03	; 3
    4d36:	09 f0       	breq	.+2      	; 0x4d3a <getInputFromSpeed+0x3fe>
    4d38:	91 ce       	rjmp	.-734    	; 0x4a5c <getInputFromSpeed+0x120>
            temp = currVel*calibration[0][6]/calibration[0][7];
    4d3a:	40 91 e2 04 	lds	r20, 0x04E2
    4d3e:	50 91 e3 04 	lds	r21, 0x04E3
    4d42:	24 9f       	mul	r18, r20
    4d44:	c0 01       	movw	r24, r0
    4d46:	25 9f       	mul	r18, r21
    4d48:	90 0d       	add	r25, r0
    4d4a:	34 9f       	mul	r19, r20
    4d4c:	90 0d       	add	r25, r0
    4d4e:	11 24       	eor	r1, r1
    4d50:	60 91 e4 04 	lds	r22, 0x04E4
    4d54:	70 91 e5 04 	lds	r23, 0x04E5
    4d58:	0e 94 80 40 	call	0x8100	; 0x8100 <__divmodhi4>
            temp = -temp;
    4d5c:	70 95       	com	r23
    4d5e:	61 95       	neg	r22
    4d60:	7f 4f       	sbci	r23, 0xFF	; 255
    4d62:	7e ce       	rjmp	.-772    	; 0x4a60 <getInputFromSpeed+0x124>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    4d64:	40 91 da 04 	lds	r20, 0x04DA
    4d68:	50 91 db 04 	lds	r21, 0x04DB
    4d6c:	24 9f       	mul	r18, r20
    4d6e:	c0 01       	movw	r24, r0
    4d70:	25 9f       	mul	r18, r21
    4d72:	90 0d       	add	r25, r0
    4d74:	34 9f       	mul	r19, r20
    4d76:	90 0d       	add	r25, r0
    4d78:	11 24       	eor	r1, r1
    4d7a:	60 91 dc 04 	lds	r22, 0x04DC
    4d7e:	70 91 dd 04 	lds	r23, 0x04DD
    4d82:	0e 94 80 40 	call	0x8100	; 0x8100 <__divmodhi4>
    4d86:	6c ce       	rjmp	.-808    	; 0x4a60 <getInputFromSpeed+0x124>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    4d88:	40 91 de 04 	lds	r20, 0x04DE
    4d8c:	50 91 df 04 	lds	r21, 0x04DF
    4d90:	24 9f       	mul	r18, r20
    4d92:	c0 01       	movw	r24, r0
    4d94:	25 9f       	mul	r18, r21
    4d96:	90 0d       	add	r25, r0
    4d98:	34 9f       	mul	r19, r20
    4d9a:	90 0d       	add	r25, r0
    4d9c:	11 24       	eor	r1, r1
    4d9e:	60 91 e0 04 	lds	r22, 0x04E0
    4da2:	70 91 e1 04 	lds	r23, 0x04E1
    4da6:	0e 94 80 40 	call	0x8100	; 0x8100 <__divmodhi4>
            temp = -temp;
    4daa:	70 95       	com	r23
    4dac:	61 95       	neg	r22
    4dae:	7f 4f       	sbci	r23, 0xFF	; 255
    4db0:	57 ce       	rjmp	.-850    	; 0x4a60 <getInputFromSpeed+0x124>
    4db2:	c0 91 5c 05 	lds	r28, 0x055C
    4db6:	d0 91 5d 05 	lds	r29, 0x055D
    4dba:	49 cf       	rjmp	.-366    	; 0x4c4e <getInputFromSpeed+0x312>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4dbc:	c0 e0       	ldi	r28, 0x00	; 0
    4dbe:	d0 e0       	ldi	r29, 0x00	; 0
    4dc0:	9e cf       	rjmp	.-196    	; 0x4cfe <getInputFromSpeed+0x3c2>
    4dc2:	c4 e0       	ldi	r28, 0x04	; 4
    4dc4:	d0 e0       	ldi	r29, 0x00	; 0
    4dc6:	9b cf       	rjmp	.-202    	; 0x4cfe <getInputFromSpeed+0x3c2>
    4dc8:	c5 e0       	ldi	r28, 0x05	; 5
    4dca:	d0 e0       	ldi	r29, 0x00	; 0
    4dcc:	98 cf       	rjmp	.-208    	; 0x4cfe <getInputFromSpeed+0x3c2>
    4dce:	c1 e0       	ldi	r28, 0x01	; 1
    4dd0:	d0 e0       	ldi	r29, 0x00	; 0
    4dd2:	95 cf       	rjmp	.-214    	; 0x4cfe <getInputFromSpeed+0x3c2>
    4dd4:	c2 e0       	ldi	r28, 0x02	; 2
    4dd6:	d0 e0       	ldi	r29, 0x00	; 0
    4dd8:	92 cf       	rjmp	.-220    	; 0x4cfe <getInputFromSpeed+0x3c2>
    4dda:	c3 e0       	ldi	r28, 0x03	; 3
    4ddc:	d0 e0       	ldi	r29, 0x00	; 0
    4dde:	8f cf       	rjmp	.-226    	; 0x4cfe <getInputFromSpeed+0x3c2>
    4de0:	c0 91 60 05 	lds	r28, 0x0560
    4de4:	d0 91 61 05 	lds	r29, 0x0561
    4de8:	b7 ce       	rjmp	.-658    	; 0x4b58 <getInputFromSpeed+0x21c>
    4dea:	c6 e0       	ldi	r28, 0x06	; 6
    4dec:	d0 e0       	ldi	r29, 0x00	; 0
    4dee:	87 cf       	rjmp	.-242    	; 0x4cfe <getInputFromSpeed+0x3c2>
    4df0:	c7 e0       	ldi	r28, 0x07	; 7
    4df2:	d0 e0       	ldi	r29, 0x00	; 0
    4df4:	84 cf       	rjmp	.-248    	; 0x4cfe <getInputFromSpeed+0x3c2>
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    4df6:	c9 30       	cpi	r28, 0x09	; 9
    4df8:	d1 05       	cpc	r29, r1
    4dfa:	09 f4       	brne	.+2      	; 0x4dfe <getInputFromSpeed+0x4c2>
    4dfc:	48 ce       	rjmp	.-880    	; 0x4a8e <getInputFromSpeed+0x152>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    4dfe:	66 23       	and	r22, r22
    4e00:	09 f0       	breq	.+2      	; 0x4e04 <getInputFromSpeed+0x4c8>
    4e02:	47 c0       	rjmp	.+142    	; 0x4e92 <getInputFromSpeed+0x556>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    4e04:	fe 01       	movw	r30, r28
    4e06:	e2 95       	swap	r30
    4e08:	f2 95       	swap	r31
    4e0a:	f0 7f       	andi	r31, 0xF0	; 240
    4e0c:	fe 27       	eor	r31, r30
    4e0e:	e0 7f       	andi	r30, 0xF0	; 240
    4e10:	fe 27       	eor	r31, r30
    4e12:	ea 53       	subi	r30, 0x3A	; 58
    4e14:	fb 4f       	sbci	r31, 0xFB	; 251
    4e16:	c2 80       	ldd	r12, Z+2	; 0x02
    4e18:	d3 80       	ldd	r13, Z+3	; 0x03
    4e1a:	a0 80       	ld	r10, Z
    4e1c:	b1 80       	ldd	r11, Z+1	; 0x01
    4e1e:	2c 19       	sub	r18, r12
    4e20:	3d 09       	sbc	r19, r13
    4e22:	b9 01       	movw	r22, r18
    4e24:	88 27       	eor	r24, r24
    4e26:	77 fd       	sbrc	r23, 7
    4e28:	80 95       	com	r24
    4e2a:	98 2f       	mov	r25, r24
    4e2c:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4e30:	7b 01       	movw	r14, r22
    4e32:	8c 01       	movw	r16, r24
    4e34:	c2 95       	swap	r28
    4e36:	d2 95       	swap	r29
    4e38:	d0 7f       	andi	r29, 0xF0	; 240
    4e3a:	dc 27       	eor	r29, r28
    4e3c:	c0 7f       	andi	r28, 0xF0	; 240
    4e3e:	dc 27       	eor	r29, r28
    4e40:	ca 52       	subi	r28, 0x2A	; 42
    4e42:	db 4f       	sbci	r29, 0xFB	; 251
    4e44:	68 81       	ld	r22, Y
    4e46:	79 81       	ldd	r23, Y+1	; 0x01
    4e48:	6a 19       	sub	r22, r10
    4e4a:	7b 09       	sbc	r23, r11
    4e4c:	88 27       	eor	r24, r24
    4e4e:	77 fd       	sbrc	r23, 7
    4e50:	80 95       	com	r24
    4e52:	98 2f       	mov	r25, r24
    4e54:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4e58:	9b 01       	movw	r18, r22
    4e5a:	ac 01       	movw	r20, r24
    4e5c:	c8 01       	movw	r24, r16
    4e5e:	b7 01       	movw	r22, r14
    4e60:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    4e64:	7b 01       	movw	r14, r22
    4e66:	8c 01       	movw	r16, r24
    4e68:	6a 81       	ldd	r22, Y+2	; 0x02
    4e6a:	7b 81       	ldd	r23, Y+3	; 0x03
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    4e6c:	6c 19       	sub	r22, r12
    4e6e:	7d 09       	sbc	r23, r13
    4e70:	88 27       	eor	r24, r24
    4e72:	77 fd       	sbrc	r23, 7
    4e74:	80 95       	com	r24
    4e76:	98 2f       	mov	r25, r24
    4e78:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4e7c:	9b 01       	movw	r18, r22
    4e7e:	ac 01       	movw	r20, r24
    4e80:	c8 01       	movw	r24, r16
    4e82:	b7 01       	movw	r22, r14
    4e84:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    4e88:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
    4e8c:	6a 0d       	add	r22, r10
    4e8e:	7b 1d       	adc	r23, r11
    4e90:	e7 cd       	rjmp	.-1074   	; 0x4a60 <getInputFromSpeed+0x124>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    4e92:	61 30       	cpi	r22, 0x01	; 1
    4e94:	09 f4       	brne	.+2      	; 0x4e98 <getInputFromSpeed+0x55c>
    4e96:	50 c0       	rjmp	.+160    	; 0x4f38 <getInputFromSpeed+0x5fc>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    4e98:	62 30       	cpi	r22, 0x02	; 2
    4e9a:	09 f4       	brne	.+2      	; 0x4e9e <getInputFromSpeed+0x562>
    4e9c:	82 c0       	rjmp	.+260    	; 0x4fa2 <getInputFromSpeed+0x666>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    4e9e:	63 30       	cpi	r22, 0x03	; 3
    4ea0:	09 f0       	breq	.+2      	; 0x4ea4 <getInputFromSpeed+0x568>
    4ea2:	dc cd       	rjmp	.-1096   	; 0x4a5c <getInputFromSpeed+0x120>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    4ea4:	fe 01       	movw	r30, r28
    4ea6:	e2 95       	swap	r30
    4ea8:	f2 95       	swap	r31
    4eaa:	f0 7f       	andi	r31, 0xF0	; 240
    4eac:	fe 27       	eor	r31, r30
    4eae:	e0 7f       	andi	r30, 0xF0	; 240
    4eb0:	fe 27       	eor	r31, r30
    4eb2:	ea 53       	subi	r30, 0x3A	; 58
    4eb4:	fb 4f       	sbci	r31, 0xFB	; 251
    4eb6:	c6 84       	ldd	r12, Z+14	; 0x0e
    4eb8:	d7 84       	ldd	r13, Z+15	; 0x0f
    4eba:	a4 84       	ldd	r10, Z+12	; 0x0c
    4ebc:	b5 84       	ldd	r11, Z+13	; 0x0d
    4ebe:	2c 19       	sub	r18, r12
    4ec0:	3d 09       	sbc	r19, r13
    4ec2:	b9 01       	movw	r22, r18
    4ec4:	88 27       	eor	r24, r24
    4ec6:	77 fd       	sbrc	r23, 7
    4ec8:	80 95       	com	r24
    4eca:	98 2f       	mov	r25, r24
    4ecc:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4ed0:	7b 01       	movw	r14, r22
    4ed2:	8c 01       	movw	r16, r24
    4ed4:	c2 95       	swap	r28
    4ed6:	d2 95       	swap	r29
    4ed8:	d0 7f       	andi	r29, 0xF0	; 240
    4eda:	dc 27       	eor	r29, r28
    4edc:	c0 7f       	andi	r28, 0xF0	; 240
    4ede:	dc 27       	eor	r29, r28
    4ee0:	ca 52       	subi	r28, 0x2A	; 42
    4ee2:	db 4f       	sbci	r29, 0xFB	; 251
    4ee4:	6c 85       	ldd	r22, Y+12	; 0x0c
    4ee6:	7d 85       	ldd	r23, Y+13	; 0x0d
    4ee8:	6a 19       	sub	r22, r10
    4eea:	7b 09       	sbc	r23, r11
    4eec:	88 27       	eor	r24, r24
    4eee:	77 fd       	sbrc	r23, 7
    4ef0:	80 95       	com	r24
    4ef2:	98 2f       	mov	r25, r24
    4ef4:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4ef8:	9b 01       	movw	r18, r22
    4efa:	ac 01       	movw	r20, r24
    4efc:	c8 01       	movw	r24, r16
    4efe:	b7 01       	movw	r22, r14
    4f00:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    4f04:	7b 01       	movw	r14, r22
    4f06:	8c 01       	movw	r16, r24
    4f08:	6e 85       	ldd	r22, Y+14	; 0x0e
    4f0a:	7f 85       	ldd	r23, Y+15	; 0x0f
    4f0c:	6c 19       	sub	r22, r12
    4f0e:	7d 09       	sbc	r23, r13
    4f10:	88 27       	eor	r24, r24
    4f12:	77 fd       	sbrc	r23, 7
    4f14:	80 95       	com	r24
    4f16:	98 2f       	mov	r25, r24
    4f18:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4f1c:	9b 01       	movw	r18, r22
    4f1e:	ac 01       	movw	r20, r24
    4f20:	c8 01       	movw	r24, r16
    4f22:	b7 01       	movw	r22, r14
    4f24:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    4f28:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
    4f2c:	6a 0d       	add	r22, r10
    4f2e:	7b 1d       	adc	r23, r11
            temp = -temp;
    4f30:	70 95       	com	r23
    4f32:	61 95       	neg	r22
    4f34:	7f 4f       	sbci	r23, 0xFF	; 255
    4f36:	94 cd       	rjmp	.-1240   	; 0x4a60 <getInputFromSpeed+0x124>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    4f38:	fe 01       	movw	r30, r28
    4f3a:	e2 95       	swap	r30
    4f3c:	f2 95       	swap	r31
    4f3e:	f0 7f       	andi	r31, 0xF0	; 240
    4f40:	fe 27       	eor	r31, r30
    4f42:	e0 7f       	andi	r30, 0xF0	; 240
    4f44:	fe 27       	eor	r31, r30
    4f46:	ea 53       	subi	r30, 0x3A	; 58
    4f48:	fb 4f       	sbci	r31, 0xFB	; 251
    4f4a:	c6 80       	ldd	r12, Z+6	; 0x06
    4f4c:	d7 80       	ldd	r13, Z+7	; 0x07
    4f4e:	a4 80       	ldd	r10, Z+4	; 0x04
    4f50:	b5 80       	ldd	r11, Z+5	; 0x05
    4f52:	2c 19       	sub	r18, r12
    4f54:	3d 09       	sbc	r19, r13
    4f56:	b9 01       	movw	r22, r18
    4f58:	88 27       	eor	r24, r24
    4f5a:	77 fd       	sbrc	r23, 7
    4f5c:	80 95       	com	r24
    4f5e:	98 2f       	mov	r25, r24
    4f60:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4f64:	7b 01       	movw	r14, r22
    4f66:	8c 01       	movw	r16, r24
    4f68:	c2 95       	swap	r28
    4f6a:	d2 95       	swap	r29
    4f6c:	d0 7f       	andi	r29, 0xF0	; 240
    4f6e:	dc 27       	eor	r29, r28
    4f70:	c0 7f       	andi	r28, 0xF0	; 240
    4f72:	dc 27       	eor	r29, r28
    4f74:	ca 52       	subi	r28, 0x2A	; 42
    4f76:	db 4f       	sbci	r29, 0xFB	; 251
    4f78:	6c 81       	ldd	r22, Y+4	; 0x04
    4f7a:	7d 81       	ldd	r23, Y+5	; 0x05
    4f7c:	6a 19       	sub	r22, r10
    4f7e:	7b 09       	sbc	r23, r11
    4f80:	88 27       	eor	r24, r24
    4f82:	77 fd       	sbrc	r23, 7
    4f84:	80 95       	com	r24
    4f86:	98 2f       	mov	r25, r24
    4f88:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4f8c:	9b 01       	movw	r18, r22
    4f8e:	ac 01       	movw	r20, r24
    4f90:	c8 01       	movw	r24, r16
    4f92:	b7 01       	movw	r22, r14
    4f94:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    4f98:	7b 01       	movw	r14, r22
    4f9a:	8c 01       	movw	r16, r24
    4f9c:	6e 81       	ldd	r22, Y+6	; 0x06
    4f9e:	7f 81       	ldd	r23, Y+7	; 0x07
    4fa0:	65 cf       	rjmp	.-310    	; 0x4e6c <getInputFromSpeed+0x530>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    4fa2:	fe 01       	movw	r30, r28
    4fa4:	e2 95       	swap	r30
    4fa6:	f2 95       	swap	r31
    4fa8:	f0 7f       	andi	r31, 0xF0	; 240
    4faa:	fe 27       	eor	r31, r30
    4fac:	e0 7f       	andi	r30, 0xF0	; 240
    4fae:	fe 27       	eor	r31, r30
    4fb0:	ea 53       	subi	r30, 0x3A	; 58
    4fb2:	fb 4f       	sbci	r31, 0xFB	; 251
    4fb4:	c2 84       	ldd	r12, Z+10	; 0x0a
    4fb6:	d3 84       	ldd	r13, Z+11	; 0x0b
    4fb8:	a0 84       	ldd	r10, Z+8	; 0x08
    4fba:	b1 84       	ldd	r11, Z+9	; 0x09
    4fbc:	2c 19       	sub	r18, r12
    4fbe:	3d 09       	sbc	r19, r13
    4fc0:	b9 01       	movw	r22, r18
    4fc2:	88 27       	eor	r24, r24
    4fc4:	77 fd       	sbrc	r23, 7
    4fc6:	80 95       	com	r24
    4fc8:	98 2f       	mov	r25, r24
    4fca:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4fce:	7b 01       	movw	r14, r22
    4fd0:	8c 01       	movw	r16, r24
    4fd2:	c2 95       	swap	r28
    4fd4:	d2 95       	swap	r29
    4fd6:	d0 7f       	andi	r29, 0xF0	; 240
    4fd8:	dc 27       	eor	r29, r28
    4fda:	c0 7f       	andi	r28, 0xF0	; 240
    4fdc:	dc 27       	eor	r29, r28
    4fde:	ca 52       	subi	r28, 0x2A	; 42
    4fe0:	db 4f       	sbci	r29, 0xFB	; 251
    4fe2:	68 85       	ldd	r22, Y+8	; 0x08
    4fe4:	79 85       	ldd	r23, Y+9	; 0x09
    4fe6:	6a 19       	sub	r22, r10
    4fe8:	7b 09       	sbc	r23, r11
    4fea:	88 27       	eor	r24, r24
    4fec:	77 fd       	sbrc	r23, 7
    4fee:	80 95       	com	r24
    4ff0:	98 2f       	mov	r25, r24
    4ff2:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    4ff6:	9b 01       	movw	r18, r22
    4ff8:	ac 01       	movw	r20, r24
    4ffa:	c8 01       	movw	r24, r16
    4ffc:	b7 01       	movw	r22, r14
    4ffe:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    5002:	7b 01       	movw	r14, r22
    5004:	8c 01       	movw	r16, r24
    5006:	6a 85       	ldd	r22, Y+10	; 0x0a
    5008:	7b 85       	ldd	r23, Y+11	; 0x0b
    500a:	80 cf       	rjmp	.-256    	; 0x4f0c <getInputFromSpeed+0x5d0>

0000500c <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    500c:	8f 92       	push	r8
    500e:	9f 92       	push	r9
    5010:	af 92       	push	r10
    5012:	bf 92       	push	r11
    5014:	cf 92       	push	r12
    5016:	df 92       	push	r13
    5018:	ef 92       	push	r14
    501a:	ff 92       	push	r15
    501c:	0f 93       	push	r16
    501e:	1f 93       	push	r17
    5020:	cf 93       	push	r28
    5022:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5024:	c0 91 f1 02 	lds	r28, 0x02F1
    5028:	d0 91 f2 02 	lds	r29, 0x02F2
    502c:	80 91 f3 02 	lds	r24, 0x02F3
    5030:	90 91 f4 02 	lds	r25, 0x02F4
    5034:	97 fd       	sbrc	r25, 7
    5036:	d9 c0       	rjmp	.+434    	; 0x51ea <getRightSpeedFromInput+0x1de>
    5038:	60 91 da 04 	lds	r22, 0x04DA
    503c:	70 91 db 04 	lds	r23, 0x04DB
    5040:	6c 17       	cp	r22, r28
    5042:	7d 07       	cpc	r23, r29
    5044:	0c f0       	brlt	.+2      	; 0x5048 <getRightSpeedFromInput+0x3c>
    5046:	bd c0       	rjmp	.+378    	; 0x51c2 <getRightSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    5048:	0f ef       	ldi	r16, 0xFF	; 255
    504a:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    504c:	80 91 ea 04 	lds	r24, 0x04EA
    5050:	90 91 eb 04 	lds	r25, 0x04EB
    5054:	8c 17       	cp	r24, r28
    5056:	9d 07       	cpc	r25, r29
    5058:	44 f0       	brlt	.+16     	; 0x506a <getRightSpeedFromInput+0x5e>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    505a:	81 e0       	ldi	r24, 0x01	; 1
    505c:	9f ef       	ldi	r25, 0xFF	; 255
    505e:	0f 3f       	cpi	r16, 0xFF	; 255
    5060:	19 07       	cpc	r17, r25
    5062:	09 f0       	breq	.+2      	; 0x5066 <getRightSpeedFromInput+0x5a>
    5064:	80 e0       	ldi	r24, 0x00	; 0
    5066:	08 2f       	mov	r16, r24
    5068:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    506a:	80 91 fa 04 	lds	r24, 0x04FA
    506e:	90 91 fb 04 	lds	r25, 0x04FB
    5072:	8c 17       	cp	r24, r28
    5074:	9d 07       	cpc	r25, r29
    5076:	2c f0       	brlt	.+10     	; 0x5082 <getRightSpeedFromInput+0x76>
    5078:	8f ef       	ldi	r24, 0xFF	; 255
    507a:	0f 3f       	cpi	r16, 0xFF	; 255
    507c:	18 07       	cpc	r17, r24
    507e:	09 f4       	brne	.+2      	; 0x5082 <getRightSpeedFromInput+0x76>
    5080:	6c c1       	rjmp	.+728    	; 0x535a <getRightSpeedFromInput+0x34e>
    5082:	80 91 0a 05 	lds	r24, 0x050A
    5086:	90 91 0b 05 	lds	r25, 0x050B
    508a:	8c 17       	cp	r24, r28
    508c:	9d 07       	cpc	r25, r29
    508e:	2c f0       	brlt	.+10     	; 0x509a <getRightSpeedFromInput+0x8e>
    5090:	9f ef       	ldi	r25, 0xFF	; 255
    5092:	0f 3f       	cpi	r16, 0xFF	; 255
    5094:	19 07       	cpc	r17, r25
    5096:	09 f4       	brne	.+2      	; 0x509a <getRightSpeedFromInput+0x8e>
    5098:	72 c1       	rjmp	.+740    	; 0x537e <getRightSpeedFromInput+0x372>
    509a:	80 91 1a 05 	lds	r24, 0x051A
    509e:	90 91 1b 05 	lds	r25, 0x051B
    50a2:	8c 17       	cp	r24, r28
    50a4:	9d 07       	cpc	r25, r29
    50a6:	2c f0       	brlt	.+10     	; 0x50b2 <getRightSpeedFromInput+0xa6>
    50a8:	8f ef       	ldi	r24, 0xFF	; 255
    50aa:	0f 3f       	cpi	r16, 0xFF	; 255
    50ac:	18 07       	cpc	r17, r24
    50ae:	09 f4       	brne	.+2      	; 0x50b2 <getRightSpeedFromInput+0xa6>
    50b0:	63 c1       	rjmp	.+710    	; 0x5378 <getRightSpeedFromInput+0x36c>
    50b2:	80 91 2a 05 	lds	r24, 0x052A
    50b6:	90 91 2b 05 	lds	r25, 0x052B
    50ba:	8c 17       	cp	r24, r28
    50bc:	9d 07       	cpc	r25, r29
    50be:	2c f0       	brlt	.+10     	; 0x50ca <getRightSpeedFromInput+0xbe>
    50c0:	9f ef       	ldi	r25, 0xFF	; 255
    50c2:	0f 3f       	cpi	r16, 0xFF	; 255
    50c4:	19 07       	cpc	r17, r25
    50c6:	09 f4       	brne	.+2      	; 0x50ca <getRightSpeedFromInput+0xbe>
    50c8:	54 c1       	rjmp	.+680    	; 0x5372 <getRightSpeedFromInput+0x366>
    50ca:	80 91 3a 05 	lds	r24, 0x053A
    50ce:	90 91 3b 05 	lds	r25, 0x053B
    50d2:	8c 17       	cp	r24, r28
    50d4:	9d 07       	cpc	r25, r29
    50d6:	2c f0       	brlt	.+10     	; 0x50e2 <getRightSpeedFromInput+0xd6>
    50d8:	8f ef       	ldi	r24, 0xFF	; 255
    50da:	0f 3f       	cpi	r16, 0xFF	; 255
    50dc:	18 07       	cpc	r17, r24
    50de:	09 f4       	brne	.+2      	; 0x50e2 <getRightSpeedFromInput+0xd6>
    50e0:	45 c1       	rjmp	.+650    	; 0x536c <getRightSpeedFromInput+0x360>
    50e2:	80 91 4a 05 	lds	r24, 0x054A
    50e6:	90 91 4b 05 	lds	r25, 0x054B
    50ea:	8c 17       	cp	r24, r28
    50ec:	9d 07       	cpc	r25, r29
    50ee:	2c f0       	brlt	.+10     	; 0x50fa <getRightSpeedFromInput+0xee>
    50f0:	9f ef       	ldi	r25, 0xFF	; 255
    50f2:	0f 3f       	cpi	r16, 0xFF	; 255
    50f4:	19 07       	cpc	r17, r25
    50f6:	09 f4       	brne	.+2      	; 0x50fa <getRightSpeedFromInput+0xee>
    50f8:	36 c1       	rjmp	.+620    	; 0x5366 <getRightSpeedFromInput+0x35a>
    50fa:	e0 90 5a 05 	lds	r14, 0x055A
    50fe:	f0 90 5b 05 	lds	r15, 0x055B
    5102:	ec 16       	cp	r14, r28
    5104:	fd 06       	cpc	r15, r29
    5106:	2c f0       	brlt	.+10     	; 0x5112 <getRightSpeedFromInput+0x106>
    5108:	8f ef       	ldi	r24, 0xFF	; 255
    510a:	0f 3f       	cpi	r16, 0xFF	; 255
    510c:	18 07       	cpc	r17, r24
    510e:	09 f4       	brne	.+2      	; 0x5112 <getRightSpeedFromInput+0x106>
    5110:	27 c1       	rjmp	.+590    	; 0x5360 <getRightSpeedFromInput+0x354>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    5112:	20 97       	sbiw	r28, 0x00	; 0
    5114:	09 f4       	brne	.+2      	; 0x5118 <getRightSpeedFromInput+0x10c>
    5116:	58 c0       	rjmp	.+176    	; 0x51c8 <getRightSpeedFromInput+0x1bc>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    5118:	01 15       	cp	r16, r1
    511a:	11 05       	cpc	r17, r1
    511c:	09 f4       	brne	.+2      	; 0x5120 <getRightSpeedFromInput+0x114>
    511e:	32 c1       	rjmp	.+612    	; 0x5384 <getRightSpeedFromInput+0x378>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5120:	9f ef       	ldi	r25, 0xFF	; 255
    5122:	0f 3f       	cpi	r16, 0xFF	; 255
    5124:	19 07       	cpc	r17, r25
    5126:	09 f4       	brne	.+2      	; 0x512a <getRightSpeedFromInput+0x11e>
    5128:	e9 c0       	rjmp	.+466    	; 0x52fc <getRightSpeedFromInput+0x2f0>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    512a:	f8 01       	movw	r30, r16
    512c:	e2 95       	swap	r30
    512e:	f2 95       	swap	r31
    5130:	f0 7f       	andi	r31, 0xF0	; 240
    5132:	fe 27       	eor	r31, r30
    5134:	e0 7f       	andi	r30, 0xF0	; 240
    5136:	fe 27       	eor	r31, r30
    5138:	ea 53       	subi	r30, 0x3A	; 58
    513a:	fb 4f       	sbci	r31, 0xFB	; 251
    513c:	a4 80       	ldd	r10, Z+4	; 0x04
    513e:	b5 80       	ldd	r11, Z+5	; 0x05
    5140:	86 80       	ldd	r8, Z+6	; 0x06
    5142:	97 80       	ldd	r9, Z+7	; 0x07
    5144:	ca 19       	sub	r28, r10
    5146:	db 09       	sbc	r29, r11
    5148:	be 01       	movw	r22, r28
    514a:	88 27       	eor	r24, r24
    514c:	77 fd       	sbrc	r23, 7
    514e:	80 95       	com	r24
    5150:	98 2f       	mov	r25, r24
    5152:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    5156:	6b 01       	movw	r12, r22
    5158:	7c 01       	movw	r14, r24
    515a:	e8 01       	movw	r28, r16
    515c:	c2 95       	swap	r28
    515e:	d2 95       	swap	r29
    5160:	d0 7f       	andi	r29, 0xF0	; 240
    5162:	dc 27       	eor	r29, r28
    5164:	c0 7f       	andi	r28, 0xF0	; 240
    5166:	dc 27       	eor	r29, r28
    5168:	ca 52       	subi	r28, 0x2A	; 42
    516a:	db 4f       	sbci	r29, 0xFB	; 251
    516c:	6e 81       	ldd	r22, Y+6	; 0x06
    516e:	7f 81       	ldd	r23, Y+7	; 0x07
    5170:	68 19       	sub	r22, r8
    5172:	79 09       	sbc	r23, r9
    5174:	88 27       	eor	r24, r24
    5176:	77 fd       	sbrc	r23, 7
    5178:	80 95       	com	r24
    517a:	98 2f       	mov	r25, r24
    517c:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    5180:	9b 01       	movw	r18, r22
    5182:	ac 01       	movw	r20, r24
    5184:	c7 01       	movw	r24, r14
    5186:	b6 01       	movw	r22, r12
    5188:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    518c:	7b 01       	movw	r14, r22
    518e:	8c 01       	movw	r16, r24
    5190:	6c 81       	ldd	r22, Y+4	; 0x04
    5192:	7d 81       	ldd	r23, Y+5	; 0x05
    5194:	6a 19       	sub	r22, r10
    5196:	7b 09       	sbc	r23, r11
    5198:	88 27       	eor	r24, r24
    519a:	77 fd       	sbrc	r23, 7
    519c:	80 95       	com	r24
    519e:	98 2f       	mov	r25, r24
    51a0:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    51a4:	9b 01       	movw	r18, r22
    51a6:	ac 01       	movw	r20, r24
    51a8:	c8 01       	movw	r24, r16
    51aa:	b7 01       	movw	r22, r14
    51ac:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    51b0:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
    51b4:	68 0d       	add	r22, r8
    51b6:	79 1d       	adc	r23, r9
    51b8:	70 93 b0 04 	sts	0x04B0, r23
    51bc:	60 93 af 04 	sts	0x04AF, r22
    51c0:	07 c0       	rjmp	.+14     	; 0x51d0 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    51c2:	00 e0       	ldi	r16, 0x00	; 0
    51c4:	10 e0       	ldi	r17, 0x00	; 0
    51c6:	42 cf       	rjmp	.-380    	; 0x504c <getRightSpeedFromInput+0x40>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    51c8:	10 92 b0 04 	sts	0x04B0, r1
    51cc:	10 92 af 04 	sts	0x04AF, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    51d0:	df 91       	pop	r29
    51d2:	cf 91       	pop	r28
    51d4:	1f 91       	pop	r17
    51d6:	0f 91       	pop	r16
    51d8:	ff 90       	pop	r15
    51da:	ef 90       	pop	r14
    51dc:	df 90       	pop	r13
    51de:	cf 90       	pop	r12
    51e0:	bf 90       	pop	r11
    51e2:	af 90       	pop	r10
    51e4:	9f 90       	pop	r9
    51e6:	8f 90       	pop	r8
    51e8:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    51ea:	60 91 e2 04 	lds	r22, 0x04E2
    51ee:	70 91 e3 04 	lds	r23, 0x04E3
    51f2:	6c 17       	cp	r22, r28
    51f4:	7d 07       	cpc	r23, r29
    51f6:	0c f0       	brlt	.+2      	; 0x51fa <getRightSpeedFromInput+0x1ee>
    51f8:	7e c0       	rjmp	.+252    	; 0x52f6 <getRightSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    51fa:	0f ef       	ldi	r16, 0xFF	; 255
    51fc:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    51fe:	80 91 f2 04 	lds	r24, 0x04F2
    5202:	90 91 f3 04 	lds	r25, 0x04F3
    5206:	8c 17       	cp	r24, r28
    5208:	9d 07       	cpc	r25, r29
    520a:	44 f0       	brlt	.+16     	; 0x521c <getRightSpeedFromInput+0x210>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    520c:	81 e0       	ldi	r24, 0x01	; 1
    520e:	9f ef       	ldi	r25, 0xFF	; 255
    5210:	0f 3f       	cpi	r16, 0xFF	; 255
    5212:	19 07       	cpc	r17, r25
    5214:	09 f0       	breq	.+2      	; 0x5218 <getRightSpeedFromInput+0x20c>
    5216:	80 e0       	ldi	r24, 0x00	; 0
    5218:	08 2f       	mov	r16, r24
    521a:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    521c:	80 91 02 05 	lds	r24, 0x0502
    5220:	90 91 03 05 	lds	r25, 0x0503
    5224:	8c 17       	cp	r24, r28
    5226:	9d 07       	cpc	r25, r29
    5228:	2c f0       	brlt	.+10     	; 0x5234 <getRightSpeedFromInput+0x228>
    522a:	8f ef       	ldi	r24, 0xFF	; 255
    522c:	0f 3f       	cpi	r16, 0xFF	; 255
    522e:	18 07       	cpc	r17, r24
    5230:	09 f4       	brne	.+2      	; 0x5234 <getRightSpeedFromInput+0x228>
    5232:	19 c1       	rjmp	.+562    	; 0x5466 <getRightSpeedFromInput+0x45a>
    5234:	80 91 12 05 	lds	r24, 0x0512
    5238:	90 91 13 05 	lds	r25, 0x0513
    523c:	8c 17       	cp	r24, r28
    523e:	9d 07       	cpc	r25, r29
    5240:	2c f0       	brlt	.+10     	; 0x524c <getRightSpeedFromInput+0x240>
    5242:	9f ef       	ldi	r25, 0xFF	; 255
    5244:	0f 3f       	cpi	r16, 0xFF	; 255
    5246:	19 07       	cpc	r17, r25
    5248:	09 f4       	brne	.+2      	; 0x524c <getRightSpeedFromInput+0x240>
    524a:	0a c1       	rjmp	.+532    	; 0x5460 <getRightSpeedFromInput+0x454>
    524c:	80 91 22 05 	lds	r24, 0x0522
    5250:	90 91 23 05 	lds	r25, 0x0523
    5254:	8c 17       	cp	r24, r28
    5256:	9d 07       	cpc	r25, r29
    5258:	2c f0       	brlt	.+10     	; 0x5264 <getRightSpeedFromInput+0x258>
    525a:	8f ef       	ldi	r24, 0xFF	; 255
    525c:	0f 3f       	cpi	r16, 0xFF	; 255
    525e:	18 07       	cpc	r17, r24
    5260:	09 f4       	brne	.+2      	; 0x5264 <getRightSpeedFromInput+0x258>
    5262:	fb c0       	rjmp	.+502    	; 0x545a <getRightSpeedFromInput+0x44e>
    5264:	80 91 32 05 	lds	r24, 0x0532
    5268:	90 91 33 05 	lds	r25, 0x0533
    526c:	8c 17       	cp	r24, r28
    526e:	9d 07       	cpc	r25, r29
    5270:	2c f0       	brlt	.+10     	; 0x527c <getRightSpeedFromInput+0x270>
    5272:	9f ef       	ldi	r25, 0xFF	; 255
    5274:	0f 3f       	cpi	r16, 0xFF	; 255
    5276:	19 07       	cpc	r17, r25
    5278:	09 f4       	brne	.+2      	; 0x527c <getRightSpeedFromInput+0x270>
    527a:	ec c0       	rjmp	.+472    	; 0x5454 <getRightSpeedFromInput+0x448>
    527c:	80 91 42 05 	lds	r24, 0x0542
    5280:	90 91 43 05 	lds	r25, 0x0543
    5284:	8c 17       	cp	r24, r28
    5286:	9d 07       	cpc	r25, r29
    5288:	2c f0       	brlt	.+10     	; 0x5294 <getRightSpeedFromInput+0x288>
    528a:	8f ef       	ldi	r24, 0xFF	; 255
    528c:	0f 3f       	cpi	r16, 0xFF	; 255
    528e:	18 07       	cpc	r17, r24
    5290:	09 f4       	brne	.+2      	; 0x5294 <getRightSpeedFromInput+0x288>
    5292:	dd c0       	rjmp	.+442    	; 0x544e <getRightSpeedFromInput+0x442>
    5294:	80 91 52 05 	lds	r24, 0x0552
    5298:	90 91 53 05 	lds	r25, 0x0553
    529c:	8c 17       	cp	r24, r28
    529e:	9d 07       	cpc	r25, r29
    52a0:	2c f0       	brlt	.+10     	; 0x52ac <getRightSpeedFromInput+0x2a0>
    52a2:	9f ef       	ldi	r25, 0xFF	; 255
    52a4:	0f 3f       	cpi	r16, 0xFF	; 255
    52a6:	19 07       	cpc	r17, r25
    52a8:	09 f4       	brne	.+2      	; 0x52ac <getRightSpeedFromInput+0x2a0>
    52aa:	ce c0       	rjmp	.+412    	; 0x5448 <getRightSpeedFromInput+0x43c>
    52ac:	e0 90 62 05 	lds	r14, 0x0562
    52b0:	f0 90 63 05 	lds	r15, 0x0563
    52b4:	ec 16       	cp	r14, r28
    52b6:	fd 06       	cpc	r15, r29
    52b8:	2c f0       	brlt	.+10     	; 0x52c4 <getRightSpeedFromInput+0x2b8>
    52ba:	8f ef       	ldi	r24, 0xFF	; 255
    52bc:	0f 3f       	cpi	r16, 0xFF	; 255
    52be:	18 07       	cpc	r17, r24
    52c0:	09 f4       	brne	.+2      	; 0x52c4 <getRightSpeedFromInput+0x2b8>
    52c2:	bf c0       	rjmp	.+382    	; 0x5442 <getRightSpeedFromInput+0x436>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    52c4:	01 15       	cp	r16, r1
    52c6:	11 05       	cpc	r17, r1
    52c8:	09 f0       	breq	.+2      	; 0x52cc <getRightSpeedFromInput+0x2c0>
    52ca:	6e c0       	rjmp	.+220    	; 0x53a8 <getRightSpeedFromInput+0x39c>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    52cc:	20 91 e4 04 	lds	r18, 0x04E4
    52d0:	30 91 e5 04 	lds	r19, 0x04E5
    52d4:	c2 9f       	mul	r28, r18
    52d6:	c0 01       	movw	r24, r0
    52d8:	c3 9f       	mul	r28, r19
    52da:	90 0d       	add	r25, r0
    52dc:	d2 9f       	mul	r29, r18
    52de:	90 0d       	add	r25, r0
    52e0:	11 24       	eor	r1, r1
    52e2:	0e 94 80 40 	call	0x8100	; 0x8100 <__divmodhi4>
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    52e6:	70 95       	com	r23
    52e8:	61 95       	neg	r22
    52ea:	7f 4f       	sbci	r23, 0xFF	; 255
    52ec:	70 93 b0 04 	sts	0x04B0, r23
    52f0:	60 93 af 04 	sts	0x04AF, r22
    52f4:	6d cf       	rjmp	.-294    	; 0x51d0 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    52f6:	00 e0       	ldi	r16, 0x00	; 0
    52f8:	10 e0       	ldi	r17, 0x00	; 0
    52fa:	81 cf       	rjmp	.-254    	; 0x51fe <getRightSpeedFromInput+0x1f2>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    52fc:	60 91 5c 05 	lds	r22, 0x055C
    5300:	70 91 5d 05 	lds	r23, 0x055D
    5304:	88 27       	eor	r24, r24
    5306:	77 fd       	sbrc	r23, 7
    5308:	80 95       	com	r24
    530a:	98 2f       	mov	r25, r24
    530c:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    5310:	5b 01       	movw	r10, r22
    5312:	6c 01       	movw	r12, r24
    5314:	be 01       	movw	r22, r28
    5316:	88 27       	eor	r24, r24
    5318:	77 fd       	sbrc	r23, 7
    531a:	80 95       	com	r24
    531c:	98 2f       	mov	r25, r24
    531e:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    5322:	9b 01       	movw	r18, r22
    5324:	ac 01       	movw	r20, r24
    5326:	c6 01       	movw	r24, r12
    5328:	b5 01       	movw	r22, r10
    532a:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    532e:	5b 01       	movw	r10, r22
    5330:	6c 01       	movw	r12, r24
    5332:	b7 01       	movw	r22, r14
    5334:	88 27       	eor	r24, r24
    5336:	77 fd       	sbrc	r23, 7
    5338:	80 95       	com	r24
    533a:	98 2f       	mov	r25, r24
    533c:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    5340:	9b 01       	movw	r18, r22
    5342:	ac 01       	movw	r20, r24
    5344:	c6 01       	movw	r24, r12
    5346:	b5 01       	movw	r22, r10
    5348:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    534c:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
    5350:	70 93 b0 04 	sts	0x04B0, r23
    5354:	60 93 af 04 	sts	0x04AF, r22
    5358:	3b cf       	rjmp	.-394    	; 0x51d0 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    535a:	02 e0       	ldi	r16, 0x02	; 2
    535c:	10 e0       	ldi	r17, 0x00	; 0
    535e:	91 ce       	rjmp	.-734    	; 0x5082 <getRightSpeedFromInput+0x76>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5360:	08 e0       	ldi	r16, 0x08	; 8
    5362:	10 e0       	ldi	r17, 0x00	; 0
    5364:	d6 ce       	rjmp	.-596    	; 0x5112 <getRightSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5366:	07 e0       	ldi	r16, 0x07	; 7
    5368:	10 e0       	ldi	r17, 0x00	; 0
    536a:	c7 ce       	rjmp	.-626    	; 0x50fa <getRightSpeedFromInput+0xee>
    536c:	06 e0       	ldi	r16, 0x06	; 6
    536e:	10 e0       	ldi	r17, 0x00	; 0
    5370:	b8 ce       	rjmp	.-656    	; 0x50e2 <getRightSpeedFromInput+0xd6>
    5372:	05 e0       	ldi	r16, 0x05	; 5
    5374:	10 e0       	ldi	r17, 0x00	; 0
    5376:	a9 ce       	rjmp	.-686    	; 0x50ca <getRightSpeedFromInput+0xbe>
    5378:	04 e0       	ldi	r16, 0x04	; 4
    537a:	10 e0       	ldi	r17, 0x00	; 0
    537c:	9a ce       	rjmp	.-716    	; 0x50b2 <getRightSpeedFromInput+0xa6>
    537e:	03 e0       	ldi	r16, 0x03	; 3
    5380:	10 e0       	ldi	r17, 0x00	; 0
    5382:	8b ce       	rjmp	.-746    	; 0x509a <getRightSpeedFromInput+0x8e>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    5384:	20 91 dc 04 	lds	r18, 0x04DC
    5388:	30 91 dd 04 	lds	r19, 0x04DD
    538c:	c2 9f       	mul	r28, r18
    538e:	c0 01       	movw	r24, r0
    5390:	c3 9f       	mul	r28, r19
    5392:	90 0d       	add	r25, r0
    5394:	d2 9f       	mul	r29, r18
    5396:	90 0d       	add	r25, r0
    5398:	11 24       	eor	r1, r1
    539a:	0e 94 80 40 	call	0x8100	; 0x8100 <__divmodhi4>
    539e:	70 93 b0 04 	sts	0x04B0, r23
    53a2:	60 93 af 04 	sts	0x04AF, r22
    53a6:	14 cf       	rjmp	.-472    	; 0x51d0 <getRightSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    53a8:	8f ef       	ldi	r24, 0xFF	; 255
    53aa:	0f 3f       	cpi	r16, 0xFF	; 255
    53ac:	18 07       	cpc	r17, r24
    53ae:	09 f4       	brne	.+2      	; 0x53b2 <getRightSpeedFromInput+0x3a6>
    53b0:	5d c0       	rjmp	.+186    	; 0x546c <getRightSpeedFromInput+0x460>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    53b2:	f8 01       	movw	r30, r16
    53b4:	e2 95       	swap	r30
    53b6:	f2 95       	swap	r31
    53b8:	f0 7f       	andi	r31, 0xF0	; 240
    53ba:	fe 27       	eor	r31, r30
    53bc:	e0 7f       	andi	r30, 0xF0	; 240
    53be:	fe 27       	eor	r31, r30
    53c0:	ea 53       	subi	r30, 0x3A	; 58
    53c2:	fb 4f       	sbci	r31, 0xFB	; 251
    53c4:	a4 84       	ldd	r10, Z+12	; 0x0c
    53c6:	b5 84       	ldd	r11, Z+13	; 0x0d
    53c8:	86 84       	ldd	r8, Z+14	; 0x0e
    53ca:	97 84       	ldd	r9, Z+15	; 0x0f
    53cc:	ca 19       	sub	r28, r10
    53ce:	db 09       	sbc	r29, r11
    53d0:	be 01       	movw	r22, r28
    53d2:	88 27       	eor	r24, r24
    53d4:	77 fd       	sbrc	r23, 7
    53d6:	80 95       	com	r24
    53d8:	98 2f       	mov	r25, r24
    53da:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    53de:	6b 01       	movw	r12, r22
    53e0:	7c 01       	movw	r14, r24
    53e2:	e8 01       	movw	r28, r16
    53e4:	c2 95       	swap	r28
    53e6:	d2 95       	swap	r29
    53e8:	d0 7f       	andi	r29, 0xF0	; 240
    53ea:	dc 27       	eor	r29, r28
    53ec:	c0 7f       	andi	r28, 0xF0	; 240
    53ee:	dc 27       	eor	r29, r28
    53f0:	ca 52       	subi	r28, 0x2A	; 42
    53f2:	db 4f       	sbci	r29, 0xFB	; 251
    53f4:	6e 85       	ldd	r22, Y+14	; 0x0e
    53f6:	7f 85       	ldd	r23, Y+15	; 0x0f
    53f8:	68 19       	sub	r22, r8
    53fa:	79 09       	sbc	r23, r9
    53fc:	88 27       	eor	r24, r24
    53fe:	77 fd       	sbrc	r23, 7
    5400:	80 95       	com	r24
    5402:	98 2f       	mov	r25, r24
    5404:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    5408:	9b 01       	movw	r18, r22
    540a:	ac 01       	movw	r20, r24
    540c:	c7 01       	movw	r24, r14
    540e:	b6 01       	movw	r22, r12
    5410:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    5414:	7b 01       	movw	r14, r22
    5416:	8c 01       	movw	r16, r24
    5418:	6c 85       	ldd	r22, Y+12	; 0x0c
    541a:	7d 85       	ldd	r23, Y+13	; 0x0d
    541c:	6a 19       	sub	r22, r10
    541e:	7b 09       	sbc	r23, r11
    5420:	88 27       	eor	r24, r24
    5422:	77 fd       	sbrc	r23, 7
    5424:	80 95       	com	r24
    5426:	98 2f       	mov	r25, r24
    5428:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    542c:	9b 01       	movw	r18, r22
    542e:	ac 01       	movw	r20, r24
    5430:	c8 01       	movw	r24, r16
    5432:	b7 01       	movw	r22, r14
    5434:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    5438:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
    543c:	68 0d       	add	r22, r8
    543e:	79 1d       	adc	r23, r9
    5440:	52 cf       	rjmp	.-348    	; 0x52e6 <getRightSpeedFromInput+0x2da>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5442:	08 e0       	ldi	r16, 0x08	; 8
    5444:	10 e0       	ldi	r17, 0x00	; 0
    5446:	3e cf       	rjmp	.-388    	; 0x52c4 <getRightSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5448:	07 e0       	ldi	r16, 0x07	; 7
    544a:	10 e0       	ldi	r17, 0x00	; 0
    544c:	2f cf       	rjmp	.-418    	; 0x52ac <getRightSpeedFromInput+0x2a0>
    544e:	06 e0       	ldi	r16, 0x06	; 6
    5450:	10 e0       	ldi	r17, 0x00	; 0
    5452:	20 cf       	rjmp	.-448    	; 0x5294 <getRightSpeedFromInput+0x288>
    5454:	05 e0       	ldi	r16, 0x05	; 5
    5456:	10 e0       	ldi	r17, 0x00	; 0
    5458:	11 cf       	rjmp	.-478    	; 0x527c <getRightSpeedFromInput+0x270>
    545a:	04 e0       	ldi	r16, 0x04	; 4
    545c:	10 e0       	ldi	r17, 0x00	; 0
    545e:	02 cf       	rjmp	.-508    	; 0x5264 <getRightSpeedFromInput+0x258>
    5460:	03 e0       	ldi	r16, 0x03	; 3
    5462:	10 e0       	ldi	r17, 0x00	; 0
    5464:	f3 ce       	rjmp	.-538    	; 0x524c <getRightSpeedFromInput+0x240>
    5466:	02 e0       	ldi	r16, 0x02	; 2
    5468:	10 e0       	ldi	r17, 0x00	; 0
    546a:	e4 ce       	rjmp	.-568    	; 0x5234 <getRightSpeedFromInput+0x228>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    546c:	60 91 64 05 	lds	r22, 0x0564
    5470:	70 91 65 05 	lds	r23, 0x0565
    5474:	88 27       	eor	r24, r24
    5476:	77 fd       	sbrc	r23, 7
    5478:	80 95       	com	r24
    547a:	98 2f       	mov	r25, r24
    547c:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    5480:	5b 01       	movw	r10, r22
    5482:	6c 01       	movw	r12, r24
    5484:	be 01       	movw	r22, r28
    5486:	88 27       	eor	r24, r24
    5488:	77 fd       	sbrc	r23, 7
    548a:	80 95       	com	r24
    548c:	98 2f       	mov	r25, r24
    548e:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    5492:	9b 01       	movw	r18, r22
    5494:	ac 01       	movw	r20, r24
    5496:	c6 01       	movw	r24, r12
    5498:	b5 01       	movw	r22, r10
    549a:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    549e:	5b 01       	movw	r10, r22
    54a0:	6c 01       	movw	r12, r24
    54a2:	b7 01       	movw	r22, r14
    54a4:	88 27       	eor	r24, r24
    54a6:	77 fd       	sbrc	r23, 7
    54a8:	80 95       	com	r24
    54aa:	98 2f       	mov	r25, r24
    54ac:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    54b0:	9b 01       	movw	r18, r22
    54b2:	ac 01       	movw	r20, r24
    54b4:	c6 01       	movw	r24, r12
    54b6:	b5 01       	movw	r22, r10
    54b8:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    54bc:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
    54c0:	12 cf       	rjmp	.-476    	; 0x52e6 <getRightSpeedFromInput+0x2da>

000054c2 <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    54c2:	8f 92       	push	r8
    54c4:	9f 92       	push	r9
    54c6:	af 92       	push	r10
    54c8:	bf 92       	push	r11
    54ca:	cf 92       	push	r12
    54cc:	df 92       	push	r13
    54ce:	ef 92       	push	r14
    54d0:	ff 92       	push	r15
    54d2:	0f 93       	push	r16
    54d4:	1f 93       	push	r17
    54d6:	cf 93       	push	r28
    54d8:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    54da:	c0 91 ef 02 	lds	r28, 0x02EF
    54de:	d0 91 f0 02 	lds	r29, 0x02F0
    54e2:	80 91 f5 02 	lds	r24, 0x02F5
    54e6:	90 91 f6 02 	lds	r25, 0x02F6
    54ea:	97 fd       	sbrc	r25, 7
    54ec:	d9 c0       	rjmp	.+434    	; 0x56a0 <getLeftSpeedFromInput+0x1de>
    54ee:	60 91 d6 04 	lds	r22, 0x04D6
    54f2:	70 91 d7 04 	lds	r23, 0x04D7
    54f6:	6c 17       	cp	r22, r28
    54f8:	7d 07       	cpc	r23, r29
    54fa:	0c f0       	brlt	.+2      	; 0x54fe <getLeftSpeedFromInput+0x3c>
    54fc:	bd c0       	rjmp	.+378    	; 0x5678 <getLeftSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    54fe:	0f ef       	ldi	r16, 0xFF	; 255
    5500:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5502:	80 91 e6 04 	lds	r24, 0x04E6
    5506:	90 91 e7 04 	lds	r25, 0x04E7
    550a:	8c 17       	cp	r24, r28
    550c:	9d 07       	cpc	r25, r29
    550e:	44 f0       	brlt	.+16     	; 0x5520 <getLeftSpeedFromInput+0x5e>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    5510:	81 e0       	ldi	r24, 0x01	; 1
    5512:	9f ef       	ldi	r25, 0xFF	; 255
    5514:	0f 3f       	cpi	r16, 0xFF	; 255
    5516:	19 07       	cpc	r17, r25
    5518:	09 f0       	breq	.+2      	; 0x551c <getLeftSpeedFromInput+0x5a>
    551a:	80 e0       	ldi	r24, 0x00	; 0
    551c:	08 2f       	mov	r16, r24
    551e:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5520:	80 91 f6 04 	lds	r24, 0x04F6
    5524:	90 91 f7 04 	lds	r25, 0x04F7
    5528:	8c 17       	cp	r24, r28
    552a:	9d 07       	cpc	r25, r29
    552c:	2c f0       	brlt	.+10     	; 0x5538 <getLeftSpeedFromInput+0x76>
    552e:	8f ef       	ldi	r24, 0xFF	; 255
    5530:	0f 3f       	cpi	r16, 0xFF	; 255
    5532:	18 07       	cpc	r17, r24
    5534:	09 f4       	brne	.+2      	; 0x5538 <getLeftSpeedFromInput+0x76>
    5536:	6c c1       	rjmp	.+728    	; 0x5810 <getLeftSpeedFromInput+0x34e>
    5538:	80 91 06 05 	lds	r24, 0x0506
    553c:	90 91 07 05 	lds	r25, 0x0507
    5540:	8c 17       	cp	r24, r28
    5542:	9d 07       	cpc	r25, r29
    5544:	2c f0       	brlt	.+10     	; 0x5550 <getLeftSpeedFromInput+0x8e>
    5546:	9f ef       	ldi	r25, 0xFF	; 255
    5548:	0f 3f       	cpi	r16, 0xFF	; 255
    554a:	19 07       	cpc	r17, r25
    554c:	09 f4       	brne	.+2      	; 0x5550 <getLeftSpeedFromInput+0x8e>
    554e:	72 c1       	rjmp	.+740    	; 0x5834 <getLeftSpeedFromInput+0x372>
    5550:	80 91 16 05 	lds	r24, 0x0516
    5554:	90 91 17 05 	lds	r25, 0x0517
    5558:	8c 17       	cp	r24, r28
    555a:	9d 07       	cpc	r25, r29
    555c:	2c f0       	brlt	.+10     	; 0x5568 <getLeftSpeedFromInput+0xa6>
    555e:	8f ef       	ldi	r24, 0xFF	; 255
    5560:	0f 3f       	cpi	r16, 0xFF	; 255
    5562:	18 07       	cpc	r17, r24
    5564:	09 f4       	brne	.+2      	; 0x5568 <getLeftSpeedFromInput+0xa6>
    5566:	63 c1       	rjmp	.+710    	; 0x582e <getLeftSpeedFromInput+0x36c>
    5568:	80 91 26 05 	lds	r24, 0x0526
    556c:	90 91 27 05 	lds	r25, 0x0527
    5570:	8c 17       	cp	r24, r28
    5572:	9d 07       	cpc	r25, r29
    5574:	2c f0       	brlt	.+10     	; 0x5580 <getLeftSpeedFromInput+0xbe>
    5576:	9f ef       	ldi	r25, 0xFF	; 255
    5578:	0f 3f       	cpi	r16, 0xFF	; 255
    557a:	19 07       	cpc	r17, r25
    557c:	09 f4       	brne	.+2      	; 0x5580 <getLeftSpeedFromInput+0xbe>
    557e:	54 c1       	rjmp	.+680    	; 0x5828 <getLeftSpeedFromInput+0x366>
    5580:	80 91 36 05 	lds	r24, 0x0536
    5584:	90 91 37 05 	lds	r25, 0x0537
    5588:	8c 17       	cp	r24, r28
    558a:	9d 07       	cpc	r25, r29
    558c:	2c f0       	brlt	.+10     	; 0x5598 <getLeftSpeedFromInput+0xd6>
    558e:	8f ef       	ldi	r24, 0xFF	; 255
    5590:	0f 3f       	cpi	r16, 0xFF	; 255
    5592:	18 07       	cpc	r17, r24
    5594:	09 f4       	brne	.+2      	; 0x5598 <getLeftSpeedFromInput+0xd6>
    5596:	45 c1       	rjmp	.+650    	; 0x5822 <getLeftSpeedFromInput+0x360>
    5598:	80 91 46 05 	lds	r24, 0x0546
    559c:	90 91 47 05 	lds	r25, 0x0547
    55a0:	8c 17       	cp	r24, r28
    55a2:	9d 07       	cpc	r25, r29
    55a4:	2c f0       	brlt	.+10     	; 0x55b0 <getLeftSpeedFromInput+0xee>
    55a6:	9f ef       	ldi	r25, 0xFF	; 255
    55a8:	0f 3f       	cpi	r16, 0xFF	; 255
    55aa:	19 07       	cpc	r17, r25
    55ac:	09 f4       	brne	.+2      	; 0x55b0 <getLeftSpeedFromInput+0xee>
    55ae:	36 c1       	rjmp	.+620    	; 0x581c <getLeftSpeedFromInput+0x35a>
    55b0:	e0 90 56 05 	lds	r14, 0x0556
    55b4:	f0 90 57 05 	lds	r15, 0x0557
    55b8:	ec 16       	cp	r14, r28
    55ba:	fd 06       	cpc	r15, r29
    55bc:	2c f0       	brlt	.+10     	; 0x55c8 <getLeftSpeedFromInput+0x106>
    55be:	8f ef       	ldi	r24, 0xFF	; 255
    55c0:	0f 3f       	cpi	r16, 0xFF	; 255
    55c2:	18 07       	cpc	r17, r24
    55c4:	09 f4       	brne	.+2      	; 0x55c8 <getLeftSpeedFromInput+0x106>
    55c6:	27 c1       	rjmp	.+590    	; 0x5816 <getLeftSpeedFromInput+0x354>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    55c8:	20 97       	sbiw	r28, 0x00	; 0
    55ca:	09 f4       	brne	.+2      	; 0x55ce <getLeftSpeedFromInput+0x10c>
    55cc:	58 c0       	rjmp	.+176    	; 0x567e <getLeftSpeedFromInput+0x1bc>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    55ce:	01 15       	cp	r16, r1
    55d0:	11 05       	cpc	r17, r1
    55d2:	09 f4       	brne	.+2      	; 0x55d6 <getLeftSpeedFromInput+0x114>
    55d4:	32 c1       	rjmp	.+612    	; 0x583a <getLeftSpeedFromInput+0x378>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    55d6:	9f ef       	ldi	r25, 0xFF	; 255
    55d8:	0f 3f       	cpi	r16, 0xFF	; 255
    55da:	19 07       	cpc	r17, r25
    55dc:	09 f4       	brne	.+2      	; 0x55e0 <getLeftSpeedFromInput+0x11e>
    55de:	e9 c0       	rjmp	.+466    	; 0x57b2 <getLeftSpeedFromInput+0x2f0>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    55e0:	f8 01       	movw	r30, r16
    55e2:	e2 95       	swap	r30
    55e4:	f2 95       	swap	r31
    55e6:	f0 7f       	andi	r31, 0xF0	; 240
    55e8:	fe 27       	eor	r31, r30
    55ea:	e0 7f       	andi	r30, 0xF0	; 240
    55ec:	fe 27       	eor	r31, r30
    55ee:	ea 53       	subi	r30, 0x3A	; 58
    55f0:	fb 4f       	sbci	r31, 0xFB	; 251
    55f2:	a0 80       	ld	r10, Z
    55f4:	b1 80       	ldd	r11, Z+1	; 0x01
    55f6:	82 80       	ldd	r8, Z+2	; 0x02
    55f8:	93 80       	ldd	r9, Z+3	; 0x03
    55fa:	ca 19       	sub	r28, r10
    55fc:	db 09       	sbc	r29, r11
    55fe:	be 01       	movw	r22, r28
    5600:	88 27       	eor	r24, r24
    5602:	77 fd       	sbrc	r23, 7
    5604:	80 95       	com	r24
    5606:	98 2f       	mov	r25, r24
    5608:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    560c:	6b 01       	movw	r12, r22
    560e:	7c 01       	movw	r14, r24
    5610:	e8 01       	movw	r28, r16
    5612:	c2 95       	swap	r28
    5614:	d2 95       	swap	r29
    5616:	d0 7f       	andi	r29, 0xF0	; 240
    5618:	dc 27       	eor	r29, r28
    561a:	c0 7f       	andi	r28, 0xF0	; 240
    561c:	dc 27       	eor	r29, r28
    561e:	ca 52       	subi	r28, 0x2A	; 42
    5620:	db 4f       	sbci	r29, 0xFB	; 251
    5622:	6a 81       	ldd	r22, Y+2	; 0x02
    5624:	7b 81       	ldd	r23, Y+3	; 0x03
    5626:	68 19       	sub	r22, r8
    5628:	79 09       	sbc	r23, r9
    562a:	88 27       	eor	r24, r24
    562c:	77 fd       	sbrc	r23, 7
    562e:	80 95       	com	r24
    5630:	98 2f       	mov	r25, r24
    5632:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    5636:	9b 01       	movw	r18, r22
    5638:	ac 01       	movw	r20, r24
    563a:	c7 01       	movw	r24, r14
    563c:	b6 01       	movw	r22, r12
    563e:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    5642:	7b 01       	movw	r14, r22
    5644:	8c 01       	movw	r16, r24
    5646:	68 81       	ld	r22, Y
    5648:	79 81       	ldd	r23, Y+1	; 0x01
    564a:	6a 19       	sub	r22, r10
    564c:	7b 09       	sbc	r23, r11
    564e:	88 27       	eor	r24, r24
    5650:	77 fd       	sbrc	r23, 7
    5652:	80 95       	com	r24
    5654:	98 2f       	mov	r25, r24
    5656:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    565a:	9b 01       	movw	r18, r22
    565c:	ac 01       	movw	r20, r24
    565e:	c8 01       	movw	r24, r16
    5660:	b7 01       	movw	r22, r14
    5662:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    5666:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
    566a:	68 0d       	add	r22, r8
    566c:	79 1d       	adc	r23, r9
    566e:	70 93 ae 04 	sts	0x04AE, r23
    5672:	60 93 ad 04 	sts	0x04AD, r22
    5676:	07 c0       	rjmp	.+14     	; 0x5686 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5678:	00 e0       	ldi	r16, 0x00	; 0
    567a:	10 e0       	ldi	r17, 0x00	; 0
    567c:	42 cf       	rjmp	.-380    	; 0x5502 <getLeftSpeedFromInput+0x40>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    567e:	10 92 ae 04 	sts	0x04AE, r1
    5682:	10 92 ad 04 	sts	0x04AD, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    5686:	df 91       	pop	r29
    5688:	cf 91       	pop	r28
    568a:	1f 91       	pop	r17
    568c:	0f 91       	pop	r16
    568e:	ff 90       	pop	r15
    5690:	ef 90       	pop	r14
    5692:	df 90       	pop	r13
    5694:	cf 90       	pop	r12
    5696:	bf 90       	pop	r11
    5698:	af 90       	pop	r10
    569a:	9f 90       	pop	r9
    569c:	8f 90       	pop	r8
    569e:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    56a0:	60 91 de 04 	lds	r22, 0x04DE
    56a4:	70 91 df 04 	lds	r23, 0x04DF
    56a8:	6c 17       	cp	r22, r28
    56aa:	7d 07       	cpc	r23, r29
    56ac:	0c f0       	brlt	.+2      	; 0x56b0 <getLeftSpeedFromInput+0x1ee>
    56ae:	7e c0       	rjmp	.+252    	; 0x57ac <getLeftSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    56b0:	0f ef       	ldi	r16, 0xFF	; 255
    56b2:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    56b4:	80 91 ee 04 	lds	r24, 0x04EE
    56b8:	90 91 ef 04 	lds	r25, 0x04EF
    56bc:	8c 17       	cp	r24, r28
    56be:	9d 07       	cpc	r25, r29
    56c0:	44 f0       	brlt	.+16     	; 0x56d2 <getLeftSpeedFromInput+0x210>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    56c2:	81 e0       	ldi	r24, 0x01	; 1
    56c4:	9f ef       	ldi	r25, 0xFF	; 255
    56c6:	0f 3f       	cpi	r16, 0xFF	; 255
    56c8:	19 07       	cpc	r17, r25
    56ca:	09 f0       	breq	.+2      	; 0x56ce <getLeftSpeedFromInput+0x20c>
    56cc:	80 e0       	ldi	r24, 0x00	; 0
    56ce:	08 2f       	mov	r16, r24
    56d0:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    56d2:	80 91 fe 04 	lds	r24, 0x04FE
    56d6:	90 91 ff 04 	lds	r25, 0x04FF
    56da:	8c 17       	cp	r24, r28
    56dc:	9d 07       	cpc	r25, r29
    56de:	2c f0       	brlt	.+10     	; 0x56ea <getLeftSpeedFromInput+0x228>
    56e0:	8f ef       	ldi	r24, 0xFF	; 255
    56e2:	0f 3f       	cpi	r16, 0xFF	; 255
    56e4:	18 07       	cpc	r17, r24
    56e6:	09 f4       	brne	.+2      	; 0x56ea <getLeftSpeedFromInput+0x228>
    56e8:	19 c1       	rjmp	.+562    	; 0x591c <getLeftSpeedFromInput+0x45a>
    56ea:	80 91 0e 05 	lds	r24, 0x050E
    56ee:	90 91 0f 05 	lds	r25, 0x050F
    56f2:	8c 17       	cp	r24, r28
    56f4:	9d 07       	cpc	r25, r29
    56f6:	2c f0       	brlt	.+10     	; 0x5702 <getLeftSpeedFromInput+0x240>
    56f8:	9f ef       	ldi	r25, 0xFF	; 255
    56fa:	0f 3f       	cpi	r16, 0xFF	; 255
    56fc:	19 07       	cpc	r17, r25
    56fe:	09 f4       	brne	.+2      	; 0x5702 <getLeftSpeedFromInput+0x240>
    5700:	0a c1       	rjmp	.+532    	; 0x5916 <getLeftSpeedFromInput+0x454>
    5702:	80 91 1e 05 	lds	r24, 0x051E
    5706:	90 91 1f 05 	lds	r25, 0x051F
    570a:	8c 17       	cp	r24, r28
    570c:	9d 07       	cpc	r25, r29
    570e:	2c f0       	brlt	.+10     	; 0x571a <getLeftSpeedFromInput+0x258>
    5710:	8f ef       	ldi	r24, 0xFF	; 255
    5712:	0f 3f       	cpi	r16, 0xFF	; 255
    5714:	18 07       	cpc	r17, r24
    5716:	09 f4       	brne	.+2      	; 0x571a <getLeftSpeedFromInput+0x258>
    5718:	fb c0       	rjmp	.+502    	; 0x5910 <getLeftSpeedFromInput+0x44e>
    571a:	80 91 2e 05 	lds	r24, 0x052E
    571e:	90 91 2f 05 	lds	r25, 0x052F
    5722:	8c 17       	cp	r24, r28
    5724:	9d 07       	cpc	r25, r29
    5726:	2c f0       	brlt	.+10     	; 0x5732 <getLeftSpeedFromInput+0x270>
    5728:	9f ef       	ldi	r25, 0xFF	; 255
    572a:	0f 3f       	cpi	r16, 0xFF	; 255
    572c:	19 07       	cpc	r17, r25
    572e:	09 f4       	brne	.+2      	; 0x5732 <getLeftSpeedFromInput+0x270>
    5730:	ec c0       	rjmp	.+472    	; 0x590a <getLeftSpeedFromInput+0x448>
    5732:	80 91 3e 05 	lds	r24, 0x053E
    5736:	90 91 3f 05 	lds	r25, 0x053F
    573a:	8c 17       	cp	r24, r28
    573c:	9d 07       	cpc	r25, r29
    573e:	2c f0       	brlt	.+10     	; 0x574a <getLeftSpeedFromInput+0x288>
    5740:	8f ef       	ldi	r24, 0xFF	; 255
    5742:	0f 3f       	cpi	r16, 0xFF	; 255
    5744:	18 07       	cpc	r17, r24
    5746:	09 f4       	brne	.+2      	; 0x574a <getLeftSpeedFromInput+0x288>
    5748:	dd c0       	rjmp	.+442    	; 0x5904 <getLeftSpeedFromInput+0x442>
    574a:	80 91 4e 05 	lds	r24, 0x054E
    574e:	90 91 4f 05 	lds	r25, 0x054F
    5752:	8c 17       	cp	r24, r28
    5754:	9d 07       	cpc	r25, r29
    5756:	2c f0       	brlt	.+10     	; 0x5762 <getLeftSpeedFromInput+0x2a0>
    5758:	9f ef       	ldi	r25, 0xFF	; 255
    575a:	0f 3f       	cpi	r16, 0xFF	; 255
    575c:	19 07       	cpc	r17, r25
    575e:	09 f4       	brne	.+2      	; 0x5762 <getLeftSpeedFromInput+0x2a0>
    5760:	ce c0       	rjmp	.+412    	; 0x58fe <getLeftSpeedFromInput+0x43c>
    5762:	e0 90 5e 05 	lds	r14, 0x055E
    5766:	f0 90 5f 05 	lds	r15, 0x055F
    576a:	ec 16       	cp	r14, r28
    576c:	fd 06       	cpc	r15, r29
    576e:	2c f0       	brlt	.+10     	; 0x577a <getLeftSpeedFromInput+0x2b8>
    5770:	8f ef       	ldi	r24, 0xFF	; 255
    5772:	0f 3f       	cpi	r16, 0xFF	; 255
    5774:	18 07       	cpc	r17, r24
    5776:	09 f4       	brne	.+2      	; 0x577a <getLeftSpeedFromInput+0x2b8>
    5778:	bf c0       	rjmp	.+382    	; 0x58f8 <getLeftSpeedFromInput+0x436>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    577a:	01 15       	cp	r16, r1
    577c:	11 05       	cpc	r17, r1
    577e:	09 f0       	breq	.+2      	; 0x5782 <getLeftSpeedFromInput+0x2c0>
    5780:	6e c0       	rjmp	.+220    	; 0x585e <getLeftSpeedFromInput+0x39c>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    5782:	20 91 e0 04 	lds	r18, 0x04E0
    5786:	30 91 e1 04 	lds	r19, 0x04E1
    578a:	c2 9f       	mul	r28, r18
    578c:	c0 01       	movw	r24, r0
    578e:	c3 9f       	mul	r28, r19
    5790:	90 0d       	add	r25, r0
    5792:	d2 9f       	mul	r29, r18
    5794:	90 0d       	add	r25, r0
    5796:	11 24       	eor	r1, r1
    5798:	0e 94 80 40 	call	0x8100	; 0x8100 <__divmodhi4>
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    579c:	70 95       	com	r23
    579e:	61 95       	neg	r22
    57a0:	7f 4f       	sbci	r23, 0xFF	; 255
    57a2:	70 93 ae 04 	sts	0x04AE, r23
    57a6:	60 93 ad 04 	sts	0x04AD, r22
    57aa:	6d cf       	rjmp	.-294    	; 0x5686 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    57ac:	00 e0       	ldi	r16, 0x00	; 0
    57ae:	10 e0       	ldi	r17, 0x00	; 0
    57b0:	81 cf       	rjmp	.-254    	; 0x56b4 <getLeftSpeedFromInput+0x1f2>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    57b2:	60 91 58 05 	lds	r22, 0x0558
    57b6:	70 91 59 05 	lds	r23, 0x0559
    57ba:	88 27       	eor	r24, r24
    57bc:	77 fd       	sbrc	r23, 7
    57be:	80 95       	com	r24
    57c0:	98 2f       	mov	r25, r24
    57c2:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    57c6:	5b 01       	movw	r10, r22
    57c8:	6c 01       	movw	r12, r24
    57ca:	be 01       	movw	r22, r28
    57cc:	88 27       	eor	r24, r24
    57ce:	77 fd       	sbrc	r23, 7
    57d0:	80 95       	com	r24
    57d2:	98 2f       	mov	r25, r24
    57d4:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    57d8:	9b 01       	movw	r18, r22
    57da:	ac 01       	movw	r20, r24
    57dc:	c6 01       	movw	r24, r12
    57de:	b5 01       	movw	r22, r10
    57e0:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    57e4:	5b 01       	movw	r10, r22
    57e6:	6c 01       	movw	r12, r24
    57e8:	b7 01       	movw	r22, r14
    57ea:	88 27       	eor	r24, r24
    57ec:	77 fd       	sbrc	r23, 7
    57ee:	80 95       	com	r24
    57f0:	98 2f       	mov	r25, r24
    57f2:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    57f6:	9b 01       	movw	r18, r22
    57f8:	ac 01       	movw	r20, r24
    57fa:	c6 01       	movw	r24, r12
    57fc:	b5 01       	movw	r22, r10
    57fe:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    5802:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
    5806:	70 93 ae 04 	sts	0x04AE, r23
    580a:	60 93 ad 04 	sts	0x04AD, r22
    580e:	3b cf       	rjmp	.-394    	; 0x5686 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5810:	02 e0       	ldi	r16, 0x02	; 2
    5812:	10 e0       	ldi	r17, 0x00	; 0
    5814:	91 ce       	rjmp	.-734    	; 0x5538 <getLeftSpeedFromInput+0x76>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5816:	08 e0       	ldi	r16, 0x08	; 8
    5818:	10 e0       	ldi	r17, 0x00	; 0
    581a:	d6 ce       	rjmp	.-596    	; 0x55c8 <getLeftSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    581c:	07 e0       	ldi	r16, 0x07	; 7
    581e:	10 e0       	ldi	r17, 0x00	; 0
    5820:	c7 ce       	rjmp	.-626    	; 0x55b0 <getLeftSpeedFromInput+0xee>
    5822:	06 e0       	ldi	r16, 0x06	; 6
    5824:	10 e0       	ldi	r17, 0x00	; 0
    5826:	b8 ce       	rjmp	.-656    	; 0x5598 <getLeftSpeedFromInput+0xd6>
    5828:	05 e0       	ldi	r16, 0x05	; 5
    582a:	10 e0       	ldi	r17, 0x00	; 0
    582c:	a9 ce       	rjmp	.-686    	; 0x5580 <getLeftSpeedFromInput+0xbe>
    582e:	04 e0       	ldi	r16, 0x04	; 4
    5830:	10 e0       	ldi	r17, 0x00	; 0
    5832:	9a ce       	rjmp	.-716    	; 0x5568 <getLeftSpeedFromInput+0xa6>
    5834:	03 e0       	ldi	r16, 0x03	; 3
    5836:	10 e0       	ldi	r17, 0x00	; 0
    5838:	8b ce       	rjmp	.-746    	; 0x5550 <getLeftSpeedFromInput+0x8e>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    583a:	20 91 d8 04 	lds	r18, 0x04D8
    583e:	30 91 d9 04 	lds	r19, 0x04D9
    5842:	c2 9f       	mul	r28, r18
    5844:	c0 01       	movw	r24, r0
    5846:	c3 9f       	mul	r28, r19
    5848:	90 0d       	add	r25, r0
    584a:	d2 9f       	mul	r29, r18
    584c:	90 0d       	add	r25, r0
    584e:	11 24       	eor	r1, r1
    5850:	0e 94 80 40 	call	0x8100	; 0x8100 <__divmodhi4>
    5854:	70 93 ae 04 	sts	0x04AE, r23
    5858:	60 93 ad 04 	sts	0x04AD, r22
    585c:	14 cf       	rjmp	.-472    	; 0x5686 <getLeftSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    585e:	8f ef       	ldi	r24, 0xFF	; 255
    5860:	0f 3f       	cpi	r16, 0xFF	; 255
    5862:	18 07       	cpc	r17, r24
    5864:	09 f4       	brne	.+2      	; 0x5868 <getLeftSpeedFromInput+0x3a6>
    5866:	5d c0       	rjmp	.+186    	; 0x5922 <getLeftSpeedFromInput+0x460>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    5868:	f8 01       	movw	r30, r16
    586a:	e2 95       	swap	r30
    586c:	f2 95       	swap	r31
    586e:	f0 7f       	andi	r31, 0xF0	; 240
    5870:	fe 27       	eor	r31, r30
    5872:	e0 7f       	andi	r30, 0xF0	; 240
    5874:	fe 27       	eor	r31, r30
    5876:	ea 53       	subi	r30, 0x3A	; 58
    5878:	fb 4f       	sbci	r31, 0xFB	; 251
    587a:	a0 84       	ldd	r10, Z+8	; 0x08
    587c:	b1 84       	ldd	r11, Z+9	; 0x09
    587e:	82 84       	ldd	r8, Z+10	; 0x0a
    5880:	93 84       	ldd	r9, Z+11	; 0x0b
    5882:	ca 19       	sub	r28, r10
    5884:	db 09       	sbc	r29, r11
    5886:	be 01       	movw	r22, r28
    5888:	88 27       	eor	r24, r24
    588a:	77 fd       	sbrc	r23, 7
    588c:	80 95       	com	r24
    588e:	98 2f       	mov	r25, r24
    5890:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    5894:	6b 01       	movw	r12, r22
    5896:	7c 01       	movw	r14, r24
    5898:	e8 01       	movw	r28, r16
    589a:	c2 95       	swap	r28
    589c:	d2 95       	swap	r29
    589e:	d0 7f       	andi	r29, 0xF0	; 240
    58a0:	dc 27       	eor	r29, r28
    58a2:	c0 7f       	andi	r28, 0xF0	; 240
    58a4:	dc 27       	eor	r29, r28
    58a6:	ca 52       	subi	r28, 0x2A	; 42
    58a8:	db 4f       	sbci	r29, 0xFB	; 251
    58aa:	6a 85       	ldd	r22, Y+10	; 0x0a
    58ac:	7b 85       	ldd	r23, Y+11	; 0x0b
    58ae:	68 19       	sub	r22, r8
    58b0:	79 09       	sbc	r23, r9
    58b2:	88 27       	eor	r24, r24
    58b4:	77 fd       	sbrc	r23, 7
    58b6:	80 95       	com	r24
    58b8:	98 2f       	mov	r25, r24
    58ba:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    58be:	9b 01       	movw	r18, r22
    58c0:	ac 01       	movw	r20, r24
    58c2:	c7 01       	movw	r24, r14
    58c4:	b6 01       	movw	r22, r12
    58c6:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    58ca:	7b 01       	movw	r14, r22
    58cc:	8c 01       	movw	r16, r24
    58ce:	68 85       	ldd	r22, Y+8	; 0x08
    58d0:	79 85       	ldd	r23, Y+9	; 0x09
    58d2:	6a 19       	sub	r22, r10
    58d4:	7b 09       	sbc	r23, r11
    58d6:	88 27       	eor	r24, r24
    58d8:	77 fd       	sbrc	r23, 7
    58da:	80 95       	com	r24
    58dc:	98 2f       	mov	r25, r24
    58de:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    58e2:	9b 01       	movw	r18, r22
    58e4:	ac 01       	movw	r20, r24
    58e6:	c8 01       	movw	r24, r16
    58e8:	b7 01       	movw	r22, r14
    58ea:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    58ee:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
    58f2:	68 0d       	add	r22, r8
    58f4:	79 1d       	adc	r23, r9
    58f6:	52 cf       	rjmp	.-348    	; 0x579c <getLeftSpeedFromInput+0x2da>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    58f8:	08 e0       	ldi	r16, 0x08	; 8
    58fa:	10 e0       	ldi	r17, 0x00	; 0
    58fc:	3e cf       	rjmp	.-388    	; 0x577a <getLeftSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    58fe:	07 e0       	ldi	r16, 0x07	; 7
    5900:	10 e0       	ldi	r17, 0x00	; 0
    5902:	2f cf       	rjmp	.-418    	; 0x5762 <getLeftSpeedFromInput+0x2a0>
    5904:	06 e0       	ldi	r16, 0x06	; 6
    5906:	10 e0       	ldi	r17, 0x00	; 0
    5908:	20 cf       	rjmp	.-448    	; 0x574a <getLeftSpeedFromInput+0x288>
    590a:	05 e0       	ldi	r16, 0x05	; 5
    590c:	10 e0       	ldi	r17, 0x00	; 0
    590e:	11 cf       	rjmp	.-478    	; 0x5732 <getLeftSpeedFromInput+0x270>
    5910:	04 e0       	ldi	r16, 0x04	; 4
    5912:	10 e0       	ldi	r17, 0x00	; 0
    5914:	02 cf       	rjmp	.-508    	; 0x571a <getLeftSpeedFromInput+0x258>
    5916:	03 e0       	ldi	r16, 0x03	; 3
    5918:	10 e0       	ldi	r17, 0x00	; 0
    591a:	f3 ce       	rjmp	.-538    	; 0x5702 <getLeftSpeedFromInput+0x240>
    591c:	02 e0       	ldi	r16, 0x02	; 2
    591e:	10 e0       	ldi	r17, 0x00	; 0
    5920:	e4 ce       	rjmp	.-568    	; 0x56ea <getLeftSpeedFromInput+0x228>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    5922:	60 91 60 05 	lds	r22, 0x0560
    5926:	70 91 61 05 	lds	r23, 0x0561
    592a:	88 27       	eor	r24, r24
    592c:	77 fd       	sbrc	r23, 7
    592e:	80 95       	com	r24
    5930:	98 2f       	mov	r25, r24
    5932:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    5936:	5b 01       	movw	r10, r22
    5938:	6c 01       	movw	r12, r24
    593a:	be 01       	movw	r22, r28
    593c:	88 27       	eor	r24, r24
    593e:	77 fd       	sbrc	r23, 7
    5940:	80 95       	com	r24
    5942:	98 2f       	mov	r25, r24
    5944:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    5948:	9b 01       	movw	r18, r22
    594a:	ac 01       	movw	r20, r24
    594c:	c6 01       	movw	r24, r12
    594e:	b5 01       	movw	r22, r10
    5950:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    5954:	5b 01       	movw	r10, r22
    5956:	6c 01       	movw	r12, r24
    5958:	b7 01       	movw	r22, r14
    595a:	88 27       	eor	r24, r24
    595c:	77 fd       	sbrc	r23, 7
    595e:	80 95       	com	r24
    5960:	98 2f       	mov	r25, r24
    5962:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    5966:	9b 01       	movw	r18, r22
    5968:	ac 01       	movw	r20, r24
    596a:	c6 01       	movw	r24, r12
    596c:	b5 01       	movw	r22, r10
    596e:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    5972:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
    5976:	12 cf       	rjmp	.-476    	; 0x579c <getLeftSpeedFromInput+0x2da>

00005978 <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    5978:	2f 92       	push	r2
    597a:	3f 92       	push	r3
    597c:	4f 92       	push	r4
    597e:	5f 92       	push	r5
    5980:	6f 92       	push	r6
    5982:	7f 92       	push	r7
    5984:	8f 92       	push	r8
    5986:	9f 92       	push	r9
    5988:	af 92       	push	r10
    598a:	bf 92       	push	r11
    598c:	cf 92       	push	r12
    598e:	df 92       	push	r13
    5990:	ef 92       	push	r14
    5992:	ff 92       	push	r15
    5994:	0f 93       	push	r16
    5996:	1f 93       	push	r17

	if(calibrateOdomFlag==1) {
    5998:	80 91 c0 04 	lds	r24, 0x04C0
    599c:	81 30       	cpi	r24, 0x01	; 1
    599e:	09 f4       	brne	.+2      	; 0x59a2 <handleMotorsWithSpeedController+0x2a>
    59a0:	28 c2       	rjmp	.+1104   	; 0x5df2 <handleMotorsWithSpeedController+0x47a>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    59a2:	80 91 fb 02 	lds	r24, 0x02FB
    59a6:	90 91 fc 02 	lds	r25, 0x02FC
    59aa:	97 fd       	sbrc	r25, 7
    59ac:	9a c2       	rjmp	.+1332   	; 0x5ee2 <handleMotorsWithSpeedController+0x56a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    59ae:	61 e0       	ldi	r22, 0x01	; 1
    59b0:	0e 94 9e 24 	call	0x493c	; 0x493c <getInputFromSpeed>
    59b4:	90 93 0c 03 	sts	0x030C, r25
    59b8:	80 93 0b 03 	sts	0x030B, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    59bc:	80 91 fd 02 	lds	r24, 0x02FD
    59c0:	90 91 fe 02 	lds	r25, 0x02FE
    59c4:	97 fd       	sbrc	r25, 7
    59c6:	85 c2       	rjmp	.+1290   	; 0x5ed2 <handleMotorsWithSpeedController+0x55a>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    59c8:	60 e0       	ldi	r22, 0x00	; 0
    59ca:	0e 94 9e 24 	call	0x493c	; 0x493c <getInputFromSpeed>
    59ce:	90 93 0e 03 	sts	0x030E, r25
    59d2:	80 93 0d 03 	sts	0x030D, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    59d6:	20 91 61 04 	lds	r18, 0x0461
    59da:	22 23       	and	r18, r18
    59dc:	09 f0       	breq	.+2      	; 0x59e0 <handleMotorsWithSpeedController+0x68>
    59de:	fe c1       	rjmp	.+1020   	; 0x5ddc <handleMotorsWithSpeedController+0x464>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    59e0:	90 93 ea 02 	sts	0x02EA, r25
    59e4:	80 93 e9 02 	sts	0x02E9, r24
	pwm_right_desired_to_control = pwm_right_working;
    59e8:	80 91 0b 03 	lds	r24, 0x030B
    59ec:	90 91 0c 03 	lds	r25, 0x030C
    59f0:	90 93 e8 02 	sts	0x02E8, r25
    59f4:	80 93 e7 02 	sts	0x02E7, r24

	if(compute_left_vel) {
    59f8:	80 91 07 02 	lds	r24, 0x0207
    59fc:	88 23       	and	r24, r24
    59fe:	09 f4       	brne	.+2      	; 0x5a02 <handleMotorsWithSpeedController+0x8a>
    5a00:	93 c0       	rjmp	.+294    	; 0x5b28 <handleMotorsWithSpeedController+0x1b0>

		last_left_vel = left_vel_sum>>2;
    5a02:	20 91 eb 02 	lds	r18, 0x02EB
    5a06:	30 91 ec 02 	lds	r19, 0x02EC
    5a0a:	36 95       	lsr	r19
    5a0c:	27 95       	ror	r18
    5a0e:	36 95       	lsr	r19
    5a10:	27 95       	ror	r18
    5a12:	30 93 f0 02 	sts	0x02F0, r19
    5a16:	20 93 ef 02 	sts	0x02EF, r18
		compute_left_vel = 0;
    5a1a:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    5a1e:	10 92 ec 02 	sts	0x02EC, r1
    5a22:	10 92 eb 02 	sts	0x02EB, r1
		
		if(calibrateOdomFlag==1) {
    5a26:	80 91 c0 04 	lds	r24, 0x04C0
    5a2a:	81 30       	cpi	r24, 0x01	; 1
    5a2c:	09 f4       	brne	.+2      	; 0x5a30 <handleMotorsWithSpeedController+0xb8>
    5a2e:	08 c2       	rjmp	.+1040   	; 0x5e40 <handleMotorsWithSpeedController+0x4c8>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    5a30:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    5a34:	80 91 88 04 	lds	r24, 0x0488
    5a38:	90 91 89 04 	lds	r25, 0x0489
    5a3c:	a0 91 8a 04 	lds	r26, 0x048A
    5a40:	b0 91 8b 04 	lds	r27, 0x048B
    5a44:	80 93 90 04 	sts	0x0490, r24
    5a48:	90 93 91 04 	sts	0x0491, r25
    5a4c:	a0 93 92 04 	sts	0x0492, r26
    5a50:	b0 93 93 04 	sts	0x0493, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    5a54:	60 91 ad 04 	lds	r22, 0x04AD
    5a58:	70 91 ae 04 	lds	r23, 0x04AE
    5a5c:	88 27       	eor	r24, r24
    5a5e:	77 fd       	sbrc	r23, 7
    5a60:	80 95       	com	r24
    5a62:	98 2f       	mov	r25, r24
    5a64:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    5a68:	7b 01       	movw	r14, r22
    5a6a:	8c 01       	movw	r16, r24
    5a6c:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    5a70:	20 91 b1 04 	lds	r18, 0x04B1
    5a74:	30 91 b2 04 	lds	r19, 0x04B2
    5a78:	40 91 b3 04 	lds	r20, 0x04B3
    5a7c:	50 91 b4 04 	lds	r21, 0x04B4
    5a80:	62 1b       	sub	r22, r18
    5a82:	73 0b       	sbc	r23, r19
    5a84:	84 0b       	sbc	r24, r20
    5a86:	95 0b       	sbc	r25, r21
    5a88:	0e 94 ab 3e 	call	0x7d56	; 0x7d56 <__floatunsisf>
    5a8c:	20 e0       	ldi	r18, 0x00	; 0
    5a8e:	30 e0       	ldi	r19, 0x00	; 0
    5a90:	40 ed       	ldi	r20, 0xD0	; 208
    5a92:	52 e4       	ldi	r21, 0x42	; 66
    5a94:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    5a98:	9b 01       	movw	r18, r22
    5a9a:	ac 01       	movw	r20, r24
    5a9c:	c8 01       	movw	r24, r16
    5a9e:	b7 01       	movw	r22, r14
    5aa0:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    5aa4:	20 e0       	ldi	r18, 0x00	; 0
    5aa6:	34 e2       	ldi	r19, 0x24	; 36
    5aa8:	44 e7       	ldi	r20, 0x74	; 116
    5aaa:	59 e4       	ldi	r21, 0x49	; 73
    5aac:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    5ab0:	9b 01       	movw	r18, r22
    5ab2:	ac 01       	movw	r20, r24
    5ab4:	60 91 88 04 	lds	r22, 0x0488
    5ab8:	70 91 89 04 	lds	r23, 0x0489
    5abc:	80 91 8a 04 	lds	r24, 0x048A
    5ac0:	90 91 8b 04 	lds	r25, 0x048B
    5ac4:	0e 94 45 3d 	call	0x7a8a	; 0x7a8a <__addsf3>
    5ac8:	60 93 88 04 	sts	0x0488, r22
    5acc:	70 93 89 04 	sts	0x0489, r23
    5ad0:	80 93 8a 04 	sts	0x048A, r24
    5ad4:	90 93 8b 04 	sts	0x048B, r25
		timeLeftOdom = getTime100MicroSec();
    5ad8:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    5adc:	60 93 b1 04 	sts	0x04B1, r22
    5ae0:	70 93 b2 04 	sts	0x04B2, r23
    5ae4:	80 93 b3 04 	sts	0x04B3, r24
    5ae8:	90 93 b4 04 	sts	0x04B4, r25
		} else {
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
    5aec:	80 91 16 02 	lds	r24, 0x0216
    5af0:	81 30       	cpi	r24, 0x01	; 1
    5af2:	09 f4       	brne	.+2      	; 0x5af6 <handleMotorsWithSpeedController+0x17e>
    5af4:	c7 c1       	rjmp	.+910    	; 0x5e84 <handleMotorsWithSpeedController+0x50c>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    5af6:	8d e0       	ldi	r24, 0x0D	; 13
    5af8:	93 e0       	ldi	r25, 0x03	; 3
    5afa:	0e 94 ba 13 	call	0x2774	; 0x2774 <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    5afe:	80 91 0d 03 	lds	r24, 0x030D
    5b02:	90 91 0e 03 	lds	r25, 0x030E
    5b06:	90 93 f6 02 	sts	0x02F6, r25
    5b0a:	80 93 f5 02 	sts	0x02F5, r24

		if(pwm_left > 0) {
    5b0e:	18 16       	cp	r1, r24
    5b10:	19 06       	cpc	r1, r25
    5b12:	0c f0       	brlt	.+2      	; 0x5b16 <handleMotorsWithSpeedController+0x19e>
    5b14:	f9 c1       	rjmp	.+1010   	; 0x5f08 <handleMotorsWithSpeedController+0x590>
			OCR4A = (unsigned int)pwm_left;
    5b16:	90 93 a9 00 	sts	0x00A9, r25
    5b1a:	80 93 a8 00 	sts	0x00A8, r24
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    5b1e:	80 91 98 04 	lds	r24, 0x0498
    5b22:	8f 5f       	subi	r24, 0xFF	; 255
    5b24:	80 93 98 04 	sts	0x0498, r24

	}

	if(compute_right_vel) {
    5b28:	80 91 08 02 	lds	r24, 0x0208
    5b2c:	88 23       	and	r24, r24
    5b2e:	09 f0       	breq	.+2      	; 0x5b32 <handleMotorsWithSpeedController+0x1ba>
    5b30:	c1 c0       	rjmp	.+386    	; 0x5cb4 <handleMotorsWithSpeedController+0x33c>
    5b32:	80 91 98 04 	lds	r24, 0x0498

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    5b36:	82 30       	cpi	r24, 0x02	; 2
    5b38:	08 f4       	brcc	.+2      	; 0x5b3c <handleMotorsWithSpeedController+0x1c4>
    5b3a:	ab c0       	rjmp	.+342    	; 0x5c92 <handleMotorsWithSpeedController+0x31a>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    5b3c:	10 92 98 04 	sts	0x0498, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    5b40:	60 90 8c 04 	lds	r6, 0x048C
    5b44:	70 90 8d 04 	lds	r7, 0x048D
    5b48:	80 90 8e 04 	lds	r8, 0x048E
    5b4c:	90 90 8f 04 	lds	r9, 0x048F
    5b50:	20 90 88 04 	lds	r2, 0x0488
    5b54:	30 90 89 04 	lds	r3, 0x0489
    5b58:	40 90 8a 04 	lds	r4, 0x048A
    5b5c:	50 90 8b 04 	lds	r5, 0x048B
    5b60:	c4 01       	movw	r24, r8
    5b62:	b3 01       	movw	r22, r6
    5b64:	20 91 94 04 	lds	r18, 0x0494
    5b68:	30 91 95 04 	lds	r19, 0x0495
    5b6c:	40 91 96 04 	lds	r20, 0x0496
    5b70:	50 91 97 04 	lds	r21, 0x0497
    5b74:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__subsf3>
    5b78:	7b 01       	movw	r14, r22
    5b7a:	8c 01       	movw	r16, r24
    5b7c:	c2 01       	movw	r24, r4
    5b7e:	b1 01       	movw	r22, r2
    5b80:	20 91 90 04 	lds	r18, 0x0490
    5b84:	30 91 91 04 	lds	r19, 0x0491
    5b88:	40 91 92 04 	lds	r20, 0x0492
    5b8c:	50 91 93 04 	lds	r21, 0x0493
    5b90:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__subsf3>
    5b94:	9b 01       	movw	r18, r22
    5b96:	ac 01       	movw	r20, r24
    5b98:	c8 01       	movw	r24, r16
    5b9a:	b7 01       	movw	r22, r14
    5b9c:	0e 94 45 3d 	call	0x7a8a	; 0x7a8a <__addsf3>
    5ba0:	20 e0       	ldi	r18, 0x00	; 0
    5ba2:	30 e0       	ldi	r19, 0x00	; 0
    5ba4:	40 e0       	ldi	r20, 0x00	; 0
    5ba6:	5f e3       	ldi	r21, 0x3F	; 63
    5ba8:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    5bac:	d6 2e       	mov	r13, r22
    5bae:	c7 2e       	mov	r12, r23
    5bb0:	b8 2e       	mov	r11, r24
    5bb2:	a9 2e       	mov	r10, r25
    5bb4:	a6 01       	movw	r20, r12
    5bb6:	95 01       	movw	r18, r10
    5bb8:	85 2f       	mov	r24, r21
    5bba:	94 2f       	mov	r25, r20
    5bbc:	a3 2f       	mov	r26, r19
    5bbe:	b2 2f       	mov	r27, r18
    5bc0:	80 93 74 04 	sts	0x0474, r24
    5bc4:	90 93 75 04 	sts	0x0475, r25
    5bc8:	a0 93 76 04 	sts	0x0476, r26
    5bcc:	b0 93 77 04 	sts	0x0477, r27

		if(robotPosition == HORIZONTAL_POS) {
    5bd0:	80 91 16 02 	lds	r24, 0x0216
    5bd4:	81 30       	cpi	r24, 0x01	; 1
    5bd6:	09 f4       	brne	.+2      	; 0x5bda <handleMotorsWithSpeedController+0x262>
    5bd8:	1d c1       	rjmp	.+570    	; 0x5e14 <handleMotorsWithSpeedController+0x49c>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    5bda:	f0 90 99 04 	lds	r15, 0x0499
    5bde:	00 91 9a 04 	lds	r16, 0x049A
    5be2:	10 91 9b 04 	lds	r17, 0x049B
    5be6:	e0 90 9c 04 	lds	r14, 0x049C
    5bea:	8f 2d       	mov	r24, r15
    5bec:	90 2f       	mov	r25, r16
    5bee:	a1 2f       	mov	r26, r17
    5bf0:	be 2d       	mov	r27, r14
    5bf2:	80 93 64 04 	sts	0x0464, r24
    5bf6:	90 93 65 04 	sts	0x0465, r25
    5bfa:	a0 93 66 04 	sts	0x0466, r26
    5bfe:	b0 93 67 04 	sts	0x0467, r27
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    5c02:	6f 2d       	mov	r22, r15
    5c04:	70 2f       	mov	r23, r16
    5c06:	81 2f       	mov	r24, r17
    5c08:	9e 2d       	mov	r25, r14
    5c0a:	0e 94 0f 3e 	call	0x7c1e	; 0x7c1e <cos>
    5c0e:	9b 01       	movw	r18, r22
    5c10:	ac 01       	movw	r20, r24
    5c12:	d6 01       	movw	r26, r12
    5c14:	f5 01       	movw	r30, r10
    5c16:	6b 2f       	mov	r22, r27
    5c18:	7c 2d       	mov	r23, r12
    5c1a:	8f 2f       	mov	r24, r31
    5c1c:	9a 2d       	mov	r25, r10
    5c1e:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    5c22:	9b 01       	movw	r18, r22
    5c24:	ac 01       	movw	r20, r24
    5c26:	60 91 6c 04 	lds	r22, 0x046C
    5c2a:	70 91 6d 04 	lds	r23, 0x046D
    5c2e:	80 91 6e 04 	lds	r24, 0x046E
    5c32:	90 91 6f 04 	lds	r25, 0x046F
    5c36:	0e 94 45 3d 	call	0x7a8a	; 0x7a8a <__addsf3>
    5c3a:	60 93 6c 04 	sts	0x046C, r22
    5c3e:	70 93 6d 04 	sts	0x046D, r23
    5c42:	80 93 6e 04 	sts	0x046E, r24
    5c46:	90 93 6f 04 	sts	0x046F, r25
		yPos = yPos + sin(theta)*deltaDist;
    5c4a:	6f 2d       	mov	r22, r15
    5c4c:	70 2f       	mov	r23, r16
    5c4e:	81 2f       	mov	r24, r17
    5c50:	9e 2d       	mov	r25, r14
    5c52:	0e 94 25 40 	call	0x804a	; 0x804a <sin>
    5c56:	9b 01       	movw	r18, r22
    5c58:	ac 01       	movw	r20, r24
    5c5a:	d6 01       	movw	r26, r12
    5c5c:	f5 01       	movw	r30, r10
    5c5e:	6b 2f       	mov	r22, r27
    5c60:	7c 2d       	mov	r23, r12
    5c62:	8f 2f       	mov	r24, r31
    5c64:	9a 2d       	mov	r25, r10
    5c66:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    5c6a:	9b 01       	movw	r18, r22
    5c6c:	ac 01       	movw	r20, r24
    5c6e:	60 91 70 04 	lds	r22, 0x0470
    5c72:	70 91 71 04 	lds	r23, 0x0471
    5c76:	80 91 72 04 	lds	r24, 0x0472
    5c7a:	90 91 73 04 	lds	r25, 0x0473
    5c7e:	0e 94 45 3d 	call	0x7a8a	; 0x7a8a <__addsf3>
    5c82:	60 93 70 04 	sts	0x0470, r22
    5c86:	70 93 71 04 	sts	0x0471, r23
    5c8a:	80 93 72 04 	sts	0x0472, r24
    5c8e:	90 93 73 04 	sts	0x0473, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    5c92:	1f 91       	pop	r17
    5c94:	0f 91       	pop	r16
    5c96:	ff 90       	pop	r15
    5c98:	ef 90       	pop	r14
    5c9a:	df 90       	pop	r13
    5c9c:	cf 90       	pop	r12
    5c9e:	bf 90       	pop	r11
    5ca0:	af 90       	pop	r10
    5ca2:	9f 90       	pop	r9
    5ca4:	8f 90       	pop	r8
    5ca6:	7f 90       	pop	r7
    5ca8:	6f 90       	pop	r6
    5caa:	5f 90       	pop	r5
    5cac:	4f 90       	pop	r4
    5cae:	3f 90       	pop	r3
    5cb0:	2f 90       	pop	r2
    5cb2:	08 95       	ret

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    5cb4:	20 91 ed 02 	lds	r18, 0x02ED
    5cb8:	30 91 ee 02 	lds	r19, 0x02EE
    5cbc:	36 95       	lsr	r19
    5cbe:	27 95       	ror	r18
    5cc0:	36 95       	lsr	r19
    5cc2:	27 95       	ror	r18
    5cc4:	30 93 f2 02 	sts	0x02F2, r19
    5cc8:	20 93 f1 02 	sts	0x02F1, r18
		compute_right_vel = 0;
    5ccc:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    5cd0:	10 92 ee 02 	sts	0x02EE, r1
    5cd4:	10 92 ed 02 	sts	0x02ED, r1

		if(calibrateOdomFlag==1) {
    5cd8:	80 91 c0 04 	lds	r24, 0x04C0
    5cdc:	81 30       	cpi	r24, 0x01	; 1
    5cde:	09 f4       	brne	.+2      	; 0x5ce2 <handleMotorsWithSpeedController+0x36a>
    5ce0:	d6 c0       	rjmp	.+428    	; 0x5e8e <handleMotorsWithSpeedController+0x516>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    5ce2:	0e 94 06 28 	call	0x500c	; 0x500c <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    5ce6:	80 91 8c 04 	lds	r24, 0x048C
    5cea:	90 91 8d 04 	lds	r25, 0x048D
    5cee:	a0 91 8e 04 	lds	r26, 0x048E
    5cf2:	b0 91 8f 04 	lds	r27, 0x048F
    5cf6:	80 93 94 04 	sts	0x0494, r24
    5cfa:	90 93 95 04 	sts	0x0495, r25
    5cfe:	a0 93 96 04 	sts	0x0496, r26
    5d02:	b0 93 97 04 	sts	0x0497, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    5d06:	60 91 af 04 	lds	r22, 0x04AF
    5d0a:	70 91 b0 04 	lds	r23, 0x04B0
    5d0e:	88 27       	eor	r24, r24
    5d10:	77 fd       	sbrc	r23, 7
    5d12:	80 95       	com	r24
    5d14:	98 2f       	mov	r25, r24
    5d16:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    5d1a:	7b 01       	movw	r14, r22
    5d1c:	8c 01       	movw	r16, r24
    5d1e:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    5d22:	20 91 b5 04 	lds	r18, 0x04B5
    5d26:	30 91 b6 04 	lds	r19, 0x04B6
    5d2a:	40 91 b7 04 	lds	r20, 0x04B7
    5d2e:	50 91 b8 04 	lds	r21, 0x04B8
    5d32:	62 1b       	sub	r22, r18
    5d34:	73 0b       	sbc	r23, r19
    5d36:	84 0b       	sbc	r24, r20
    5d38:	95 0b       	sbc	r25, r21
    5d3a:	0e 94 ab 3e 	call	0x7d56	; 0x7d56 <__floatunsisf>
    5d3e:	20 e0       	ldi	r18, 0x00	; 0
    5d40:	30 e0       	ldi	r19, 0x00	; 0
    5d42:	40 ed       	ldi	r20, 0xD0	; 208
    5d44:	52 e4       	ldi	r21, 0x42	; 66
    5d46:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    5d4a:	9b 01       	movw	r18, r22
    5d4c:	ac 01       	movw	r20, r24
    5d4e:	c8 01       	movw	r24, r16
    5d50:	b7 01       	movw	r22, r14
    5d52:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    5d56:	20 e0       	ldi	r18, 0x00	; 0
    5d58:	34 e2       	ldi	r19, 0x24	; 36
    5d5a:	44 e7       	ldi	r20, 0x74	; 116
    5d5c:	59 e4       	ldi	r21, 0x49	; 73
    5d5e:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    5d62:	9b 01       	movw	r18, r22
    5d64:	ac 01       	movw	r20, r24
    5d66:	60 91 8c 04 	lds	r22, 0x048C
    5d6a:	70 91 8d 04 	lds	r23, 0x048D
    5d6e:	80 91 8e 04 	lds	r24, 0x048E
    5d72:	90 91 8f 04 	lds	r25, 0x048F
    5d76:	0e 94 45 3d 	call	0x7a8a	; 0x7a8a <__addsf3>
    5d7a:	60 93 8c 04 	sts	0x048C, r22
    5d7e:	70 93 8d 04 	sts	0x048D, r23
    5d82:	80 93 8e 04 	sts	0x048E, r24
    5d86:	90 93 8f 04 	sts	0x048F, r25
		timeRightOdom = getTime100MicroSec();
    5d8a:	0e 94 8a 1c 	call	0x3914	; 0x3914 <getTime100MicroSec>
    5d8e:	60 93 b5 04 	sts	0x04B5, r22
    5d92:	70 93 b6 04 	sts	0x04B6, r23
    5d96:	80 93 b7 04 	sts	0x04B7, r24
    5d9a:	90 93 b8 04 	sts	0x04B8, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
    5d9e:	80 91 16 02 	lds	r24, 0x0216
    5da2:	81 30       	cpi	r24, 0x01	; 1
    5da4:	09 f4       	brne	.+2      	; 0x5da8 <handleMotorsWithSpeedController+0x430>
    5da6:	47 c0       	rjmp	.+142    	; 0x5e36 <handleMotorsWithSpeedController+0x4be>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    5da8:	8b e0       	ldi	r24, 0x0B	; 11
    5daa:	93 e0       	ldi	r25, 0x03	; 3
    5dac:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    5db0:	80 91 0b 03 	lds	r24, 0x030B
    5db4:	90 91 0c 03 	lds	r25, 0x030C
    5db8:	90 93 f4 02 	sts	0x02F4, r25
    5dbc:	80 93 f3 02 	sts	0x02F3, r24

		if(pwm_right > 0) {
    5dc0:	18 16       	cp	r1, r24
    5dc2:	19 06       	cpc	r1, r25
    5dc4:	0c f0       	brlt	.+2      	; 0x5dc8 <handleMotorsWithSpeedController+0x450>
    5dc6:	95 c0       	rjmp	.+298    	; 0x5ef2 <handleMotorsWithSpeedController+0x57a>
			OCR3A = (unsigned int)pwm_right;
    5dc8:	90 93 99 00 	sts	0x0099, r25
    5dcc:	80 93 98 00 	sts	0x0098, r24
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    5dd0:	80 91 98 04 	lds	r24, 0x0498
    5dd4:	8f 5f       	subi	r24, 0xFF	; 255
    5dd6:	80 93 98 04 	sts	0x0498, r24
    5dda:	ad ce       	rjmp	.-678    	; 0x5b36 <handleMotorsWithSpeedController+0x1be>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    5ddc:	8d e0       	ldi	r24, 0x0D	; 13
    5dde:	93 e0       	ldi	r25, 0x03	; 3
    5de0:	6b e0       	ldi	r22, 0x0B	; 11
    5de2:	73 e0       	ldi	r23, 0x03	; 3
    5de4:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <obstacleAvoidance>
    5de8:	80 91 0d 03 	lds	r24, 0x030D
    5dec:	90 91 0e 03 	lds	r25, 0x030E
    5df0:	f7 cd       	rjmp	.-1042   	; 0x59e0 <handleMotorsWithSpeedController+0x68>
}

void handleMotorsWithSpeedController() {

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    5df2:	80 91 fb 02 	lds	r24, 0x02FB
    5df6:	90 91 fc 02 	lds	r25, 0x02FC
    5dfa:	90 93 0c 03 	sts	0x030C, r25
    5dfe:	80 93 0b 03 	sts	0x030B, r24
		pwm_left_working = pwm_intermediate_left_desired;
    5e02:	80 91 fd 02 	lds	r24, 0x02FD
    5e06:	90 91 fe 02 	lds	r25, 0x02FE
    5e0a:	90 93 0e 03 	sts	0x030E, r25
    5e0e:	80 93 0d 03 	sts	0x030D, r24
    5e12:	e1 cd       	rjmp	.-1086   	; 0x59d6 <handleMotorsWithSpeedController+0x5e>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    5e14:	c4 01       	movw	r24, r8
    5e16:	b3 01       	movw	r22, r6
    5e18:	a2 01       	movw	r20, r4
    5e1a:	91 01       	movw	r18, r2
    5e1c:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__subsf3>
    5e20:	20 e0       	ldi	r18, 0x00	; 0
    5e22:	30 e0       	ldi	r19, 0x00	; 0
    5e24:	4e e1       	ldi	r20, 0x1E	; 30
    5e26:	52 e4       	ldi	r21, 0x42	; 66
    5e28:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__divsf3>
    5e2c:	f6 2e       	mov	r15, r22
    5e2e:	07 2f       	mov	r16, r23
    5e30:	18 2f       	mov	r17, r24
    5e32:	e9 2e       	mov	r14, r25
    5e34:	da ce       	rjmp	.-588    	; 0x5bea <handleMotorsWithSpeedController+0x272>
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    5e36:	8b e0       	ldi	r24, 0x0B	; 11
    5e38:	93 e0       	ldi	r25, 0x03	; 3
    5e3a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <start_horizontal_speed_control_right>
    5e3e:	b8 cf       	rjmp	.-144    	; 0x5db0 <handleMotorsWithSpeedController+0x438>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    5e40:	44 27       	eor	r20, r20
    5e42:	37 fd       	sbrc	r19, 7
    5e44:	40 95       	com	r20
    5e46:	54 2f       	mov	r21, r20
    5e48:	80 91 9d 04 	lds	r24, 0x049D
    5e4c:	90 91 9e 04 	lds	r25, 0x049E
    5e50:	a0 91 9f 04 	lds	r26, 0x049F
    5e54:	b0 91 a0 04 	lds	r27, 0x04A0
    5e58:	82 0f       	add	r24, r18
    5e5a:	93 1f       	adc	r25, r19
    5e5c:	a4 1f       	adc	r26, r20
    5e5e:	b5 1f       	adc	r27, r21
    5e60:	80 93 9d 04 	sts	0x049D, r24
    5e64:	90 93 9e 04 	sts	0x049E, r25
    5e68:	a0 93 9f 04 	sts	0x049F, r26
    5e6c:	b0 93 a0 04 	sts	0x04A0, r27
			leftSumCount++;
    5e70:	80 91 a5 04 	lds	r24, 0x04A5
    5e74:	90 91 a6 04 	lds	r25, 0x04A6
    5e78:	01 96       	adiw	r24, 0x01	; 1
    5e7a:	90 93 a6 04 	sts	0x04A6, r25
    5e7e:	80 93 a5 04 	sts	0x04A5, r24
    5e82:	d6 cd       	rjmp	.-1108   	; 0x5a30 <handleMotorsWithSpeedController+0xb8>
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    5e84:	8d e0       	ldi	r24, 0x0D	; 13
    5e86:	93 e0       	ldi	r25, 0x03	; 3
    5e88:	0e 94 3d 18 	call	0x307a	; 0x307a <start_horizontal_speed_control_left>
    5e8c:	38 ce       	rjmp	.-912    	; 0x5afe <handleMotorsWithSpeedController+0x186>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    5e8e:	44 27       	eor	r20, r20
    5e90:	37 fd       	sbrc	r19, 7
    5e92:	40 95       	com	r20
    5e94:	54 2f       	mov	r21, r20
    5e96:	80 91 a1 04 	lds	r24, 0x04A1
    5e9a:	90 91 a2 04 	lds	r25, 0x04A2
    5e9e:	a0 91 a3 04 	lds	r26, 0x04A3
    5ea2:	b0 91 a4 04 	lds	r27, 0x04A4
    5ea6:	82 0f       	add	r24, r18
    5ea8:	93 1f       	adc	r25, r19
    5eaa:	a4 1f       	adc	r26, r20
    5eac:	b5 1f       	adc	r27, r21
    5eae:	80 93 a1 04 	sts	0x04A1, r24
    5eb2:	90 93 a2 04 	sts	0x04A2, r25
    5eb6:	a0 93 a3 04 	sts	0x04A3, r26
    5eba:	b0 93 a4 04 	sts	0x04A4, r27
			rightSumCount++;
    5ebe:	80 91 a7 04 	lds	r24, 0x04A7
    5ec2:	90 91 a8 04 	lds	r25, 0x04A8
    5ec6:	01 96       	adiw	r24, 0x01	; 1
    5ec8:	90 93 a8 04 	sts	0x04A8, r25
    5ecc:	80 93 a7 04 	sts	0x04A7, r24
    5ed0:	08 cf       	rjmp	.-496    	; 0x5ce2 <handleMotorsWithSpeedController+0x36a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    5ed2:	62 e0       	ldi	r22, 0x02	; 2
    5ed4:	0e 94 9e 24 	call	0x493c	; 0x493c <getInputFromSpeed>
    5ed8:	90 93 0e 03 	sts	0x030E, r25
    5edc:	80 93 0d 03 	sts	0x030D, r24
    5ee0:	7a cd       	rjmp	.-1292   	; 0x59d6 <handleMotorsWithSpeedController+0x5e>
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    5ee2:	63 e0       	ldi	r22, 0x03	; 3
    5ee4:	0e 94 9e 24 	call	0x493c	; 0x493c <getInputFromSpeed>
    5ee8:	90 93 0c 03 	sts	0x030C, r25
    5eec:	80 93 0b 03 	sts	0x030B, r24
    5ef0:	65 cd       	rjmp	.-1334   	; 0x59bc <handleMotorsWithSpeedController+0x44>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    5ef2:	00 97       	sbiw	r24, 0x00	; 0
    5ef4:	a1 f4       	brne	.+40     	; 0x5f1e <handleMotorsWithSpeedController+0x5a6>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    5ef6:	10 92 99 00 	sts	0x0099, r1
    5efa:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    5efe:	10 92 9b 00 	sts	0x009B, r1
    5f02:	10 92 9a 00 	sts	0x009A, r1
    5f06:	64 cf       	rjmp	.-312    	; 0x5dd0 <handleMotorsWithSpeedController+0x458>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    5f08:	00 97       	sbiw	r24, 0x00	; 0
    5f0a:	89 f4       	brne	.+34     	; 0x5f2e <handleMotorsWithSpeedController+0x5b6>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    5f0c:	10 92 a9 00 	sts	0x00A9, r1
    5f10:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    5f14:	10 92 ab 00 	sts	0x00AB, r1
    5f18:	10 92 aa 00 	sts	0x00AA, r1
    5f1c:	00 ce       	rjmp	.-1024   	; 0x5b1e <handleMotorsWithSpeedController+0x1a6>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    5f1e:	90 95       	com	r25
    5f20:	81 95       	neg	r24
    5f22:	9f 4f       	sbci	r25, 0xFF	; 255
    5f24:	90 93 9b 00 	sts	0x009B, r25
    5f28:	80 93 9a 00 	sts	0x009A, r24
    5f2c:	51 cf       	rjmp	.-350    	; 0x5dd0 <handleMotorsWithSpeedController+0x458>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    5f2e:	90 95       	com	r25
    5f30:	81 95       	neg	r24
    5f32:	9f 4f       	sbci	r25, 0xFF	; 255
    5f34:	90 93 ab 00 	sts	0x00AB, r25
    5f38:	80 93 aa 00 	sts	0x00AA, r24
    5f3c:	f0 cd       	rjmp	.-1056   	; 0x5b1e <handleMotorsWithSpeedController+0x1a6>

00005f3e <initCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void initCalibration() {
    5f3e:	2f 92       	push	r2
    5f40:	3f 92       	push	r3
    5f42:	4f 92       	push	r4
    5f44:	5f 92       	push	r5
    5f46:	6f 92       	push	r6
    5f48:	7f 92       	push	r7
    5f4a:	8f 92       	push	r8
    5f4c:	9f 92       	push	r9
    5f4e:	af 92       	push	r10
    5f50:	bf 92       	push	r11
    5f52:	cf 92       	push	r12
    5f54:	df 92       	push	r13
    5f56:	ef 92       	push	r14
    5f58:	ff 92       	push	r15
    5f5a:	0f 93       	push	r16
    5f5c:	1f 93       	push	r17
    5f5e:	cf 93       	push	r28
    5f60:	df 93       	push	r29

    unsigned int temp=0;
    unsigned int i=0;

	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    5f62:	8a e6       	ldi	r24, 0x6A	; 106
    5f64:	9f e0       	ldi	r25, 0x0F	; 15
    5f66:	0e 94 46 41 	call	0x828c	; 0x828c <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    5f6a:	2a ea       	ldi	r18, 0xAA	; 170
    5f6c:	85 35       	cpi	r24, 0x55	; 85
    5f6e:	92 07       	cpc	r25, r18
    5f70:	09 f4       	brne	.+2      	; 0x5f74 <initCalibration+0x36>
    5f72:	b1 c1       	rjmp	.+866    	; 0x62d6 <initCalibration+0x398>
        for(i=0; i<CALIBRATION_SAMPLES; i++) {
            calibration[i][0] = i+1;
        }
        // the following values are taken from a field test
        // forward left, speed control enabled
        calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    5f74:	a4 e1       	ldi	r26, 0x14	; 20
    5f76:	b0 e0       	ldi	r27, 0x00	; 0
    5f78:	b0 93 d7 04 	sts	0x04D7, r27
    5f7c:	a0 93 d6 04 	sts	0x04D6, r26
        calibration[1][0] = 40;
    5f80:	88 e2       	ldi	r24, 0x28	; 40
    5f82:	90 e0       	ldi	r25, 0x00	; 0
    5f84:	90 93 e7 04 	sts	0x04E7, r25
    5f88:	80 93 e6 04 	sts	0x04E6, r24
        calibration[2][0] = 59;
    5f8c:	8b e3       	ldi	r24, 0x3B	; 59
    5f8e:	90 e0       	ldi	r25, 0x00	; 0
    5f90:	90 93 f7 04 	sts	0x04F7, r25
    5f94:	80 93 f6 04 	sts	0x04F6, r24
        calibration[3][0] = 79;
    5f98:	0f e4       	ldi	r16, 0x4F	; 79
    5f9a:	10 e0       	ldi	r17, 0x00	; 0
    5f9c:	10 93 07 05 	sts	0x0507, r17
    5fa0:	00 93 06 05 	sts	0x0506, r16
        calibration[4][0] = 100;
    5fa4:	e4 e6       	ldi	r30, 0x64	; 100
    5fa6:	f0 e0       	ldi	r31, 0x00	; 0
    5fa8:	f0 93 17 05 	sts	0x0517, r31
    5fac:	e0 93 16 05 	sts	0x0516, r30
        calibration[5][0] = 120;
    5fb0:	f8 e7       	ldi	r31, 0x78	; 120
    5fb2:	af 2e       	mov	r10, r31
    5fb4:	b1 2c       	mov	r11, r1
    5fb6:	b0 92 27 05 	sts	0x0527, r11
    5fba:	a0 92 26 05 	sts	0x0526, r10
        calibration[6][0] = 139;
    5fbe:	8b e8       	ldi	r24, 0x8B	; 139
    5fc0:	90 e0       	ldi	r25, 0x00	; 0
    5fc2:	90 93 37 05 	sts	0x0537, r25
    5fc6:	80 93 36 05 	sts	0x0536, r24
        calibration[7][0] = 159;
    5fca:	2f e9       	ldi	r18, 0x9F	; 159
    5fcc:	30 e0       	ldi	r19, 0x00	; 0
    5fce:	30 93 47 05 	sts	0x0547, r19
    5fd2:	20 93 46 05 	sts	0x0546, r18
		calibration[8][0] = 180;
    5fd6:	44 eb       	ldi	r20, 0xB4	; 180
    5fd8:	50 e0       	ldi	r21, 0x00	; 0
    5fda:	50 93 57 05 	sts	0x0557, r21
    5fde:	40 93 56 05 	sts	0x0556, r20
        calibration[0][1] = 19;    	// real speed measured in mm/s
    5fe2:	63 e1       	ldi	r22, 0x13	; 19
    5fe4:	70 e0       	ldi	r23, 0x00	; 0
    5fe6:	70 93 d9 04 	sts	0x04D9, r23
    5fea:	60 93 d8 04 	sts	0x04D8, r22
        calibration[1][1] = 47;
    5fee:	2f e2       	ldi	r18, 0x2F	; 47
    5ff0:	30 e0       	ldi	r19, 0x00	; 0
    5ff2:	30 93 e9 04 	sts	0x04E9, r19
    5ff6:	20 93 e8 04 	sts	0x04E8, r18
        calibration[2][1] = 72;
    5ffa:	28 e4       	ldi	r18, 0x48	; 72
    5ffc:	30 e0       	ldi	r19, 0x00	; 0
    5ffe:	30 93 f9 04 	sts	0x04F9, r19
    6002:	20 93 f8 04 	sts	0x04F8, r18
        calibration[3][1] = 91;
    6006:	2b e5       	ldi	r18, 0x5B	; 91
    6008:	30 e0       	ldi	r19, 0x00	; 0
    600a:	30 93 09 05 	sts	0x0509, r19
    600e:	20 93 08 05 	sts	0x0508, r18
        calibration[4][1] = 109;
    6012:	2d e6       	ldi	r18, 0x6D	; 109
    6014:	30 e0       	ldi	r19, 0x00	; 0
    6016:	30 93 19 05 	sts	0x0519, r19
    601a:	20 93 18 05 	sts	0x0518, r18
        calibration[5][1] = 125;
    601e:	ed e7       	ldi	r30, 0x7D	; 125
    6020:	6e 2e       	mov	r6, r30
    6022:	71 2c       	mov	r7, r1
    6024:	70 92 29 05 	sts	0x0529, r7
    6028:	60 92 28 05 	sts	0x0528, r6
        calibration[6][1] = 143;
    602c:	2f e8       	ldi	r18, 0x8F	; 143
    602e:	30 e0       	ldi	r19, 0x00	; 0
    6030:	30 93 39 05 	sts	0x0539, r19
    6034:	20 93 38 05 	sts	0x0538, r18
        calibration[7][1] = 160;
    6038:	20 ea       	ldi	r18, 0xA0	; 160
    603a:	30 e0       	ldi	r19, 0x00	; 0
    603c:	30 93 49 05 	sts	0x0549, r19
    6040:	20 93 48 05 	sts	0x0548, r18
		calibration[8][1] = 174;
    6044:	ee ea       	ldi	r30, 0xAE	; 174
    6046:	f0 e0       	ldi	r31, 0x00	; 0
    6048:	f0 93 59 05 	sts	0x0559, r31
    604c:	e0 93 58 05 	sts	0x0558, r30
        // forward right, speed control enabled
        calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    6050:	70 93 db 04 	sts	0x04DB, r23
    6054:	60 93 da 04 	sts	0x04DA, r22
        calibration[1][2] = 39;
    6058:	e7 e2       	ldi	r30, 0x27	; 39
    605a:	f0 e0       	ldi	r31, 0x00	; 0
    605c:	f0 93 eb 04 	sts	0x04EB, r31
    6060:	e0 93 ea 04 	sts	0x04EA, r30
        calibration[2][2] = 60;
    6064:	cc e3       	ldi	r28, 0x3C	; 60
    6066:	d0 e0       	ldi	r29, 0x00	; 0
    6068:	d0 93 fb 04 	sts	0x04FB, r29
    606c:	c0 93 fa 04 	sts	0x04FA, r28
        calibration[3][2] = 80;
    6070:	70 e5       	ldi	r23, 0x50	; 80
    6072:	27 2e       	mov	r2, r23
    6074:	31 2c       	mov	r3, r1
    6076:	30 92 0b 05 	sts	0x050B, r3
    607a:	20 92 0a 05 	sts	0x050A, r2
        calibration[4][2] = 99;
    607e:	63 e6       	ldi	r22, 0x63	; 99
    6080:	e6 2e       	mov	r14, r22
    6082:	f1 2c       	mov	r15, r1
    6084:	f0 92 1b 05 	sts	0x051B, r15
    6088:	e0 92 1a 05 	sts	0x051A, r14
        calibration[5][2] = 119;
    608c:	67 e7       	ldi	r22, 0x77	; 119
    608e:	70 e0       	ldi	r23, 0x00	; 0
    6090:	70 93 2b 05 	sts	0x052B, r23
    6094:	60 93 2a 05 	sts	0x052A, r22
        calibration[6][2] = 140;
    6098:	0f 2e       	mov	r0, r31
    609a:	fc e8       	ldi	r31, 0x8C	; 140
    609c:	cf 2e       	mov	r12, r31
    609e:	dd 24       	eor	r13, r13
    60a0:	f0 2d       	mov	r31, r0
    60a2:	d0 92 3b 05 	sts	0x053B, r13
    60a6:	c0 92 3a 05 	sts	0x053A, r12
        calibration[7][2] = 160;
    60aa:	30 93 4b 05 	sts	0x054B, r19
    60ae:	20 93 4a 05 	sts	0x054A, r18
		calibration[8][2] = 180;
    60b2:	50 93 5b 05 	sts	0x055B, r21
    60b6:	40 93 5a 05 	sts	0x055A, r20
        calibration[0][3] = 23;    	// real speed measured in mm/s
    60ba:	0f 2e       	mov	r0, r31
    60bc:	f7 e1       	ldi	r31, 0x17	; 23
    60be:	8f 2e       	mov	r8, r31
    60c0:	99 24       	eor	r9, r9
    60c2:	f0 2d       	mov	r31, r0
    60c4:	90 92 dd 04 	sts	0x04DD, r9
    60c8:	80 92 dc 04 	sts	0x04DC, r8
        calibration[1][3] = 46;
    60cc:	0f 2e       	mov	r0, r31
    60ce:	fe e2       	ldi	r31, 0x2E	; 46
    60d0:	8f 2e       	mov	r8, r31
    60d2:	99 24       	eor	r9, r9
    60d4:	f0 2d       	mov	r31, r0
    60d6:	90 92 ed 04 	sts	0x04ED, r9
    60da:	80 92 ec 04 	sts	0x04EC, r8
        calibration[2][3] = 64;
    60de:	88 24       	eor	r8, r8
    60e0:	99 24       	eor	r9, r9
    60e2:	68 94       	set
    60e4:	86 f8       	bld	r8, 6
    60e6:	90 92 fd 04 	sts	0x04FD, r9
    60ea:	80 92 fc 04 	sts	0x04FC, r8
        calibration[3][3] = 81;
    60ee:	0f 2e       	mov	r0, r31
    60f0:	f1 e5       	ldi	r31, 0x51	; 81
    60f2:	4f 2e       	mov	r4, r31
    60f4:	55 24       	eor	r5, r5
    60f6:	f0 2d       	mov	r31, r0
    60f8:	50 92 0d 05 	sts	0x050D, r5
    60fc:	40 92 0c 05 	sts	0x050C, r4
        calibration[4][3] = 97;
    6100:	0f 2e       	mov	r0, r31
    6102:	f1 e6       	ldi	r31, 0x61	; 97
    6104:	8f 2e       	mov	r8, r31
    6106:	99 24       	eor	r9, r9
    6108:	f0 2d       	mov	r31, r0
    610a:	90 92 1d 05 	sts	0x051D, r9
    610e:	80 92 1c 05 	sts	0x051C, r8
        calibration[5][3] = 112;
    6112:	0f 2e       	mov	r0, r31
    6114:	f0 e7       	ldi	r31, 0x70	; 112
    6116:	8f 2e       	mov	r8, r31
    6118:	99 24       	eor	r9, r9
    611a:	f0 2d       	mov	r31, r0
    611c:	90 92 2d 05 	sts	0x052D, r9
    6120:	80 92 2c 05 	sts	0x052C, r8
        calibration[6][3] = 125;
    6124:	70 92 3d 05 	sts	0x053D, r7
    6128:	60 92 3c 05 	sts	0x053C, r6
        calibration[7][3] = 139;
    612c:	90 93 4d 05 	sts	0x054D, r25
    6130:	80 93 4c 05 	sts	0x054C, r24
		calibration[8][3] = 152;
    6134:	0f 2e       	mov	r0, r31
    6136:	f8 e9       	ldi	r31, 0x98	; 152
    6138:	8f 2e       	mov	r8, r31
    613a:	99 24       	eor	r9, r9
    613c:	f0 2d       	mov	r31, r0
    613e:	90 92 5d 05 	sts	0x055D, r9
    6142:	80 92 5c 05 	sts	0x055C, r8
        // backward left, speed control enabled
        calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    6146:	b0 93 df 04 	sts	0x04DF, r27
    614a:	a0 93 de 04 	sts	0x04DE, r26
        calibration[1][4] = 39;
    614e:	f0 93 ef 04 	sts	0x04EF, r31
    6152:	e0 93 ee 04 	sts	0x04EE, r30
        calibration[2][4] = 60;
    6156:	d0 93 ff 04 	sts	0x04FF, r29
    615a:	c0 93 fe 04 	sts	0x04FE, r28
        calibration[3][4] = 79;
    615e:	10 93 0f 05 	sts	0x050F, r17
    6162:	00 93 0e 05 	sts	0x050E, r16
        calibration[4][4] = 99;
    6166:	f0 92 1f 05 	sts	0x051F, r15
    616a:	e0 92 1e 05 	sts	0x051E, r14
        calibration[5][4] = 120;
    616e:	b0 92 2f 05 	sts	0x052F, r11
    6172:	a0 92 2e 05 	sts	0x052E, r10
        calibration[6][4] = 140;
    6176:	d0 92 3f 05 	sts	0x053F, r13
    617a:	c0 92 3e 05 	sts	0x053E, r12
        calibration[7][4] = 160;
    617e:	30 93 4f 05 	sts	0x054F, r19
    6182:	20 93 4e 05 	sts	0x054E, r18
		calibration[8][4] = 179;
    6186:	c3 eb       	ldi	r28, 0xB3	; 179
    6188:	d0 e0       	ldi	r29, 0x00	; 0
    618a:	d0 93 5f 05 	sts	0x055F, r29
    618e:	c0 93 5e 05 	sts	0x055E, r28
        calibration[0][5] = 18;    	// real speed measured in mm/s
    6192:	c2 e1       	ldi	r28, 0x12	; 18
    6194:	d0 e0       	ldi	r29, 0x00	; 0
    6196:	d0 93 e1 04 	sts	0x04E1, r29
    619a:	c0 93 e0 04 	sts	0x04E0, r28
        calibration[1][5] = 45;
    619e:	cd e2       	ldi	r28, 0x2D	; 45
    61a0:	d0 e0       	ldi	r29, 0x00	; 0
    61a2:	d0 93 f1 04 	sts	0x04F1, r29
    61a6:	c0 93 f0 04 	sts	0x04F0, r28
        calibration[2][5] = 68;
    61aa:	c4 e4       	ldi	r28, 0x44	; 68
    61ac:	d0 e0       	ldi	r29, 0x00	; 0
    61ae:	d0 93 01 05 	sts	0x0501, r29
    61b2:	c0 93 00 05 	sts	0x0500, r28
        calibration[3][5] = 87;
    61b6:	c7 e5       	ldi	r28, 0x57	; 87
    61b8:	d0 e0       	ldi	r29, 0x00	; 0
    61ba:	d0 93 11 05 	sts	0x0511, r29
    61be:	c0 93 10 05 	sts	0x0510, r28
        calibration[4][5] = 105;
    61c2:	c9 e6       	ldi	r28, 0x69	; 105
    61c4:	d0 e0       	ldi	r29, 0x00	; 0
    61c6:	d0 93 21 05 	sts	0x0521, r29
    61ca:	c0 93 20 05 	sts	0x0520, r28
        calibration[5][5] = 119;
    61ce:	70 93 31 05 	sts	0x0531, r23
    61d2:	60 93 30 05 	sts	0x0530, r22
        calibration[6][5] = 137;
    61d6:	c9 e8       	ldi	r28, 0x89	; 137
    61d8:	d0 e0       	ldi	r29, 0x00	; 0
    61da:	d0 93 41 05 	sts	0x0541, r29
    61de:	c0 93 40 05 	sts	0x0540, r28
        calibration[7][5] = 151;
    61e2:	c7 e9       	ldi	r28, 0x97	; 151
    61e4:	d0 e0       	ldi	r29, 0x00	; 0
    61e6:	d0 93 51 05 	sts	0x0551, r29
    61ea:	c0 93 50 05 	sts	0x0550, r28
		calibration[8][5] = 168;
    61ee:	c8 ea       	ldi	r28, 0xA8	; 168
    61f0:	d0 e0       	ldi	r29, 0x00	; 0
    61f2:	d0 93 61 05 	sts	0x0561, r29
    61f6:	c0 93 60 05 	sts	0x0560, r28
        // backward right, speed control enabled
        calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    61fa:	b0 93 e3 04 	sts	0x04E3, r27
    61fe:	a0 93 e2 04 	sts	0x04E2, r26
        calibration[1][6] = 39;
    6202:	f0 93 f3 04 	sts	0x04F3, r31
    6206:	e0 93 f2 04 	sts	0x04F2, r30
        calibration[2][6] = 59;
    620a:	eb e3       	ldi	r30, 0x3B	; 59
    620c:	f0 e0       	ldi	r31, 0x00	; 0
    620e:	f0 93 03 05 	sts	0x0503, r31
    6212:	e0 93 02 05 	sts	0x0502, r30
        calibration[3][6] = 80;
    6216:	30 92 13 05 	sts	0x0513, r3
    621a:	20 92 12 05 	sts	0x0512, r2
        calibration[4][6] = 100;
    621e:	e4 e6       	ldi	r30, 0x64	; 100
    6220:	8e 2e       	mov	r8, r30
    6222:	91 2c       	mov	r9, r1
    6224:	90 92 23 05 	sts	0x0523, r9
    6228:	80 92 22 05 	sts	0x0522, r8
        calibration[5][6] = 119;
    622c:	70 93 33 05 	sts	0x0533, r23
    6230:	60 93 32 05 	sts	0x0532, r22
        calibration[6][6] = 139;
    6234:	90 93 43 05 	sts	0x0543, r25
    6238:	80 93 42 05 	sts	0x0542, r24
        calibration[7][6] = 160;
    623c:	30 93 53 05 	sts	0x0553, r19
    6240:	20 93 52 05 	sts	0x0552, r18
		calibration[8][6] = 180;
    6244:	50 93 63 05 	sts	0x0563, r21
    6248:	40 93 62 05 	sts	0x0562, r20
        calibration[0][7] = 22;    	// real speed measured in mm/s
    624c:	26 e1       	ldi	r18, 0x16	; 22
    624e:	30 e0       	ldi	r19, 0x00	; 0
    6250:	30 93 e5 04 	sts	0x04E5, r19
    6254:	20 93 e4 04 	sts	0x04E4, r18
        calibration[1][7] = 46;
    6258:	2e e2       	ldi	r18, 0x2E	; 46
    625a:	30 e0       	ldi	r19, 0x00	; 0
    625c:	30 93 f5 04 	sts	0x04F5, r19
    6260:	20 93 f4 04 	sts	0x04F4, r18
        calibration[2][7] = 65;
    6264:	21 e4       	ldi	r18, 0x41	; 65
    6266:	30 e0       	ldi	r19, 0x00	; 0
    6268:	30 93 05 05 	sts	0x0505, r19
    626c:	20 93 04 05 	sts	0x0504, r18
        calibration[3][7] = 81;
    6270:	50 92 15 05 	sts	0x0515, r5
    6274:	40 92 14 05 	sts	0x0514, r4
        calibration[4][7] = 96;
    6278:	20 e6       	ldi	r18, 0x60	; 96
    627a:	30 e0       	ldi	r19, 0x00	; 0
    627c:	30 93 25 05 	sts	0x0525, r19
    6280:	20 93 24 05 	sts	0x0524, r18
        calibration[5][7] = 111;
    6284:	2f e6       	ldi	r18, 0x6F	; 111
    6286:	30 e0       	ldi	r19, 0x00	; 0
    6288:	30 93 35 05 	sts	0x0535, r19
    628c:	20 93 34 05 	sts	0x0534, r18
        calibration[6][7] = 125;
    6290:	70 92 45 05 	sts	0x0545, r7
    6294:	60 92 44 05 	sts	0x0544, r6
        calibration[7][7] = 139;
    6298:	90 93 55 05 	sts	0x0555, r25
    629c:	80 93 54 05 	sts	0x0554, r24
		calibration[8][7] = 153;
    62a0:	89 e9       	ldi	r24, 0x99	; 153
    62a2:	90 e0       	ldi	r25, 0x00	; 0
    62a4:	90 93 65 05 	sts	0x0565, r25
    62a8:	80 93 64 05 	sts	0x0564, r24

        writeCalibrationToFlash();
    62ac:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <writeCalibrationToFlash>

    }

}
    62b0:	df 91       	pop	r29
    62b2:	cf 91       	pop	r28
    62b4:	1f 91       	pop	r17
    62b6:	0f 91       	pop	r16
    62b8:	ff 90       	pop	r15
    62ba:	ef 90       	pop	r14
    62bc:	df 90       	pop	r13
    62be:	cf 90       	pop	r12
    62c0:	bf 90       	pop	r11
    62c2:	af 90       	pop	r10
    62c4:	9f 90       	pop	r9
    62c6:	8f 90       	pop	r8
    62c8:	7f 90       	pop	r7
    62ca:	6f 90       	pop	r6
    62cc:	5f 90       	pop	r5
    62ce:	4f 90       	pop	r4
    62d0:	3f 90       	pop	r3
    62d2:	2f 90       	pop	r2
    62d4:	08 95       	ret
    unsigned int i=0;

	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    62d6:	0e 94 3b 3d 	call	0x7a76	; 0x7a76 <readCalibrationFromFlash>
    62da:	ea cf       	rjmp	.-44     	; 0x62b0 <initCalibration+0x372>

000062dc <__vector_45>:
    }

}

// Motor left
ISR(TIMER4_OVF_vect) {
    62dc:	1f 92       	push	r1
    62de:	0f 92       	push	r0
    62e0:	0f b6       	in	r0, 0x3f	; 63
    62e2:	0f 92       	push	r0
    62e4:	11 24       	eor	r1, r1
    62e6:	8f 93       	push	r24
    62e8:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    62ea:	80 91 63 04 	lds	r24, 0x0463
    62ee:	88 23       	and	r24, r24
    62f0:	61 f0       	breq	.+24     	; 0x630a <__vector_45+0x2e>
		pwm_left = 0;
    62f2:	10 92 f6 02 	sts	0x02F6, r1
    62f6:	10 92 f5 02 	sts	0x02F5, r1
		OCR4A = 0;
    62fa:	10 92 a9 00 	sts	0x00A9, r1
    62fe:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    6302:	10 92 ab 00 	sts	0x00AB, r1
    6306:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    630a:	10 92 e0 02 	sts	0x02E0, r1
    630e:	10 92 df 02 	sts	0x02DF, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    6312:	80 91 f5 02 	lds	r24, 0x02F5
    6316:	90 91 f6 02 	lds	r25, 0x02F6
    631a:	00 97       	sbiw	r24, 0x00	; 0
    631c:	41 f5       	brne	.+80     	; 0x636e <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    631e:	80 91 e9 02 	lds	r24, 0x02E9
    6322:	90 91 ea 02 	lds	r25, 0x02EA
    6326:	97 fd       	sbrc	r25, 7
    6328:	69 c0       	rjmp	.+210    	; 0x63fc <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    632a:	81 e0       	ldi	r24, 0x01	; 1
    632c:	80 93 26 02 	sts	0x0226, r24
			currentMotLeftChannel = 14;
    6330:	8e e0       	ldi	r24, 0x0E	; 14
    6332:	80 93 23 02 	sts	0x0223, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    6336:	81 e0       	ldi	r24, 0x01	; 1
    6338:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    633c:	80 91 a0 00 	lds	r24, 0x00A0
    6340:	8f 75       	andi	r24, 0x5F	; 95
    6342:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    6346:	80 91 02 01 	lds	r24, 0x0102
    634a:	87 7e       	andi	r24, 0xE7	; 231
    634c:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    6350:	80 91 72 00 	lds	r24, 0x0072
    6354:	89 7f       	andi	r24, 0xF9	; 249
    6356:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    635a:	89 b3       	in	r24, 0x19	; 25
    635c:	86 60       	ori	r24, 0x06	; 6
    635e:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    6360:	9f 91       	pop	r25
    6362:	8f 91       	pop	r24
    6364:	0f 90       	pop	r0
    6366:	0f be       	out	0x3f, r0	; 63
    6368:	0f 90       	pop	r0
    636a:	1f 90       	pop	r1
    636c:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    636e:	18 16       	cp	r1, r24
    6370:	19 06       	cpc	r1, r25
    6372:	2c f5       	brge	.+74     	; 0x63be <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    6374:	10 92 26 02 	sts	0x0226, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    6378:	8f e0       	ldi	r24, 0x0F	; 15
    637a:	80 93 23 02 	sts	0x0223, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    637e:	80 91 a0 00 	lds	r24, 0x00A0
    6382:	8f 7d       	andi	r24, 0xDF	; 223
    6384:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    6388:	80 91 72 00 	lds	r24, 0x0072
    638c:	8b 7f       	andi	r24, 0xFB	; 251
    638e:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    6392:	80 91 02 01 	lds	r24, 0x0102
    6396:	8f 7e       	andi	r24, 0xEF	; 239
    6398:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    639c:	80 91 a0 00 	lds	r24, 0x00A0
    63a0:	80 68       	ori	r24, 0x80	; 128
    63a2:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    63a6:	80 91 72 00 	lds	r24, 0x0072
    63aa:	82 60       	ori	r24, 0x02	; 2
    63ac:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    63b0:	9f 91       	pop	r25
    63b2:	8f 91       	pop	r24
    63b4:	0f 90       	pop	r0
    63b6:	0f be       	out	0x3f, r0	; 63
    63b8:	0f 90       	pop	r0
    63ba:	1f 90       	pop	r1
    63bc:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    63be:	10 92 26 02 	sts	0x0226, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    63c2:	8e e0       	ldi	r24, 0x0E	; 14
    63c4:	80 93 23 02 	sts	0x0223, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    63c8:	80 91 a0 00 	lds	r24, 0x00A0
    63cc:	8f 77       	andi	r24, 0x7F	; 127
    63ce:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    63d2:	80 91 72 00 	lds	r24, 0x0072
    63d6:	8d 7f       	andi	r24, 0xFD	; 253
    63d8:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    63dc:	80 91 02 01 	lds	r24, 0x0102
    63e0:	87 7f       	andi	r24, 0xF7	; 247
    63e2:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    63e6:	80 91 a0 00 	lds	r24, 0x00A0
    63ea:	80 62       	ori	r24, 0x20	; 32
    63ec:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    63f0:	80 91 72 00 	lds	r24, 0x0072
    63f4:	84 60       	ori	r24, 0x04	; 4
    63f6:	80 93 72 00 	sts	0x0072, r24
    63fa:	b2 cf       	rjmp	.-156    	; 0x6360 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    63fc:	81 e0       	ldi	r24, 0x01	; 1
    63fe:	80 93 26 02 	sts	0x0226, r24
			currentMotLeftChannel = 15;
    6402:	8f e0       	ldi	r24, 0x0F	; 15
    6404:	80 93 23 02 	sts	0x0223, r24
    6408:	96 cf       	rjmp	.-212    	; 0x6336 <__vector_45+0x5a>

0000640a <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    640a:	1f 92       	push	r1
    640c:	0f 92       	push	r0
    640e:	0f b6       	in	r0, 0x3f	; 63
    6410:	0f 92       	push	r0
    6412:	11 24       	eor	r1, r1
    6414:	8f 93       	push	r24
    6416:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    6418:	81 e0       	ldi	r24, 0x01	; 1
    641a:	80 93 26 02 	sts	0x0226, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    641e:	9e e0       	ldi	r25, 0x0E	; 14
    6420:	90 93 23 02 	sts	0x0223, r25

	firstSampleLeft = 1;
    6424:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    6428:	9f 91       	pop	r25
    642a:	8f 91       	pop	r24
    642c:	0f 90       	pop	r0
    642e:	0f be       	out	0x3f, r0	; 63
    6430:	0f 90       	pop	r0
    6432:	1f 90       	pop	r1
    6434:	18 95       	reti

00006436 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    6436:	1f 92       	push	r1
    6438:	0f 92       	push	r0
    643a:	0f b6       	in	r0, 0x3f	; 63
    643c:	0f 92       	push	r0
    643e:	11 24       	eor	r1, r1
    6440:	8f 93       	push	r24
    6442:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    6444:	81 e0       	ldi	r24, 0x01	; 1
    6446:	80 93 26 02 	sts	0x0226, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    644a:	9f e0       	ldi	r25, 0x0F	; 15
    644c:	90 93 23 02 	sts	0x0223, r25

	firstSampleLeft = 1;
    6450:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    6454:	9f 91       	pop	r25
    6456:	8f 91       	pop	r24
    6458:	0f 90       	pop	r0
    645a:	0f be       	out	0x3f, r0	; 63
    645c:	0f 90       	pop	r0
    645e:	1f 90       	pop	r1
    6460:	18 95       	reti

00006462 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    6462:	1f 92       	push	r1
    6464:	0f 92       	push	r0
    6466:	0f b6       	in	r0, 0x3f	; 63
    6468:	0f 92       	push	r0
    646a:	11 24       	eor	r1, r1
    646c:	8f 93       	push	r24
    646e:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    6470:	80 91 63 04 	lds	r24, 0x0463
    6474:	88 23       	and	r24, r24
    6476:	61 f0       	breq	.+24     	; 0x6490 <__vector_35+0x2e>
		pwm_right = 0;
    6478:	10 92 f4 02 	sts	0x02F4, r1
    647c:	10 92 f3 02 	sts	0x02F3, r1
		OCR3A = 0;
    6480:	10 92 99 00 	sts	0x0099, r1
    6484:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    6488:	10 92 9b 00 	sts	0x009B, r1
    648c:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    6490:	10 92 e2 02 	sts	0x02E2, r1
    6494:	10 92 e1 02 	sts	0x02E1, r1


	if(pwm_right == 0) {
    6498:	80 91 f3 02 	lds	r24, 0x02F3
    649c:	90 91 f4 02 	lds	r25, 0x02F4
    64a0:	00 97       	sbiw	r24, 0x00	; 0
    64a2:	31 f5       	brne	.+76     	; 0x64f0 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    64a4:	80 91 e7 02 	lds	r24, 0x02E7
    64a8:	90 91 e8 02 	lds	r25, 0x02E8
    64ac:	97 fd       	sbrc	r25, 7
    64ae:	5f c0       	rjmp	.+190    	; 0x656e <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    64b0:	81 e0       	ldi	r24, 0x01	; 1
    64b2:	80 93 25 02 	sts	0x0225, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    64b6:	8c e0       	ldi	r24, 0x0C	; 12
    64b8:	80 93 24 02 	sts	0x0224, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    64bc:	81 e0       	ldi	r24, 0x01	; 1
    64be:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    64c2:	80 91 90 00 	lds	r24, 0x0090
    64c6:	8f 75       	andi	r24, 0x5F	; 95
    64c8:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    64cc:	8e b1       	in	r24, 0x0e	; 14
    64ce:	87 7e       	andi	r24, 0xE7	; 231
    64d0:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    64d2:	80 91 71 00 	lds	r24, 0x0071
    64d6:	89 7f       	andi	r24, 0xF9	; 249
    64d8:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    64dc:	88 b3       	in	r24, 0x18	; 24
    64de:	86 60       	ori	r24, 0x06	; 6
    64e0:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    64e2:	9f 91       	pop	r25
    64e4:	8f 91       	pop	r24
    64e6:	0f 90       	pop	r0
    64e8:	0f be       	out	0x3f, r0	; 63
    64ea:	0f 90       	pop	r0
    64ec:	1f 90       	pop	r1
    64ee:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    64f0:	18 16       	cp	r1, r24
    64f2:	19 06       	cpc	r1, r25
    64f4:	0c f5       	brge	.+66     	; 0x6538 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    64f6:	10 92 25 02 	sts	0x0225, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    64fa:	8d e0       	ldi	r24, 0x0D	; 13
    64fc:	80 93 24 02 	sts	0x0224, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    6500:	80 91 90 00 	lds	r24, 0x0090
    6504:	8f 7d       	andi	r24, 0xDF	; 223
    6506:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    650a:	80 91 71 00 	lds	r24, 0x0071
    650e:	8b 7f       	andi	r24, 0xFB	; 251
    6510:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    6514:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    6516:	80 91 90 00 	lds	r24, 0x0090
    651a:	80 68       	ori	r24, 0x80	; 128
    651c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    6520:	80 91 71 00 	lds	r24, 0x0071
    6524:	82 60       	ori	r24, 0x02	; 2
    6526:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    652a:	9f 91       	pop	r25
    652c:	8f 91       	pop	r24
    652e:	0f 90       	pop	r0
    6530:	0f be       	out	0x3f, r0	; 63
    6532:	0f 90       	pop	r0
    6534:	1f 90       	pop	r1
    6536:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    6538:	10 92 25 02 	sts	0x0225, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    653c:	8c e0       	ldi	r24, 0x0C	; 12
    653e:	80 93 24 02 	sts	0x0224, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    6542:	80 91 90 00 	lds	r24, 0x0090
    6546:	8f 77       	andi	r24, 0x7F	; 127
    6548:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    654c:	80 91 71 00 	lds	r24, 0x0071
    6550:	8d 7f       	andi	r24, 0xFD	; 253
    6552:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    6556:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    6558:	80 91 90 00 	lds	r24, 0x0090
    655c:	80 62       	ori	r24, 0x20	; 32
    655e:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    6562:	80 91 71 00 	lds	r24, 0x0071
    6566:	84 60       	ori	r24, 0x04	; 4
    6568:	80 93 71 00 	sts	0x0071, r24
    656c:	ba cf       	rjmp	.-140    	; 0x64e2 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    656e:	81 e0       	ldi	r24, 0x01	; 1
    6570:	80 93 25 02 	sts	0x0225, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    6574:	8d e0       	ldi	r24, 0x0D	; 13
    6576:	80 93 24 02 	sts	0x0224, r24
    657a:	a0 cf       	rjmp	.-192    	; 0x64bc <__vector_35+0x5a>

0000657c <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    657c:	1f 92       	push	r1
    657e:	0f 92       	push	r0
    6580:	0f b6       	in	r0, 0x3f	; 63
    6582:	0f 92       	push	r0
    6584:	11 24       	eor	r1, r1
    6586:	8f 93       	push	r24
    6588:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    658a:	81 e0       	ldi	r24, 0x01	; 1
    658c:	80 93 25 02 	sts	0x0225, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    6590:	9c e0       	ldi	r25, 0x0C	; 12
    6592:	90 93 24 02 	sts	0x0224, r25

	firstSampleRight = 1;
    6596:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    659a:	9f 91       	pop	r25
    659c:	8f 91       	pop	r24
    659e:	0f 90       	pop	r0
    65a0:	0f be       	out	0x3f, r0	; 63
    65a2:	0f 90       	pop	r0
    65a4:	1f 90       	pop	r1
    65a6:	18 95       	reti

000065a8 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    65a8:	1f 92       	push	r1
    65aa:	0f 92       	push	r0
    65ac:	0f b6       	in	r0, 0x3f	; 63
    65ae:	0f 92       	push	r0
    65b0:	11 24       	eor	r1, r1
    65b2:	8f 93       	push	r24
    65b4:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    65b6:	81 e0       	ldi	r24, 0x01	; 1
    65b8:	80 93 25 02 	sts	0x0225, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    65bc:	9d e0       	ldi	r25, 0x0D	; 13
    65be:	90 93 24 02 	sts	0x0224, r25

	firstSampleRight = 1;
    65c2:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    65c6:	9f 91       	pop	r25
    65c8:	8f 91       	pop	r24
    65ca:	0f 90       	pop	r0
    65cc:	0f be       	out	0x3f, r0	; 63
    65ce:	0f 90       	pop	r0
    65d0:	1f 90       	pop	r1
    65d2:	18 95       	reti

000065d4 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    65d4:	80 91 94 00 	lds	r24, 0x0094
    65d8:	90 91 95 00 	lds	r25, 0x0095
    65dc:	0e 94 23 41 	call	0x8246	; 0x8246 <srand>

}
    65e0:	08 95       	ret

000065e2 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    65e2:	2f 92       	push	r2
    65e4:	3f 92       	push	r3
    65e6:	4f 92       	push	r4
    65e8:	5f 92       	push	r5
    65ea:	6f 92       	push	r6
    65ec:	7f 92       	push	r7
    65ee:	8f 92       	push	r8
    65f0:	9f 92       	push	r9
    65f2:	af 92       	push	r10
    65f4:	bf 92       	push	r11
    65f6:	cf 92       	push	r12
    65f8:	df 92       	push	r13
    65fa:	ef 92       	push	r14
    65fc:	ff 92       	push	r15
    65fe:	0f 93       	push	r16
    6600:	1f 93       	push	r17
    6602:	df 93       	push	r29
    6604:	cf 93       	push	r28
    6606:	cd b7       	in	r28, 0x3d	; 61
    6608:	de b7       	in	r29, 0x3e	; 62
    660a:	28 97       	sbiw	r28, 0x08	; 8
    660c:	0f b6       	in	r0, 0x3f	; 63
    660e:	f8 94       	cli
    6610:	de bf       	out	0x3e, r29	; 62
    6612:	0f be       	out	0x3f, r0	; 63
    6614:	cd bf       	out	0x3d, r28	; 61
    6616:	2c 01       	movw	r4, r24
    6618:	7a 83       	std	Y+2, r23	; 0x02
    661a:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    661c:	fc 01       	movw	r30, r24
    661e:	01 90       	ld	r0, Z+
    6620:	f0 81       	ld	r31, Z
    6622:	e0 2d       	mov	r30, r0
    6624:	fc 83       	std	Y+4, r31	; 0x04
    6626:	eb 83       	std	Y+3, r30	; 0x03
    6628:	fb 01       	movw	r30, r22
    662a:	01 90       	ld	r0, Z+
    662c:	f0 81       	ld	r31, Z
    662e:	e0 2d       	mov	r30, r0
    6630:	fe 83       	std	Y+6, r31	; 0x06
    6632:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6634:	60 91 bf 02 	lds	r22, 0x02BF
    6638:	70 91 c0 02 	lds	r23, 0x02C0
    663c:	65 30       	cpi	r22, 0x05	; 5
    663e:	71 05       	cpc	r23, r1
    6640:	34 f4       	brge	.+12     	; 0x664e <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    6642:	10 92 c0 02 	sts	0x02C0, r1
    6646:	10 92 bf 02 	sts	0x02BF, r1
    664a:	60 e0       	ldi	r22, 0x00	; 0
    664c:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    664e:	40 91 c1 02 	lds	r20, 0x02C1
    6652:	50 91 c2 02 	lds	r21, 0x02C2
    6656:	45 30       	cpi	r20, 0x05	; 5
    6658:	51 05       	cpc	r21, r1
    665a:	34 f4       	brge	.+12     	; 0x6668 <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    665c:	10 92 c2 02 	sts	0x02C2, r1
    6660:	10 92 c1 02 	sts	0x02C1, r1
    6664:	40 e0       	ldi	r20, 0x00	; 0
    6666:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6668:	80 91 c3 02 	lds	r24, 0x02C3
    666c:	90 91 c4 02 	lds	r25, 0x02C4
    6670:	85 30       	cpi	r24, 0x05	; 5
    6672:	91 05       	cpc	r25, r1
    6674:	24 f4       	brge	.+8      	; 0x667e <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    6676:	10 92 c4 02 	sts	0x02C4, r1
    667a:	10 92 c3 02 	sts	0x02C3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    667e:	00 91 c5 02 	lds	r16, 0x02C5
    6682:	10 91 c6 02 	lds	r17, 0x02C6
    6686:	05 30       	cpi	r16, 0x05	; 5
    6688:	11 05       	cpc	r17, r1
    668a:	34 f4       	brge	.+12     	; 0x6698 <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    668c:	10 92 c6 02 	sts	0x02C6, r1
    6690:	10 92 c5 02 	sts	0x02C5, r1
    6694:	00 e0       	ldi	r16, 0x00	; 0
    6696:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6698:	60 90 c7 02 	lds	r6, 0x02C7
    669c:	70 90 c8 02 	lds	r7, 0x02C8
    66a0:	f5 e0       	ldi	r31, 0x05	; 5
    66a2:	6f 16       	cp	r6, r31
    66a4:	71 04       	cpc	r7, r1
    66a6:	34 f4       	brge	.+12     	; 0x66b4 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    66a8:	10 92 c8 02 	sts	0x02C8, r1
    66ac:	10 92 c7 02 	sts	0x02C7, r1
    66b0:	66 24       	eor	r6, r6
    66b2:	77 24       	eor	r7, r7
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    66b4:	20 91 c9 02 	lds	r18, 0x02C9
    66b8:	30 91 ca 02 	lds	r19, 0x02CA
    66bc:	25 30       	cpi	r18, 0x05	; 5
    66be:	31 05       	cpc	r19, r1
    66c0:	34 f4       	brge	.+12     	; 0x66ce <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    66c2:	10 92 ca 02 	sts	0x02CA, r1
    66c6:	10 92 c9 02 	sts	0x02C9, r1
    66ca:	20 e0       	ldi	r18, 0x00	; 0
    66cc:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    66ce:	80 91 cb 02 	lds	r24, 0x02CB
    66d2:	90 91 cc 02 	lds	r25, 0x02CC
    66d6:	85 30       	cpi	r24, 0x05	; 5
    66d8:	91 05       	cpc	r25, r1
    66da:	24 f4       	brge	.+8      	; 0x66e4 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    66dc:	10 92 cc 02 	sts	0x02CC, r1
    66e0:	10 92 cb 02 	sts	0x02CB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    66e4:	80 91 cd 02 	lds	r24, 0x02CD
    66e8:	90 91 ce 02 	lds	r25, 0x02CE
    66ec:	85 30       	cpi	r24, 0x05	; 5
    66ee:	91 05       	cpc	r25, r1
    66f0:	34 f4       	brge	.+12     	; 0x66fe <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    66f2:	10 92 ce 02 	sts	0x02CE, r1
    66f6:	10 92 cd 02 	sts	0x02CD, r1
    66fa:	80 e0       	ldi	r24, 0x00	; 0
    66fc:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    66fe:	ee 24       	eor	r14, r14
    6700:	ff 24       	eor	r15, r15
    6702:	e6 1a       	sub	r14, r22
    6704:	f7 0a       	sbc	r15, r23
    6706:	5a 01       	movw	r10, r20
    6708:	b5 94       	asr	r11
    670a:	a7 94       	ror	r10
    670c:	15 95       	asr	r17
    670e:	07 95       	ror	r16
    6710:	69 01       	movw	r12, r18
    6712:	d5 94       	asr	r13
    6714:	c7 94       	ror	r12
    6716:	4c 01       	movw	r8, r24
    6718:	95 94       	asr	r9
    671a:	87 94       	ror	r8
    671c:	0e 94 1e 41 	call	0x823c	; 0x823c <rand>
    6720:	93 01       	movw	r18, r6
    6722:	2e 51       	subi	r18, 0x1E	; 30
    6724:	30 40       	sbci	r19, 0x00	; 0
    6726:	2e 0d       	add	r18, r14
    6728:	3f 1d       	adc	r19, r15
    672a:	20 0f       	add	r18, r16
    672c:	31 1f       	adc	r19, r17
    672e:	2c 0d       	add	r18, r12
    6730:	3d 1d       	adc	r19, r13
    6732:	2a 19       	sub	r18, r10
    6734:	3b 09       	sbc	r19, r11
    6736:	28 19       	sub	r18, r8
    6738:	39 09       	sbc	r19, r9
    673a:	1c e3       	ldi	r17, 0x3C	; 60
    673c:	21 2e       	mov	r2, r17
    673e:	31 2c       	mov	r3, r1
    6740:	b1 01       	movw	r22, r2
    6742:	0e 94 80 40 	call	0x8100	; 0x8100 <__divmodhi4>
    6746:	28 0f       	add	r18, r24
    6748:	39 1f       	adc	r19, r25
    674a:	38 87       	std	Y+8, r19	; 0x08
    674c:	2f 83       	std	Y+7, r18	; 0x07
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    674e:	e0 90 c1 02 	lds	r14, 0x02C1
    6752:	f0 90 c2 02 	lds	r15, 0x02C2
    6756:	f5 94       	asr	r15
    6758:	e7 94       	ror	r14
    675a:	00 91 c3 02 	lds	r16, 0x02C3
    675e:	10 91 c4 02 	lds	r17, 0x02C4
    6762:	15 95       	asr	r17
    6764:	07 95       	ror	r16
    6766:	15 95       	asr	r17
    6768:	07 95       	ror	r16
    676a:	c0 90 c5 02 	lds	r12, 0x02C5
    676e:	d0 90 c6 02 	lds	r13, 0x02C6
    6772:	d5 94       	asr	r13
    6774:	c7 94       	ror	r12
    6776:	a0 90 c9 02 	lds	r10, 0x02C9
    677a:	b0 90 ca 02 	lds	r11, 0x02CA
    677e:	b5 94       	asr	r11
    6780:	a7 94       	ror	r10
    6782:	60 90 cb 02 	lds	r6, 0x02CB
    6786:	70 90 cc 02 	lds	r7, 0x02CC
    678a:	75 94       	asr	r7
    678c:	67 94       	ror	r6
    678e:	75 94       	asr	r7
    6790:	67 94       	ror	r6
    6792:	80 90 cd 02 	lds	r8, 0x02CD
    6796:	90 90 ce 02 	lds	r9, 0x02CE
    679a:	95 94       	asr	r9
    679c:	87 94       	ror	r8
    679e:	0e 94 1e 41 	call	0x823c	; 0x823c <rand>
    67a2:	97 01       	movw	r18, r14
    67a4:	20 0f       	add	r18, r16
    67a6:	31 1f       	adc	r19, r17
    67a8:	2e 51       	subi	r18, 0x1E	; 30
    67aa:	30 40       	sbci	r19, 0x00	; 0
    67ac:	2c 0d       	add	r18, r12
    67ae:	3d 1d       	adc	r19, r13
    67b0:	2a 19       	sub	r18, r10
    67b2:	3b 09       	sbc	r19, r11
    67b4:	28 19       	sub	r18, r8
    67b6:	39 09       	sbc	r19, r9
    67b8:	26 19       	sub	r18, r6
    67ba:	37 09       	sbc	r19, r7
    67bc:	b1 01       	movw	r22, r2
    67be:	0e 94 80 40 	call	0x8100	; 0x8100 <__divmodhi4>
    67c2:	28 0f       	add	r18, r24
    67c4:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    67c6:	8b 81       	ldd	r24, Y+3	; 0x03
    67c8:	9c 81       	ldd	r25, Y+4	; 0x04
    67ca:	97 fd       	sbrc	r25, 7
    67cc:	97 c0       	rjmp	.+302    	; 0x68fc <obstacleAvoidance+0x31a>
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    67ce:	5c 01       	movw	r10, r24
    67d0:	cc 24       	eor	r12, r12
    67d2:	b7 fc       	sbrc	r11, 7
    67d4:	c0 94       	com	r12
    67d6:	dc 2c       	mov	r13, r12
    67d8:	ef 81       	ldd	r30, Y+7	; 0x07
    67da:	f8 85       	ldd	r31, Y+8	; 0x08
    67dc:	3f 01       	movw	r6, r30
    67de:	88 24       	eor	r8, r8
    67e0:	77 fc       	sbrc	r7, 7
    67e2:	80 94       	com	r8
    67e4:	98 2c       	mov	r9, r8
    67e6:	79 01       	movw	r14, r18
    67e8:	00 27       	eor	r16, r16
    67ea:	f7 fc       	sbrc	r15, 7
    67ec:	00 95       	com	r16
    67ee:	10 2f       	mov	r17, r16
    67f0:	c4 01       	movw	r24, r8
    67f2:	b3 01       	movw	r22, r6
    67f4:	6e 19       	sub	r22, r14
    67f6:	7f 09       	sbc	r23, r15
    67f8:	80 0b       	sbc	r24, r16
    67fa:	91 0b       	sbc	r25, r17
    67fc:	a6 01       	movw	r20, r12
    67fe:	95 01       	movw	r18, r10
    6800:	0e 94 4d 40 	call	0x809a	; 0x809a <__mulsi3>
    6804:	56 e0       	ldi	r21, 0x06	; 6
    6806:	95 95       	asr	r25
    6808:	87 95       	ror	r24
    680a:	77 95       	ror	r23
    680c:	67 95       	ror	r22
    680e:	5a 95       	dec	r21
    6810:	d1 f7       	brne	.-12     	; 0x6806 <obstacleAvoidance+0x224>
    6812:	6a 0d       	add	r22, r10
    6814:	7b 1d       	adc	r23, r11
    6816:	8c 1d       	adc	r24, r12
    6818:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    681a:	f2 01       	movw	r30, r4
    681c:	71 83       	std	Z+1, r23	; 0x01
    681e:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    6820:	2d 81       	ldd	r18, Y+5	; 0x05
    6822:	3e 81       	ldd	r19, Y+6	; 0x06
    6824:	37 fd       	sbrc	r19, 7
    6826:	97 c0       	rjmp	.+302    	; 0x6956 <obstacleAvoidance+0x374>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    6828:	59 01       	movw	r10, r18
    682a:	cc 24       	eor	r12, r12
    682c:	b7 fc       	sbrc	r11, 7
    682e:	c0 94       	com	r12
    6830:	dc 2c       	mov	r13, r12
    6832:	c8 01       	movw	r24, r16
    6834:	b7 01       	movw	r22, r14
    6836:	66 0d       	add	r22, r6
    6838:	77 1d       	adc	r23, r7
    683a:	88 1d       	adc	r24, r8
    683c:	99 1d       	adc	r25, r9
    683e:	a6 01       	movw	r20, r12
    6840:	95 01       	movw	r18, r10
    6842:	0e 94 4d 40 	call	0x809a	; 0x809a <__mulsi3>
    6846:	36 e0       	ldi	r19, 0x06	; 6
    6848:	95 95       	asr	r25
    684a:	87 95       	ror	r24
    684c:	77 95       	ror	r23
    684e:	67 95       	ror	r22
    6850:	3a 95       	dec	r19
    6852:	d1 f7       	brne	.-12     	; 0x6848 <obstacleAvoidance+0x266>
    6854:	6a 0d       	add	r22, r10
    6856:	7b 1d       	adc	r23, r11
    6858:	8c 1d       	adc	r24, r12
    685a:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    685c:	9b 01       	movw	r18, r22
    685e:	e9 81       	ldd	r30, Y+1	; 0x01
    6860:	fa 81       	ldd	r31, Y+2	; 0x02
    6862:	71 83       	std	Z+1, r23	; 0x01
    6864:	60 83       	st	Z, r22
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}
		
	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    6866:	f2 e0       	ldi	r31, 0x02	; 2
    6868:	21 30       	cpi	r18, 0x01	; 1
    686a:	3f 07       	cpc	r19, r31
    686c:	44 f0       	brlt	.+16     	; 0x687e <obstacleAvoidance+0x29c>
    686e:	80 e0       	ldi	r24, 0x00	; 0
    6870:	92 e0       	ldi	r25, 0x02	; 2
    6872:	e9 81       	ldd	r30, Y+1	; 0x01
    6874:	fa 81       	ldd	r31, Y+2	; 0x02
    6876:	91 83       	std	Z+1, r25	; 0x01
    6878:	80 83       	st	Z, r24
    687a:	20 e0       	ldi	r18, 0x00	; 0
    687c:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    687e:	f2 01       	movw	r30, r4
    6880:	80 81       	ld	r24, Z
    6882:	91 81       	ldd	r25, Z+1	; 0x01
    6884:	f2 e0       	ldi	r31, 0x02	; 2
    6886:	81 30       	cpi	r24, 0x01	; 1
    6888:	9f 07       	cpc	r25, r31
    688a:	4c f0       	brlt	.+18     	; 0x689e <obstacleAvoidance+0x2bc>
    688c:	80 e0       	ldi	r24, 0x00	; 0
    688e:	92 e0       	ldi	r25, 0x02	; 2
    6890:	f2 01       	movw	r30, r4
    6892:	91 83       	std	Z+1, r25	; 0x01
    6894:	80 83       	st	Z, r24
    6896:	e9 81       	ldd	r30, Y+1	; 0x01
    6898:	fa 81       	ldd	r31, Y+2	; 0x02
    689a:	20 81       	ld	r18, Z
    689c:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    689e:	fe ef       	ldi	r31, 0xFE	; 254
    68a0:	20 30       	cpi	r18, 0x00	; 0
    68a2:	3f 07       	cpc	r19, r31
    68a4:	4c f4       	brge	.+18     	; 0x68b8 <obstacleAvoidance+0x2d6>
    68a6:	80 e0       	ldi	r24, 0x00	; 0
    68a8:	9e ef       	ldi	r25, 0xFE	; 254
    68aa:	e9 81       	ldd	r30, Y+1	; 0x01
    68ac:	fa 81       	ldd	r31, Y+2	; 0x02
    68ae:	91 83       	std	Z+1, r25	; 0x01
    68b0:	80 83       	st	Z, r24
    68b2:	f2 01       	movw	r30, r4
    68b4:	80 81       	ld	r24, Z
    68b6:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    68b8:	fe ef       	ldi	r31, 0xFE	; 254
    68ba:	80 30       	cpi	r24, 0x00	; 0
    68bc:	9f 07       	cpc	r25, r31
    68be:	2c f4       	brge	.+10     	; 0x68ca <obstacleAvoidance+0x2e8>
    68c0:	80 e0       	ldi	r24, 0x00	; 0
    68c2:	9e ef       	ldi	r25, 0xFE	; 254
    68c4:	f2 01       	movw	r30, r4
    68c6:	91 83       	std	Z+1, r25	; 0x01
    68c8:	80 83       	st	Z, r24

}
    68ca:	28 96       	adiw	r28, 0x08	; 8
    68cc:	0f b6       	in	r0, 0x3f	; 63
    68ce:	f8 94       	cli
    68d0:	de bf       	out	0x3e, r29	; 62
    68d2:	0f be       	out	0x3f, r0	; 63
    68d4:	cd bf       	out	0x3d, r28	; 61
    68d6:	cf 91       	pop	r28
    68d8:	df 91       	pop	r29
    68da:	1f 91       	pop	r17
    68dc:	0f 91       	pop	r16
    68de:	ff 90       	pop	r15
    68e0:	ef 90       	pop	r14
    68e2:	df 90       	pop	r13
    68e4:	cf 90       	pop	r12
    68e6:	bf 90       	pop	r11
    68e8:	af 90       	pop	r10
    68ea:	9f 90       	pop	r9
    68ec:	8f 90       	pop	r8
    68ee:	7f 90       	pop	r7
    68f0:	6f 90       	pop	r6
    68f2:	5f 90       	pop	r5
    68f4:	4f 90       	pop	r4
    68f6:	3f 90       	pop	r3
    68f8:	2f 90       	pop	r2
    68fa:	08 95       	ret
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)desL * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)desL * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    68fc:	5c 01       	movw	r10, r24
    68fe:	cc 24       	eor	r12, r12
    6900:	b7 fc       	sbrc	r11, 7
    6902:	c0 94       	com	r12
    6904:	dc 2c       	mov	r13, r12
    6906:	ef 81       	ldd	r30, Y+7	; 0x07
    6908:	f8 85       	ldd	r31, Y+8	; 0x08
    690a:	3f 01       	movw	r6, r30
    690c:	88 24       	eor	r8, r8
    690e:	77 fc       	sbrc	r7, 7
    6910:	80 94       	com	r8
    6912:	98 2c       	mov	r9, r8
    6914:	79 01       	movw	r14, r18
    6916:	00 27       	eor	r16, r16
    6918:	f7 fc       	sbrc	r15, 7
    691a:	00 95       	com	r16
    691c:	10 2f       	mov	r17, r16
    691e:	c8 01       	movw	r24, r16
    6920:	b7 01       	movw	r22, r14
    6922:	66 0d       	add	r22, r6
    6924:	77 1d       	adc	r23, r7
    6926:	88 1d       	adc	r24, r8
    6928:	99 1d       	adc	r25, r9
    692a:	a6 01       	movw	r20, r12
    692c:	95 01       	movw	r18, r10
    692e:	0e 94 4d 40 	call	0x809a	; 0x809a <__mulsi3>
    6932:	46 e0       	ldi	r20, 0x06	; 6
    6934:	95 95       	asr	r25
    6936:	87 95       	ror	r24
    6938:	77 95       	ror	r23
    693a:	67 95       	ror	r22
    693c:	4a 95       	dec	r20
    693e:	d1 f7       	brne	.-12     	; 0x6934 <obstacleAvoidance+0x352>
    6940:	a6 1a       	sub	r10, r22
    6942:	b7 0a       	sbc	r11, r23
    6944:	c8 0a       	sbc	r12, r24
    6946:	d9 0a       	sbc	r13, r25
		*pwmLeft = (signed int)res;
    6948:	f2 01       	movw	r30, r4
    694a:	b1 82       	std	Z+1, r11	; 0x01
    694c:	a0 82       	st	Z, r10
	}
	if(desR >=0) {
    694e:	2d 81       	ldd	r18, Y+5	; 0x05
    6950:	3e 81       	ldd	r19, Y+6	; 0x06
    6952:	37 ff       	sbrs	r19, 7
    6954:	69 cf       	rjmp	.-302    	; 0x6828 <obstacleAvoidance+0x246>
		res = (signed long int)desR + (((signed long int)desR * ((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)desR * ((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    6956:	59 01       	movw	r10, r18
    6958:	cc 24       	eor	r12, r12
    695a:	b7 fc       	sbrc	r11, 7
    695c:	c0 94       	com	r12
    695e:	dc 2c       	mov	r13, r12
    6960:	c4 01       	movw	r24, r8
    6962:	b3 01       	movw	r22, r6
    6964:	6e 19       	sub	r22, r14
    6966:	7f 09       	sbc	r23, r15
    6968:	80 0b       	sbc	r24, r16
    696a:	91 0b       	sbc	r25, r17
    696c:	a6 01       	movw	r20, r12
    696e:	95 01       	movw	r18, r10
    6970:	0e 94 4d 40 	call	0x809a	; 0x809a <__mulsi3>
    6974:	26 e0       	ldi	r18, 0x06	; 6
    6976:	95 95       	asr	r25
    6978:	87 95       	ror	r24
    697a:	77 95       	ror	r23
    697c:	67 95       	ror	r22
    697e:	2a 95       	dec	r18
    6980:	d1 f7       	brne	.-12     	; 0x6976 <obstacleAvoidance+0x394>
    6982:	a6 1a       	sub	r10, r22
    6984:	b7 0a       	sbc	r11, r23
    6986:	c8 0a       	sbc	r12, r24
    6988:	d9 0a       	sbc	r13, r25
		*pwmRight = (signed int)res;
    698a:	95 01       	movw	r18, r10
    698c:	e9 81       	ldd	r30, Y+1	; 0x01
    698e:	fa 81       	ldd	r31, Y+2	; 0x02
    6990:	b1 82       	std	Z+1, r11	; 0x01
    6992:	a0 82       	st	Z, r10
    6994:	68 cf       	rjmp	.-304    	; 0x6866 <obstacleAvoidance+0x284>

00006996 <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    6996:	80 91 67 02 	lds	r24, 0x0267
    699a:	90 91 68 02 	lds	r25, 0x0268
    699e:	21 e0       	ldi	r18, 0x01	; 1
    69a0:	84 3a       	cpi	r24, 0xA4	; 164
    69a2:	92 07       	cpc	r25, r18
    69a4:	d4 f0       	brlt	.+52     	; 0x69da <cliffDetected+0x44>
    69a6:	80 91 69 02 	lds	r24, 0x0269
    69aa:	90 91 6a 02 	lds	r25, 0x026A
    69ae:	21 e0       	ldi	r18, 0x01	; 1
    69b0:	84 3a       	cpi	r24, 0xA4	; 164
    69b2:	92 07       	cpc	r25, r18
    69b4:	94 f0       	brlt	.+36     	; 0x69da <cliffDetected+0x44>
    69b6:	80 91 6b 02 	lds	r24, 0x026B
    69ba:	90 91 6c 02 	lds	r25, 0x026C
    69be:	21 e0       	ldi	r18, 0x01	; 1
    69c0:	84 3a       	cpi	r24, 0xA4	; 164
    69c2:	92 07       	cpc	r25, r18
    69c4:	74 f0       	brlt	.+28     	; 0x69e2 <cliffDetected+0x4c>
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    69c6:	81 e0       	ldi	r24, 0x01	; 1
    69c8:	20 91 6d 02 	lds	r18, 0x026D
    69cc:	30 91 6e 02 	lds	r19, 0x026E
    69d0:	91 e0       	ldi	r25, 0x01	; 1
    69d2:	24 3a       	cpi	r18, 0xA4	; 164
    69d4:	39 07       	cpc	r19, r25
    69d6:	1c f4       	brge	.+6      	; 0x69de <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    69d8:	08 95       	ret
char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    69da:	81 e0       	ldi	r24, 0x01	; 1
    69dc:	08 95       	ret
    69de:	80 e0       	ldi	r24, 0x00	; 0
    69e0:	08 95       	ret
    69e2:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    69e4:	08 95       	ret

000069e6 <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    69e6:	81 e0       	ldi	r24, 0x01	; 1
    69e8:	80 93 61 04 	sts	0x0461, r24
}
    69ec:	08 95       	ret

000069ee <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    69ee:	10 92 61 04 	sts	0x0461, r1
}
    69f2:	08 95       	ret

000069f4 <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    69f4:	81 e0       	ldi	r24, 0x01	; 1
    69f6:	80 93 62 04 	sts	0x0462, r24
}
    69fa:	08 95       	ret

000069fc <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    69fc:	10 92 62 04 	sts	0x0462, r1
}
    6a00:	08 95       	ret

00006a02 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    6a02:	a0 e8       	ldi	r26, 0x80	; 128
    6a04:	b0 e0       	ldi	r27, 0x00	; 0
    6a06:	1c 92       	st	X, r1
	TCCR1B = 0;
    6a08:	e1 e8       	ldi	r30, 0x81	; 129
    6a0a:	f0 e0       	ldi	r31, 0x00	; 0
    6a0c:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    6a0e:	8c 91       	ld	r24, X
    6a10:	89 6a       	ori	r24, 0xA9	; 169
    6a12:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    6a14:	80 81       	ld	r24, Z
    6a16:	89 60       	ori	r24, 0x09	; 9
    6a18:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    6a1a:	80 91 0c 02 	lds	r24, 0x020C
    6a1e:	90 e0       	ldi	r25, 0x00	; 0
    6a20:	90 93 89 00 	sts	0x0089, r25
    6a24:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    6a28:	80 91 0d 02 	lds	r24, 0x020D
    6a2c:	90 e0       	ldi	r25, 0x00	; 0
    6a2e:	90 93 8b 00 	sts	0x008B, r25
    6a32:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    6a36:	80 91 0e 02 	lds	r24, 0x020E
    6a3a:	90 e0       	ldi	r25, 0x00	; 0
    6a3c:	90 93 8d 00 	sts	0x008D, r25
    6a40:	80 93 8c 00 	sts	0x008C, r24

}
    6a44:	08 95       	ret

00006a46 <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    6a46:	81 e0       	ldi	r24, 0x01	; 1
    6a48:	90 91 17 03 	lds	r25, 0x0317
    6a4c:	89 1b       	sub	r24, r25
    6a4e:	80 93 17 03 	sts	0x0317, r24

	if(blinkState) {
    6a52:	88 23       	and	r24, r24
    6a54:	39 f4       	brne	.+14     	; 0x6a64 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    6a56:	80 91 80 00 	lds	r24, 0x0080
    6a5a:	87 7f       	andi	r24, 0xF7	; 247
    6a5c:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    6a60:	2f 98       	cbi	0x05, 7	; 5
    6a62:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    6a64:	80 91 80 00 	lds	r24, 0x0080
    6a68:	88 60       	ori	r24, 0x08	; 8
    6a6a:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    6a6e:	8f ef       	ldi	r24, 0xFF	; 255
    6a70:	90 e0       	ldi	r25, 0x00	; 0
    6a72:	90 93 8d 00 	sts	0x008D, r25
    6a76:	80 93 8c 00 	sts	0x008C, r24
    6a7a:	08 95       	ret

00006a7c <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    6a7c:	88 23       	and	r24, r24
    6a7e:	59 f0       	breq	.+22     	; 0x6a96 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    6a80:	90 91 80 00 	lds	r25, 0x0080
    6a84:	90 68       	ori	r25, 0x80	; 128
    6a86:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    6a8a:	90 e0       	ldi	r25, 0x00	; 0
    6a8c:	90 93 89 00 	sts	0x0089, r25
    6a90:	80 93 88 00 	sts	0x0088, r24
    6a94:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    6a96:	80 91 80 00 	lds	r24, 0x0080
    6a9a:	8f 77       	andi	r24, 0x7F	; 127
    6a9c:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    6aa0:	2d 98       	cbi	0x05, 5	; 5
    6aa2:	08 95       	ret

00006aa4 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    6aa4:	88 23       	and	r24, r24
    6aa6:	59 f0       	breq	.+22     	; 0x6abe <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    6aa8:	90 91 80 00 	lds	r25, 0x0080
    6aac:	90 62       	ori	r25, 0x20	; 32
    6aae:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    6ab2:	90 e0       	ldi	r25, 0x00	; 0
    6ab4:	90 93 8b 00 	sts	0x008B, r25
    6ab8:	80 93 8a 00 	sts	0x008A, r24
    6abc:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    6abe:	80 91 80 00 	lds	r24, 0x0080
    6ac2:	8f 7d       	andi	r24, 0xDF	; 223
    6ac4:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    6ac8:	2e 98       	cbi	0x05, 6	; 5
    6aca:	08 95       	ret

00006acc <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    6acc:	88 23       	and	r24, r24
    6ace:	59 f0       	breq	.+22     	; 0x6ae6 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    6ad0:	90 91 80 00 	lds	r25, 0x0080
    6ad4:	98 60       	ori	r25, 0x08	; 8
    6ad6:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    6ada:	90 e0       	ldi	r25, 0x00	; 0
    6adc:	90 93 8d 00 	sts	0x008D, r25
    6ae0:	80 93 8c 00 	sts	0x008C, r24
    6ae4:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    6ae6:	80 91 80 00 	lds	r24, 0x0080
    6aea:	87 7f       	andi	r24, 0xF7	; 247
    6aec:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    6af0:	2f 98       	cbi	0x05, 7	; 5
    6af2:	08 95       	ret

00006af4 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6af4:	83 30       	cpi	r24, 0x03	; 3
    6af6:	09 f4       	brne	.+2      	; 0x6afa <setGreenLed+0x6>
    6af8:	5a c0       	rjmp	.+180    	; 0x6bae <setGreenLed+0xba>
    6afa:	84 30       	cpi	r24, 0x04	; 4
    6afc:	80 f0       	brcs	.+32     	; 0x6b1e <setGreenLed+0x2a>
    6afe:	85 30       	cpi	r24, 0x05	; 5
    6b00:	09 f4       	brne	.+2      	; 0x6b04 <setGreenLed+0x10>
    6b02:	41 c0       	rjmp	.+130    	; 0x6b86 <setGreenLed+0x92>
    6b04:	85 30       	cpi	r24, 0x05	; 5
    6b06:	d0 f4       	brcc	.+52     	; 0x6b3c <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    6b08:	66 23       	and	r22, r22
    6b0a:	09 f4       	brne	.+2      	; 0x6b0e <setGreenLed+0x1a>
    6b0c:	68 c0       	rjmp	.+208    	; 0x6bde <setGreenLed+0xea>
    6b0e:	80 91 0b 01 	lds	r24, 0x010B
    6b12:	8f 7e       	andi	r24, 0xEF	; 239
    6b14:	80 93 0b 01 	sts	0x010B, r24
    6b18:	80 91 0b 01 	lds	r24, 0x010B
    6b1c:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6b1e:	81 30       	cpi	r24, 0x01	; 1
    6b20:	e1 f1       	breq	.+120    	; 0x6b9a <setGreenLed+0xa6>
    6b22:	82 30       	cpi	r24, 0x02	; 2
    6b24:	80 f0       	brcs	.+32     	; 0x6b46 <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    6b26:	66 23       	and	r22, r22
    6b28:	09 f4       	brne	.+2      	; 0x6b2c <setGreenLed+0x38>
    6b2a:	46 c0       	rjmp	.+140    	; 0x6bb8 <setGreenLed+0xc4>
    6b2c:	80 91 0b 01 	lds	r24, 0x010B
    6b30:	8b 7f       	andi	r24, 0xFB	; 251
    6b32:	80 93 0b 01 	sts	0x010B, r24
    6b36:	80 91 0b 01 	lds	r24, 0x010B
    6b3a:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    6b3c:	86 30       	cpi	r24, 0x06	; 6
    6b3e:	c9 f0       	breq	.+50     	; 0x6b72 <setGreenLed+0x7e>
    6b40:	87 30       	cpi	r24, 0x07	; 7
    6b42:	61 f0       	breq	.+24     	; 0x6b5c <setGreenLed+0x68>
    6b44:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    6b46:	66 23       	and	r22, r22
    6b48:	09 f4       	brne	.+2      	; 0x6b4c <setGreenLed+0x58>
    6b4a:	51 c0       	rjmp	.+162    	; 0x6bee <setGreenLed+0xfa>
    6b4c:	80 91 0b 01 	lds	r24, 0x010B
    6b50:	8e 7f       	andi	r24, 0xFE	; 254
    6b52:	80 93 0b 01 	sts	0x010B, r24
    6b56:	80 91 0b 01 	lds	r24, 0x010B
    6b5a:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    6b5c:	66 23       	and	r22, r22
    6b5e:	09 f0       	breq	.+2      	; 0x6b62 <setGreenLed+0x6e>
    6b60:	5e c0       	rjmp	.+188    	; 0x6c1e <setGreenLed+0x12a>
    6b62:	80 91 0b 01 	lds	r24, 0x010B
    6b66:	80 68       	ori	r24, 0x80	; 128
    6b68:	80 93 0b 01 	sts	0x010B, r24
    6b6c:	80 91 0b 01 	lds	r24, 0x010B
    6b70:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    6b72:	66 23       	and	r22, r22
    6b74:	49 f1       	breq	.+82     	; 0x6bc8 <setGreenLed+0xd4>
    6b76:	80 91 0b 01 	lds	r24, 0x010B
    6b7a:	8f 7b       	andi	r24, 0xBF	; 191
    6b7c:	80 93 0b 01 	sts	0x010B, r24
    6b80:	80 91 0b 01 	lds	r24, 0x010B
    6b84:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    6b86:	66 23       	and	r22, r22
    6b88:	d1 f1       	breq	.+116    	; 0x6bfe <setGreenLed+0x10a>
    6b8a:	80 91 0b 01 	lds	r24, 0x010B
    6b8e:	8f 7d       	andi	r24, 0xDF	; 223
    6b90:	80 93 0b 01 	sts	0x010B, r24
    6b94:	80 91 0b 01 	lds	r24, 0x010B
    6b98:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    6b9a:	66 23       	and	r22, r22
    6b9c:	c1 f1       	breq	.+112    	; 0x6c0e <setGreenLed+0x11a>
    6b9e:	80 91 0b 01 	lds	r24, 0x010B
    6ba2:	8d 7f       	andi	r24, 0xFD	; 253
    6ba4:	80 93 0b 01 	sts	0x010B, r24
    6ba8:	80 91 0b 01 	lds	r24, 0x010B
    6bac:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    6bae:	66 23       	and	r22, r22
    6bb0:	99 f0       	breq	.+38     	; 0x6bd8 <setGreenLed+0xe4>
    6bb2:	a3 98       	cbi	0x14, 3	; 20
    6bb4:	84 b3       	in	r24, 0x14	; 20
    6bb6:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    6bb8:	80 91 0b 01 	lds	r24, 0x010B
    6bbc:	84 60       	ori	r24, 0x04	; 4
    6bbe:	80 93 0b 01 	sts	0x010B, r24
    6bc2:	80 91 0b 01 	lds	r24, 0x010B
    6bc6:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    6bc8:	80 91 0b 01 	lds	r24, 0x010B
    6bcc:	80 64       	ori	r24, 0x40	; 64
    6bce:	80 93 0b 01 	sts	0x010B, r24
    6bd2:	80 91 0b 01 	lds	r24, 0x010B
    6bd6:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    6bd8:	a3 9a       	sbi	0x14, 3	; 20
    6bda:	84 b3       	in	r24, 0x14	; 20
    6bdc:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    6bde:	80 91 0b 01 	lds	r24, 0x010B
    6be2:	80 61       	ori	r24, 0x10	; 16
    6be4:	80 93 0b 01 	sts	0x010B, r24
    6be8:	80 91 0b 01 	lds	r24, 0x010B
    6bec:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    6bee:	80 91 0b 01 	lds	r24, 0x010B
    6bf2:	81 60       	ori	r24, 0x01	; 1
    6bf4:	80 93 0b 01 	sts	0x010B, r24
    6bf8:	80 91 0b 01 	lds	r24, 0x010B
    6bfc:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    6bfe:	80 91 0b 01 	lds	r24, 0x010B
    6c02:	80 62       	ori	r24, 0x20	; 32
    6c04:	80 93 0b 01 	sts	0x010B, r24
    6c08:	80 91 0b 01 	lds	r24, 0x010B
    6c0c:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    6c0e:	80 91 0b 01 	lds	r24, 0x010B
    6c12:	82 60       	ori	r24, 0x02	; 2
    6c14:	80 93 0b 01 	sts	0x010B, r24
    6c18:	80 91 0b 01 	lds	r24, 0x010B
    6c1c:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    6c1e:	80 91 0b 01 	lds	r24, 0x010B
    6c22:	8f 77       	andi	r24, 0x7F	; 127
    6c24:	80 93 0b 01 	sts	0x010B, r24
    6c28:	80 91 0b 01 	lds	r24, 0x010B
    6c2c:	08 95       	ret

00006c2e <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    6c2e:	eb e0       	ldi	r30, 0x0B	; 11
    6c30:	f1 e0       	ldi	r31, 0x01	; 1
    6c32:	80 81       	ld	r24, Z
    6c34:	81 60       	ori	r24, 0x01	; 1
    6c36:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    6c38:	80 81       	ld	r24, Z
    6c3a:	82 60       	ori	r24, 0x02	; 2
    6c3c:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    6c3e:	80 81       	ld	r24, Z
    6c40:	84 60       	ori	r24, 0x04	; 4
    6c42:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    6c44:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    6c46:	80 81       	ld	r24, Z
    6c48:	80 61       	ori	r24, 0x10	; 16
    6c4a:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    6c4c:	80 81       	ld	r24, Z
    6c4e:	80 62       	ori	r24, 0x20	; 32
    6c50:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    6c52:	80 81       	ld	r24, Z
    6c54:	80 64       	ori	r24, 0x40	; 64
    6c56:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    6c58:	80 81       	ld	r24, Z
    6c5a:	80 68       	ori	r24, 0x80	; 128
    6c5c:	80 83       	st	Z, r24

}
    6c5e:	08 95       	ret

00006c60 <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    6c60:	eb e0       	ldi	r30, 0x0B	; 11
    6c62:	f1 e0       	ldi	r31, 0x01	; 1
    6c64:	80 81       	ld	r24, Z
    6c66:	8e 7f       	andi	r24, 0xFE	; 254
    6c68:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    6c6a:	80 81       	ld	r24, Z
    6c6c:	8d 7f       	andi	r24, 0xFD	; 253
    6c6e:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    6c70:	80 81       	ld	r24, Z
    6c72:	8b 7f       	andi	r24, 0xFB	; 251
    6c74:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    6c76:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    6c78:	80 81       	ld	r24, Z
    6c7a:	8f 7e       	andi	r24, 0xEF	; 239
    6c7c:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    6c7e:	80 81       	ld	r24, Z
    6c80:	8f 7d       	andi	r24, 0xDF	; 223
    6c82:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    6c84:	80 81       	ld	r24, Z
    6c86:	8f 7b       	andi	r24, 0xBF	; 191
    6c88:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    6c8a:	80 81       	ld	r24, Z
    6c8c:	8f 77       	andi	r24, 0x7F	; 127
    6c8e:	80 83       	st	Z, r24

}
    6c90:	08 95       	ret

00006c92 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    6c92:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6c96:	80 91 14 02 	lds	r24, 0x0214
    6c9a:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6c9e:	88 23       	and	r24, r24
    6ca0:	49 f4       	brne	.+18     	; 0x6cb4 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    6ca2:	86 e1       	ldi	r24, 0x16	; 22
    6ca4:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    6ca8:	85 e4       	ldi	r24, 0x45	; 69
    6caa:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6cae:	0e 94 4f 1a 	call	0x349e	; 0x349e <i2c_stop>
    6cb2:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    6cb4:	0e 94 4f 1a 	call	0x349e	; 0x349e <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    6cb8:	86 ea       	ldi	r24, 0xA6	; 166
    6cba:	90 e0       	ldi	r25, 0x00	; 0
    6cbc:	90 93 15 02 	sts	0x0215, r25
    6cc0:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6cc4:	86 ea       	ldi	r24, 0xA6	; 166
    6cc6:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6cca:	88 23       	and	r24, r24
    6ccc:	41 f5       	brne	.+80     	; 0x6d1e <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    6cce:	8d e2       	ldi	r24, 0x2D	; 45
    6cd0:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
        i2c_write(0x08);	// measurement mode
    6cd4:	88 e0       	ldi	r24, 0x08	; 8
    6cd6:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6cda:	0e 94 4f 1a 	call	0x349e	; 0x349e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6cde:	80 91 14 02 	lds	r24, 0x0214
    6ce2:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6ce6:	88 23       	and	r24, r24
    6ce8:	d1 f4       	brne	.+52     	; 0x6d1e <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    6cea:	81 e3       	ldi	r24, 0x31	; 49
    6cec:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    6cf0:	80 e0       	ldi	r24, 0x00	; 0
    6cf2:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6cf6:	0e 94 4f 1a 	call	0x349e	; 0x349e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6cfa:	80 91 14 02 	lds	r24, 0x0214
    6cfe:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6d02:	88 23       	and	r24, r24
    6d04:	61 f4       	brne	.+24     	; 0x6d1e <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    6d06:	8c e2       	ldi	r24, 0x2C	; 44
    6d08:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    6d0c:	89 e0       	ldi	r24, 0x09	; 9
    6d0e:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6d12:	0e 94 4f 1a 	call	0x349e	; 0x349e <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    6d16:	81 e0       	ldi	r24, 0x01	; 1
    6d18:	80 93 27 04 	sts	0x0427, r24
    6d1c:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    6d1e:	0e 94 4f 1a 	call	0x349e	; 0x349e <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    6d22:	82 e0       	ldi	r24, 0x02	; 2
    6d24:	80 93 27 04 	sts	0x0427, r24
    6d28:	08 95       	ret

00006d2a <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6d2a:	80 91 14 02 	lds	r24, 0x0214
    6d2e:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6d32:	88 23       	and	r24, r24
    6d34:	51 f4       	brne	.+20     	; 0x6d4a <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    6d36:	86 e1       	ldi	r24, 0x16	; 22
    6d38:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    6d3c:	85 e4       	ldi	r24, 0x45	; 69
    6d3e:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6d42:	0e 94 4f 1a 	call	0x349e	; 0x349e <i2c_stop>
    }

	return 0;				// configuration ok
    6d46:	80 e0       	ldi	r24, 0x00	; 0

}
    6d48:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    6d4a:	0e 94 4f 1a 	call	0x349e	; 0x349e <i2c_stop>
		return 1;
    6d4e:	81 e0       	ldi	r24, 0x01	; 1
    6d50:	08 95       	ret

00006d52 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6d52:	80 91 14 02 	lds	r24, 0x0214
    6d56:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6d5a:	88 23       	and	r24, r24
    6d5c:	31 f5       	brne	.+76     	; 0x6daa <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    6d5e:	8d e2       	ldi	r24, 0x2D	; 45
    6d60:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
        i2c_write(0x08);	// measurement mode
    6d64:	88 e0       	ldi	r24, 0x08	; 8
    6d66:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6d6a:	0e 94 4f 1a 	call	0x349e	; 0x349e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6d6e:	80 91 14 02 	lds	r24, 0x0214
    6d72:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6d76:	88 23       	and	r24, r24
    6d78:	c1 f4       	brne	.+48     	; 0x6daa <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    6d7a:	81 e3       	ldi	r24, 0x31	; 49
    6d7c:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    6d80:	80 e0       	ldi	r24, 0x00	; 0
    6d82:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6d86:	0e 94 4f 1a 	call	0x349e	; 0x349e <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    6d8a:	80 91 14 02 	lds	r24, 0x0214
    6d8e:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    6d92:	88 23       	and	r24, r24
    6d94:	51 f4       	brne	.+20     	; 0x6daa <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    6d96:	8c e2       	ldi	r24, 0x2C	; 44
    6d98:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    6d9c:	89 e0       	ldi	r24, 0x09	; 9
    6d9e:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    6da2:	0e 94 4f 1a 	call	0x349e	; 0x349e <i2c_stop>
    }

	return 0;
    6da6:	80 e0       	ldi	r24, 0x00	; 0

}
    6da8:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    6daa:	0e 94 4f 1a 	call	0x349e	; 0x349e <i2c_stop>
		return 1;
    6dae:	81 e0       	ldi	r24, 0x01	; 1
    6db0:	08 95       	ret

00006db2 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    6db2:	ff 92       	push	r15
    6db4:	0f 93       	push	r16
    6db6:	1f 93       	push	r17
    6db8:	df 93       	push	r29
    6dba:	cf 93       	push	r28
    6dbc:	0f 92       	push	r0
    6dbe:	cd b7       	in	r28, 0x3d	; 61
    6dc0:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    6dc2:	80 91 27 04 	lds	r24, 0x0427
    6dc6:	88 23       	and	r24, r24
    6dc8:	91 f0       	breq	.+36     	; 0x6dee <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    6dca:	81 30       	cpi	r24, 0x01	; 1
    6dcc:	09 f4       	brne	.+2      	; 0x6dd0 <readAccelXY+0x1e>
    6dce:	88 c0       	rjmp	.+272    	; 0x6ee0 <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    6dd0:	10 92 29 04 	sts	0x0429, r1
    6dd4:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    6dd8:	10 92 2b 04 	sts	0x042B, r1
    6ddc:	10 92 2a 04 	sts	0x042A, r1

	}

}
    6de0:	0f 90       	pop	r0
    6de2:	cf 91       	pop	r28
    6de4:	df 91       	pop	r29
    6de6:	1f 91       	pop	r17
    6de8:	0f 91       	pop	r16
    6dea:	ff 90       	pop	r15
    6dec:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    6dee:	80 91 14 02 	lds	r24, 0x0214
    6df2:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    6df6:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    6df8:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    6dfc:	80 91 14 02 	lds	r24, 0x0214
    6e00:	8f 5f       	subi	r24, 0xFF	; 255
    6e02:	0e 94 29 1a 	call	0x3452	; 0x3452 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    6e06:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <i2c_readAck>
    6e0a:	08 2f       	mov	r16, r24
    6e0c:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <i2c_readAck>
    6e10:	f8 2e       	mov	r15, r24
    6e12:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <i2c_readAck>
    6e16:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    6e18:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    6e1c:	89 83       	std	Y+1, r24	; 0x01
    6e1e:	0e 94 4f 1a 	call	0x349e	; 0x349e <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    6e22:	90 91 84 05 	lds	r25, 0x0584
    6e26:	89 81       	ldd	r24, Y+1	; 0x01
    6e28:	99 23       	and	r25, r25
    6e2a:	39 f1       	breq	.+78     	; 0x6e7a <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    6e2c:	4f 2d       	mov	r20, r15
    6e2e:	55 27       	eor	r21, r21
    6e30:	47 fd       	sbrc	r20, 7
    6e32:	50 95       	com	r21
    6e34:	54 2f       	mov	r21, r20
    6e36:	44 27       	eor	r20, r20
    6e38:	60 2f       	mov	r22, r16
    6e3a:	77 27       	eor	r23, r23
    6e3c:	67 fd       	sbrc	r22, 7
    6e3e:	70 95       	com	r23
    6e40:	46 2b       	or	r20, r22
    6e42:	57 2b       	or	r21, r23
    6e44:	50 93 29 04 	sts	0x0429, r21
    6e48:	40 93 28 04 	sts	0x0428, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    6e4c:	28 2f       	mov	r18, r24
    6e4e:	33 27       	eor	r19, r19
    6e50:	27 fd       	sbrc	r18, 7
    6e52:	30 95       	com	r19
    6e54:	32 2f       	mov	r19, r18
    6e56:	22 27       	eor	r18, r18
    6e58:	81 2f       	mov	r24, r17
    6e5a:	99 27       	eor	r25, r25
    6e5c:	87 fd       	sbrc	r24, 7
    6e5e:	90 95       	com	r25
    6e60:	28 2b       	or	r18, r24
    6e62:	39 2b       	or	r19, r25
    6e64:	30 93 2b 04 	sts	0x042B, r19
    6e68:	20 93 2a 04 	sts	0x042A, r18
		accX = 0;
		accY = 0;

	}

}
    6e6c:	0f 90       	pop	r0
    6e6e:	cf 91       	pop	r28
    6e70:	df 91       	pop	r29
    6e72:	1f 91       	pop	r17
    6e74:	0f 91       	pop	r16
    6e76:	ff 90       	pop	r15
    6e78:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    6e7a:	4f 2d       	mov	r20, r15
    6e7c:	55 27       	eor	r21, r21
    6e7e:	47 fd       	sbrc	r20, 7
    6e80:	50 95       	com	r21
    6e82:	54 2f       	mov	r21, r20
    6e84:	44 27       	eor	r20, r20
    6e86:	60 2f       	mov	r22, r16
    6e88:	77 27       	eor	r23, r23
    6e8a:	67 fd       	sbrc	r22, 7
    6e8c:	70 95       	com	r23
    6e8e:	46 2b       	or	r20, r22
    6e90:	57 2b       	or	r21, r23
    6e92:	60 91 2e 04 	lds	r22, 0x042E
    6e96:	70 91 2f 04 	lds	r23, 0x042F
    6e9a:	46 1b       	sub	r20, r22
    6e9c:	57 0b       	sbc	r21, r23
    6e9e:	50 93 29 04 	sts	0x0429, r21
    6ea2:	40 93 28 04 	sts	0x0428, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    6ea6:	28 2f       	mov	r18, r24
    6ea8:	33 27       	eor	r19, r19
    6eaa:	27 fd       	sbrc	r18, 7
    6eac:	30 95       	com	r19
    6eae:	32 2f       	mov	r19, r18
    6eb0:	22 27       	eor	r18, r18
    6eb2:	81 2f       	mov	r24, r17
    6eb4:	99 27       	eor	r25, r25
    6eb6:	87 fd       	sbrc	r24, 7
    6eb8:	90 95       	com	r25
    6eba:	28 2b       	or	r18, r24
    6ebc:	39 2b       	or	r19, r25
    6ebe:	80 91 30 04 	lds	r24, 0x0430
    6ec2:	90 91 31 04 	lds	r25, 0x0431
    6ec6:	28 1b       	sub	r18, r24
    6ec8:	39 0b       	sbc	r19, r25
    6eca:	30 93 2b 04 	sts	0x042B, r19
    6ece:	20 93 2a 04 	sts	0x042A, r18
		accX = 0;
		accY = 0;

	}

}
    6ed2:	0f 90       	pop	r0
    6ed4:	cf 91       	pop	r28
    6ed6:	df 91       	pop	r29
    6ed8:	1f 91       	pop	r17
    6eda:	0f 91       	pop	r16
    6edc:	ff 90       	pop	r15
    6ede:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    6ee0:	80 91 14 02 	lds	r24, 0x0214
    6ee4:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    6ee8:	82 e3       	ldi	r24, 0x32	; 50
    6eea:	86 cf       	rjmp	.-244    	; 0x6df8 <readAccelXY+0x46>

00006eec <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    6eec:	df 93       	push	r29
    6eee:	cf 93       	push	r28
    6ef0:	00 d0       	rcall	.+0      	; 0x6ef2 <readAccelXYZ+0x6>
    6ef2:	00 d0       	rcall	.+0      	; 0x6ef4 <readAccelXYZ+0x8>
    6ef4:	cd b7       	in	r28, 0x3d	; 61
    6ef6:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    6ef8:	80 91 27 04 	lds	r24, 0x0427
    6efc:	88 23       	and	r24, r24
    6efe:	c1 f0       	breq	.+48     	; 0x6f30 <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    6f00:	81 30       	cpi	r24, 0x01	; 1
    6f02:	09 f4       	brne	.+2      	; 0x6f06 <readAccelXYZ+0x1a>
    6f04:	ad c0       	rjmp	.+346    	; 0x7060 <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    6f06:	10 92 29 04 	sts	0x0429, r1
    6f0a:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    6f0e:	10 92 2b 04 	sts	0x042B, r1
    6f12:	10 92 2a 04 	sts	0x042A, r1
		accZ = 0;
    6f16:	10 92 2d 04 	sts	0x042D, r1
    6f1a:	10 92 2c 04 	sts	0x042C, r1

	}

}
    6f1e:	26 96       	adiw	r28, 0x06	; 6
    6f20:	0f b6       	in	r0, 0x3f	; 63
    6f22:	f8 94       	cli
    6f24:	de bf       	out	0x3e, r29	; 62
    6f26:	0f be       	out	0x3f, r0	; 63
    6f28:	cd bf       	out	0x3d, r28	; 61
    6f2a:	cf 91       	pop	r28
    6f2c:	df 91       	pop	r29
    6f2e:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    6f30:	80 91 14 02 	lds	r24, 0x0214
    6f34:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    6f38:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    6f3a:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    6f3e:	80 91 14 02 	lds	r24, 0x0214
    6f42:	8f 5f       	subi	r24, 0xFF	; 255
    6f44:	0e 94 29 1a 	call	0x3452	; 0x3452 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    6f48:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <i2c_readAck>
    6f4c:	89 83       	std	Y+1, r24	; 0x01
    6f4e:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <i2c_readAck>
    6f52:	8a 83       	std	Y+2, r24	; 0x02
    6f54:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <i2c_readAck>
    6f58:	8b 83       	std	Y+3, r24	; 0x03
    6f5a:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <i2c_readAck>
    6f5e:	8c 83       	std	Y+4, r24	; 0x04
    6f60:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <i2c_readAck>
    6f64:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    6f66:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <i2c_readNak>
    6f6a:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    6f6c:	0e 94 4f 1a 	call	0x349e	; 0x349e <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    6f70:	80 91 84 05 	lds	r24, 0x0584
    6f74:	88 23       	and	r24, r24
    6f76:	89 f1       	breq	.+98     	; 0x6fda <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    6f78:	8a 81       	ldd	r24, Y+2	; 0x02
    6f7a:	99 27       	eor	r25, r25
    6f7c:	87 fd       	sbrc	r24, 7
    6f7e:	90 95       	com	r25
    6f80:	98 2f       	mov	r25, r24
    6f82:	88 27       	eor	r24, r24
    6f84:	29 81       	ldd	r18, Y+1	; 0x01
    6f86:	33 27       	eor	r19, r19
    6f88:	27 fd       	sbrc	r18, 7
    6f8a:	30 95       	com	r19
    6f8c:	82 2b       	or	r24, r18
    6f8e:	93 2b       	or	r25, r19
    6f90:	90 93 29 04 	sts	0x0429, r25
    6f94:	80 93 28 04 	sts	0x0428, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    6f98:	8c 81       	ldd	r24, Y+4	; 0x04
    6f9a:	99 27       	eor	r25, r25
    6f9c:	87 fd       	sbrc	r24, 7
    6f9e:	90 95       	com	r25
    6fa0:	98 2f       	mov	r25, r24
    6fa2:	88 27       	eor	r24, r24
    6fa4:	2b 81       	ldd	r18, Y+3	; 0x03
    6fa6:	33 27       	eor	r19, r19
    6fa8:	27 fd       	sbrc	r18, 7
    6faa:	30 95       	com	r19
    6fac:	82 2b       	or	r24, r18
    6fae:	93 2b       	or	r25, r19
    6fb0:	90 93 2b 04 	sts	0x042B, r25
    6fb4:	80 93 2a 04 	sts	0x042A, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    6fb8:	8e 81       	ldd	r24, Y+6	; 0x06
    6fba:	99 27       	eor	r25, r25
    6fbc:	87 fd       	sbrc	r24, 7
    6fbe:	90 95       	com	r25
    6fc0:	98 2f       	mov	r25, r24
    6fc2:	88 27       	eor	r24, r24
    6fc4:	2d 81       	ldd	r18, Y+5	; 0x05
    6fc6:	33 27       	eor	r19, r19
    6fc8:	27 fd       	sbrc	r18, 7
    6fca:	30 95       	com	r19
    6fcc:	82 2b       	or	r24, r18
    6fce:	93 2b       	or	r25, r19
    6fd0:	90 93 2d 04 	sts	0x042D, r25
    6fd4:	80 93 2c 04 	sts	0x042C, r24
    6fd8:	a2 cf       	rjmp	.-188    	; 0x6f1e <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    6fda:	8a 81       	ldd	r24, Y+2	; 0x02
    6fdc:	99 27       	eor	r25, r25
    6fde:	87 fd       	sbrc	r24, 7
    6fe0:	90 95       	com	r25
    6fe2:	98 2f       	mov	r25, r24
    6fe4:	88 27       	eor	r24, r24
    6fe6:	29 81       	ldd	r18, Y+1	; 0x01
    6fe8:	33 27       	eor	r19, r19
    6fea:	27 fd       	sbrc	r18, 7
    6fec:	30 95       	com	r19
    6fee:	82 2b       	or	r24, r18
    6ff0:	93 2b       	or	r25, r19
    6ff2:	20 91 2e 04 	lds	r18, 0x042E
    6ff6:	30 91 2f 04 	lds	r19, 0x042F
    6ffa:	82 1b       	sub	r24, r18
    6ffc:	93 0b       	sbc	r25, r19
    6ffe:	90 93 29 04 	sts	0x0429, r25
    7002:	80 93 28 04 	sts	0x0428, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    7006:	8c 81       	ldd	r24, Y+4	; 0x04
    7008:	99 27       	eor	r25, r25
    700a:	87 fd       	sbrc	r24, 7
    700c:	90 95       	com	r25
    700e:	98 2f       	mov	r25, r24
    7010:	88 27       	eor	r24, r24
    7012:	2b 81       	ldd	r18, Y+3	; 0x03
    7014:	33 27       	eor	r19, r19
    7016:	27 fd       	sbrc	r18, 7
    7018:	30 95       	com	r19
    701a:	82 2b       	or	r24, r18
    701c:	93 2b       	or	r25, r19
    701e:	20 91 30 04 	lds	r18, 0x0430
    7022:	30 91 31 04 	lds	r19, 0x0431
    7026:	82 1b       	sub	r24, r18
    7028:	93 0b       	sbc	r25, r19
    702a:	90 93 2b 04 	sts	0x042B, r25
    702e:	80 93 2a 04 	sts	0x042A, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    7032:	8e 81       	ldd	r24, Y+6	; 0x06
    7034:	99 27       	eor	r25, r25
    7036:	87 fd       	sbrc	r24, 7
    7038:	90 95       	com	r25
    703a:	98 2f       	mov	r25, r24
    703c:	88 27       	eor	r24, r24
    703e:	2d 81       	ldd	r18, Y+5	; 0x05
    7040:	33 27       	eor	r19, r19
    7042:	27 fd       	sbrc	r18, 7
    7044:	30 95       	com	r19
    7046:	82 2b       	or	r24, r18
    7048:	93 2b       	or	r25, r19
    704a:	20 91 32 04 	lds	r18, 0x0432
    704e:	30 91 33 04 	lds	r19, 0x0433
    7052:	82 1b       	sub	r24, r18
    7054:	93 0b       	sbc	r25, r19
    7056:	90 93 2d 04 	sts	0x042D, r25
    705a:	80 93 2c 04 	sts	0x042C, r24
    705e:	5f cf       	rjmp	.-322    	; 0x6f1e <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    7060:	80 91 14 02 	lds	r24, 0x0214
    7064:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7068:	82 e3       	ldi	r24, 0x32	; 50
    706a:	67 cf       	rjmp	.-306    	; 0x6f3a <readAccelXYZ+0x4e>

0000706c <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    706c:	cf 93       	push	r28
    706e:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    7070:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    7074:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    7078:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    707c:	80 e0       	ldi	r24, 0x00	; 0
    707e:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <updateRedLed>
	updateGreenLed(pwm_green);
    7082:	80 91 0d 02 	lds	r24, 0x020D
    7086:	0e 94 52 35 	call	0x6aa4	; 0x6aa4 <updateGreenLed>
	updateBlueLed(pwm_blue);
    708a:	80 91 0e 02 	lds	r24, 0x020E
    708e:	0e 94 66 35 	call	0x6acc	; 0x6acc <updateBlueLed>

	calibrationCycle = 0;
    7092:	10 92 4a 04 	sts	0x044A, r1
    7096:	10 92 49 04 	sts	0x0449, r1
	startCalibration = 1;
    709a:	81 e0       	ldi	r24, 0x01	; 1
    709c:	80 93 84 05 	sts	0x0584, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    70a0:	c1 e0       	ldi	r28, 0x01	; 1
    70a2:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    70a4:	0e 94 76 37 	call	0x6eec	; 0x6eec <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    70a8:	20 91 49 04 	lds	r18, 0x0449
    70ac:	30 91 4a 04 	lds	r19, 0x044A
    70b0:	21 31       	cpi	r18, 0x11	; 17
    70b2:	31 05       	cpc	r19, r1
    70b4:	0c f4       	brge	.+2      	; 0x70b8 <calibrateSensors+0x4c>
    70b6:	35 c1       	rjmp	.+618    	; 0x7322 <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    70b8:	80 91 87 02 	lds	r24, 0x0287
    70bc:	90 91 88 02 	lds	r25, 0x0288
    70c0:	a0 91 89 02 	lds	r26, 0x0289
    70c4:	b0 91 8a 02 	lds	r27, 0x028A
    70c8:	54 e0       	ldi	r21, 0x04	; 4
    70ca:	b6 95       	lsr	r27
    70cc:	a7 95       	ror	r26
    70ce:	97 95       	ror	r25
    70d0:	87 95       	ror	r24
    70d2:	5a 95       	dec	r21
    70d4:	d1 f7       	brne	.-12     	; 0x70ca <calibrateSensors+0x5e>
    70d6:	90 93 70 02 	sts	0x0270, r25
    70da:	80 93 6f 02 	sts	0x026F, r24
    70de:	80 91 8b 02 	lds	r24, 0x028B
    70e2:	90 91 8c 02 	lds	r25, 0x028C
    70e6:	a0 91 8d 02 	lds	r26, 0x028D
    70ea:	b0 91 8e 02 	lds	r27, 0x028E
    70ee:	44 e0       	ldi	r20, 0x04	; 4
    70f0:	b6 95       	lsr	r27
    70f2:	a7 95       	ror	r26
    70f4:	97 95       	ror	r25
    70f6:	87 95       	ror	r24
    70f8:	4a 95       	dec	r20
    70fa:	d1 f7       	brne	.-12     	; 0x70f0 <calibrateSensors+0x84>
    70fc:	90 93 72 02 	sts	0x0272, r25
    7100:	80 93 71 02 	sts	0x0271, r24
    7104:	80 91 8f 02 	lds	r24, 0x028F
    7108:	90 91 90 02 	lds	r25, 0x0290
    710c:	a0 91 91 02 	lds	r26, 0x0291
    7110:	b0 91 92 02 	lds	r27, 0x0292
    7114:	34 e0       	ldi	r19, 0x04	; 4
    7116:	b6 95       	lsr	r27
    7118:	a7 95       	ror	r26
    711a:	97 95       	ror	r25
    711c:	87 95       	ror	r24
    711e:	3a 95       	dec	r19
    7120:	d1 f7       	brne	.-12     	; 0x7116 <calibrateSensors+0xaa>
    7122:	90 93 74 02 	sts	0x0274, r25
    7126:	80 93 73 02 	sts	0x0273, r24
    712a:	80 91 93 02 	lds	r24, 0x0293
    712e:	90 91 94 02 	lds	r25, 0x0294
    7132:	a0 91 95 02 	lds	r26, 0x0295
    7136:	b0 91 96 02 	lds	r27, 0x0296
    713a:	24 e0       	ldi	r18, 0x04	; 4
    713c:	b6 95       	lsr	r27
    713e:	a7 95       	ror	r26
    7140:	97 95       	ror	r25
    7142:	87 95       	ror	r24
    7144:	2a 95       	dec	r18
    7146:	d1 f7       	brne	.-12     	; 0x713c <calibrateSensors+0xd0>
    7148:	90 93 76 02 	sts	0x0276, r25
    714c:	80 93 75 02 	sts	0x0275, r24
    7150:	80 91 97 02 	lds	r24, 0x0297
    7154:	90 91 98 02 	lds	r25, 0x0298
    7158:	a0 91 99 02 	lds	r26, 0x0299
    715c:	b0 91 9a 02 	lds	r27, 0x029A
    7160:	f4 e0       	ldi	r31, 0x04	; 4
    7162:	b6 95       	lsr	r27
    7164:	a7 95       	ror	r26
    7166:	97 95       	ror	r25
    7168:	87 95       	ror	r24
    716a:	fa 95       	dec	r31
    716c:	d1 f7       	brne	.-12     	; 0x7162 <calibrateSensors+0xf6>
    716e:	90 93 78 02 	sts	0x0278, r25
    7172:	80 93 77 02 	sts	0x0277, r24
    7176:	80 91 9b 02 	lds	r24, 0x029B
    717a:	90 91 9c 02 	lds	r25, 0x029C
    717e:	a0 91 9d 02 	lds	r26, 0x029D
    7182:	b0 91 9e 02 	lds	r27, 0x029E
    7186:	e4 e0       	ldi	r30, 0x04	; 4
    7188:	b6 95       	lsr	r27
    718a:	a7 95       	ror	r26
    718c:	97 95       	ror	r25
    718e:	87 95       	ror	r24
    7190:	ea 95       	dec	r30
    7192:	d1 f7       	brne	.-12     	; 0x7188 <calibrateSensors+0x11c>
    7194:	90 93 7a 02 	sts	0x027A, r25
    7198:	80 93 79 02 	sts	0x0279, r24
    719c:	80 91 9f 02 	lds	r24, 0x029F
    71a0:	90 91 a0 02 	lds	r25, 0x02A0
    71a4:	a0 91 a1 02 	lds	r26, 0x02A1
    71a8:	b0 91 a2 02 	lds	r27, 0x02A2
    71ac:	74 e0       	ldi	r23, 0x04	; 4
    71ae:	b6 95       	lsr	r27
    71b0:	a7 95       	ror	r26
    71b2:	97 95       	ror	r25
    71b4:	87 95       	ror	r24
    71b6:	7a 95       	dec	r23
    71b8:	d1 f7       	brne	.-12     	; 0x71ae <calibrateSensors+0x142>
    71ba:	90 93 7c 02 	sts	0x027C, r25
    71be:	80 93 7b 02 	sts	0x027B, r24
    71c2:	80 91 a3 02 	lds	r24, 0x02A3
    71c6:	90 91 a4 02 	lds	r25, 0x02A4
    71ca:	a0 91 a5 02 	lds	r26, 0x02A5
    71ce:	b0 91 a6 02 	lds	r27, 0x02A6
    71d2:	64 e0       	ldi	r22, 0x04	; 4
    71d4:	b6 95       	lsr	r27
    71d6:	a7 95       	ror	r26
    71d8:	97 95       	ror	r25
    71da:	87 95       	ror	r24
    71dc:	6a 95       	dec	r22
    71de:	d1 f7       	brne	.-12     	; 0x71d4 <calibrateSensors+0x168>
    71e0:	90 93 7e 02 	sts	0x027E, r25
    71e4:	80 93 7d 02 	sts	0x027D, r24
    71e8:	80 91 ab 02 	lds	r24, 0x02AB
    71ec:	90 91 ac 02 	lds	r25, 0x02AC
    71f0:	a0 91 ad 02 	lds	r26, 0x02AD
    71f4:	b0 91 ae 02 	lds	r27, 0x02AE
    71f8:	54 e0       	ldi	r21, 0x04	; 4
    71fa:	b6 95       	lsr	r27
    71fc:	a7 95       	ror	r26
    71fe:	97 95       	ror	r25
    7200:	87 95       	ror	r24
    7202:	5a 95       	dec	r21
    7204:	d1 f7       	brne	.-12     	; 0x71fa <calibrateSensors+0x18e>
    7206:	9c 01       	movw	r18, r24
    7208:	80 91 af 02 	lds	r24, 0x02AF
    720c:	90 91 b0 02 	lds	r25, 0x02B0
    7210:	a0 91 b1 02 	lds	r26, 0x02B1
    7214:	b0 91 b2 02 	lds	r27, 0x02B2
    7218:	44 e0       	ldi	r20, 0x04	; 4
    721a:	b6 95       	lsr	r27
    721c:	a7 95       	ror	r26
    721e:	97 95       	ror	r25
    7220:	87 95       	ror	r24
    7222:	4a 95       	dec	r20
    7224:	d1 f7       	brne	.-12     	; 0x721a <calibrateSensors+0x1ae>
    7226:	bc 01       	movw	r22, r24
    7228:	80 91 b3 02 	lds	r24, 0x02B3
    722c:	90 91 b4 02 	lds	r25, 0x02B4
    7230:	a0 91 b5 02 	lds	r26, 0x02B5
    7234:	b0 91 b6 02 	lds	r27, 0x02B6
    7238:	f4 e0       	ldi	r31, 0x04	; 4
    723a:	b6 95       	lsr	r27
    723c:	a7 95       	ror	r26
    723e:	97 95       	ror	r25
    7240:	87 95       	ror	r24
    7242:	fa 95       	dec	r31
    7244:	d1 f7       	brne	.-12     	; 0x723a <calibrateSensors+0x1ce>
    7246:	ac 01       	movw	r20, r24
    7248:	80 91 a7 02 	lds	r24, 0x02A7
    724c:	90 91 a8 02 	lds	r25, 0x02A8
    7250:	a0 91 a9 02 	lds	r26, 0x02A9
    7254:	b0 91 aa 02 	lds	r27, 0x02AA
    7258:	e4 e0       	ldi	r30, 0x04	; 4
    725a:	b6 95       	lsr	r27
    725c:	a7 95       	ror	r26
    725e:	97 95       	ror	r25
    7260:	87 95       	ror	r24
    7262:	ea 95       	dec	r30
    7264:	d1 f7       	brne	.-12     	; 0x725a <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    7266:	80 50       	subi	r24, 0x00	; 0
    7268:	92 40       	sbci	r25, 0x02	; 2
    726a:	90 93 80 02 	sts	0x0280, r25
    726e:	80 93 7f 02 	sts	0x027F, r24
    7272:	20 50       	subi	r18, 0x00	; 0
    7274:	32 40       	sbci	r19, 0x02	; 2
    7276:	30 93 82 02 	sts	0x0282, r19
    727a:	20 93 81 02 	sts	0x0281, r18
    727e:	60 50       	subi	r22, 0x00	; 0
    7280:	72 40       	sbci	r23, 0x02	; 2
    7282:	70 93 84 02 	sts	0x0284, r23
    7286:	60 93 83 02 	sts	0x0283, r22
    728a:	40 50       	subi	r20, 0x00	; 0
    728c:	52 40       	sbci	r21, 0x02	; 2
    728e:	50 93 86 02 	sts	0x0286, r21
    7292:	40 93 85 02 	sts	0x0285, r20
			}

			accOffsetX = accOffsetXSum>>4;
    7296:	80 91 34 04 	lds	r24, 0x0434
    729a:	90 91 35 04 	lds	r25, 0x0435
    729e:	95 95       	asr	r25
    72a0:	87 95       	ror	r24
    72a2:	95 95       	asr	r25
    72a4:	87 95       	ror	r24
    72a6:	95 95       	asr	r25
    72a8:	87 95       	ror	r24
    72aa:	95 95       	asr	r25
    72ac:	87 95       	ror	r24
    72ae:	90 93 2f 04 	sts	0x042F, r25
    72b2:	80 93 2e 04 	sts	0x042E, r24
			accOffsetY = accOffsetYSum>>4;
    72b6:	80 91 36 04 	lds	r24, 0x0436
    72ba:	90 91 37 04 	lds	r25, 0x0437
    72be:	95 95       	asr	r25
    72c0:	87 95       	ror	r24
    72c2:	95 95       	asr	r25
    72c4:	87 95       	ror	r24
    72c6:	95 95       	asr	r25
    72c8:	87 95       	ror	r24
    72ca:	95 95       	asr	r25
    72cc:	87 95       	ror	r24
    72ce:	90 93 31 04 	sts	0x0431, r25
    72d2:	80 93 30 04 	sts	0x0430, r24
			accOffsetZ = accOffsetZSum>>4;
    72d6:	80 91 38 04 	lds	r24, 0x0438
    72da:	90 91 39 04 	lds	r25, 0x0439
    72de:	95 95       	asr	r25
    72e0:	87 95       	ror	r24
    72e2:	95 95       	asr	r25
    72e4:	87 95       	ror	r24
    72e6:	95 95       	asr	r25
    72e8:	87 95       	ror	r24
    72ea:	95 95       	asr	r25
    72ec:	87 95       	ror	r24
    72ee:	90 93 33 04 	sts	0x0433, r25
    72f2:	80 93 32 04 	sts	0x0432, r24

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    72f6:	10 92 84 05 	sts	0x0584, r1

		}

	}

	pwm_red = 255;
    72fa:	8f ef       	ldi	r24, 0xFF	; 255
    72fc:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    7300:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    7304:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    7308:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <updateRedLed>
	updateGreenLed(pwm_green);
    730c:	80 91 0d 02 	lds	r24, 0x020D
    7310:	0e 94 52 35 	call	0x6aa4	; 0x6aa4 <updateGreenLed>
	updateBlueLed(pwm_blue);
    7314:	80 91 0e 02 	lds	r24, 0x020E
    7318:	0e 94 66 35 	call	0x6acc	; 0x6acc <updateBlueLed>

}
    731c:	df 91       	pop	r29
    731e:	cf 91       	pop	r28
    7320:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    7322:	80 91 be 02 	lds	r24, 0x02BE
    7326:	88 23       	and	r24, r24
    7328:	09 f4       	brne	.+2      	; 0x732c <calibrateSensors+0x2c0>
    732a:	86 c1       	rjmp	.+780    	; 0x7638 <calibrateSensors+0x5cc>

				proxUpdated = 0;
    732c:	10 92 be 02 	sts	0x02BE, r1

				if(calibrationCycle==0) {		// reset all variables
    7330:	21 15       	cp	r18, r1
    7332:	31 05       	cpc	r19, r1
    7334:	09 f4       	brne	.+2      	; 0x7338 <calibrateSensors+0x2cc>
    7336:	86 c1       	rjmp	.+780    	; 0x7644 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    7338:	80 91 57 02 	lds	r24, 0x0257
    733c:	90 91 58 02 	lds	r25, 0x0258
    7340:	aa 27       	eor	r26, r26
    7342:	97 fd       	sbrc	r25, 7
    7344:	a0 95       	com	r26
    7346:	ba 2f       	mov	r27, r26
    7348:	40 91 87 02 	lds	r20, 0x0287
    734c:	50 91 88 02 	lds	r21, 0x0288
    7350:	60 91 89 02 	lds	r22, 0x0289
    7354:	70 91 8a 02 	lds	r23, 0x028A
    7358:	84 0f       	add	r24, r20
    735a:	95 1f       	adc	r25, r21
    735c:	a6 1f       	adc	r26, r22
    735e:	b7 1f       	adc	r27, r23
    7360:	80 93 87 02 	sts	0x0287, r24
    7364:	90 93 88 02 	sts	0x0288, r25
    7368:	a0 93 89 02 	sts	0x0289, r26
    736c:	b0 93 8a 02 	sts	0x028A, r27
    7370:	80 91 59 02 	lds	r24, 0x0259
    7374:	90 91 5a 02 	lds	r25, 0x025A
    7378:	aa 27       	eor	r26, r26
    737a:	97 fd       	sbrc	r25, 7
    737c:	a0 95       	com	r26
    737e:	ba 2f       	mov	r27, r26
    7380:	40 91 8b 02 	lds	r20, 0x028B
    7384:	50 91 8c 02 	lds	r21, 0x028C
    7388:	60 91 8d 02 	lds	r22, 0x028D
    738c:	70 91 8e 02 	lds	r23, 0x028E
    7390:	84 0f       	add	r24, r20
    7392:	95 1f       	adc	r25, r21
    7394:	a6 1f       	adc	r26, r22
    7396:	b7 1f       	adc	r27, r23
    7398:	80 93 8b 02 	sts	0x028B, r24
    739c:	90 93 8c 02 	sts	0x028C, r25
    73a0:	a0 93 8d 02 	sts	0x028D, r26
    73a4:	b0 93 8e 02 	sts	0x028E, r27
    73a8:	80 91 5b 02 	lds	r24, 0x025B
    73ac:	90 91 5c 02 	lds	r25, 0x025C
    73b0:	aa 27       	eor	r26, r26
    73b2:	97 fd       	sbrc	r25, 7
    73b4:	a0 95       	com	r26
    73b6:	ba 2f       	mov	r27, r26
    73b8:	40 91 8f 02 	lds	r20, 0x028F
    73bc:	50 91 90 02 	lds	r21, 0x0290
    73c0:	60 91 91 02 	lds	r22, 0x0291
    73c4:	70 91 92 02 	lds	r23, 0x0292
    73c8:	84 0f       	add	r24, r20
    73ca:	95 1f       	adc	r25, r21
    73cc:	a6 1f       	adc	r26, r22
    73ce:	b7 1f       	adc	r27, r23
    73d0:	80 93 8f 02 	sts	0x028F, r24
    73d4:	90 93 90 02 	sts	0x0290, r25
    73d8:	a0 93 91 02 	sts	0x0291, r26
    73dc:	b0 93 92 02 	sts	0x0292, r27
    73e0:	80 91 5d 02 	lds	r24, 0x025D
    73e4:	90 91 5e 02 	lds	r25, 0x025E
    73e8:	aa 27       	eor	r26, r26
    73ea:	97 fd       	sbrc	r25, 7
    73ec:	a0 95       	com	r26
    73ee:	ba 2f       	mov	r27, r26
    73f0:	40 91 93 02 	lds	r20, 0x0293
    73f4:	50 91 94 02 	lds	r21, 0x0294
    73f8:	60 91 95 02 	lds	r22, 0x0295
    73fc:	70 91 96 02 	lds	r23, 0x0296
    7400:	84 0f       	add	r24, r20
    7402:	95 1f       	adc	r25, r21
    7404:	a6 1f       	adc	r26, r22
    7406:	b7 1f       	adc	r27, r23
    7408:	80 93 93 02 	sts	0x0293, r24
    740c:	90 93 94 02 	sts	0x0294, r25
    7410:	a0 93 95 02 	sts	0x0295, r26
    7414:	b0 93 96 02 	sts	0x0296, r27
    7418:	80 91 5f 02 	lds	r24, 0x025F
    741c:	90 91 60 02 	lds	r25, 0x0260
    7420:	aa 27       	eor	r26, r26
    7422:	97 fd       	sbrc	r25, 7
    7424:	a0 95       	com	r26
    7426:	ba 2f       	mov	r27, r26
    7428:	40 91 97 02 	lds	r20, 0x0297
    742c:	50 91 98 02 	lds	r21, 0x0298
    7430:	60 91 99 02 	lds	r22, 0x0299
    7434:	70 91 9a 02 	lds	r23, 0x029A
    7438:	84 0f       	add	r24, r20
    743a:	95 1f       	adc	r25, r21
    743c:	a6 1f       	adc	r26, r22
    743e:	b7 1f       	adc	r27, r23
    7440:	80 93 97 02 	sts	0x0297, r24
    7444:	90 93 98 02 	sts	0x0298, r25
    7448:	a0 93 99 02 	sts	0x0299, r26
    744c:	b0 93 9a 02 	sts	0x029A, r27
    7450:	80 91 61 02 	lds	r24, 0x0261
    7454:	90 91 62 02 	lds	r25, 0x0262
    7458:	aa 27       	eor	r26, r26
    745a:	97 fd       	sbrc	r25, 7
    745c:	a0 95       	com	r26
    745e:	ba 2f       	mov	r27, r26
    7460:	40 91 9b 02 	lds	r20, 0x029B
    7464:	50 91 9c 02 	lds	r21, 0x029C
    7468:	60 91 9d 02 	lds	r22, 0x029D
    746c:	70 91 9e 02 	lds	r23, 0x029E
    7470:	84 0f       	add	r24, r20
    7472:	95 1f       	adc	r25, r21
    7474:	a6 1f       	adc	r26, r22
    7476:	b7 1f       	adc	r27, r23
    7478:	80 93 9b 02 	sts	0x029B, r24
    747c:	90 93 9c 02 	sts	0x029C, r25
    7480:	a0 93 9d 02 	sts	0x029D, r26
    7484:	b0 93 9e 02 	sts	0x029E, r27
    7488:	80 91 63 02 	lds	r24, 0x0263
    748c:	90 91 64 02 	lds	r25, 0x0264
    7490:	aa 27       	eor	r26, r26
    7492:	97 fd       	sbrc	r25, 7
    7494:	a0 95       	com	r26
    7496:	ba 2f       	mov	r27, r26
    7498:	40 91 9f 02 	lds	r20, 0x029F
    749c:	50 91 a0 02 	lds	r21, 0x02A0
    74a0:	60 91 a1 02 	lds	r22, 0x02A1
    74a4:	70 91 a2 02 	lds	r23, 0x02A2
    74a8:	84 0f       	add	r24, r20
    74aa:	95 1f       	adc	r25, r21
    74ac:	a6 1f       	adc	r26, r22
    74ae:	b7 1f       	adc	r27, r23
    74b0:	80 93 9f 02 	sts	0x029F, r24
    74b4:	90 93 a0 02 	sts	0x02A0, r25
    74b8:	a0 93 a1 02 	sts	0x02A1, r26
    74bc:	b0 93 a2 02 	sts	0x02A2, r27
    74c0:	80 91 65 02 	lds	r24, 0x0265
    74c4:	90 91 66 02 	lds	r25, 0x0266
    74c8:	aa 27       	eor	r26, r26
    74ca:	97 fd       	sbrc	r25, 7
    74cc:	a0 95       	com	r26
    74ce:	ba 2f       	mov	r27, r26
    74d0:	40 91 a3 02 	lds	r20, 0x02A3
    74d4:	50 91 a4 02 	lds	r21, 0x02A4
    74d8:	60 91 a5 02 	lds	r22, 0x02A5
    74dc:	70 91 a6 02 	lds	r23, 0x02A6
    74e0:	84 0f       	add	r24, r20
    74e2:	95 1f       	adc	r25, r21
    74e4:	a6 1f       	adc	r26, r22
    74e6:	b7 1f       	adc	r27, r23
    74e8:	80 93 a3 02 	sts	0x02A3, r24
    74ec:	90 93 a4 02 	sts	0x02A4, r25
    74f0:	a0 93 a5 02 	sts	0x02A5, r26
    74f4:	b0 93 a6 02 	sts	0x02A6, r27
    74f8:	80 91 67 02 	lds	r24, 0x0267
    74fc:	90 91 68 02 	lds	r25, 0x0268
    7500:	aa 27       	eor	r26, r26
    7502:	97 fd       	sbrc	r25, 7
    7504:	a0 95       	com	r26
    7506:	ba 2f       	mov	r27, r26
    7508:	40 91 a7 02 	lds	r20, 0x02A7
    750c:	50 91 a8 02 	lds	r21, 0x02A8
    7510:	60 91 a9 02 	lds	r22, 0x02A9
    7514:	70 91 aa 02 	lds	r23, 0x02AA
    7518:	84 0f       	add	r24, r20
    751a:	95 1f       	adc	r25, r21
    751c:	a6 1f       	adc	r26, r22
    751e:	b7 1f       	adc	r27, r23
    7520:	80 93 a7 02 	sts	0x02A7, r24
    7524:	90 93 a8 02 	sts	0x02A8, r25
    7528:	a0 93 a9 02 	sts	0x02A9, r26
    752c:	b0 93 aa 02 	sts	0x02AA, r27
    7530:	80 91 69 02 	lds	r24, 0x0269
    7534:	90 91 6a 02 	lds	r25, 0x026A
    7538:	aa 27       	eor	r26, r26
    753a:	97 fd       	sbrc	r25, 7
    753c:	a0 95       	com	r26
    753e:	ba 2f       	mov	r27, r26
    7540:	40 91 ab 02 	lds	r20, 0x02AB
    7544:	50 91 ac 02 	lds	r21, 0x02AC
    7548:	60 91 ad 02 	lds	r22, 0x02AD
    754c:	70 91 ae 02 	lds	r23, 0x02AE
    7550:	84 0f       	add	r24, r20
    7552:	95 1f       	adc	r25, r21
    7554:	a6 1f       	adc	r26, r22
    7556:	b7 1f       	adc	r27, r23
    7558:	80 93 ab 02 	sts	0x02AB, r24
    755c:	90 93 ac 02 	sts	0x02AC, r25
    7560:	a0 93 ad 02 	sts	0x02AD, r26
    7564:	b0 93 ae 02 	sts	0x02AE, r27
    7568:	80 91 6b 02 	lds	r24, 0x026B
    756c:	90 91 6c 02 	lds	r25, 0x026C
    7570:	aa 27       	eor	r26, r26
    7572:	97 fd       	sbrc	r25, 7
    7574:	a0 95       	com	r26
    7576:	ba 2f       	mov	r27, r26
    7578:	40 91 af 02 	lds	r20, 0x02AF
    757c:	50 91 b0 02 	lds	r21, 0x02B0
    7580:	60 91 b1 02 	lds	r22, 0x02B1
    7584:	70 91 b2 02 	lds	r23, 0x02B2
    7588:	84 0f       	add	r24, r20
    758a:	95 1f       	adc	r25, r21
    758c:	a6 1f       	adc	r26, r22
    758e:	b7 1f       	adc	r27, r23
    7590:	80 93 af 02 	sts	0x02AF, r24
    7594:	90 93 b0 02 	sts	0x02B0, r25
    7598:	a0 93 b1 02 	sts	0x02B1, r26
    759c:	b0 93 b2 02 	sts	0x02B2, r27
    75a0:	80 91 6d 02 	lds	r24, 0x026D
    75a4:	90 91 6e 02 	lds	r25, 0x026E
    75a8:	aa 27       	eor	r26, r26
    75aa:	97 fd       	sbrc	r25, 7
    75ac:	a0 95       	com	r26
    75ae:	ba 2f       	mov	r27, r26
    75b0:	40 91 b3 02 	lds	r20, 0x02B3
    75b4:	50 91 b4 02 	lds	r21, 0x02B4
    75b8:	60 91 b5 02 	lds	r22, 0x02B5
    75bc:	70 91 b6 02 	lds	r23, 0x02B6
    75c0:	84 0f       	add	r24, r20
    75c2:	95 1f       	adc	r25, r21
    75c4:	a6 1f       	adc	r26, r22
    75c6:	b7 1f       	adc	r27, r23
    75c8:	80 93 b3 02 	sts	0x02B3, r24
    75cc:	90 93 b4 02 	sts	0x02B4, r25
    75d0:	a0 93 b5 02 	sts	0x02B5, r26
    75d4:	b0 93 b6 02 	sts	0x02B6, r27
				}

				accOffsetXSum += accX;
    75d8:	80 91 34 04 	lds	r24, 0x0434
    75dc:	90 91 35 04 	lds	r25, 0x0435
    75e0:	40 91 28 04 	lds	r20, 0x0428
    75e4:	50 91 29 04 	lds	r21, 0x0429
    75e8:	84 0f       	add	r24, r20
    75ea:	95 1f       	adc	r25, r21
    75ec:	90 93 35 04 	sts	0x0435, r25
    75f0:	80 93 34 04 	sts	0x0434, r24
				accOffsetYSum += accY;
    75f4:	80 91 36 04 	lds	r24, 0x0436
    75f8:	90 91 37 04 	lds	r25, 0x0437
    75fc:	40 91 2a 04 	lds	r20, 0x042A
    7600:	50 91 2b 04 	lds	r21, 0x042B
    7604:	84 0f       	add	r24, r20
    7606:	95 1f       	adc	r25, r21
    7608:	90 93 37 04 	sts	0x0437, r25
    760c:	80 93 36 04 	sts	0x0436, r24
				accOffsetZSum += accZ;
    7610:	80 91 38 04 	lds	r24, 0x0438
    7614:	90 91 39 04 	lds	r25, 0x0439
    7618:	40 91 2c 04 	lds	r20, 0x042C
    761c:	50 91 2d 04 	lds	r21, 0x042D
    7620:	84 0f       	add	r24, r20
    7622:	95 1f       	adc	r25, r21
    7624:	90 93 39 04 	sts	0x0439, r25
    7628:	80 93 38 04 	sts	0x0438, r24

				calibrationCycle++;
    762c:	2f 5f       	subi	r18, 0xFF	; 255
    762e:	3f 4f       	sbci	r19, 0xFF	; 255
    7630:	30 93 4a 04 	sts	0x044A, r19
    7634:	20 93 49 04 	sts	0x0449, r18
    7638:	80 91 84 05 	lds	r24, 0x0584
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    763c:	88 23       	and	r24, r24
    763e:	09 f0       	breq	.+2      	; 0x7642 <calibrateSensors+0x5d6>
    7640:	31 cd       	rjmp	.-1438   	; 0x70a4 <calibrateSensors+0x38>
    7642:	5b ce       	rjmp	.-842    	; 0x72fa <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7644:	10 92 87 02 	sts	0x0287, r1
    7648:	10 92 88 02 	sts	0x0288, r1
    764c:	10 92 89 02 	sts	0x0289, r1
    7650:	10 92 8a 02 	sts	0x028A, r1
						proximityOffset[i] = 0;
    7654:	10 92 70 02 	sts	0x0270, r1
    7658:	10 92 6f 02 	sts	0x026F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    765c:	10 92 8b 02 	sts	0x028B, r1
    7660:	10 92 8c 02 	sts	0x028C, r1
    7664:	10 92 8d 02 	sts	0x028D, r1
    7668:	10 92 8e 02 	sts	0x028E, r1
						proximityOffset[i] = 0;
    766c:	10 92 72 02 	sts	0x0272, r1
    7670:	10 92 71 02 	sts	0x0271, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7674:	10 92 8f 02 	sts	0x028F, r1
    7678:	10 92 90 02 	sts	0x0290, r1
    767c:	10 92 91 02 	sts	0x0291, r1
    7680:	10 92 92 02 	sts	0x0292, r1
						proximityOffset[i] = 0;
    7684:	10 92 74 02 	sts	0x0274, r1
    7688:	10 92 73 02 	sts	0x0273, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    768c:	10 92 93 02 	sts	0x0293, r1
    7690:	10 92 94 02 	sts	0x0294, r1
    7694:	10 92 95 02 	sts	0x0295, r1
    7698:	10 92 96 02 	sts	0x0296, r1
						proximityOffset[i] = 0;
    769c:	10 92 76 02 	sts	0x0276, r1
    76a0:	10 92 75 02 	sts	0x0275, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    76a4:	10 92 97 02 	sts	0x0297, r1
    76a8:	10 92 98 02 	sts	0x0298, r1
    76ac:	10 92 99 02 	sts	0x0299, r1
    76b0:	10 92 9a 02 	sts	0x029A, r1
						proximityOffset[i] = 0;
    76b4:	10 92 78 02 	sts	0x0278, r1
    76b8:	10 92 77 02 	sts	0x0277, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    76bc:	10 92 9b 02 	sts	0x029B, r1
    76c0:	10 92 9c 02 	sts	0x029C, r1
    76c4:	10 92 9d 02 	sts	0x029D, r1
    76c8:	10 92 9e 02 	sts	0x029E, r1
						proximityOffset[i] = 0;
    76cc:	10 92 7a 02 	sts	0x027A, r1
    76d0:	10 92 79 02 	sts	0x0279, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    76d4:	10 92 9f 02 	sts	0x029F, r1
    76d8:	10 92 a0 02 	sts	0x02A0, r1
    76dc:	10 92 a1 02 	sts	0x02A1, r1
    76e0:	10 92 a2 02 	sts	0x02A2, r1
						proximityOffset[i] = 0;
    76e4:	10 92 7c 02 	sts	0x027C, r1
    76e8:	10 92 7b 02 	sts	0x027B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    76ec:	10 92 a3 02 	sts	0x02A3, r1
    76f0:	10 92 a4 02 	sts	0x02A4, r1
    76f4:	10 92 a5 02 	sts	0x02A5, r1
    76f8:	10 92 a6 02 	sts	0x02A6, r1
						proximityOffset[i] = 0;
    76fc:	10 92 7e 02 	sts	0x027E, r1
    7700:	10 92 7d 02 	sts	0x027D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7704:	10 92 a7 02 	sts	0x02A7, r1
    7708:	10 92 a8 02 	sts	0x02A8, r1
    770c:	10 92 a9 02 	sts	0x02A9, r1
    7710:	10 92 aa 02 	sts	0x02AA, r1
						proximityOffset[i] = 0;
    7714:	10 92 80 02 	sts	0x0280, r1
    7718:	10 92 7f 02 	sts	0x027F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    771c:	10 92 ab 02 	sts	0x02AB, r1
    7720:	10 92 ac 02 	sts	0x02AC, r1
    7724:	10 92 ad 02 	sts	0x02AD, r1
    7728:	10 92 ae 02 	sts	0x02AE, r1
						proximityOffset[i] = 0;
    772c:	10 92 82 02 	sts	0x0282, r1
    7730:	10 92 81 02 	sts	0x0281, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    7734:	10 92 af 02 	sts	0x02AF, r1
    7738:	10 92 b0 02 	sts	0x02B0, r1
    773c:	10 92 b1 02 	sts	0x02B1, r1
    7740:	10 92 b2 02 	sts	0x02B2, r1
						proximityOffset[i] = 0;
    7744:	10 92 84 02 	sts	0x0284, r1
    7748:	10 92 83 02 	sts	0x0283, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    774c:	10 92 b3 02 	sts	0x02B3, r1
    7750:	10 92 b4 02 	sts	0x02B4, r1
    7754:	10 92 b5 02 	sts	0x02B5, r1
    7758:	10 92 b6 02 	sts	0x02B6, r1
						proximityOffset[i] = 0;
    775c:	10 92 86 02 	sts	0x0286, r1
    7760:	10 92 85 02 	sts	0x0285, r1
					}
					accOffsetXSum = 0;
    7764:	10 92 35 04 	sts	0x0435, r1
    7768:	10 92 34 04 	sts	0x0434, r1
					accOffsetYSum = 0;
    776c:	10 92 37 04 	sts	0x0437, r1
    7770:	10 92 36 04 	sts	0x0436, r1
					accOffsetZSum = 0;
    7774:	10 92 39 04 	sts	0x0439, r1
    7778:	10 92 38 04 	sts	0x0438, r1

					calibrationCycle++;
    777c:	d0 93 4a 04 	sts	0x044A, r29
    7780:	c0 93 49 04 	sts	0x0449, r28
    7784:	80 91 84 05 	lds	r24, 0x0584

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    7788:	59 cf       	rjmp	.-334    	; 0x763c <calibrateSensors+0x5d0>

0000778a <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    778a:	80 91 27 04 	lds	r24, 0x0427
    778e:	88 23       	and	r24, r24
    7790:	79 f0       	breq	.+30     	; 0x77b0 <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    7792:	81 30       	cpi	r24, 0x01	; 1
    7794:	11 f1       	breq	.+68     	; 0x77da <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    7796:	10 92 29 04 	sts	0x0429, r1
    779a:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    779e:	10 92 2b 04 	sts	0x042B, r1
    77a2:	10 92 2a 04 	sts	0x042A, r1
		accZ = 0;
    77a6:	10 92 2d 04 	sts	0x042D, r1
    77aa:	10 92 2c 04 	sts	0x042C, r1
    77ae:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    77b0:	80 91 14 02 	lds	r24, 0x0214
    77b4:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    77b8:	80 e0       	ldi	r24, 0x00	; 0
    77ba:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    77be:	80 91 14 02 	lds	r24, 0x0214
    77c2:	8f 5f       	subi	r24, 0xFF	; 255
    77c4:	0e 94 29 1a 	call	0x3452	; 0x3452 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    77c8:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <i2c_readAck>
    77cc:	80 93 3e 04 	sts	0x043E, r24
    77d0:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <i2c_readAck>
    77d4:	80 93 3f 04 	sts	0x043F, r24
    77d8:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    77da:	80 91 14 02 	lds	r24, 0x0214
    77de:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    77e2:	82 e3       	ldi	r24, 0x32	; 50
    77e4:	0e 94 57 1a 	call	0x34ae	; 0x34ae <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    77e8:	80 91 14 02 	lds	r24, 0x0214
    77ec:	8f 5f       	subi	r24, 0xFF	; 255
    77ee:	0e 94 29 1a 	call	0x3452	; 0x3452 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    77f2:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <i2c_readAck>
    77f6:	80 93 3e 04 	sts	0x043E, r24
    77fa:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <i2c_readAck>
    77fe:	80 93 3f 04 	sts	0x043F, r24
    7802:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <i2c_readAck>
    7806:	80 93 40 04 	sts	0x0440, r24
    780a:	08 95       	ret

0000780c <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    780c:	80 91 27 04 	lds	r24, 0x0427
    7810:	88 23       	and	r24, r24
    7812:	09 f0       	breq	.+2      	; 0x7816 <readAccelXYZ_2+0xa>
    7814:	4e c0       	rjmp	.+156    	; 0x78b2 <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    7816:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <i2c_readAck>
    781a:	80 93 40 04 	sts	0x0440, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    781e:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <i2c_readAck>
    7822:	80 93 41 04 	sts	0x0441, r24
    7826:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <i2c_readAck>
    782a:	80 93 42 04 	sts	0x0442, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    782e:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <i2c_readNak>
    7832:	80 93 43 04 	sts	0x0443, r24
		i2c_stop();													// set stop conditon = release bus
    7836:	0e 94 4f 1a 	call	0x349e	; 0x349e <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    783a:	80 91 84 05 	lds	r24, 0x0584
    783e:	88 23       	and	r24, r24
    7840:	09 f4       	brne	.+2      	; 0x7844 <readAccelXYZ_2+0x38>
    7842:	47 c0       	rjmp	.+142    	; 0x78d2 <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    7844:	80 91 3f 04 	lds	r24, 0x043F
    7848:	99 27       	eor	r25, r25
    784a:	87 fd       	sbrc	r24, 7
    784c:	90 95       	com	r25
    784e:	98 2f       	mov	r25, r24
    7850:	88 27       	eor	r24, r24
    7852:	20 91 3e 04 	lds	r18, 0x043E
    7856:	33 27       	eor	r19, r19
    7858:	27 fd       	sbrc	r18, 7
    785a:	30 95       	com	r19
    785c:	82 2b       	or	r24, r18
    785e:	93 2b       	or	r25, r19
    7860:	90 93 29 04 	sts	0x0429, r25
    7864:	80 93 28 04 	sts	0x0428, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    7868:	80 91 41 04 	lds	r24, 0x0441
    786c:	99 27       	eor	r25, r25
    786e:	87 fd       	sbrc	r24, 7
    7870:	90 95       	com	r25
    7872:	98 2f       	mov	r25, r24
    7874:	88 27       	eor	r24, r24
    7876:	20 91 40 04 	lds	r18, 0x0440
    787a:	33 27       	eor	r19, r19
    787c:	27 fd       	sbrc	r18, 7
    787e:	30 95       	com	r19
    7880:	82 2b       	or	r24, r18
    7882:	93 2b       	or	r25, r19
    7884:	90 93 2b 04 	sts	0x042B, r25
    7888:	80 93 2a 04 	sts	0x042A, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    788c:	80 91 43 04 	lds	r24, 0x0443
    7890:	99 27       	eor	r25, r25
    7892:	87 fd       	sbrc	r24, 7
    7894:	90 95       	com	r25
    7896:	98 2f       	mov	r25, r24
    7898:	88 27       	eor	r24, r24
    789a:	20 91 42 04 	lds	r18, 0x0442
    789e:	33 27       	eor	r19, r19
    78a0:	27 fd       	sbrc	r18, 7
    78a2:	30 95       	com	r19
    78a4:	82 2b       	or	r24, r18
    78a6:	93 2b       	or	r25, r19
    78a8:	90 93 2d 04 	sts	0x042D, r25
    78ac:	80 93 2c 04 	sts	0x042C, r24
    78b0:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    78b2:	81 30       	cpi	r24, 0x01	; 1
    78b4:	09 f4       	brne	.+2      	; 0x78b8 <readAccelXYZ_2+0xac>
    78b6:	b3 cf       	rjmp	.-154    	; 0x781e <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    78b8:	10 92 29 04 	sts	0x0429, r1
    78bc:	10 92 28 04 	sts	0x0428, r1
		accY = 0;
    78c0:	10 92 2b 04 	sts	0x042B, r1
    78c4:	10 92 2a 04 	sts	0x042A, r1
		accZ = 0;
    78c8:	10 92 2d 04 	sts	0x042D, r1
    78cc:	10 92 2c 04 	sts	0x042C, r1
    78d0:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    78d2:	80 91 3f 04 	lds	r24, 0x043F
    78d6:	99 27       	eor	r25, r25
    78d8:	87 fd       	sbrc	r24, 7
    78da:	90 95       	com	r25
    78dc:	98 2f       	mov	r25, r24
    78de:	88 27       	eor	r24, r24
    78e0:	20 91 3e 04 	lds	r18, 0x043E
    78e4:	33 27       	eor	r19, r19
    78e6:	27 fd       	sbrc	r18, 7
    78e8:	30 95       	com	r19
    78ea:	82 2b       	or	r24, r18
    78ec:	93 2b       	or	r25, r19
    78ee:	20 91 2e 04 	lds	r18, 0x042E
    78f2:	30 91 2f 04 	lds	r19, 0x042F
    78f6:	82 1b       	sub	r24, r18
    78f8:	93 0b       	sbc	r25, r19
    78fa:	90 93 29 04 	sts	0x0429, r25
    78fe:	80 93 28 04 	sts	0x0428, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    7902:	80 91 41 04 	lds	r24, 0x0441
    7906:	99 27       	eor	r25, r25
    7908:	87 fd       	sbrc	r24, 7
    790a:	90 95       	com	r25
    790c:	98 2f       	mov	r25, r24
    790e:	88 27       	eor	r24, r24
    7910:	20 91 40 04 	lds	r18, 0x0440
    7914:	33 27       	eor	r19, r19
    7916:	27 fd       	sbrc	r18, 7
    7918:	30 95       	com	r19
    791a:	82 2b       	or	r24, r18
    791c:	93 2b       	or	r25, r19
    791e:	20 91 30 04 	lds	r18, 0x0430
    7922:	30 91 31 04 	lds	r19, 0x0431
    7926:	82 1b       	sub	r24, r18
    7928:	93 0b       	sbc	r25, r19
    792a:	90 93 2b 04 	sts	0x042B, r25
    792e:	80 93 2a 04 	sts	0x042A, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    7932:	80 91 43 04 	lds	r24, 0x0443
    7936:	99 27       	eor	r25, r25
    7938:	87 fd       	sbrc	r24, 7
    793a:	90 95       	com	r25
    793c:	98 2f       	mov	r25, r24
    793e:	88 27       	eor	r24, r24
    7940:	20 91 42 04 	lds	r18, 0x0442
    7944:	33 27       	eor	r19, r19
    7946:	27 fd       	sbrc	r18, 7
    7948:	30 95       	com	r19
    794a:	82 2b       	or	r24, r18
    794c:	93 2b       	or	r25, r19
    794e:	20 91 32 04 	lds	r18, 0x0432
    7952:	30 91 33 04 	lds	r19, 0x0433
    7956:	82 1b       	sub	r24, r18
    7958:	93 0b       	sbc	r25, r19
    795a:	90 93 2d 04 	sts	0x042D, r25
    795e:	80 93 2c 04 	sts	0x042C, r24
    7962:	08 95       	ret

00007964 <computeAngle>:

	}

}

void computeAngle() {
    7964:	ef 92       	push	r14
    7966:	ff 92       	push	r15
    7968:	0f 93       	push	r16
    796a:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    796c:	80 91 2c 04 	lds	r24, 0x042C
    7970:	90 91 2d 04 	lds	r25, 0x042D
    7974:	97 fd       	sbrc	r25, 7
    7976:	6c c0       	rjmp	.+216    	; 0x7a50 <computeAngle+0xec>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    7978:	85 31       	cpi	r24, 0x15	; 21
    797a:	91 05       	cpc	r25, r1
    797c:	08 f0       	brcs	.+2      	; 0x7980 <computeAngle+0x1c>
    797e:	54 c0       	rjmp	.+168    	; 0x7a28 <computeAngle+0xc4>
		currPosition = HORIZONTAL_POS;
    7980:	81 e0       	ldi	r24, 0x01	; 1
    7982:	80 93 15 02 	sts	0x0215, r24
    7986:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    7988:	80 91 16 02 	lds	r24, 0x0216
    798c:	82 17       	cp	r24, r18
    798e:	09 f4       	brne	.+2      	; 0x7992 <computeAngle+0x2e>
    7990:	53 c0       	rjmp	.+166    	; 0x7a38 <computeAngle+0xd4>
		timesInSamePos++;
    7992:	80 91 3c 04 	lds	r24, 0x043C
    7996:	90 91 3d 04 	lds	r25, 0x043D
    799a:	01 96       	adiw	r24, 0x01	; 1
    799c:	90 93 3d 04 	sts	0x043D, r25
    79a0:	80 93 3c 04 	sts	0x043C, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    79a4:	88 3c       	cpi	r24, 0xC8	; 200
    79a6:	91 05       	cpc	r25, r1
    79a8:	08 f0       	brcs	.+2      	; 0x79ac <computeAngle+0x48>
    79aa:	4b c0       	rjmp	.+150    	; 0x7a42 <computeAngle+0xde>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    79ac:	60 91 28 04 	lds	r22, 0x0428
    79b0:	70 91 29 04 	lds	r23, 0x0429
    79b4:	88 27       	eor	r24, r24
    79b6:	77 fd       	sbrc	r23, 7
    79b8:	80 95       	com	r24
    79ba:	98 2f       	mov	r25, r24
    79bc:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    79c0:	7b 01       	movw	r14, r22
    79c2:	8c 01       	movw	r16, r24
    79c4:	60 91 2a 04 	lds	r22, 0x042A
    79c8:	70 91 2b 04 	lds	r23, 0x042B
    79cc:	88 27       	eor	r24, r24
    79ce:	77 fd       	sbrc	r23, 7
    79d0:	80 95       	com	r24
    79d2:	98 2f       	mov	r25, r24
    79d4:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatsisf>
    79d8:	9b 01       	movw	r18, r22
    79da:	ac 01       	movw	r20, r24
    79dc:	c8 01       	movw	r24, r16
    79de:	b7 01       	movw	r22, r14
    79e0:	0e 94 b8 3d 	call	0x7b70	; 0x7b70 <atan2>
    79e4:	60 93 99 04 	sts	0x0499, r22
    79e8:	70 93 9a 04 	sts	0x049A, r23
    79ec:	80 93 9b 04 	sts	0x049B, r24
    79f0:	90 93 9c 04 	sts	0x049C, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    79f4:	21 ee       	ldi	r18, 0xE1	; 225
    79f6:	3e e2       	ldi	r19, 0x2E	; 46
    79f8:	45 e6       	ldi	r20, 0x65	; 101
    79fa:	52 e4       	ldi	r21, 0x42	; 66
    79fc:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <__mulsf3>
    7a00:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <__fixsfsi>
    7a04:	9b 01       	movw	r18, r22
    7a06:	70 93 3b 04 	sts	0x043B, r23
    7a0a:	60 93 3a 04 	sts	0x043A, r22

	if(currentAngle < 0) {
    7a0e:	77 ff       	sbrs	r23, 7
    7a10:	06 c0       	rjmp	.+12     	; 0x7a1e <computeAngle+0xba>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    7a12:	28 59       	subi	r18, 0x98	; 152
    7a14:	3e 4f       	sbci	r19, 0xFE	; 254
    7a16:	30 93 3b 04 	sts	0x043B, r19
    7a1a:	20 93 3a 04 	sts	0x043A, r18
	}

}
    7a1e:	1f 91       	pop	r17
    7a20:	0f 91       	pop	r16
    7a22:	ff 90       	pop	r15
    7a24:	ef 90       	pop	r14
    7a26:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    7a28:	10 92 15 02 	sts	0x0215, r1
    7a2c:	20 e0       	ldi	r18, 0x00	; 0
	}
	if(currPosition != robotPosition) {			
    7a2e:	80 91 16 02 	lds	r24, 0x0216
    7a32:	82 17       	cp	r24, r18
    7a34:	09 f0       	breq	.+2      	; 0x7a38 <computeAngle+0xd4>
    7a36:	ad cf       	rjmp	.-166    	; 0x7992 <computeAngle+0x2e>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    7a38:	10 92 3d 04 	sts	0x043D, r1
    7a3c:	10 92 3c 04 	sts	0x043C, r1
    7a40:	b5 cf       	rjmp	.-150    	; 0x79ac <computeAngle+0x48>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    7a42:	10 92 3d 04 	sts	0x043D, r1
    7a46:	10 92 3c 04 	sts	0x043C, r1
			robotPosition = currPosition;
    7a4a:	20 93 16 02 	sts	0x0216, r18
    7a4e:	ae cf       	rjmp	.-164    	; 0x79ac <computeAngle+0x48>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    7a50:	90 95       	com	r25
    7a52:	81 95       	neg	r24
    7a54:	9f 4f       	sbci	r25, 0xFF	; 255
    7a56:	90 cf       	rjmp	.-224    	; 0x7978 <computeAngle+0x14>

00007a58 <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    7a58:	86 ed       	ldi	r24, 0xD6	; 214
    7a5a:	94 e0       	ldi	r25, 0x04	; 4
    7a5c:	6c e6       	ldi	r22, 0x6C	; 108
    7a5e:	7f e0       	ldi	r23, 0x0F	; 15
    7a60:	40 e9       	ldi	r20, 0x90	; 144
    7a62:	50 e0       	ldi	r21, 0x00	; 0
    7a64:	0e 94 4c 41 	call	0x8298	; 0x8298 <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    7a68:	8a e6       	ldi	r24, 0x6A	; 106
    7a6a:	9f e0       	ldi	r25, 0x0F	; 15
    7a6c:	65 e5       	ldi	r22, 0x55	; 85
    7a6e:	7a ea       	ldi	r23, 0xAA	; 170
    7a70:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__eeupd_word_m2560>
}
    7a74:	08 95       	ret

00007a76 <readCalibrationFromFlash>:

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    7a76:	86 ed       	ldi	r24, 0xD6	; 214
    7a78:	94 e0       	ldi	r25, 0x04	; 4
    7a7a:	6c e6       	ldi	r22, 0x6C	; 108
    7a7c:	7f e0       	ldi	r23, 0x0F	; 15
    7a7e:	40 e9       	ldi	r20, 0x90	; 144
    7a80:	50 e0       	ldi	r21, 0x00	; 0
    7a82:	0e 94 2e 41 	call	0x825c	; 0x825c <__eerd_block_m2560>
}
    7a86:	08 95       	ret

00007a88 <__subsf3>:
    7a88:	50 58       	subi	r21, 0x80	; 128

00007a8a <__addsf3>:
    7a8a:	bb 27       	eor	r27, r27
    7a8c:	aa 27       	eor	r26, r26
    7a8e:	0e d0       	rcall	.+28     	; 0x7aac <__addsf3x>
    7a90:	27 c2       	rjmp	.+1102   	; 0x7ee0 <__fp_round>
    7a92:	f0 d1       	rcall	.+992    	; 0x7e74 <__fp_pscA>
    7a94:	30 f0       	brcs	.+12     	; 0x7aa2 <__addsf3+0x18>
    7a96:	f5 d1       	rcall	.+1002   	; 0x7e82 <__fp_pscB>
    7a98:	20 f0       	brcs	.+8      	; 0x7aa2 <__addsf3+0x18>
    7a9a:	31 f4       	brne	.+12     	; 0x7aa8 <__addsf3+0x1e>
    7a9c:	9f 3f       	cpi	r25, 0xFF	; 255
    7a9e:	11 f4       	brne	.+4      	; 0x7aa4 <__addsf3+0x1a>
    7aa0:	1e f4       	brtc	.+6      	; 0x7aa8 <__addsf3+0x1e>
    7aa2:	c0 c1       	rjmp	.+896    	; 0x7e24 <__fp_nan>
    7aa4:	0e f4       	brtc	.+2      	; 0x7aa8 <__addsf3+0x1e>
    7aa6:	e0 95       	com	r30
    7aa8:	e7 fb       	bst	r30, 7
    7aaa:	b6 c1       	rjmp	.+876    	; 0x7e18 <__fp_inf>

00007aac <__addsf3x>:
    7aac:	e9 2f       	mov	r30, r25
    7aae:	3a d2       	rcall	.+1140   	; 0x7f24 <__fp_split3>
    7ab0:	80 f3       	brcs	.-32     	; 0x7a92 <__addsf3+0x8>
    7ab2:	ba 17       	cp	r27, r26
    7ab4:	62 07       	cpc	r22, r18
    7ab6:	73 07       	cpc	r23, r19
    7ab8:	84 07       	cpc	r24, r20
    7aba:	95 07       	cpc	r25, r21
    7abc:	18 f0       	brcs	.+6      	; 0x7ac4 <__addsf3x+0x18>
    7abe:	71 f4       	brne	.+28     	; 0x7adc <__addsf3x+0x30>
    7ac0:	9e f5       	brtc	.+102    	; 0x7b28 <__addsf3x+0x7c>
    7ac2:	52 c2       	rjmp	.+1188   	; 0x7f68 <__fp_zero>
    7ac4:	0e f4       	brtc	.+2      	; 0x7ac8 <__addsf3x+0x1c>
    7ac6:	e0 95       	com	r30
    7ac8:	0b 2e       	mov	r0, r27
    7aca:	ba 2f       	mov	r27, r26
    7acc:	a0 2d       	mov	r26, r0
    7ace:	0b 01       	movw	r0, r22
    7ad0:	b9 01       	movw	r22, r18
    7ad2:	90 01       	movw	r18, r0
    7ad4:	0c 01       	movw	r0, r24
    7ad6:	ca 01       	movw	r24, r20
    7ad8:	a0 01       	movw	r20, r0
    7ada:	11 24       	eor	r1, r1
    7adc:	ff 27       	eor	r31, r31
    7ade:	59 1b       	sub	r21, r25
    7ae0:	99 f0       	breq	.+38     	; 0x7b08 <__addsf3x+0x5c>
    7ae2:	59 3f       	cpi	r21, 0xF9	; 249
    7ae4:	50 f4       	brcc	.+20     	; 0x7afa <__addsf3x+0x4e>
    7ae6:	50 3e       	cpi	r21, 0xE0	; 224
    7ae8:	68 f1       	brcs	.+90     	; 0x7b44 <__addsf3x+0x98>
    7aea:	1a 16       	cp	r1, r26
    7aec:	f0 40       	sbci	r31, 0x00	; 0
    7aee:	a2 2f       	mov	r26, r18
    7af0:	23 2f       	mov	r18, r19
    7af2:	34 2f       	mov	r19, r20
    7af4:	44 27       	eor	r20, r20
    7af6:	58 5f       	subi	r21, 0xF8	; 248
    7af8:	f3 cf       	rjmp	.-26     	; 0x7ae0 <__addsf3x+0x34>
    7afa:	46 95       	lsr	r20
    7afc:	37 95       	ror	r19
    7afe:	27 95       	ror	r18
    7b00:	a7 95       	ror	r26
    7b02:	f0 40       	sbci	r31, 0x00	; 0
    7b04:	53 95       	inc	r21
    7b06:	c9 f7       	brne	.-14     	; 0x7afa <__addsf3x+0x4e>
    7b08:	7e f4       	brtc	.+30     	; 0x7b28 <__addsf3x+0x7c>
    7b0a:	1f 16       	cp	r1, r31
    7b0c:	ba 0b       	sbc	r27, r26
    7b0e:	62 0b       	sbc	r22, r18
    7b10:	73 0b       	sbc	r23, r19
    7b12:	84 0b       	sbc	r24, r20
    7b14:	ba f0       	brmi	.+46     	; 0x7b44 <__addsf3x+0x98>
    7b16:	91 50       	subi	r25, 0x01	; 1
    7b18:	a1 f0       	breq	.+40     	; 0x7b42 <__addsf3x+0x96>
    7b1a:	ff 0f       	add	r31, r31
    7b1c:	bb 1f       	adc	r27, r27
    7b1e:	66 1f       	adc	r22, r22
    7b20:	77 1f       	adc	r23, r23
    7b22:	88 1f       	adc	r24, r24
    7b24:	c2 f7       	brpl	.-16     	; 0x7b16 <__addsf3x+0x6a>
    7b26:	0e c0       	rjmp	.+28     	; 0x7b44 <__addsf3x+0x98>
    7b28:	ba 0f       	add	r27, r26
    7b2a:	62 1f       	adc	r22, r18
    7b2c:	73 1f       	adc	r23, r19
    7b2e:	84 1f       	adc	r24, r20
    7b30:	48 f4       	brcc	.+18     	; 0x7b44 <__addsf3x+0x98>
    7b32:	87 95       	ror	r24
    7b34:	77 95       	ror	r23
    7b36:	67 95       	ror	r22
    7b38:	b7 95       	ror	r27
    7b3a:	f7 95       	ror	r31
    7b3c:	9e 3f       	cpi	r25, 0xFE	; 254
    7b3e:	08 f0       	brcs	.+2      	; 0x7b42 <__addsf3x+0x96>
    7b40:	b3 cf       	rjmp	.-154    	; 0x7aa8 <__addsf3+0x1e>
    7b42:	93 95       	inc	r25
    7b44:	88 0f       	add	r24, r24
    7b46:	08 f0       	brcs	.+2      	; 0x7b4a <__addsf3x+0x9e>
    7b48:	99 27       	eor	r25, r25
    7b4a:	ee 0f       	add	r30, r30
    7b4c:	97 95       	ror	r25
    7b4e:	87 95       	ror	r24
    7b50:	08 95       	ret
    7b52:	90 d1       	rcall	.+800    	; 0x7e74 <__fp_pscA>
    7b54:	58 f0       	brcs	.+22     	; 0x7b6c <__addsf3x+0xc0>
    7b56:	80 e8       	ldi	r24, 0x80	; 128
    7b58:	91 e0       	ldi	r25, 0x01	; 1
    7b5a:	09 f4       	brne	.+2      	; 0x7b5e <__addsf3x+0xb2>
    7b5c:	9e ef       	ldi	r25, 0xFE	; 254
    7b5e:	91 d1       	rcall	.+802    	; 0x7e82 <__fp_pscB>
    7b60:	28 f0       	brcs	.+10     	; 0x7b6c <__addsf3x+0xc0>
    7b62:	40 e8       	ldi	r20, 0x80	; 128
    7b64:	51 e0       	ldi	r21, 0x01	; 1
    7b66:	59 f4       	brne	.+22     	; 0x7b7e <atan2+0xe>
    7b68:	5e ef       	ldi	r21, 0xFE	; 254
    7b6a:	09 c0       	rjmp	.+18     	; 0x7b7e <atan2+0xe>
    7b6c:	5b c1       	rjmp	.+694    	; 0x7e24 <__fp_nan>
    7b6e:	fc c1       	rjmp	.+1016   	; 0x7f68 <__fp_zero>

00007b70 <atan2>:
    7b70:	e9 2f       	mov	r30, r25
    7b72:	e0 78       	andi	r30, 0x80	; 128
    7b74:	d7 d1       	rcall	.+942    	; 0x7f24 <__fp_split3>
    7b76:	68 f3       	brcs	.-38     	; 0x7b52 <__addsf3x+0xa6>
    7b78:	09 2e       	mov	r0, r25
    7b7a:	05 2a       	or	r0, r21
    7b7c:	c1 f3       	breq	.-16     	; 0x7b6e <__addsf3x+0xc2>
    7b7e:	26 17       	cp	r18, r22
    7b80:	37 07       	cpc	r19, r23
    7b82:	48 07       	cpc	r20, r24
    7b84:	59 07       	cpc	r21, r25
    7b86:	38 f0       	brcs	.+14     	; 0x7b96 <atan2+0x26>
    7b88:	0e 2e       	mov	r0, r30
    7b8a:	07 f8       	bld	r0, 7
    7b8c:	e0 25       	eor	r30, r0
    7b8e:	69 f0       	breq	.+26     	; 0x7baa <atan2+0x3a>
    7b90:	e0 25       	eor	r30, r0
    7b92:	e0 64       	ori	r30, 0x40	; 64
    7b94:	0a c0       	rjmp	.+20     	; 0x7baa <atan2+0x3a>
    7b96:	ef 63       	ori	r30, 0x3F	; 63
    7b98:	07 f8       	bld	r0, 7
    7b9a:	00 94       	com	r0
    7b9c:	07 fa       	bst	r0, 7
    7b9e:	db 01       	movw	r26, r22
    7ba0:	b9 01       	movw	r22, r18
    7ba2:	9d 01       	movw	r18, r26
    7ba4:	dc 01       	movw	r26, r24
    7ba6:	ca 01       	movw	r24, r20
    7ba8:	ad 01       	movw	r20, r26
    7baa:	ef 93       	push	r30
    7bac:	4a d0       	rcall	.+148    	; 0x7c42 <__divsf3_pse>
    7bae:	98 d1       	rcall	.+816    	; 0x7ee0 <__fp_round>
    7bb0:	0a d0       	rcall	.+20     	; 0x7bc6 <atan>
    7bb2:	5f 91       	pop	r21
    7bb4:	55 23       	and	r21, r21
    7bb6:	31 f0       	breq	.+12     	; 0x7bc4 <atan2+0x54>
    7bb8:	2b ed       	ldi	r18, 0xDB	; 219
    7bba:	3f e0       	ldi	r19, 0x0F	; 15
    7bbc:	49 e4       	ldi	r20, 0x49	; 73
    7bbe:	50 fd       	sbrc	r21, 0
    7bc0:	49 ec       	ldi	r20, 0xC9	; 201
    7bc2:	63 cf       	rjmp	.-314    	; 0x7a8a <__addsf3>
    7bc4:	08 95       	ret

00007bc6 <atan>:
    7bc6:	df 93       	push	r29
    7bc8:	dd 27       	eor	r29, r29
    7bca:	b9 2f       	mov	r27, r25
    7bcc:	bf 77       	andi	r27, 0x7F	; 127
    7bce:	40 e8       	ldi	r20, 0x80	; 128
    7bd0:	5f e3       	ldi	r21, 0x3F	; 63
    7bd2:	16 16       	cp	r1, r22
    7bd4:	17 06       	cpc	r1, r23
    7bd6:	48 07       	cpc	r20, r24
    7bd8:	5b 07       	cpc	r21, r27
    7bda:	10 f4       	brcc	.+4      	; 0x7be0 <atan+0x1a>
    7bdc:	d9 2f       	mov	r29, r25
    7bde:	cb d1       	rcall	.+918    	; 0x7f76 <inverse>
    7be0:	9f 93       	push	r25
    7be2:	8f 93       	push	r24
    7be4:	7f 93       	push	r23
    7be6:	6f 93       	push	r22
    7be8:	36 d2       	rcall	.+1132   	; 0x8056 <square>
    7bea:	ee e4       	ldi	r30, 0x4E	; 78
    7bec:	f1 e0       	ldi	r31, 0x01	; 1
    7bee:	1d d1       	rcall	.+570    	; 0x7e2a <__fp_powser>
    7bf0:	77 d1       	rcall	.+750    	; 0x7ee0 <__fp_round>
    7bf2:	2f 91       	pop	r18
    7bf4:	3f 91       	pop	r19
    7bf6:	4f 91       	pop	r20
    7bf8:	5f 91       	pop	r21
    7bfa:	d0 d1       	rcall	.+928    	; 0x7f9c <__mulsf3x>
    7bfc:	dd 23       	and	r29, r29
    7bfe:	49 f0       	breq	.+18     	; 0x7c12 <atan+0x4c>
    7c00:	90 58       	subi	r25, 0x80	; 128
    7c02:	a2 ea       	ldi	r26, 0xA2	; 162
    7c04:	2a ed       	ldi	r18, 0xDA	; 218
    7c06:	3f e0       	ldi	r19, 0x0F	; 15
    7c08:	49 ec       	ldi	r20, 0xC9	; 201
    7c0a:	5f e3       	ldi	r21, 0x3F	; 63
    7c0c:	d0 78       	andi	r29, 0x80	; 128
    7c0e:	5d 27       	eor	r21, r29
    7c10:	4d df       	rcall	.-358    	; 0x7aac <__addsf3x>
    7c12:	df 91       	pop	r29
    7c14:	65 c1       	rjmp	.+714    	; 0x7ee0 <__fp_round>

00007c16 <__cmpsf2>:
    7c16:	dc d0       	rcall	.+440    	; 0x7dd0 <__fp_cmp>
    7c18:	08 f4       	brcc	.+2      	; 0x7c1c <__cmpsf2+0x6>
    7c1a:	81 e0       	ldi	r24, 0x01	; 1
    7c1c:	08 95       	ret

00007c1e <cos>:
    7c1e:	39 d1       	rcall	.+626    	; 0x7e92 <__fp_rempio2>
    7c20:	e3 95       	inc	r30
    7c22:	6f c1       	rjmp	.+734    	; 0x7f02 <__fp_sinus>

00007c24 <__divsf3>:
    7c24:	0c d0       	rcall	.+24     	; 0x7c3e <__divsf3x>
    7c26:	5c c1       	rjmp	.+696    	; 0x7ee0 <__fp_round>
    7c28:	2c d1       	rcall	.+600    	; 0x7e82 <__fp_pscB>
    7c2a:	40 f0       	brcs	.+16     	; 0x7c3c <__divsf3+0x18>
    7c2c:	23 d1       	rcall	.+582    	; 0x7e74 <__fp_pscA>
    7c2e:	30 f0       	brcs	.+12     	; 0x7c3c <__divsf3+0x18>
    7c30:	21 f4       	brne	.+8      	; 0x7c3a <__divsf3+0x16>
    7c32:	5f 3f       	cpi	r21, 0xFF	; 255
    7c34:	19 f0       	breq	.+6      	; 0x7c3c <__divsf3+0x18>
    7c36:	f0 c0       	rjmp	.+480    	; 0x7e18 <__fp_inf>
    7c38:	51 11       	cpse	r21, r1
    7c3a:	97 c1       	rjmp	.+814    	; 0x7f6a <__fp_szero>
    7c3c:	f3 c0       	rjmp	.+486    	; 0x7e24 <__fp_nan>

00007c3e <__divsf3x>:
    7c3e:	72 d1       	rcall	.+740    	; 0x7f24 <__fp_split3>
    7c40:	98 f3       	brcs	.-26     	; 0x7c28 <__divsf3+0x4>

00007c42 <__divsf3_pse>:
    7c42:	99 23       	and	r25, r25
    7c44:	c9 f3       	breq	.-14     	; 0x7c38 <__divsf3+0x14>
    7c46:	55 23       	and	r21, r21
    7c48:	b1 f3       	breq	.-20     	; 0x7c36 <__divsf3+0x12>
    7c4a:	95 1b       	sub	r25, r21
    7c4c:	55 0b       	sbc	r21, r21
    7c4e:	bb 27       	eor	r27, r27
    7c50:	aa 27       	eor	r26, r26
    7c52:	62 17       	cp	r22, r18
    7c54:	73 07       	cpc	r23, r19
    7c56:	84 07       	cpc	r24, r20
    7c58:	38 f0       	brcs	.+14     	; 0x7c68 <__divsf3_pse+0x26>
    7c5a:	9f 5f       	subi	r25, 0xFF	; 255
    7c5c:	5f 4f       	sbci	r21, 0xFF	; 255
    7c5e:	22 0f       	add	r18, r18
    7c60:	33 1f       	adc	r19, r19
    7c62:	44 1f       	adc	r20, r20
    7c64:	aa 1f       	adc	r26, r26
    7c66:	a9 f3       	breq	.-22     	; 0x7c52 <__divsf3_pse+0x10>
    7c68:	33 d0       	rcall	.+102    	; 0x7cd0 <__divsf3_pse+0x8e>
    7c6a:	0e 2e       	mov	r0, r30
    7c6c:	3a f0       	brmi	.+14     	; 0x7c7c <__divsf3_pse+0x3a>
    7c6e:	e0 e8       	ldi	r30, 0x80	; 128
    7c70:	30 d0       	rcall	.+96     	; 0x7cd2 <__divsf3_pse+0x90>
    7c72:	91 50       	subi	r25, 0x01	; 1
    7c74:	50 40       	sbci	r21, 0x00	; 0
    7c76:	e6 95       	lsr	r30
    7c78:	00 1c       	adc	r0, r0
    7c7a:	ca f7       	brpl	.-14     	; 0x7c6e <__divsf3_pse+0x2c>
    7c7c:	29 d0       	rcall	.+82     	; 0x7cd0 <__divsf3_pse+0x8e>
    7c7e:	fe 2f       	mov	r31, r30
    7c80:	27 d0       	rcall	.+78     	; 0x7cd0 <__divsf3_pse+0x8e>
    7c82:	66 0f       	add	r22, r22
    7c84:	77 1f       	adc	r23, r23
    7c86:	88 1f       	adc	r24, r24
    7c88:	bb 1f       	adc	r27, r27
    7c8a:	26 17       	cp	r18, r22
    7c8c:	37 07       	cpc	r19, r23
    7c8e:	48 07       	cpc	r20, r24
    7c90:	ab 07       	cpc	r26, r27
    7c92:	b0 e8       	ldi	r27, 0x80	; 128
    7c94:	09 f0       	breq	.+2      	; 0x7c98 <__divsf3_pse+0x56>
    7c96:	bb 0b       	sbc	r27, r27
    7c98:	80 2d       	mov	r24, r0
    7c9a:	bf 01       	movw	r22, r30
    7c9c:	ff 27       	eor	r31, r31
    7c9e:	93 58       	subi	r25, 0x83	; 131
    7ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    7ca2:	2a f0       	brmi	.+10     	; 0x7cae <__divsf3_pse+0x6c>
    7ca4:	9e 3f       	cpi	r25, 0xFE	; 254
    7ca6:	51 05       	cpc	r21, r1
    7ca8:	68 f0       	brcs	.+26     	; 0x7cc4 <__divsf3_pse+0x82>
    7caa:	b6 c0       	rjmp	.+364    	; 0x7e18 <__fp_inf>
    7cac:	5e c1       	rjmp	.+700    	; 0x7f6a <__fp_szero>
    7cae:	5f 3f       	cpi	r21, 0xFF	; 255
    7cb0:	ec f3       	brlt	.-6      	; 0x7cac <__divsf3_pse+0x6a>
    7cb2:	98 3e       	cpi	r25, 0xE8	; 232
    7cb4:	dc f3       	brlt	.-10     	; 0x7cac <__divsf3_pse+0x6a>
    7cb6:	86 95       	lsr	r24
    7cb8:	77 95       	ror	r23
    7cba:	67 95       	ror	r22
    7cbc:	b7 95       	ror	r27
    7cbe:	f7 95       	ror	r31
    7cc0:	9f 5f       	subi	r25, 0xFF	; 255
    7cc2:	c9 f7       	brne	.-14     	; 0x7cb6 <__divsf3_pse+0x74>
    7cc4:	88 0f       	add	r24, r24
    7cc6:	91 1d       	adc	r25, r1
    7cc8:	96 95       	lsr	r25
    7cca:	87 95       	ror	r24
    7ccc:	97 f9       	bld	r25, 7
    7cce:	08 95       	ret
    7cd0:	e1 e0       	ldi	r30, 0x01	; 1
    7cd2:	66 0f       	add	r22, r22
    7cd4:	77 1f       	adc	r23, r23
    7cd6:	88 1f       	adc	r24, r24
    7cd8:	bb 1f       	adc	r27, r27
    7cda:	62 17       	cp	r22, r18
    7cdc:	73 07       	cpc	r23, r19
    7cde:	84 07       	cpc	r24, r20
    7ce0:	ba 07       	cpc	r27, r26
    7ce2:	20 f0       	brcs	.+8      	; 0x7cec <__divsf3_pse+0xaa>
    7ce4:	62 1b       	sub	r22, r18
    7ce6:	73 0b       	sbc	r23, r19
    7ce8:	84 0b       	sbc	r24, r20
    7cea:	ba 0b       	sbc	r27, r26
    7cec:	ee 1f       	adc	r30, r30
    7cee:	88 f7       	brcc	.-30     	; 0x7cd2 <__divsf3_pse+0x90>
    7cf0:	e0 95       	com	r30
    7cf2:	08 95       	ret

00007cf4 <__fixsfsi>:
    7cf4:	04 d0       	rcall	.+8      	; 0x7cfe <__fixunssfsi>
    7cf6:	68 94       	set
    7cf8:	b1 11       	cpse	r27, r1
    7cfa:	37 c1       	rjmp	.+622    	; 0x7f6a <__fp_szero>
    7cfc:	08 95       	ret

00007cfe <__fixunssfsi>:
    7cfe:	1a d1       	rcall	.+564    	; 0x7f34 <__fp_splitA>
    7d00:	88 f0       	brcs	.+34     	; 0x7d24 <__fixunssfsi+0x26>
    7d02:	9f 57       	subi	r25, 0x7F	; 127
    7d04:	90 f0       	brcs	.+36     	; 0x7d2a <__fixunssfsi+0x2c>
    7d06:	b9 2f       	mov	r27, r25
    7d08:	99 27       	eor	r25, r25
    7d0a:	b7 51       	subi	r27, 0x17	; 23
    7d0c:	a0 f0       	brcs	.+40     	; 0x7d36 <__fixunssfsi+0x38>
    7d0e:	d1 f0       	breq	.+52     	; 0x7d44 <__fixunssfsi+0x46>
    7d10:	66 0f       	add	r22, r22
    7d12:	77 1f       	adc	r23, r23
    7d14:	88 1f       	adc	r24, r24
    7d16:	99 1f       	adc	r25, r25
    7d18:	1a f0       	brmi	.+6      	; 0x7d20 <__fixunssfsi+0x22>
    7d1a:	ba 95       	dec	r27
    7d1c:	c9 f7       	brne	.-14     	; 0x7d10 <__fixunssfsi+0x12>
    7d1e:	12 c0       	rjmp	.+36     	; 0x7d44 <__fixunssfsi+0x46>
    7d20:	b1 30       	cpi	r27, 0x01	; 1
    7d22:	81 f0       	breq	.+32     	; 0x7d44 <__fixunssfsi+0x46>
    7d24:	21 d1       	rcall	.+578    	; 0x7f68 <__fp_zero>
    7d26:	b1 e0       	ldi	r27, 0x01	; 1
    7d28:	08 95       	ret
    7d2a:	1e c1       	rjmp	.+572    	; 0x7f68 <__fp_zero>
    7d2c:	67 2f       	mov	r22, r23
    7d2e:	78 2f       	mov	r23, r24
    7d30:	88 27       	eor	r24, r24
    7d32:	b8 5f       	subi	r27, 0xF8	; 248
    7d34:	39 f0       	breq	.+14     	; 0x7d44 <__fixunssfsi+0x46>
    7d36:	b9 3f       	cpi	r27, 0xF9	; 249
    7d38:	cc f3       	brlt	.-14     	; 0x7d2c <__fixunssfsi+0x2e>
    7d3a:	86 95       	lsr	r24
    7d3c:	77 95       	ror	r23
    7d3e:	67 95       	ror	r22
    7d40:	b3 95       	inc	r27
    7d42:	d9 f7       	brne	.-10     	; 0x7d3a <__fixunssfsi+0x3c>
    7d44:	3e f4       	brtc	.+14     	; 0x7d54 <__fixunssfsi+0x56>
    7d46:	90 95       	com	r25
    7d48:	80 95       	com	r24
    7d4a:	70 95       	com	r23
    7d4c:	61 95       	neg	r22
    7d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    7d50:	8f 4f       	sbci	r24, 0xFF	; 255
    7d52:	9f 4f       	sbci	r25, 0xFF	; 255
    7d54:	08 95       	ret

00007d56 <__floatunsisf>:
    7d56:	e8 94       	clt
    7d58:	09 c0       	rjmp	.+18     	; 0x7d6c <__floatsisf+0x12>

00007d5a <__floatsisf>:
    7d5a:	97 fb       	bst	r25, 7
    7d5c:	3e f4       	brtc	.+14     	; 0x7d6c <__floatsisf+0x12>
    7d5e:	90 95       	com	r25
    7d60:	80 95       	com	r24
    7d62:	70 95       	com	r23
    7d64:	61 95       	neg	r22
    7d66:	7f 4f       	sbci	r23, 0xFF	; 255
    7d68:	8f 4f       	sbci	r24, 0xFF	; 255
    7d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    7d6c:	99 23       	and	r25, r25
    7d6e:	a9 f0       	breq	.+42     	; 0x7d9a <__floatsisf+0x40>
    7d70:	f9 2f       	mov	r31, r25
    7d72:	96 e9       	ldi	r25, 0x96	; 150
    7d74:	bb 27       	eor	r27, r27
    7d76:	93 95       	inc	r25
    7d78:	f6 95       	lsr	r31
    7d7a:	87 95       	ror	r24
    7d7c:	77 95       	ror	r23
    7d7e:	67 95       	ror	r22
    7d80:	b7 95       	ror	r27
    7d82:	f1 11       	cpse	r31, r1
    7d84:	f8 cf       	rjmp	.-16     	; 0x7d76 <__floatsisf+0x1c>
    7d86:	fa f4       	brpl	.+62     	; 0x7dc6 <__floatsisf+0x6c>
    7d88:	bb 0f       	add	r27, r27
    7d8a:	11 f4       	brne	.+4      	; 0x7d90 <__floatsisf+0x36>
    7d8c:	60 ff       	sbrs	r22, 0
    7d8e:	1b c0       	rjmp	.+54     	; 0x7dc6 <__floatsisf+0x6c>
    7d90:	6f 5f       	subi	r22, 0xFF	; 255
    7d92:	7f 4f       	sbci	r23, 0xFF	; 255
    7d94:	8f 4f       	sbci	r24, 0xFF	; 255
    7d96:	9f 4f       	sbci	r25, 0xFF	; 255
    7d98:	16 c0       	rjmp	.+44     	; 0x7dc6 <__floatsisf+0x6c>
    7d9a:	88 23       	and	r24, r24
    7d9c:	11 f0       	breq	.+4      	; 0x7da2 <__floatsisf+0x48>
    7d9e:	96 e9       	ldi	r25, 0x96	; 150
    7da0:	11 c0       	rjmp	.+34     	; 0x7dc4 <__floatsisf+0x6a>
    7da2:	77 23       	and	r23, r23
    7da4:	21 f0       	breq	.+8      	; 0x7dae <__floatsisf+0x54>
    7da6:	9e e8       	ldi	r25, 0x8E	; 142
    7da8:	87 2f       	mov	r24, r23
    7daa:	76 2f       	mov	r23, r22
    7dac:	05 c0       	rjmp	.+10     	; 0x7db8 <__floatsisf+0x5e>
    7dae:	66 23       	and	r22, r22
    7db0:	71 f0       	breq	.+28     	; 0x7dce <__floatsisf+0x74>
    7db2:	96 e8       	ldi	r25, 0x86	; 134
    7db4:	86 2f       	mov	r24, r22
    7db6:	70 e0       	ldi	r23, 0x00	; 0
    7db8:	60 e0       	ldi	r22, 0x00	; 0
    7dba:	2a f0       	brmi	.+10     	; 0x7dc6 <__floatsisf+0x6c>
    7dbc:	9a 95       	dec	r25
    7dbe:	66 0f       	add	r22, r22
    7dc0:	77 1f       	adc	r23, r23
    7dc2:	88 1f       	adc	r24, r24
    7dc4:	da f7       	brpl	.-10     	; 0x7dbc <__floatsisf+0x62>
    7dc6:	88 0f       	add	r24, r24
    7dc8:	96 95       	lsr	r25
    7dca:	87 95       	ror	r24
    7dcc:	97 f9       	bld	r25, 7
    7dce:	08 95       	ret

00007dd0 <__fp_cmp>:
    7dd0:	99 0f       	add	r25, r25
    7dd2:	00 08       	sbc	r0, r0
    7dd4:	55 0f       	add	r21, r21
    7dd6:	aa 0b       	sbc	r26, r26
    7dd8:	e0 e8       	ldi	r30, 0x80	; 128
    7dda:	fe ef       	ldi	r31, 0xFE	; 254
    7ddc:	16 16       	cp	r1, r22
    7dde:	17 06       	cpc	r1, r23
    7de0:	e8 07       	cpc	r30, r24
    7de2:	f9 07       	cpc	r31, r25
    7de4:	c0 f0       	brcs	.+48     	; 0x7e16 <__fp_cmp+0x46>
    7de6:	12 16       	cp	r1, r18
    7de8:	13 06       	cpc	r1, r19
    7dea:	e4 07       	cpc	r30, r20
    7dec:	f5 07       	cpc	r31, r21
    7dee:	98 f0       	brcs	.+38     	; 0x7e16 <__fp_cmp+0x46>
    7df0:	62 1b       	sub	r22, r18
    7df2:	73 0b       	sbc	r23, r19
    7df4:	84 0b       	sbc	r24, r20
    7df6:	95 0b       	sbc	r25, r21
    7df8:	39 f4       	brne	.+14     	; 0x7e08 <__fp_cmp+0x38>
    7dfa:	0a 26       	eor	r0, r26
    7dfc:	61 f0       	breq	.+24     	; 0x7e16 <__fp_cmp+0x46>
    7dfe:	23 2b       	or	r18, r19
    7e00:	24 2b       	or	r18, r20
    7e02:	25 2b       	or	r18, r21
    7e04:	21 f4       	brne	.+8      	; 0x7e0e <__fp_cmp+0x3e>
    7e06:	08 95       	ret
    7e08:	0a 26       	eor	r0, r26
    7e0a:	09 f4       	brne	.+2      	; 0x7e0e <__fp_cmp+0x3e>
    7e0c:	a1 40       	sbci	r26, 0x01	; 1
    7e0e:	a6 95       	lsr	r26
    7e10:	8f ef       	ldi	r24, 0xFF	; 255
    7e12:	81 1d       	adc	r24, r1
    7e14:	81 1d       	adc	r24, r1
    7e16:	08 95       	ret

00007e18 <__fp_inf>:
    7e18:	97 f9       	bld	r25, 7
    7e1a:	9f 67       	ori	r25, 0x7F	; 127
    7e1c:	80 e8       	ldi	r24, 0x80	; 128
    7e1e:	70 e0       	ldi	r23, 0x00	; 0
    7e20:	60 e0       	ldi	r22, 0x00	; 0
    7e22:	08 95       	ret

00007e24 <__fp_nan>:
    7e24:	9f ef       	ldi	r25, 0xFF	; 255
    7e26:	80 ec       	ldi	r24, 0xC0	; 192
    7e28:	08 95       	ret

00007e2a <__fp_powser>:
    7e2a:	df 93       	push	r29
    7e2c:	cf 93       	push	r28
    7e2e:	1f 93       	push	r17
    7e30:	0f 93       	push	r16
    7e32:	ff 92       	push	r15
    7e34:	ef 92       	push	r14
    7e36:	df 92       	push	r13
    7e38:	7b 01       	movw	r14, r22
    7e3a:	8c 01       	movw	r16, r24
    7e3c:	68 94       	set
    7e3e:	05 c0       	rjmp	.+10     	; 0x7e4a <__fp_powser+0x20>
    7e40:	da 2e       	mov	r13, r26
    7e42:	ef 01       	movw	r28, r30
    7e44:	ab d0       	rcall	.+342    	; 0x7f9c <__mulsf3x>
    7e46:	fe 01       	movw	r30, r28
    7e48:	e8 94       	clt
    7e4a:	a5 91       	lpm	r26, Z+
    7e4c:	25 91       	lpm	r18, Z+
    7e4e:	35 91       	lpm	r19, Z+
    7e50:	45 91       	lpm	r20, Z+
    7e52:	55 91       	lpm	r21, Z+
    7e54:	ae f3       	brts	.-22     	; 0x7e40 <__fp_powser+0x16>
    7e56:	ef 01       	movw	r28, r30
    7e58:	29 de       	rcall	.-942    	; 0x7aac <__addsf3x>
    7e5a:	fe 01       	movw	r30, r28
    7e5c:	97 01       	movw	r18, r14
    7e5e:	a8 01       	movw	r20, r16
    7e60:	da 94       	dec	r13
    7e62:	79 f7       	brne	.-34     	; 0x7e42 <__fp_powser+0x18>
    7e64:	df 90       	pop	r13
    7e66:	ef 90       	pop	r14
    7e68:	ff 90       	pop	r15
    7e6a:	0f 91       	pop	r16
    7e6c:	1f 91       	pop	r17
    7e6e:	cf 91       	pop	r28
    7e70:	df 91       	pop	r29
    7e72:	08 95       	ret

00007e74 <__fp_pscA>:
    7e74:	00 24       	eor	r0, r0
    7e76:	0a 94       	dec	r0
    7e78:	16 16       	cp	r1, r22
    7e7a:	17 06       	cpc	r1, r23
    7e7c:	18 06       	cpc	r1, r24
    7e7e:	09 06       	cpc	r0, r25
    7e80:	08 95       	ret

00007e82 <__fp_pscB>:
    7e82:	00 24       	eor	r0, r0
    7e84:	0a 94       	dec	r0
    7e86:	12 16       	cp	r1, r18
    7e88:	13 06       	cpc	r1, r19
    7e8a:	14 06       	cpc	r1, r20
    7e8c:	05 06       	cpc	r0, r21
    7e8e:	08 95       	ret
    7e90:	c9 cf       	rjmp	.-110    	; 0x7e24 <__fp_nan>

00007e92 <__fp_rempio2>:
    7e92:	50 d0       	rcall	.+160    	; 0x7f34 <__fp_splitA>
    7e94:	e8 f3       	brcs	.-6      	; 0x7e90 <__fp_pscB+0xe>
    7e96:	e8 94       	clt
    7e98:	e0 e0       	ldi	r30, 0x00	; 0
    7e9a:	bb 27       	eor	r27, r27
    7e9c:	9f 57       	subi	r25, 0x7F	; 127
    7e9e:	f0 f0       	brcs	.+60     	; 0x7edc <__fp_rempio2+0x4a>
    7ea0:	2a ed       	ldi	r18, 0xDA	; 218
    7ea2:	3f e0       	ldi	r19, 0x0F	; 15
    7ea4:	49 ec       	ldi	r20, 0xC9	; 201
    7ea6:	06 c0       	rjmp	.+12     	; 0x7eb4 <__fp_rempio2+0x22>
    7ea8:	ee 0f       	add	r30, r30
    7eaa:	bb 0f       	add	r27, r27
    7eac:	66 1f       	adc	r22, r22
    7eae:	77 1f       	adc	r23, r23
    7eb0:	88 1f       	adc	r24, r24
    7eb2:	28 f0       	brcs	.+10     	; 0x7ebe <__fp_rempio2+0x2c>
    7eb4:	b2 3a       	cpi	r27, 0xA2	; 162
    7eb6:	62 07       	cpc	r22, r18
    7eb8:	73 07       	cpc	r23, r19
    7eba:	84 07       	cpc	r24, r20
    7ebc:	28 f0       	brcs	.+10     	; 0x7ec8 <__fp_rempio2+0x36>
    7ebe:	b2 5a       	subi	r27, 0xA2	; 162
    7ec0:	62 0b       	sbc	r22, r18
    7ec2:	73 0b       	sbc	r23, r19
    7ec4:	84 0b       	sbc	r24, r20
    7ec6:	e3 95       	inc	r30
    7ec8:	9a 95       	dec	r25
    7eca:	72 f7       	brpl	.-36     	; 0x7ea8 <__fp_rempio2+0x16>
    7ecc:	80 38       	cpi	r24, 0x80	; 128
    7ece:	30 f4       	brcc	.+12     	; 0x7edc <__fp_rempio2+0x4a>
    7ed0:	9a 95       	dec	r25
    7ed2:	bb 0f       	add	r27, r27
    7ed4:	66 1f       	adc	r22, r22
    7ed6:	77 1f       	adc	r23, r23
    7ed8:	88 1f       	adc	r24, r24
    7eda:	d2 f7       	brpl	.-12     	; 0x7ed0 <__fp_rempio2+0x3e>
    7edc:	90 48       	sbci	r25, 0x80	; 128
    7ede:	c0 c0       	rjmp	.+384    	; 0x8060 <__fp_mpack_finite>

00007ee0 <__fp_round>:
    7ee0:	09 2e       	mov	r0, r25
    7ee2:	03 94       	inc	r0
    7ee4:	00 0c       	add	r0, r0
    7ee6:	11 f4       	brne	.+4      	; 0x7eec <__fp_round+0xc>
    7ee8:	88 23       	and	r24, r24
    7eea:	52 f0       	brmi	.+20     	; 0x7f00 <__fp_round+0x20>
    7eec:	bb 0f       	add	r27, r27
    7eee:	40 f4       	brcc	.+16     	; 0x7f00 <__fp_round+0x20>
    7ef0:	bf 2b       	or	r27, r31
    7ef2:	11 f4       	brne	.+4      	; 0x7ef8 <__fp_round+0x18>
    7ef4:	60 ff       	sbrs	r22, 0
    7ef6:	04 c0       	rjmp	.+8      	; 0x7f00 <__fp_round+0x20>
    7ef8:	6f 5f       	subi	r22, 0xFF	; 255
    7efa:	7f 4f       	sbci	r23, 0xFF	; 255
    7efc:	8f 4f       	sbci	r24, 0xFF	; 255
    7efe:	9f 4f       	sbci	r25, 0xFF	; 255
    7f00:	08 95       	ret

00007f02 <__fp_sinus>:
    7f02:	ef 93       	push	r30
    7f04:	e0 ff       	sbrs	r30, 0
    7f06:	06 c0       	rjmp	.+12     	; 0x7f14 <__fp_sinus+0x12>
    7f08:	a2 ea       	ldi	r26, 0xA2	; 162
    7f0a:	2a ed       	ldi	r18, 0xDA	; 218
    7f0c:	3f e0       	ldi	r19, 0x0F	; 15
    7f0e:	49 ec       	ldi	r20, 0xC9	; 201
    7f10:	5f eb       	ldi	r21, 0xBF	; 191
    7f12:	cc dd       	rcall	.-1128   	; 0x7aac <__addsf3x>
    7f14:	e5 df       	rcall	.-54     	; 0x7ee0 <__fp_round>
    7f16:	0f 90       	pop	r0
    7f18:	03 94       	inc	r0
    7f1a:	01 fc       	sbrc	r0, 1
    7f1c:	90 58       	subi	r25, 0x80	; 128
    7f1e:	eb e7       	ldi	r30, 0x7B	; 123
    7f20:	f1 e0       	ldi	r31, 0x01	; 1
    7f22:	aa c0       	rjmp	.+340    	; 0x8078 <__fp_powsodd>

00007f24 <__fp_split3>:
    7f24:	57 fd       	sbrc	r21, 7
    7f26:	90 58       	subi	r25, 0x80	; 128
    7f28:	44 0f       	add	r20, r20
    7f2a:	55 1f       	adc	r21, r21
    7f2c:	59 f0       	breq	.+22     	; 0x7f44 <__fp_splitA+0x10>
    7f2e:	5f 3f       	cpi	r21, 0xFF	; 255
    7f30:	71 f0       	breq	.+28     	; 0x7f4e <__fp_splitA+0x1a>
    7f32:	47 95       	ror	r20

00007f34 <__fp_splitA>:
    7f34:	88 0f       	add	r24, r24
    7f36:	97 fb       	bst	r25, 7
    7f38:	99 1f       	adc	r25, r25
    7f3a:	61 f0       	breq	.+24     	; 0x7f54 <__fp_splitA+0x20>
    7f3c:	9f 3f       	cpi	r25, 0xFF	; 255
    7f3e:	79 f0       	breq	.+30     	; 0x7f5e <__fp_splitA+0x2a>
    7f40:	87 95       	ror	r24
    7f42:	08 95       	ret
    7f44:	12 16       	cp	r1, r18
    7f46:	13 06       	cpc	r1, r19
    7f48:	14 06       	cpc	r1, r20
    7f4a:	55 1f       	adc	r21, r21
    7f4c:	f2 cf       	rjmp	.-28     	; 0x7f32 <__fp_split3+0xe>
    7f4e:	46 95       	lsr	r20
    7f50:	f1 df       	rcall	.-30     	; 0x7f34 <__fp_splitA>
    7f52:	08 c0       	rjmp	.+16     	; 0x7f64 <__fp_splitA+0x30>
    7f54:	16 16       	cp	r1, r22
    7f56:	17 06       	cpc	r1, r23
    7f58:	18 06       	cpc	r1, r24
    7f5a:	99 1f       	adc	r25, r25
    7f5c:	f1 cf       	rjmp	.-30     	; 0x7f40 <__fp_splitA+0xc>
    7f5e:	86 95       	lsr	r24
    7f60:	71 05       	cpc	r23, r1
    7f62:	61 05       	cpc	r22, r1
    7f64:	08 94       	sec
    7f66:	08 95       	ret

00007f68 <__fp_zero>:
    7f68:	e8 94       	clt

00007f6a <__fp_szero>:
    7f6a:	bb 27       	eor	r27, r27
    7f6c:	66 27       	eor	r22, r22
    7f6e:	77 27       	eor	r23, r23
    7f70:	cb 01       	movw	r24, r22
    7f72:	97 f9       	bld	r25, 7
    7f74:	08 95       	ret

00007f76 <inverse>:
    7f76:	9b 01       	movw	r18, r22
    7f78:	ac 01       	movw	r20, r24
    7f7a:	60 e0       	ldi	r22, 0x00	; 0
    7f7c:	70 e0       	ldi	r23, 0x00	; 0
    7f7e:	80 e8       	ldi	r24, 0x80	; 128
    7f80:	9f e3       	ldi	r25, 0x3F	; 63
    7f82:	50 ce       	rjmp	.-864    	; 0x7c24 <__divsf3>

00007f84 <__mulsf3>:
    7f84:	0b d0       	rcall	.+22     	; 0x7f9c <__mulsf3x>
    7f86:	ac cf       	rjmp	.-168    	; 0x7ee0 <__fp_round>
    7f88:	75 df       	rcall	.-278    	; 0x7e74 <__fp_pscA>
    7f8a:	28 f0       	brcs	.+10     	; 0x7f96 <__mulsf3+0x12>
    7f8c:	7a df       	rcall	.-268    	; 0x7e82 <__fp_pscB>
    7f8e:	18 f0       	brcs	.+6      	; 0x7f96 <__mulsf3+0x12>
    7f90:	95 23       	and	r25, r21
    7f92:	09 f0       	breq	.+2      	; 0x7f96 <__mulsf3+0x12>
    7f94:	41 cf       	rjmp	.-382    	; 0x7e18 <__fp_inf>
    7f96:	46 cf       	rjmp	.-372    	; 0x7e24 <__fp_nan>
    7f98:	11 24       	eor	r1, r1
    7f9a:	e7 cf       	rjmp	.-50     	; 0x7f6a <__fp_szero>

00007f9c <__mulsf3x>:
    7f9c:	c3 df       	rcall	.-122    	; 0x7f24 <__fp_split3>
    7f9e:	a0 f3       	brcs	.-24     	; 0x7f88 <__mulsf3+0x4>

00007fa0 <__mulsf3_pse>:
    7fa0:	95 9f       	mul	r25, r21
    7fa2:	d1 f3       	breq	.-12     	; 0x7f98 <__mulsf3+0x14>
    7fa4:	95 0f       	add	r25, r21
    7fa6:	50 e0       	ldi	r21, 0x00	; 0
    7fa8:	55 1f       	adc	r21, r21
    7faa:	62 9f       	mul	r22, r18
    7fac:	f0 01       	movw	r30, r0
    7fae:	72 9f       	mul	r23, r18
    7fb0:	bb 27       	eor	r27, r27
    7fb2:	f0 0d       	add	r31, r0
    7fb4:	b1 1d       	adc	r27, r1
    7fb6:	63 9f       	mul	r22, r19
    7fb8:	aa 27       	eor	r26, r26
    7fba:	f0 0d       	add	r31, r0
    7fbc:	b1 1d       	adc	r27, r1
    7fbe:	aa 1f       	adc	r26, r26
    7fc0:	64 9f       	mul	r22, r20
    7fc2:	66 27       	eor	r22, r22
    7fc4:	b0 0d       	add	r27, r0
    7fc6:	a1 1d       	adc	r26, r1
    7fc8:	66 1f       	adc	r22, r22
    7fca:	82 9f       	mul	r24, r18
    7fcc:	22 27       	eor	r18, r18
    7fce:	b0 0d       	add	r27, r0
    7fd0:	a1 1d       	adc	r26, r1
    7fd2:	62 1f       	adc	r22, r18
    7fd4:	73 9f       	mul	r23, r19
    7fd6:	b0 0d       	add	r27, r0
    7fd8:	a1 1d       	adc	r26, r1
    7fda:	62 1f       	adc	r22, r18
    7fdc:	83 9f       	mul	r24, r19
    7fde:	a0 0d       	add	r26, r0
    7fe0:	61 1d       	adc	r22, r1
    7fe2:	22 1f       	adc	r18, r18
    7fe4:	74 9f       	mul	r23, r20
    7fe6:	33 27       	eor	r19, r19
    7fe8:	a0 0d       	add	r26, r0
    7fea:	61 1d       	adc	r22, r1
    7fec:	23 1f       	adc	r18, r19
    7fee:	84 9f       	mul	r24, r20
    7ff0:	60 0d       	add	r22, r0
    7ff2:	21 1d       	adc	r18, r1
    7ff4:	82 2f       	mov	r24, r18
    7ff6:	76 2f       	mov	r23, r22
    7ff8:	6a 2f       	mov	r22, r26
    7ffa:	11 24       	eor	r1, r1
    7ffc:	9f 57       	subi	r25, 0x7F	; 127
    7ffe:	50 40       	sbci	r21, 0x00	; 0
    8000:	8a f0       	brmi	.+34     	; 0x8024 <__mulsf3_pse+0x84>
    8002:	e1 f0       	breq	.+56     	; 0x803c <__mulsf3_pse+0x9c>
    8004:	88 23       	and	r24, r24
    8006:	4a f0       	brmi	.+18     	; 0x801a <__mulsf3_pse+0x7a>
    8008:	ee 0f       	add	r30, r30
    800a:	ff 1f       	adc	r31, r31
    800c:	bb 1f       	adc	r27, r27
    800e:	66 1f       	adc	r22, r22
    8010:	77 1f       	adc	r23, r23
    8012:	88 1f       	adc	r24, r24
    8014:	91 50       	subi	r25, 0x01	; 1
    8016:	50 40       	sbci	r21, 0x00	; 0
    8018:	a9 f7       	brne	.-22     	; 0x8004 <__mulsf3_pse+0x64>
    801a:	9e 3f       	cpi	r25, 0xFE	; 254
    801c:	51 05       	cpc	r21, r1
    801e:	70 f0       	brcs	.+28     	; 0x803c <__mulsf3_pse+0x9c>
    8020:	fb ce       	rjmp	.-522    	; 0x7e18 <__fp_inf>
    8022:	a3 cf       	rjmp	.-186    	; 0x7f6a <__fp_szero>
    8024:	5f 3f       	cpi	r21, 0xFF	; 255
    8026:	ec f3       	brlt	.-6      	; 0x8022 <__mulsf3_pse+0x82>
    8028:	98 3e       	cpi	r25, 0xE8	; 232
    802a:	dc f3       	brlt	.-10     	; 0x8022 <__mulsf3_pse+0x82>
    802c:	86 95       	lsr	r24
    802e:	77 95       	ror	r23
    8030:	67 95       	ror	r22
    8032:	b7 95       	ror	r27
    8034:	f7 95       	ror	r31
    8036:	e7 95       	ror	r30
    8038:	9f 5f       	subi	r25, 0xFF	; 255
    803a:	c1 f7       	brne	.-16     	; 0x802c <__mulsf3_pse+0x8c>
    803c:	fe 2b       	or	r31, r30
    803e:	88 0f       	add	r24, r24
    8040:	91 1d       	adc	r25, r1
    8042:	96 95       	lsr	r25
    8044:	87 95       	ror	r24
    8046:	97 f9       	bld	r25, 7
    8048:	08 95       	ret

0000804a <sin>:
    804a:	9f 93       	push	r25
    804c:	22 df       	rcall	.-444    	; 0x7e92 <__fp_rempio2>
    804e:	0f 90       	pop	r0
    8050:	07 fc       	sbrc	r0, 7
    8052:	ee 5f       	subi	r30, 0xFE	; 254
    8054:	56 cf       	rjmp	.-340    	; 0x7f02 <__fp_sinus>

00008056 <square>:
    8056:	9b 01       	movw	r18, r22
    8058:	ac 01       	movw	r20, r24
    805a:	94 cf       	rjmp	.-216    	; 0x7f84 <__mulsf3>

0000805c <__fp_mpack>:
    805c:	9f 3f       	cpi	r25, 0xFF	; 255
    805e:	31 f0       	breq	.+12     	; 0x806c <__fp_mpack_finite+0xc>

00008060 <__fp_mpack_finite>:
    8060:	91 50       	subi	r25, 0x01	; 1
    8062:	20 f4       	brcc	.+8      	; 0x806c <__fp_mpack_finite+0xc>
    8064:	87 95       	ror	r24
    8066:	77 95       	ror	r23
    8068:	67 95       	ror	r22
    806a:	b7 95       	ror	r27
    806c:	88 0f       	add	r24, r24
    806e:	91 1d       	adc	r25, r1
    8070:	96 95       	lsr	r25
    8072:	87 95       	ror	r24
    8074:	97 f9       	bld	r25, 7
    8076:	08 95       	ret

00008078 <__fp_powsodd>:
    8078:	9f 93       	push	r25
    807a:	8f 93       	push	r24
    807c:	7f 93       	push	r23
    807e:	6f 93       	push	r22
    8080:	ff 93       	push	r31
    8082:	ef 93       	push	r30
    8084:	9b 01       	movw	r18, r22
    8086:	ac 01       	movw	r20, r24
    8088:	7d df       	rcall	.-262    	; 0x7f84 <__mulsf3>
    808a:	ef 91       	pop	r30
    808c:	ff 91       	pop	r31
    808e:	cd de       	rcall	.-614    	; 0x7e2a <__fp_powser>
    8090:	2f 91       	pop	r18
    8092:	3f 91       	pop	r19
    8094:	4f 91       	pop	r20
    8096:	5f 91       	pop	r21
    8098:	75 cf       	rjmp	.-278    	; 0x7f84 <__mulsf3>

0000809a <__mulsi3>:
    809a:	62 9f       	mul	r22, r18
    809c:	d0 01       	movw	r26, r0
    809e:	73 9f       	mul	r23, r19
    80a0:	f0 01       	movw	r30, r0
    80a2:	82 9f       	mul	r24, r18
    80a4:	e0 0d       	add	r30, r0
    80a6:	f1 1d       	adc	r31, r1
    80a8:	64 9f       	mul	r22, r20
    80aa:	e0 0d       	add	r30, r0
    80ac:	f1 1d       	adc	r31, r1
    80ae:	92 9f       	mul	r25, r18
    80b0:	f0 0d       	add	r31, r0
    80b2:	83 9f       	mul	r24, r19
    80b4:	f0 0d       	add	r31, r0
    80b6:	74 9f       	mul	r23, r20
    80b8:	f0 0d       	add	r31, r0
    80ba:	65 9f       	mul	r22, r21
    80bc:	f0 0d       	add	r31, r0
    80be:	99 27       	eor	r25, r25
    80c0:	72 9f       	mul	r23, r18
    80c2:	b0 0d       	add	r27, r0
    80c4:	e1 1d       	adc	r30, r1
    80c6:	f9 1f       	adc	r31, r25
    80c8:	63 9f       	mul	r22, r19
    80ca:	b0 0d       	add	r27, r0
    80cc:	e1 1d       	adc	r30, r1
    80ce:	f9 1f       	adc	r31, r25
    80d0:	bd 01       	movw	r22, r26
    80d2:	cf 01       	movw	r24, r30
    80d4:	11 24       	eor	r1, r1
    80d6:	08 95       	ret

000080d8 <__udivmodhi4>:
    80d8:	aa 1b       	sub	r26, r26
    80da:	bb 1b       	sub	r27, r27
    80dc:	51 e1       	ldi	r21, 0x11	; 17
    80de:	07 c0       	rjmp	.+14     	; 0x80ee <__udivmodhi4_ep>

000080e0 <__udivmodhi4_loop>:
    80e0:	aa 1f       	adc	r26, r26
    80e2:	bb 1f       	adc	r27, r27
    80e4:	a6 17       	cp	r26, r22
    80e6:	b7 07       	cpc	r27, r23
    80e8:	10 f0       	brcs	.+4      	; 0x80ee <__udivmodhi4_ep>
    80ea:	a6 1b       	sub	r26, r22
    80ec:	b7 0b       	sbc	r27, r23

000080ee <__udivmodhi4_ep>:
    80ee:	88 1f       	adc	r24, r24
    80f0:	99 1f       	adc	r25, r25
    80f2:	5a 95       	dec	r21
    80f4:	a9 f7       	brne	.-22     	; 0x80e0 <__udivmodhi4_loop>
    80f6:	80 95       	com	r24
    80f8:	90 95       	com	r25
    80fa:	bc 01       	movw	r22, r24
    80fc:	cd 01       	movw	r24, r26
    80fe:	08 95       	ret

00008100 <__divmodhi4>:
    8100:	97 fb       	bst	r25, 7
    8102:	09 2e       	mov	r0, r25
    8104:	07 26       	eor	r0, r23
    8106:	0a d0       	rcall	.+20     	; 0x811c <__divmodhi4_neg1>
    8108:	77 fd       	sbrc	r23, 7
    810a:	04 d0       	rcall	.+8      	; 0x8114 <__divmodhi4_neg2>
    810c:	e5 df       	rcall	.-54     	; 0x80d8 <__udivmodhi4>
    810e:	06 d0       	rcall	.+12     	; 0x811c <__divmodhi4_neg1>
    8110:	00 20       	and	r0, r0
    8112:	1a f4       	brpl	.+6      	; 0x811a <__divmodhi4_exit>

00008114 <__divmodhi4_neg2>:
    8114:	70 95       	com	r23
    8116:	61 95       	neg	r22
    8118:	7f 4f       	sbci	r23, 0xFF	; 255

0000811a <__divmodhi4_exit>:
    811a:	08 95       	ret

0000811c <__divmodhi4_neg1>:
    811c:	f6 f7       	brtc	.-4      	; 0x811a <__divmodhi4_exit>
    811e:	90 95       	com	r25
    8120:	81 95       	neg	r24
    8122:	9f 4f       	sbci	r25, 0xFF	; 255
    8124:	08 95       	ret

00008126 <__divmodsi4>:
    8126:	97 fb       	bst	r25, 7
    8128:	09 2e       	mov	r0, r25
    812a:	05 26       	eor	r0, r21
    812c:	0e d0       	rcall	.+28     	; 0x814a <__divmodsi4_neg1>
    812e:	57 fd       	sbrc	r21, 7
    8130:	04 d0       	rcall	.+8      	; 0x813a <__divmodsi4_neg2>
    8132:	14 d0       	rcall	.+40     	; 0x815c <__udivmodsi4>
    8134:	0a d0       	rcall	.+20     	; 0x814a <__divmodsi4_neg1>
    8136:	00 1c       	adc	r0, r0
    8138:	38 f4       	brcc	.+14     	; 0x8148 <__divmodsi4_exit>

0000813a <__divmodsi4_neg2>:
    813a:	50 95       	com	r21
    813c:	40 95       	com	r20
    813e:	30 95       	com	r19
    8140:	21 95       	neg	r18
    8142:	3f 4f       	sbci	r19, 0xFF	; 255
    8144:	4f 4f       	sbci	r20, 0xFF	; 255
    8146:	5f 4f       	sbci	r21, 0xFF	; 255

00008148 <__divmodsi4_exit>:
    8148:	08 95       	ret

0000814a <__divmodsi4_neg1>:
    814a:	f6 f7       	brtc	.-4      	; 0x8148 <__divmodsi4_exit>
    814c:	90 95       	com	r25
    814e:	80 95       	com	r24
    8150:	70 95       	com	r23
    8152:	61 95       	neg	r22
    8154:	7f 4f       	sbci	r23, 0xFF	; 255
    8156:	8f 4f       	sbci	r24, 0xFF	; 255
    8158:	9f 4f       	sbci	r25, 0xFF	; 255
    815a:	08 95       	ret

0000815c <__udivmodsi4>:
    815c:	a1 e2       	ldi	r26, 0x21	; 33
    815e:	1a 2e       	mov	r1, r26
    8160:	aa 1b       	sub	r26, r26
    8162:	bb 1b       	sub	r27, r27
    8164:	fd 01       	movw	r30, r26
    8166:	0d c0       	rjmp	.+26     	; 0x8182 <__udivmodsi4_ep>

00008168 <__udivmodsi4_loop>:
    8168:	aa 1f       	adc	r26, r26
    816a:	bb 1f       	adc	r27, r27
    816c:	ee 1f       	adc	r30, r30
    816e:	ff 1f       	adc	r31, r31
    8170:	a2 17       	cp	r26, r18
    8172:	b3 07       	cpc	r27, r19
    8174:	e4 07       	cpc	r30, r20
    8176:	f5 07       	cpc	r31, r21
    8178:	20 f0       	brcs	.+8      	; 0x8182 <__udivmodsi4_ep>
    817a:	a2 1b       	sub	r26, r18
    817c:	b3 0b       	sbc	r27, r19
    817e:	e4 0b       	sbc	r30, r20
    8180:	f5 0b       	sbc	r31, r21

00008182 <__udivmodsi4_ep>:
    8182:	66 1f       	adc	r22, r22
    8184:	77 1f       	adc	r23, r23
    8186:	88 1f       	adc	r24, r24
    8188:	99 1f       	adc	r25, r25
    818a:	1a 94       	dec	r1
    818c:	69 f7       	brne	.-38     	; 0x8168 <__udivmodsi4_loop>
    818e:	60 95       	com	r22
    8190:	70 95       	com	r23
    8192:	80 95       	com	r24
    8194:	90 95       	com	r25
    8196:	9b 01       	movw	r18, r22
    8198:	ac 01       	movw	r20, r24
    819a:	bd 01       	movw	r22, r26
    819c:	cf 01       	movw	r24, r30
    819e:	08 95       	ret

000081a0 <do_rand>:
    81a0:	af 92       	push	r10
    81a2:	bf 92       	push	r11
    81a4:	cf 92       	push	r12
    81a6:	df 92       	push	r13
    81a8:	ef 92       	push	r14
    81aa:	ff 92       	push	r15
    81ac:	0f 93       	push	r16
    81ae:	1f 93       	push	r17
    81b0:	cf 93       	push	r28
    81b2:	df 93       	push	r29
    81b4:	ec 01       	movw	r28, r24
    81b6:	68 81       	ld	r22, Y
    81b8:	79 81       	ldd	r23, Y+1	; 0x01
    81ba:	8a 81       	ldd	r24, Y+2	; 0x02
    81bc:	9b 81       	ldd	r25, Y+3	; 0x03
    81be:	61 15       	cp	r22, r1
    81c0:	71 05       	cpc	r23, r1
    81c2:	81 05       	cpc	r24, r1
    81c4:	91 05       	cpc	r25, r1
    81c6:	21 f4       	brne	.+8      	; 0x81d0 <do_rand+0x30>
    81c8:	64 e2       	ldi	r22, 0x24	; 36
    81ca:	79 ed       	ldi	r23, 0xD9	; 217
    81cc:	8b e5       	ldi	r24, 0x5B	; 91
    81ce:	97 e0       	ldi	r25, 0x07	; 7
    81d0:	2d e1       	ldi	r18, 0x1D	; 29
    81d2:	33 ef       	ldi	r19, 0xF3	; 243
    81d4:	41 e0       	ldi	r20, 0x01	; 1
    81d6:	50 e0       	ldi	r21, 0x00	; 0
    81d8:	0e 94 93 40 	call	0x8126	; 0x8126 <__divmodsi4>
    81dc:	79 01       	movw	r14, r18
    81de:	8a 01       	movw	r16, r20
    81e0:	27 ea       	ldi	r18, 0xA7	; 167
    81e2:	31 e4       	ldi	r19, 0x41	; 65
    81e4:	40 e0       	ldi	r20, 0x00	; 0
    81e6:	50 e0       	ldi	r21, 0x00	; 0
    81e8:	0e 94 4d 40 	call	0x809a	; 0x809a <__mulsi3>
    81ec:	5b 01       	movw	r10, r22
    81ee:	6c 01       	movw	r12, r24
    81f0:	c8 01       	movw	r24, r16
    81f2:	b7 01       	movw	r22, r14
    81f4:	2c ee       	ldi	r18, 0xEC	; 236
    81f6:	34 ef       	ldi	r19, 0xF4	; 244
    81f8:	4f ef       	ldi	r20, 0xFF	; 255
    81fa:	5f ef       	ldi	r21, 0xFF	; 255
    81fc:	0e 94 4d 40 	call	0x809a	; 0x809a <__mulsi3>
    8200:	6a 0d       	add	r22, r10
    8202:	7b 1d       	adc	r23, r11
    8204:	8c 1d       	adc	r24, r12
    8206:	9d 1d       	adc	r25, r13
    8208:	97 ff       	sbrs	r25, 7
    820a:	04 c0       	rjmp	.+8      	; 0x8214 <do_rand+0x74>
    820c:	61 50       	subi	r22, 0x01	; 1
    820e:	70 40       	sbci	r23, 0x00	; 0
    8210:	80 40       	sbci	r24, 0x00	; 0
    8212:	90 48       	sbci	r25, 0x80	; 128
    8214:	68 83       	st	Y, r22
    8216:	79 83       	std	Y+1, r23	; 0x01
    8218:	8a 83       	std	Y+2, r24	; 0x02
    821a:	9b 83       	std	Y+3, r25	; 0x03
    821c:	7f 77       	andi	r23, 0x7F	; 127
    821e:	cb 01       	movw	r24, r22
    8220:	df 91       	pop	r29
    8222:	cf 91       	pop	r28
    8224:	1f 91       	pop	r17
    8226:	0f 91       	pop	r16
    8228:	ff 90       	pop	r15
    822a:	ef 90       	pop	r14
    822c:	df 90       	pop	r13
    822e:	cf 90       	pop	r12
    8230:	bf 90       	pop	r11
    8232:	af 90       	pop	r10
    8234:	08 95       	ret

00008236 <rand_r>:
    8236:	0e 94 d0 40 	call	0x81a0	; 0x81a0 <do_rand>
    823a:	08 95       	ret

0000823c <rand>:
    823c:	88 e1       	ldi	r24, 0x18	; 24
    823e:	92 e0       	ldi	r25, 0x02	; 2
    8240:	0e 94 d0 40 	call	0x81a0	; 0x81a0 <do_rand>
    8244:	08 95       	ret

00008246 <srand>:
    8246:	a0 e0       	ldi	r26, 0x00	; 0
    8248:	b0 e0       	ldi	r27, 0x00	; 0
    824a:	80 93 18 02 	sts	0x0218, r24
    824e:	90 93 19 02 	sts	0x0219, r25
    8252:	a0 93 1a 02 	sts	0x021A, r26
    8256:	b0 93 1b 02 	sts	0x021B, r27
    825a:	08 95       	ret

0000825c <__eerd_block_m2560>:
    825c:	dc 01       	movw	r26, r24
    825e:	cb 01       	movw	r24, r22

00008260 <__eerd_blraw_m2560>:
    8260:	fc 01       	movw	r30, r24
    8262:	f9 99       	sbic	0x1f, 1	; 31
    8264:	fe cf       	rjmp	.-4      	; 0x8262 <__eerd_blraw_m2560+0x2>
    8266:	06 c0       	rjmp	.+12     	; 0x8274 <__eerd_blraw_m2560+0x14>
    8268:	f2 bd       	out	0x22, r31	; 34
    826a:	e1 bd       	out	0x21, r30	; 33
    826c:	f8 9a       	sbi	0x1f, 0	; 31
    826e:	31 96       	adiw	r30, 0x01	; 1
    8270:	00 b4       	in	r0, 0x20	; 32
    8272:	0d 92       	st	X+, r0
    8274:	41 50       	subi	r20, 0x01	; 1
    8276:	50 40       	sbci	r21, 0x00	; 0
    8278:	b8 f7       	brcc	.-18     	; 0x8268 <__eerd_blraw_m2560+0x8>
    827a:	08 95       	ret

0000827c <__eerd_byte_m2560>:
    827c:	f9 99       	sbic	0x1f, 1	; 31
    827e:	fe cf       	rjmp	.-4      	; 0x827c <__eerd_byte_m2560>
    8280:	92 bd       	out	0x22, r25	; 34
    8282:	81 bd       	out	0x21, r24	; 33
    8284:	f8 9a       	sbi	0x1f, 0	; 31
    8286:	99 27       	eor	r25, r25
    8288:	80 b5       	in	r24, 0x20	; 32
    828a:	08 95       	ret

0000828c <__eerd_word_m2560>:
    828c:	a8 e1       	ldi	r26, 0x18	; 24
    828e:	b0 e0       	ldi	r27, 0x00	; 0
    8290:	42 e0       	ldi	r20, 0x02	; 2
    8292:	50 e0       	ldi	r21, 0x00	; 0
    8294:	0c 94 30 41 	jmp	0x8260	; 0x8260 <__eerd_blraw_m2560>

00008298 <__eeupd_block_m2560>:
    8298:	dc 01       	movw	r26, r24
    829a:	a4 0f       	add	r26, r20
    829c:	b5 1f       	adc	r27, r21
    829e:	41 50       	subi	r20, 0x01	; 1
    82a0:	50 40       	sbci	r21, 0x00	; 0
    82a2:	48 f0       	brcs	.+18     	; 0x82b6 <__eeupd_block_m2560+0x1e>
    82a4:	cb 01       	movw	r24, r22
    82a6:	84 0f       	add	r24, r20
    82a8:	95 1f       	adc	r25, r21
    82aa:	2e 91       	ld	r18, -X
    82ac:	0e 94 5d 41 	call	0x82ba	; 0x82ba <__eeupd_r18_m2560>
    82b0:	41 50       	subi	r20, 0x01	; 1
    82b2:	50 40       	sbci	r21, 0x00	; 0
    82b4:	d0 f7       	brcc	.-12     	; 0x82aa <__eeupd_block_m2560+0x12>
    82b6:	08 95       	ret

000082b8 <__eeupd_byte_m2560>:
    82b8:	26 2f       	mov	r18, r22

000082ba <__eeupd_r18_m2560>:
    82ba:	f9 99       	sbic	0x1f, 1	; 31
    82bc:	fe cf       	rjmp	.-4      	; 0x82ba <__eeupd_r18_m2560>
    82be:	92 bd       	out	0x22, r25	; 34
    82c0:	81 bd       	out	0x21, r24	; 33
    82c2:	f8 9a       	sbi	0x1f, 0	; 31
    82c4:	01 97       	sbiw	r24, 0x01	; 1
    82c6:	00 b4       	in	r0, 0x20	; 32
    82c8:	02 16       	cp	r0, r18
    82ca:	39 f0       	breq	.+14     	; 0x82da <__eeupd_r18_m2560+0x20>
    82cc:	1f ba       	out	0x1f, r1	; 31
    82ce:	20 bd       	out	0x20, r18	; 32
    82d0:	0f b6       	in	r0, 0x3f	; 63
    82d2:	f8 94       	cli
    82d4:	fa 9a       	sbi	0x1f, 2	; 31
    82d6:	f9 9a       	sbi	0x1f, 1	; 31
    82d8:	0f be       	out	0x3f, r0	; 63
    82da:	08 95       	ret

000082dc <__eeupd_word_m2560>:
    82dc:	01 96       	adiw	r24, 0x01	; 1
    82de:	27 2f       	mov	r18, r23
    82e0:	0e 94 5d 41 	call	0x82ba	; 0x82ba <__eeupd_r18_m2560>
    82e4:	0c 94 5c 41 	jmp	0x82b8	; 0x82b8 <__eeupd_byte_m2560>

000082e8 <__eewr_byte_m2560>:
    82e8:	26 2f       	mov	r18, r22

000082ea <__eewr_r18_m2560>:
    82ea:	f9 99       	sbic	0x1f, 1	; 31
    82ec:	fe cf       	rjmp	.-4      	; 0x82ea <__eewr_r18_m2560>
    82ee:	1f ba       	out	0x1f, r1	; 31
    82f0:	92 bd       	out	0x22, r25	; 34
    82f2:	81 bd       	out	0x21, r24	; 33
    82f4:	20 bd       	out	0x20, r18	; 32
    82f6:	0f b6       	in	r0, 0x3f	; 63
    82f8:	f8 94       	cli
    82fa:	fa 9a       	sbi	0x1f, 2	; 31
    82fc:	f9 9a       	sbi	0x1f, 1	; 31
    82fe:	0f be       	out	0x3f, r0	; 63
    8300:	01 96       	adiw	r24, 0x01	; 1
    8302:	08 95       	ret

00008304 <__eewr_word_m2560>:
    8304:	0e 94 74 41 	call	0x82e8	; 0x82e8 <__eewr_byte_m2560>
    8308:	27 2f       	mov	r18, r23
    830a:	0c 94 75 41 	jmp	0x82ea	; 0x82ea <__eewr_r18_m2560>

0000830e <_exit>:
    830e:	ff cf       	rjmp	.-2      	; 0x830e <_exit>
