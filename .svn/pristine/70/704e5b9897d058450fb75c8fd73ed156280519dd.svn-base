
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  0000a5c2  0000a656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a5c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000942  0080021e  0080021e  0000a674  2**0
                  ALLOC
  3 .stab         00003780  00000000  00000000  0000a674  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f1b  00000000  00000000  0000ddf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000238  00000000  00000000  0000ed0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00002590  00000000  00000000  0000ef47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000647e  00000000  00000000  000114d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001284  00000000  00000000  00017955  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007e1f  00000000  00000000  00018bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008e0  00000000  00000000  000209f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001cab  00000000  00000000  000212d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000268c  00000000  00000000  00022f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000296  00000000  00000000  0002560f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000128  00000000  00000000  000258a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__vector_10>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 35 12 	jmp	0x246a	; 0x246a <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 ed 1d 	jmp	0x3bda	; 0x3bda <__vector_15>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 b1 1c 	jmp	0x3962	; 0x3962 <__vector_25>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <__vector_29>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 06 38 	jmp	0x700c	; 0x700c <__vector_32>
      84:	0c 94 1c 38 	jmp	0x7038	; 0x7038 <__vector_33>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 79 37 	jmp	0x6ef2	; 0x6ef2 <__vector_35>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a8:	0c 94 4d 37 	jmp	0x6e9a	; 0x6e9a <__vector_42>
      ac:	0c 94 63 37 	jmp	0x6ec6	; 0x6ec6 <__vector_43>
      b0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b4:	0c 94 b6 36 	jmp	0x6d6c	; 0x6d6c <__vector_45>
      b8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      bc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      dc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e4:	12 15       	cp	r17, r2
      e6:	f6 14       	cp	r15, r6
      e8:	c4 14       	cp	r12, r4
      ea:	af 14       	cp	r10, r15
      ec:	86 14       	cp	r8, r6
      ee:	74 14       	cp	r7, r4
      f0:	4b 14       	cp	r4, r11
      f2:	2f 14       	cp	r2, r15
      f4:	f6 13       	cpse	r31, r22
      f6:	de 13       	cpse	r29, r30
      f8:	77 13       	cpse	r23, r23
      fa:	77 13       	cpse	r23, r23
      fc:	77 13       	cpse	r23, r23
      fe:	77 13       	cpse	r23, r23
     100:	77 13       	cpse	r23, r23
     102:	77 13       	cpse	r23, r23
     104:	23 14       	cp	r2, r3
     106:	d3 13       	cpse	r29, r19
     108:	77 13       	cpse	r23, r23
     10a:	77 13       	cpse	r23, r23
     10c:	77 13       	cpse	r23, r23
     10e:	77 13       	cpse	r23, r23
     110:	77 13       	cpse	r23, r23
     112:	77 13       	cpse	r23, r23
     114:	77 13       	cpse	r23, r23
     116:	77 13       	cpse	r23, r23
     118:	77 13       	cpse	r23, r23
     11a:	77 13       	cpse	r23, r23
     11c:	77 13       	cpse	r23, r23
     11e:	77 13       	cpse	r23, r23
     120:	f6 13       	cpse	r31, r22
     122:	c4 14       	cp	r12, r4
     124:	ab 13       	cpse	r26, r27
     126:	9e 13       	cpse	r25, r30
     128:	77 13       	cpse	r23, r23
     12a:	77 13       	cpse	r23, r23
     12c:	77 13       	cpse	r23, r23
     12e:	77 13       	cpse	r23, r23
     130:	77 13       	cpse	r23, r23
     132:	77 13       	cpse	r23, r23
     134:	77 13       	cpse	r23, r23
     136:	77 13       	cpse	r23, r23
     138:	77 13       	cpse	r23, r23
     13a:	77 13       	cpse	r23, r23
     13c:	77 13       	cpse	r23, r23
     13e:	77 13       	cpse	r23, r23
     140:	86 14       	cp	r8, r6
     142:	4b 14       	cp	r4, r11
     144:	77 13       	cpse	r23, r23
     146:	77 13       	cpse	r23, r23
     148:	12 15       	cp	r17, r2
     14a:	74 14       	cp	r7, r4
     14c:	b7 13       	cpse	r27, r23
     14e:	08 4a       	sbci	r16, 0xA8	; 168
     150:	d7 3b       	cpi	r29, 0xB7	; 183
     152:	3b ce       	rjmp	.-906    	; 0xfffffdca <__eeprom_end+0xff7efdca>
     154:	01 6e       	ori	r16, 0xE1	; 225
     156:	84 bc       	out	0x24, r8	; 36
     158:	bf fd       	.word	0xfdbf	; ????
     15a:	c1 2f       	mov	r28, r17
     15c:	3d 6c       	ori	r19, 0xCD	; 205
     15e:	74 31       	cpi	r23, 0x14	; 20
     160:	9a bd       	out	0x2a, r25	; 42
     162:	56 83       	std	Z+6, r21	; 0x06
     164:	3d da       	rcall	.-2950   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     166:	3d 00       	.word	0x003d	; ????
     168:	c7 7f       	andi	r28, 0xF7	; 247
     16a:	11 be       	out	0x31, r1	; 49
     16c:	d9 e4       	ldi	r29, 0x49	; 73
     16e:	bb 4c       	sbci	r27, 0xCB	; 203
     170:	3e 91       	ld	r19, -X
     172:	6b aa       	std	Y+51, r6	; 0x33
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 05       	cpc	r19, r15
     17c:	a8 4c       	sbci	r26, 0xC8	; 200
     17e:	cd b2       	in	r12, 0x1d	; 29
     180:	d4 4e       	sbci	r29, 0xE4	; 228
     182:	b9 38       	cpi	r27, 0x89	; 137
     184:	36 a9       	ldd	r19, Z+54	; 0x36
     186:	02 0c       	add	r0, r2
     188:	50 b9       	out	0x00, r21	; 0
     18a:	91 86       	std	Z+9, r9	; 0x09
     18c:	88 08       	sbc	r8, r8
     18e:	3c a6       	std	Y+44, r3	; 0x2c
     190:	aa aa       	std	Y+50, r10	; 0x32
     192:	2a be       	out	0x3a, r2	; 58
     194:	00 00       	nop
     196:	00 80       	ld	r0, Z
     198:	3f 00       	.word	0x003f	; ????

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	d1 e2       	ldi	r29, 0x21	; 33
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0c bf       	out	0x3c, r16	; 60

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	e2 ec       	ldi	r30, 0xC2	; 194
     1b2:	f5 ea       	ldi	r31, 0xA5	; 165
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <.do_copy_data_start>

000001b6 <.do_copy_data_loop>:
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0

000001ba <.do_copy_data_start>:
     1ba:	ae 31       	cpi	r26, 0x1E	; 30
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <.do_copy_data_loop>

000001c0 <__do_clear_bss>:
     1c0:	1b e0       	ldi	r17, 0x0B	; 11
     1c2:	ae e1       	ldi	r26, 0x1E	; 30
     1c4:	b2 e0       	ldi	r27, 0x02	; 2
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a0 36       	cpi	r26, 0x60	; 96
     1cc:	b1 07       	cpc	r27, r17
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
     1d4:	0c 94 e0 52 	jmp	0xa5c0	; 0xa5c0 <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <main>:
#include "nRF24L01.h"
#include "behaviors.h"
#include "sensors.h"
#include "irCommunication.h"

int main(void) {
     1dc:	2f 92       	push	r2
     1de:	3f 92       	push	r3
     1e0:	4f 92       	push	r4
     1e2:	5f 92       	push	r5
     1e4:	6f 92       	push	r6
     1e6:	7f 92       	push	r7
     1e8:	8f 92       	push	r8
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	00 d0       	rcall	.+0      	; 0x202 <main+0x26>
     202:	0f 92       	push	r0
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;

	initPeripherals();
     208:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <initPeripherals>

	calibrateSensors();
     20c:	0e 94 b8 3d 	call	0x7b70	; 0x7b70 <calibrateSensors>

	initBehaviors();
     210:	0e 94 32 38 	call	0x7064	; 0x7064 <initBehaviors>

	startTime = getTime100MicroSec();
     214:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     218:	6b 01       	movw	r12, r22
     21a:	7c 01       	movw	r14, r24

	speedStepCounter = getTime100MicroSec();
     21c:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     220:	9b 01       	movw	r18, r22
     222:	ac 01       	movw	r20, r24
     224:	60 93 60 04 	sts	0x0460, r22
     228:	30 93 61 04 	sts	0x0461, r19
     22c:	40 93 62 04 	sts	0x0462, r20
     230:	50 93 63 04 	sts	0x0463, r21
     234:	10 92 64 04 	sts	0x0464, r1
     238:	10 92 65 04 	sts	0x0465, r1
     23c:	10 92 66 04 	sts	0x0466, r1
     240:	10 92 67 04 	sts	0x0467, r1
int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
     244:	aa 24       	eor	r10, r10
     246:	bb 24       	eor	r11, r11
#include "irCommunication.h"

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     248:	00 e0       	ldi	r16, 0x00	; 0
#include "sensors.h"
#include "irCommunication.h"

int main(void) {

	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
     24a:	19 82       	std	Y+1, r1	; 0x01
     24c:	1a 82       	std	Y+2, r1	; 0x02
     24e:	1b 82       	std	Y+3, r1	; 0x03
     250:	1c 82       	std	Y+4, r1	; 0x04
		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
				pwm_red = 255;
     252:	1f ef       	ldi	r17, 0xFF	; 255
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
					case 0:
						pwm_red = 255 - currRand;	
						rgbState = 1;
     254:	22 24       	eor	r2, r2
     256:	23 94       	inc	r2
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
*/

	while(1) {

		currentSelector = getSelector();	// update selector position
     258:	0e 94 67 1d 	call	0x3ace	; 0x3ace <getSelector>
     25c:	80 93 4c 04 	sts	0x044C, r24

		readAccelXYZ();						// update accelerometer values to compute the angle
     260:	0e 94 f8 3c 	call	0x79f0	; 0x79f0 <readAccelXYZ>

		computeAngle();
     264:	0e 94 34 42 	call	0x8468	; 0x8468 <computeAngle>

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
     268:	80 91 4c 04 	lds	r24, 0x044C
     26c:	87 30       	cpi	r24, 0x07	; 7
     26e:	09 f4       	brne	.+2      	; 0x272 <main+0x96>
     270:	59 c2       	rjmp	.+1202   	; 0x724 <main+0x548>
				pwm_green = 255;
				pwm_blue = 255;			
			}
		}

		endTime = getTime100MicroSec();
     272:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     276:	6c 19       	sub	r22, r12
     278:	7d 09       	sbc	r23, r13
     27a:	8e 09       	sbc	r24, r14
     27c:	9f 09       	sbc	r25, r15
     27e:	6e 31       	cpi	r22, 0x1E	; 30
     280:	4b e4       	ldi	r20, 0x4B	; 75
     282:	74 07       	cpc	r23, r20
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	84 07       	cpc	r24, r20
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	94 07       	cpc	r25, r20
     28c:	08 f0       	brcs	.+2      	; 0x290 <main+0xb4>
     28e:	36 c2       	rjmp	.+1132   	; 0x6fc <main+0x520>
			startTime = getTime100MicroSec();
		}

		
		//if(calibrateOdomFlag==0) {
			handleIRRemoteCommands();
     290:	0e 94 65 13 	call	0x26ca	; 0x26ca <handleIRRemoteCommands>
		//}


		//if(calibrateOdomFlag==0) {
			handleRFCommands();
     294:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <handleRFCommands>
		//}


		if(calibrateOdomFlag==0) {
     298:	80 91 4d 05 	lds	r24, 0x054D
     29c:	88 23       	and	r24, r24
     29e:	09 f4       	brne	.+2      	; 0x2a2 <main+0xc6>
     2a0:	fd c0       	rjmp	.+506    	; 0x49c <main+0x2c0>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     2a2:	80 91 4c 04 	lds	r24, 0x044C
     2a6:	87 30       	cpi	r24, 0x07	; 7
     2a8:	09 f4       	brne	.+2      	; 0x2ac <main+0xd0>
     2aa:	e8 c1       	rjmp	.+976    	; 0x67c <main+0x4a0>
     2ac:	88 30       	cpi	r24, 0x08	; 8
     2ae:	08 f0       	brcs	.+2      	; 0x2b2 <main+0xd6>
     2b0:	61 c0       	rjmp	.+194    	; 0x374 <main+0x198>
     2b2:	83 30       	cpi	r24, 0x03	; 3
     2b4:	09 f4       	brne	.+2      	; 0x2b8 <main+0xdc>
     2b6:	94 c2       	rjmp	.+1320   	; 0x7e0 <main+0x604>
     2b8:	84 30       	cpi	r24, 0x04	; 4
     2ba:	08 f0       	brcs	.+2      	; 0x2be <main+0xe2>
     2bc:	4d c2       	rjmp	.+1178   	; 0x758 <main+0x57c>
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <main+0xe8>
     2c2:	36 c3       	rjmp	.+1644   	; 0x930 <main+0x754>
     2c4:	82 30       	cpi	r24, 0x02	; 2
     2c6:	08 f0       	brcs	.+2      	; 0x2ca <main+0xee>
     2c8:	8d c2       	rjmp	.+1306   	; 0x7e4 <main+0x608>
    
			case 0:	// motors in direct power control (no speed control)
					handleMotorsWithNoController();
     2ca:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <handleMotorsWithNoController>
     2ce:	80 91 4c 04 	lds	r24, 0x044C
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     2d2:	88 23       	and	r24, r24
     2d4:	09 f0       	breq	.+2      	; 0x2d8 <main+0xfc>
     2d6:	dd c0       	rjmp	.+442    	; 0x492 <main+0x2b6>
     2d8:	80 e0       	ldi	r24, 0x00	; 0
			handleMotorsWithSpeedController();  
		}

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     2da:	08 17       	cp	r16, r24
     2dc:	09 f4       	brne	.+2      	; 0x2e0 <main+0x104>
     2de:	bc cf       	rjmp	.-136    	; 0x258 <main+0x7c>
			disableObstacleAvoidance();
     2e0:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <disableObstacleAvoidance>
			disableCliffAvoidance();
     2e4:	0e 94 80 3a 	call	0x7500	; 0x7500 <disableCliffAvoidance>
			GREEN_LED0_OFF;
     2e8:	80 91 0b 01 	lds	r24, 0x010B
     2ec:	81 60       	ori	r24, 0x01	; 1
     2ee:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED1_OFF;
     2f2:	80 91 0b 01 	lds	r24, 0x010B
     2f6:	82 60       	ori	r24, 0x02	; 2
     2f8:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED2_OFF;
     2fc:	80 91 0b 01 	lds	r24, 0x010B
     300:	84 60       	ori	r24, 0x04	; 4
     302:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED3_OFF;
     306:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     308:	80 91 0b 01 	lds	r24, 0x010B
     30c:	80 61       	ori	r24, 0x10	; 16
     30e:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED5_OFF;
     312:	80 91 0b 01 	lds	r24, 0x010B
     316:	80 62       	ori	r24, 0x20	; 32
     318:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED6_OFF;
     31c:	80 91 0b 01 	lds	r24, 0x010B
     320:	80 64       	ori	r24, 0x40	; 64
     322:	80 93 0b 01 	sts	0x010B, r24
			GREEN_LED7_OFF;
     326:	80 91 0b 01 	lds	r24, 0x010B
     32a:	80 68       	ori	r24, 0x80	; 128
     32c:	80 93 0b 01 	sts	0x010B, r24
			pwm_red = 255;
     330:	10 93 0c 02 	sts	0x020C, r17
			pwm_green = 255;
     334:	10 93 0d 02 	sts	0x020D, r17
			pwm_blue = 255;
     338:	10 93 0e 02 	sts	0x020E, r17
			updateRedLed(pwm_red);
     33c:	8f ef       	ldi	r24, 0xFF	; 255
     33e:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
			updateGreenLed(pwm_green);
     342:	80 91 0d 02 	lds	r24, 0x020D
     346:	0e 94 d4 3a 	call	0x75a8	; 0x75a8 <updateGreenLed>
			updateBlueLed(pwm_blue);
     34a:	80 91 0e 02 	lds	r24, 0x020E
     34e:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <updateBlueLed>
			setRightSpeed(0);
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
			setLeftSpeed(0);
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
			rgbState = 0;
     35e:	10 92 1c 03 	sts	0x031C, r1
			calibrationWritten = 0;
     362:	10 92 69 04 	sts	0x0469, r1
			demoState = 0;
     366:	10 92 50 04 	sts	0x0450, r1

			irCommState = 0;
     36a:	10 92 c6 04 	sts	0x04C6, r1
     36e:	00 91 4c 04 	lds	r16, 0x044C
     372:	72 cf       	rjmp	.-284    	; 0x258 <main+0x7c>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     374:	8b 30       	cpi	r24, 0x0B	; 11
     376:	09 f4       	brne	.+2      	; 0x37a <main+0x19e>
     378:	c2 c2       	rjmp	.+1412   	; 0x8fe <main+0x722>
     37a:	8c 30       	cpi	r24, 0x0C	; 12
     37c:	08 f0       	brcs	.+2      	; 0x380 <main+0x1a4>
     37e:	18 c2       	rjmp	.+1072   	; 0x7b0 <main+0x5d4>
     380:	89 30       	cpi	r24, 0x09	; 9
     382:	09 f4       	brne	.+2      	; 0x386 <main+0x1aa>
     384:	40 c2       	rjmp	.+1152   	; 0x806 <main+0x62a>
     386:	8a 30       	cpi	r24, 0x0A	; 10
     388:	08 f4       	brcc	.+2      	; 0x38c <main+0x1b0>
     38a:	31 c2       	rjmp	.+1122   	; 0x7ee <main+0x612>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     38c:	80 91 50 04 	lds	r24, 0x0450
     390:	81 30       	cpi	r24, 0x01	; 1
     392:	09 f4       	brne	.+2      	; 0x396 <main+0x1ba>
     394:	7b c7       	rjmp	.+3830   	; 0x128c <main+0x10b0>
     396:	81 30       	cpi	r24, 0x01	; 1
     398:	08 f0       	brcs	.+2      	; 0x39c <main+0x1c0>
     39a:	55 c4       	rjmp	.+2218   	; 0xc46 <main+0xa6a>
						case 0: // get first clock tick and start moving the robot with obstacle avoidance enabled
							demoStartTime = getTime100MicroSec();
     39c:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     3a0:	60 93 54 04 	sts	0x0454, r22
     3a4:	70 93 55 04 	sts	0x0455, r23
     3a8:	80 93 56 04 	sts	0x0456, r24
     3ac:	90 93 57 04 	sts	0x0457, r25
							demoEndTime = getTime100MicroSec();							
     3b0:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     3b4:	60 93 5c 04 	sts	0x045C, r22
     3b8:	70 93 5d 04 	sts	0x045D, r23
     3bc:	80 93 5e 04 	sts	0x045E, r24
     3c0:	90 93 5f 04 	sts	0x045F, r25
							demoStartTime2 = getTime100MicroSec();
     3c4:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     3c8:	60 93 58 04 	sts	0x0458, r22
     3cc:	70 93 59 04 	sts	0x0459, r23
     3d0:	80 93 5a 04 	sts	0x045A, r24
     3d4:	90 93 5b 04 	sts	0x045B, r25
							enableObstacleAvoidance();
     3d8:	0e 94 75 3a 	call	0x74ea	; 0x74ea <enableObstacleAvoidance>
							setLeftSpeed(20);
     3dc:	84 e1       	ldi	r24, 0x14	; 20
     3de:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
							setRightSpeed(20);
     3e2:	84 e1       	ldi	r24, 0x14	; 20
     3e4:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
							demoState = 1;
     3e8:	20 92 50 04 	sts	0x0450, r2
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     3ec:	80 91 6b 04 	lds	r24, 0x046B
     3f0:	81 30       	cpi	r24, 0x01	; 1
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <main+0x21a>
     3f4:	5b c4       	rjmp	.+2230   	; 0xcac <main+0xad0>
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	08 f0       	brcs	.+2      	; 0x3fc <main+0x220>
     3fa:	bc c3       	rjmp	.+1912   	; 0xb74 <main+0x998>
						case 0:							
							pwm_red = 255;
     3fc:	10 93 0c 02 	sts	0x020C, r17
							pwm_green = 255;
     400:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue = 255;
     404:	10 93 0e 02 	sts	0x020E, r17
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
     408:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     40c:	9b 01       	movw	r18, r22
     40e:	ac 01       	movw	r20, r24
     410:	80 91 5c 04 	lds	r24, 0x045C
     414:	90 91 5d 04 	lds	r25, 0x045D
     418:	a0 91 5e 04 	lds	r26, 0x045E
     41c:	b0 91 5f 04 	lds	r27, 0x045F
     420:	28 1b       	sub	r18, r24
     422:	39 0b       	sbc	r19, r25
     424:	4a 0b       	sbc	r20, r26
     426:	5b 0b       	sbc	r21, r27
     428:	21 3c       	cpi	r18, 0xC1	; 193
     42a:	e3 e0       	ldi	r30, 0x03	; 3
     42c:	3e 07       	cpc	r19, r30
     42e:	e0 e0       	ldi	r30, 0x00	; 0
     430:	4e 07       	cpc	r20, r30
     432:	e0 e0       	ldi	r30, 0x00	; 0
     434:	5e 07       	cpc	r21, r30
     436:	10 f0       	brcs	.+4      	; 0x43c <main+0x260>
     438:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <main+0x14da>
									greenLedState = 0;
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
     43c:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     440:	9b 01       	movw	r18, r22
     442:	ac 01       	movw	r20, r24
     444:	80 91 58 04 	lds	r24, 0x0458
     448:	90 91 59 04 	lds	r25, 0x0459
     44c:	a0 91 5a 04 	lds	r26, 0x045A
     450:	b0 91 5b 04 	lds	r27, 0x045B
     454:	28 1b       	sub	r18, r24
     456:	39 0b       	sbc	r19, r25
     458:	4a 0b       	sbc	r20, r26
     45a:	5b 0b       	sbc	r21, r27
     45c:	2e 31       	cpi	r18, 0x1E	; 30
     45e:	fb e4       	ldi	r31, 0x4B	; 75
     460:	3f 07       	cpc	r19, r31
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	4f 07       	cpc	r20, r31
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	5f 07       	cpc	r21, r31
     46a:	10 f0       	brcs	.+4      	; 0x470 <main+0x294>
     46c:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <main+0x14be>
								rgbLedState = 1;
								demoStartTime2 = getTime100MicroSec();
							}
							updateRedLed(pwm_red);
     470:	80 91 0c 02 	lds	r24, 0x020C
     474:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
							updateGreenLed(pwm_green);
     478:	80 91 0d 02 	lds	r24, 0x020D
     47c:	0e 94 d4 3a 	call	0x75a8	; 0x75a8 <updateGreenLed>
							updateBlueLed(pwm_blue);
     480:	80 91 0e 02 	lds	r24, 0x020E
     484:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <updateBlueLed>
     488:	80 91 4c 04 	lds	r24, 0x044C
					//usart0Transmit(currentOsccal,1);
					break;

		}

		if(currentSelector!=0) {
     48c:	88 23       	and	r24, r24
     48e:	09 f4       	brne	.+2      	; 0x492 <main+0x2b6>
     490:	23 cf       	rjmp	.-442    	; 0x2d8 <main+0xfc>
			handleMotorsWithSpeedController();  
     492:	0e 94 04 32 	call	0x6408	; 0x6408 <handleMotorsWithSpeedController>
     496:	80 91 4c 04 	lds	r24, 0x044C
     49a:	1f cf       	rjmp	.-450    	; 0x2da <main+0xfe>
			handleRFCommands();
		//}


		if(calibrateOdomFlag==0) {
			if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
     49c:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     4a0:	9b 01       	movw	r18, r22
     4a2:	ac 01       	movw	r20, r24
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	cb 01       	movw	r24, r22
     4aa:	f0 91 60 04 	lds	r31, 0x0460
     4ae:	e0 91 61 04 	lds	r30, 0x0461
     4b2:	80 90 62 04 	lds	r8, 0x0462
     4b6:	40 90 63 04 	lds	r4, 0x0463
     4ba:	30 90 64 04 	lds	r3, 0x0464
     4be:	50 90 65 04 	lds	r5, 0x0465
     4c2:	60 90 66 04 	lds	r6, 0x0466
     4c6:	70 90 67 04 	lds	r7, 0x0467
     4ca:	b2 2f       	mov	r27, r18
     4cc:	bf 1b       	sub	r27, r31
     4ce:	a1 e0       	ldi	r26, 0x01	; 1
     4d0:	2b 17       	cp	r18, r27
     4d2:	08 f0       	brcs	.+2      	; 0x4d6 <main+0x2fa>
     4d4:	a0 e0       	ldi	r26, 0x00	; 0
     4d6:	f3 2f       	mov	r31, r19
     4d8:	fe 1b       	sub	r31, r30
     4da:	ef 2f       	mov	r30, r31
     4dc:	f1 e0       	ldi	r31, 0x01	; 1
     4de:	3e 17       	cp	r19, r30
     4e0:	08 f0       	brcs	.+2      	; 0x4e4 <main+0x308>
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	9e 2e       	mov	r9, r30
     4e6:	9a 1a       	sub	r9, r26
     4e8:	a9 2d       	mov	r26, r9
     4ea:	99 24       	eor	r9, r9
     4ec:	93 94       	inc	r9
     4ee:	ea 17       	cp	r30, r26
     4f0:	08 f0       	brcs	.+2      	; 0x4f4 <main+0x318>
     4f2:	99 24       	eor	r9, r9
     4f4:	f9 29       	or	r31, r9
     4f6:	e4 2f       	mov	r30, r20
     4f8:	e8 19       	sub	r30, r8
     4fa:	8e 2e       	mov	r8, r30
     4fc:	e1 e0       	ldi	r30, 0x01	; 1
     4fe:	48 15       	cp	r20, r8
     500:	08 f0       	brcs	.+2      	; 0x504 <main+0x328>
     502:	e0 e0       	ldi	r30, 0x00	; 0
     504:	98 2c       	mov	r9, r8
     506:	9f 1a       	sub	r9, r31
     508:	f1 e0       	ldi	r31, 0x01	; 1
     50a:	89 14       	cp	r8, r9
     50c:	08 f0       	brcs	.+2      	; 0x510 <main+0x334>
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	ef 2b       	or	r30, r31
     512:	f5 2f       	mov	r31, r21
     514:	f4 19       	sub	r31, r4
     516:	4f 2e       	mov	r4, r31
     518:	f1 e0       	ldi	r31, 0x01	; 1
     51a:	54 15       	cp	r21, r4
     51c:	08 f0       	brcs	.+2      	; 0x520 <main+0x344>
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	84 2c       	mov	r8, r4
     522:	8e 1a       	sub	r8, r30
     524:	e1 e0       	ldi	r30, 0x01	; 1
     526:	48 14       	cp	r4, r8
     528:	08 f0       	brcs	.+2      	; 0x52c <main+0x350>
     52a:	e0 e0       	ldi	r30, 0x00	; 0
     52c:	fe 2b       	or	r31, r30
     52e:	31 94       	neg	r3
     530:	e1 e0       	ldi	r30, 0x01	; 1
     532:	63 15       	cp	r22, r3
     534:	08 f0       	brcs	.+2      	; 0x538 <main+0x35c>
     536:	e0 e0       	ldi	r30, 0x00	; 0
     538:	43 2c       	mov	r4, r3
     53a:	4f 1a       	sub	r4, r31
     53c:	f1 e0       	ldi	r31, 0x01	; 1
     53e:	34 14       	cp	r3, r4
     540:	08 f0       	brcs	.+2      	; 0x544 <main+0x368>
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	ef 2b       	or	r30, r31
     546:	51 94       	neg	r5
     548:	f1 e0       	ldi	r31, 0x01	; 1
     54a:	75 15       	cp	r23, r5
     54c:	08 f0       	brcs	.+2      	; 0x550 <main+0x374>
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	35 2c       	mov	r3, r5
     552:	3e 1a       	sub	r3, r30
     554:	e1 e0       	ldi	r30, 0x01	; 1
     556:	53 14       	cp	r5, r3
     558:	08 f0       	brcs	.+2      	; 0x55c <main+0x380>
     55a:	e0 e0       	ldi	r30, 0x00	; 0
     55c:	fe 2b       	or	r31, r30
     55e:	61 94       	neg	r6
     560:	e1 e0       	ldi	r30, 0x01	; 1
     562:	86 15       	cp	r24, r6
     564:	08 f0       	brcs	.+2      	; 0x568 <main+0x38c>
     566:	e0 e0       	ldi	r30, 0x00	; 0
     568:	96 2d       	mov	r25, r6
     56a:	9f 1b       	sub	r25, r31
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	69 16       	cp	r6, r25
     570:	08 f0       	brcs	.+2      	; 0x574 <main+0x398>
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	e8 2b       	or	r30, r24
     576:	71 94       	neg	r7
     578:	7e 16       	cp	r7, r30
     57a:	91 f4       	brne	.+36     	; 0x5a0 <main+0x3c4>
     57c:	99 23       	and	r25, r25
     57e:	81 f4       	brne	.+32     	; 0x5a0 <main+0x3c4>
     580:	33 20       	and	r3, r3
     582:	71 f4       	brne	.+28     	; 0x5a0 <main+0x3c4>
     584:	44 20       	and	r4, r4
     586:	61 f4       	brne	.+24     	; 0x5a0 <main+0x3c4>
     588:	88 20       	and	r8, r8
     58a:	51 f4       	brne	.+20     	; 0x5a0 <main+0x3c4>
     58c:	99 20       	and	r9, r9
     58e:	41 f4       	brne	.+16     	; 0x5a0 <main+0x3c4>
     590:	a2 30       	cpi	r26, 0x02	; 2
     592:	30 f4       	brcc	.+12     	; 0x5a0 <main+0x3c4>
     594:	a1 30       	cpi	r26, 0x01	; 1
     596:	09 f0       	breq	.+2      	; 0x59a <main+0x3be>
     598:	84 ce       	rjmp	.-760    	; 0x2a2 <main+0xc6>
     59a:	b0 39       	cpi	r27, 0x90	; 144
     59c:	08 f4       	brcc	.+2      	; 0x5a0 <main+0x3c4>
     59e:	81 ce       	rjmp	.-766    	; 0x2a2 <main+0xc6>
				speedStepCounter = getTime100MicroSec();
     5a0:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     5a4:	9b 01       	movw	r18, r22
     5a6:	ac 01       	movw	r20, r24
     5a8:	60 93 60 04 	sts	0x0460, r22
     5ac:	30 93 61 04 	sts	0x0461, r19
     5b0:	40 93 62 04 	sts	0x0462, r20
     5b4:	50 93 63 04 	sts	0x0463, r21
     5b8:	10 92 64 04 	sts	0x0464, r1
     5bc:	10 92 65 04 	sts	0x0465, r1
     5c0:	10 92 66 04 	sts	0x0466, r1
     5c4:	10 92 67 04 	sts	0x0467, r1

				if(softAccEnabled) {
     5c8:	80 91 68 04 	lds	r24, 0x0468
     5cc:	88 23       	and	r24, r24
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <main+0x3f6>
     5d0:	cd c1       	rjmp	.+922    	; 0x96c <main+0x790>
					if(pwm_right_desired == 0) {
     5d2:	80 91 f9 02 	lds	r24, 0x02F9
     5d6:	90 91 fa 02 	lds	r25, 0x02FA
     5da:	00 97       	sbiw	r24, 0x00	; 0
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <main+0x404>
     5de:	6b c2       	rjmp	.+1238   	; 0xab6 <main+0x8da>
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
     5e0:	20 91 fd 02 	lds	r18, 0x02FD
     5e4:	30 91 fe 02 	lds	r19, 0x02FE
     5e8:	28 9f       	mul	r18, r24
     5ea:	a0 01       	movw	r20, r0
     5ec:	29 9f       	mul	r18, r25
     5ee:	50 0d       	add	r21, r0
     5f0:	38 9f       	mul	r19, r24
     5f2:	50 0d       	add	r21, r0
     5f4:	11 24       	eor	r1, r1
     5f6:	57 fd       	sbrc	r21, 7
     5f8:	5e c2       	rjmp	.+1212   	; 0xab6 <main+0x8da>
						pwm_intermediate_right_desired = 0;
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
     5fa:	28 17       	cp	r18, r24
     5fc:	39 07       	cpc	r19, r25
     5fe:	14 f0       	brlt	.+4      	; 0x604 <main+0x428>
     600:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <main+0x143c>
						pwm_intermediate_right_desired += speedStep;
     604:	40 91 17 02 	lds	r20, 0x0217
     608:	24 0f       	add	r18, r20
     60a:	31 1d       	adc	r19, r1
     60c:	30 93 fe 02 	sts	0x02FE, r19
     610:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_right_desired > pwm_right_desired) {
     614:	82 17       	cp	r24, r18
     616:	93 07       	cpc	r25, r19
     618:	24 f4       	brge	.+8      	; 0x622 <main+0x446>
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired -= speedStep;
						if(pwm_intermediate_right_desired < pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
     61a:	90 93 fe 02 	sts	0x02FE, r25
     61e:	80 93 fd 02 	sts	0x02FD, r24
						}					
					}
	
					if(pwm_left_desired == 0) {
     622:	80 91 fb 02 	lds	r24, 0x02FB
     626:	90 91 fc 02 	lds	r25, 0x02FC
     62a:	00 97       	sbiw	r24, 0x00	; 0
     62c:	09 f4       	brne	.+2      	; 0x630 <main+0x454>
     62e:	3e c2       	rjmp	.+1148   	; 0xaac <main+0x8d0>
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
     630:	20 91 ff 02 	lds	r18, 0x02FF
     634:	30 91 00 03 	lds	r19, 0x0300
     638:	28 9f       	mul	r18, r24
     63a:	a0 01       	movw	r20, r0
     63c:	29 9f       	mul	r18, r25
     63e:	50 0d       	add	r21, r0
     640:	38 9f       	mul	r19, r24
     642:	50 0d       	add	r21, r0
     644:	11 24       	eor	r1, r1
     646:	57 fd       	sbrc	r21, 7
     648:	31 c2       	rjmp	.+1122   	; 0xaac <main+0x8d0>
						pwm_intermediate_left_desired = 0;
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
     64a:	28 17       	cp	r18, r24
     64c:	39 07       	cpc	r19, r25
     64e:	0c f0       	brlt	.+2      	; 0x652 <main+0x476>
     650:	f7 c7       	rjmp	.+4078   	; 0x1640 <main+0x1464>
						pwm_intermediate_left_desired += speedStep;
     652:	40 91 17 02 	lds	r20, 0x0217
     656:	24 0f       	add	r18, r20
     658:	31 1d       	adc	r19, r1
     65a:	30 93 00 03 	sts	0x0300, r19
     65e:	20 93 ff 02 	sts	0x02FF, r18
						if(pwm_intermediate_left_desired > pwm_left_desired) {
     662:	82 17       	cp	r24, r18
     664:	93 07       	cpc	r25, r19
     666:	0c f0       	brlt	.+2      	; 0x66a <main+0x48e>
     668:	1c ce       	rjmp	.-968    	; 0x2a2 <main+0xc6>
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
					pwm_intermediate_left_desired = pwm_left_desired;
     66a:	90 93 00 03 	sts	0x0300, r25
     66e:	80 93 ff 02 	sts	0x02FF, r24

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     672:	80 91 4c 04 	lds	r24, 0x044C
     676:	87 30       	cpi	r24, 0x07	; 7
     678:	09 f0       	breq	.+2      	; 0x67c <main+0x4a0>
     67a:	18 ce       	rjmp	.-976    	; 0x2ac <main+0xd0>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     67c:	80 91 50 04 	lds	r24, 0x0450
     680:	82 30       	cpi	r24, 0x02	; 2
     682:	09 f4       	brne	.+2      	; 0x686 <main+0x4aa>
     684:	17 c7       	rjmp	.+3630   	; 0x14b4 <main+0x12d8>
     686:	83 30       	cpi	r24, 0x03	; 3
     688:	08 f0       	brcs	.+2      	; 0x68c <main+0x4b0>
     68a:	1a c2       	rjmp	.+1076   	; 0xac0 <main+0x8e4>
     68c:	88 23       	and	r24, r24
     68e:	09 f0       	breq	.+2      	; 0x692 <main+0x4b6>
     690:	34 c6       	rjmp	.+3176   	; 0x12fa <main+0x111e>
						case 0:	// move around
							turnOffGreenLeds();
     692:	0e 94 99 3b 	call	0x7732	; 0x7732 <turnOffGreenLeds>
							GREEN_LED0_ON;
     696:	80 91 0b 01 	lds	r24, 0x010B
     69a:	8e 7f       	andi	r24, 0xFE	; 254
     69c:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED1_ON;
							lineFound = 0;
     6a0:	10 92 51 04 	sts	0x0451, r1
							enableObstacleAvoidance();
     6a4:	0e 94 75 3a 	call	0x74ea	; 0x74ea <enableObstacleAvoidance>
							setRightSpeed(20);
     6a8:	84 e1       	ldi	r24, 0x14	; 20
     6aa:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
							setLeftSpeed(20);
     6ae:	84 e1       	ldi	r24, 0x14	; 20
     6b0:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
							demoEndTime = getTime100MicroSec();
     6b4:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     6b8:	9b 01       	movw	r18, r22
     6ba:	ac 01       	movw	r20, r24
     6bc:	60 93 5c 04 	sts	0x045C, r22
     6c0:	70 93 5d 04 	sts	0x045D, r23
     6c4:	80 93 5e 04 	sts	0x045E, r24
     6c8:	90 93 5f 04 	sts	0x045F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {
     6cc:	80 91 54 04 	lds	r24, 0x0454
     6d0:	90 91 55 04 	lds	r25, 0x0455
     6d4:	a0 91 56 04 	lds	r26, 0x0456
     6d8:	b0 91 57 04 	lds	r27, 0x0457
     6dc:	28 1b       	sub	r18, r24
     6de:	39 0b       	sbc	r19, r25
     6e0:	4a 0b       	sbc	r20, r26
     6e2:	5b 0b       	sbc	r21, r27
     6e4:	23 33       	cpi	r18, 0x33	; 51
     6e6:	6f ee       	ldi	r22, 0xEF	; 239
     6e8:	36 07       	cpc	r19, r22
     6ea:	62 e0       	ldi	r22, 0x02	; 2
     6ec:	46 07       	cpc	r20, r22
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	56 07       	cpc	r21, r22
     6f2:	08 f4       	brcc	.+2      	; 0x6f6 <main+0x51a>
     6f4:	bd ce       	rjmp	.-646    	; 0x470 <main+0x294>

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
									outOfLine++;
									if(outOfLine > 250) {
										chargeContact = 0;
										demoState = 1;
     6f6:	20 92 50 04 	sts	0x0450, r2
										break;
     6fa:	ba ce       	rjmp	.-652    	; 0x470 <main+0x294>
			}
		}

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
     6fc:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <readBatteryLevel>
             		
			if(currentSelector==4 || currentSelector==5) {
     700:	80 91 4c 04 	lds	r24, 0x044C
     704:	98 2f       	mov	r25, r24
     706:	94 50       	subi	r25, 0x04	; 4
     708:	92 30       	cpi	r25, 0x02	; 2
     70a:	08 f4       	brcc	.+2      	; 0x70e <main+0x532>
     70c:	3c c1       	rjmp	.+632    	; 0x986 <main+0x7aa>
					}
				} else {	// do nothing => all 3 leds turned on

				}

			} else if(currentSelector==7) {
     70e:	87 30       	cpi	r24, 0x07	; 7
     710:	09 f4       	brne	.+2      	; 0x714 <main+0x538>
     712:	64 c1       	rjmp	.+712    	; 0x9dc <main+0x800>

				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
     714:	86 30       	cpi	r24, 0x06	; 6
     716:	09 f4       	brne	.+2      	; 0x71a <main+0x53e>
     718:	10 c1       	rjmp	.+544    	; 0x93a <main+0x75e>
						rgbState = 0;
					}
				}
			}

			startTime = getTime100MicroSec();
     71a:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     71e:	6b 01       	movw	r12, r22
     720:	7c 01       	movw	r14, r24
     722:	b6 cd       	rjmp	.-1172   	; 0x290 <main+0xb4>

		computeAngle();

		// turn off the rgb leds after one half second in the "charger demo"
		if(currentSelector==7) {
			if((getTime100MicroSec()-turnOffLedsTime) > PAUSE_500_MSEC) {
     724:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     728:	29 81       	ldd	r18, Y+1	; 0x01
     72a:	3a 81       	ldd	r19, Y+2	; 0x02
     72c:	4b 81       	ldd	r20, Y+3	; 0x03
     72e:	5c 81       	ldd	r21, Y+4	; 0x04
     730:	62 1b       	sub	r22, r18
     732:	73 0b       	sbc	r23, r19
     734:	84 0b       	sbc	r24, r20
     736:	95 0b       	sbc	r25, r21
     738:	68 3c       	cpi	r22, 0xC8	; 200
     73a:	32 e1       	ldi	r19, 0x12	; 18
     73c:	73 07       	cpc	r23, r19
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	83 07       	cpc	r24, r19
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	93 07       	cpc	r25, r19
     746:	08 f4       	brcc	.+2      	; 0x74a <main+0x56e>
     748:	94 cd       	rjmp	.-1240   	; 0x272 <main+0x96>
				pwm_red = 255;
     74a:	10 93 0c 02 	sts	0x020C, r17
				pwm_green = 255;
     74e:	10 93 0d 02 	sts	0x020D, r17
				pwm_blue = 255;			
     752:	10 93 0e 02 	sts	0x020E, r17
     756:	8d cd       	rjmp	.-1254   	; 0x272 <main+0x96>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     758:	85 30       	cpi	r24, 0x05	; 5
     75a:	09 f4       	brne	.+2      	; 0x75e <main+0x582>
     75c:	90 c0       	rjmp	.+288    	; 0x87e <main+0x6a2>
     75e:	86 30       	cpi	r24, 0x06	; 6
     760:	08 f4       	brcc	.+2      	; 0x764 <main+0x588>
     762:	68 c0       	rjmp	.+208    	; 0x834 <main+0x658>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     764:	80 91 23 04 	lds	r24, 0x0423
     768:	81 30       	cpi	r24, 0x01	; 1
     76a:	09 f4       	brne	.+2      	; 0x76e <main+0x592>
     76c:	fc c2       	rjmp	.+1528   	; 0xd66 <main+0xb8a>
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	08 f0       	brcs	.+2      	; 0x774 <main+0x598>
     772:	3b c2       	rjmp	.+1142   	; 0xbea <main+0xa0e>
						case 0:
							setRightSpeed(0);
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
							setLeftSpeed(0);
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
							turnOffGreenLeds();
     780:	0e 94 99 3b 	call	0x7732	; 0x7732 <turnOffGreenLeds>
							pwm_red=255;
     784:	10 93 0c 02 	sts	0x020C, r17
							pwm_green=255;
     788:	10 93 0d 02 	sts	0x020D, r17
							pwm_blue=255;
     78c:	10 93 0e 02 	sts	0x020E, r17
							updateRedLed(pwm_red);
     790:	8f ef       	ldi	r24, 0xFF	; 255
     792:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
							updateGreenLed(pwm_green);
     796:	80 91 0d 02 	lds	r24, 0x020D
     79a:	0e 94 d4 3a 	call	0x75a8	; 0x75a8 <updateGreenLed>
							updateBlueLed(pwm_blue);
     79e:	80 91 0e 02 	lds	r24, 0x020E
     7a2:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <updateBlueLed>
							LED_IR1_HIGH;
     7a6:	44 9a       	sbi	0x08, 4	; 8
							LED_IR2_HIGH;
     7a8:	45 9a       	sbi	0x08, 5	; 8
     7aa:	80 91 4c 04 	lds	r24, 0x044C
							break;
     7ae:	91 cd       	rjmp	.-1246   	; 0x2d2 <main+0xf6>

		//if(currentSelector!=6 && currentSelector!=15) {
		//	usart0Transmit(currentSelector,0);		// send the current selector position through uart as debug info
		//}

		switch(currentSelector) {
     7b0:	8d 30       	cpi	r24, 0x0D	; 13
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <main+0x5da>
     7b4:	94 c0       	rjmp	.+296    	; 0x8de <main+0x702>
     7b6:	8d 30       	cpi	r24, 0x0D	; 13
     7b8:	08 f4       	brcc	.+2      	; 0x7bc <main+0x5e0>
     7ba:	78 c0       	rjmp	.+240    	; 0x8ac <main+0x6d0>
     7bc:	8e 30       	cpi	r24, 0x0E	; 14
     7be:	09 f0       	breq	.+2      	; 0x7c2 <main+0x5e6>
     7c0:	88 cd       	rjmp	.-1264   	; 0x2d2 <main+0xf6>
						break;
				}
				break;
			
			case 14: // IR comm receiver
				switch(demoState) {
     7c2:	80 91 50 04 	lds	r24, 0x0450
     7c6:	88 23       	and	r24, r24
     7c8:	09 f0       	breq	.+2      	; 0x7cc <main+0x5f0>
     7ca:	63 c1       	rjmp	.+710    	; 0xa92 <main+0x8b6>
					case 0:
						irCommInit(IRCOMM_MODE_RECEIVE);
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	0e 94 c6 42 	call	0x858c	; 0x858c <irCommInit>
						rfEnableDebugMode();
     7d2:	0e 94 bc 11 	call	0x2378	; 0x2378 <rfEnableDebugMode>
						//enableObstacleAvoidance();
						//setLeftSpeed(25);
						//setRightSpeed(25);
						demoState = 1;
     7d6:	20 92 50 04 	sts	0x0450, r2
     7da:	80 91 4c 04 	lds	r24, 0x044C
						break;
     7de:	79 cd       	rjmp	.-1294   	; 0x2d2 <main+0xf6>
             		enableCliffAvoidance();
					break;
    
			case 3:	// both obstacle and cliff avoidance enabled (the robot does not move untill commands are
					// received from the radio or tv remote)
            		enableObstacleAvoidance();
     7e0:	0e 94 75 3a 	call	0x74ea	; 0x74ea <enableObstacleAvoidance>
					enableCliffAvoidance();
     7e4:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <enableCliffAvoidance>
     7e8:	80 91 4c 04 	lds	r24, 0x044C
					break;
     7ec:	72 cd       	rjmp	.-1308   	; 0x2d2 <main+0xf6>
					updateBlueLed(pwm_blue);

					break;
  
			case 8:	// motors calibration
					irEnabled = 1;
     7ee:	20 92 12 02 	sts	0x0212, r2
					if(calibrateOdomFlag==1) {
     7f2:	80 91 4d 05 	lds	r24, 0x054D
     7f6:	81 30       	cpi	r24, 0x01	; 1
     7f8:	09 f0       	breq	.+2      	; 0x7fc <main+0x620>
     7fa:	4b ce       	rjmp	.-874    	; 0x492 <main+0x2b6>
						handleCalibration();
     7fc:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <handleCalibration>
     800:	80 91 4c 04 	lds	r24, 0x044C
     804:	66 cd       	rjmp	.-1332   	; 0x2d2 <main+0xf6>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     806:	80 91 50 04 	lds	r24, 0x0450
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	09 f4       	brne	.+2      	; 0x810 <main+0x634>
     80e:	14 c5       	rjmp	.+2600   	; 0x1238 <main+0x105c>
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	08 f0       	brcs	.+2      	; 0x816 <main+0x63a>
     814:	09 c2       	rjmp	.+1042   	; 0xc28 <main+0xa4c>
						case 0:
							demoStartTime = getTime100MicroSec();
     816:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     81a:	60 93 54 04 	sts	0x0454, r22
     81e:	70 93 55 04 	sts	0x0455, r23
     822:	80 93 56 04 	sts	0x0456, r24
     826:	90 93 57 04 	sts	0x0457, r25
							demoState = 1;
     82a:	20 92 50 04 	sts	0x0450, r2
     82e:	80 91 4c 04 	lds	r24, 0x044C
							break;
     832:	4f cd       	rjmp	.-1378   	; 0x2d2 <main+0xf6>
            		enableObstacleAvoidance();
					enableCliffAvoidance();
					break;
            
			case 4:	// random colors on RGB leds; small green leds turned on
					GREEN_LED0_ON;
     834:	80 91 0b 01 	lds	r24, 0x010B
     838:	8e 7f       	andi	r24, 0xFE	; 254
     83a:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED1_ON;
     83e:	80 91 0b 01 	lds	r24, 0x010B
     842:	8d 7f       	andi	r24, 0xFD	; 253
     844:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED2_ON;
     848:	80 91 0b 01 	lds	r24, 0x010B
     84c:	8b 7f       	andi	r24, 0xFB	; 251
     84e:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED3_ON;
     852:	a3 98       	cbi	0x14, 3	; 20
					GREEN_LED4_ON;
     854:	80 91 0b 01 	lds	r24, 0x010B
     858:	8f 7e       	andi	r24, 0xEF	; 239
     85a:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED5_ON;
     85e:	80 91 0b 01 	lds	r24, 0x010B
     862:	8f 7d       	andi	r24, 0xDF	; 223
     864:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED6_ON;
     868:	80 91 0b 01 	lds	r24, 0x010B
     86c:	8f 7b       	andi	r24, 0xBF	; 191
     86e:	80 93 0b 01 	sts	0x010B, r24
					GREEN_LED7_ON;
     872:	80 91 0b 01 	lds	r24, 0x010B
     876:	8f 77       	andi	r24, 0x7F	; 127
     878:	80 93 0b 01 	sts	0x010B, r24
     87c:	f9 cd       	rjmp	.-1038   	; 0x470 <main+0x294>
					updateBlueLed(pwm_blue);
					break;
             
			case 5:	// random colors on RGB leds; obstacle avoidance enabled; robot start moving automatically
					// (motors speed setting)
					updateRedLed(pwm_red);
     87e:	80 91 0c 02 	lds	r24, 0x020C
     882:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
					updateGreenLed(pwm_green);
     886:	80 91 0d 02 	lds	r24, 0x020D
     88a:	0e 94 d4 3a 	call	0x75a8	; 0x75a8 <updateGreenLed>
					updateBlueLed(pwm_blue);
     88e:	80 91 0e 02 	lds	r24, 0x020E
     892:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <updateBlueLed>
					enableObstacleAvoidance();
     896:	0e 94 75 3a 	call	0x74ea	; 0x74ea <enableObstacleAvoidance>
					setLeftSpeed(25);
     89a:	89 e1       	ldi	r24, 0x19	; 25
     89c:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
					setRightSpeed(25);
     8a0:	89 e1       	ldi	r24, 0x19	; 25
     8a2:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
     8a6:	80 91 4c 04 	lds	r24, 0x044C
					break;
     8aa:	13 cd       	rjmp	.-1498   	; 0x2d2 <main+0xf6>
						setLeftSpeed(0);
						setRightSpeed(0);
					}
					break;

			case 12:if(leftMotSteps <= 6000) {
     8ac:	60 91 d5 02 	lds	r22, 0x02D5
     8b0:	70 91 d6 02 	lds	r23, 0x02D6
     8b4:	80 91 d7 02 	lds	r24, 0x02D7
     8b8:	90 91 d8 02 	lds	r25, 0x02D8
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	30 e8       	ldi	r19, 0x80	; 128
     8c0:	4b eb       	ldi	r20, 0xBB	; 187
     8c2:	55 e4       	ldi	r21, 0x45	; 69
     8c4:	0e 94 5d 4f 	call	0x9eba	; 0x9eba <__cmpsf2>
     8c8:	18 16       	cp	r1, r24
     8ca:	4c f1       	brlt	.+82     	; 0x91e <main+0x742>
						setLeftSpeed(40);
     8cc:	88 e2       	ldi	r24, 0x28	; 40
     8ce:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
						setRightSpeed(40);
     8d2:	88 e2       	ldi	r24, 0x28	; 40
     8d4:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
     8d8:	80 91 4c 04 	lds	r24, 0x044C
     8dc:	fa cc       	rjmp	.-1548   	; 0x2d2 <main+0xf6>
						setRightSpeed(0);
					}
					break;

			case 13: // IR comm transmitter
				switch(demoState) {
     8de:	80 91 50 04 	lds	r24, 0x0450
     8e2:	81 30       	cpi	r24, 0x01	; 1
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <main+0x70c>
     8e6:	c7 c4       	rjmp	.+2446   	; 0x1276 <main+0x109a>
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	08 f0       	brcs	.+2      	; 0x8ee <main+0x712>
     8ec:	2c c1       	rjmp	.+600    	; 0xb46 <main+0x96a>
					case 0:
						irCommInit(IRCOMM_MODE_TRANSMIT_ONLY);
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	0e 94 c6 42 	call	0x858c	; 0x858c <irCommInit>
						//enableObstacleAvoidance();
						//setLeftSpeed(25);
						//setRightSpeed(25);
						demoState = 1;
     8f4:	20 92 50 04 	sts	0x0450, r2
     8f8:	80 91 4c 04 	lds	r24, 0x044C
						break;
     8fc:	ea cc       	rjmp	.-1580   	; 0x2d2 <main+0xf6>
					}
					

					break;

			case 11:if(leftMotSteps <= 5000) {
     8fe:	60 91 d5 02 	lds	r22, 0x02D5
     902:	70 91 d6 02 	lds	r23, 0x02D6
     906:	80 91 d7 02 	lds	r24, 0x02D7
     90a:	90 91 d8 02 	lds	r25, 0x02D8
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e4       	ldi	r19, 0x40	; 64
     912:	4c e9       	ldi	r20, 0x9C	; 156
     914:	55 e4       	ldi	r21, 0x45	; 69
     916:	0e 94 5d 4f 	call	0x9eba	; 0x9eba <__cmpsf2>
     91a:	18 16       	cp	r1, r24
     91c:	bc f6       	brge	.-82     	; 0x8cc <main+0x6f0>

			case 12:if(leftMotSteps <= 6000) {
						setLeftSpeed(40);
						setRightSpeed(40);
					} else {
						setLeftSpeed(0);
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
						setRightSpeed(0);
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
     92a:	80 91 4c 04 	lds	r24, 0x044C
     92e:	d1 cc       	rjmp	.-1630   	; 0x2d2 <main+0xf6>
					handleMotorsWithNoController();
					break;
             
			case 1:	// obstacle avoidance enabled (the robot does not move untill commands are 
					// received from the radio or tv remote)
             		enableObstacleAvoidance();
     930:	0e 94 75 3a 	call	0x74ea	; 0x74ea <enableObstacleAvoidance>
     934:	80 91 4c 04 	lds	r24, 0x044C
					break;
     938:	cc cc       	rjmp	.-1640   	; 0x2d2 <main+0xf6>
				}

				turnOffLedsTime = getTime100MicroSec();

			} else if(currentSelector==6) {
				if(menuChoice==1 && rfFlags<=1) {
     93a:	80 91 23 04 	lds	r24, 0x0423
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	09 f0       	breq	.+2      	; 0x944 <main+0x768>
     942:	eb ce       	rjmp	.-554    	; 0x71a <main+0x53e>
     944:	90 91 17 03 	lds	r25, 0x0317
     948:	92 30       	cpi	r25, 0x02	; 2
     94a:	08 f0       	brcs	.+2      	; 0x94e <main+0x772>
     94c:	e6 ce       	rjmp	.-564    	; 0x71a <main+0x53e>
					if(rgbState == 0) {
     94e:	90 91 1c 03 	lds	r25, 0x031C
     952:	99 23       	and	r25, r25
     954:	09 f0       	breq	.+2      	; 0x958 <main+0x77c>
     956:	22 c7       	rjmp	.+3652   	; 0x179c <main+0x15c0>
						pwm_red = 254;
     958:	4e ef       	ldi	r20, 0xFE	; 254
     95a:	40 93 0c 02 	sts	0x020C, r20
						pwm_green = 255;
     95e:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 255;
     962:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 1;
     966:	80 93 1c 03 	sts	0x031C, r24
     96a:	d7 ce       	rjmp	.-594    	; 0x71a <main+0x53e>
						if(pwm_intermediate_left_desired < pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}					
					}
				} else {
					pwm_intermediate_right_desired = pwm_right_desired;
     96c:	80 91 f9 02 	lds	r24, 0x02F9
     970:	90 91 fa 02 	lds	r25, 0x02FA
     974:	90 93 fe 02 	sts	0x02FE, r25
     978:	80 93 fd 02 	sts	0x02FD, r24
					pwm_intermediate_left_desired = pwm_left_desired;
     97c:	80 91 fb 02 	lds	r24, 0x02FB
     980:	90 91 fc 02 	lds	r25, 0x02FC
     984:	72 ce       	rjmp	.-796    	; 0x66a <main+0x48e>
		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     986:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <rand>
     98a:	6e e1       	ldi	r22, 0x1E	; 30
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
     992:	a8 0e       	add	r10, r24
     994:	b9 1e       	adc	r11, r25
     996:	5f e7       	ldi	r21, 0x7F	; 127
     998:	a5 22       	and	r10, r21
     99a:	bb 24       	eor	r11, r11

				switch(rgbState) {
     99c:	80 91 1c 03 	lds	r24, 0x031C
     9a0:	81 30       	cpi	r24, 0x01	; 1
     9a2:	09 f4       	brne	.+2      	; 0x9a6 <main+0x7ca>
     9a4:	e5 c4       	rjmp	.+2506   	; 0x1370 <main+0x1194>
     9a6:	81 30       	cpi	r24, 0x01	; 1
     9a8:	08 f0       	brcs	.+2      	; 0x9ac <main+0x7d0>
     9aa:	9d c4       	rjmp	.+2362   	; 0x12e6 <main+0x110a>
					case 0:
						pwm_red = 255 - currRand;	
     9ac:	8a 2d       	mov	r24, r10
     9ae:	80 95       	com	r24
     9b0:	80 93 0c 02 	sts	0x020C, r24
						rgbState = 1;
     9b4:	20 92 1c 03 	sts	0x031C, r2
						pwm_blue = 255 - currRand;
						rgbState = 0;
						break;
				}
				
				if(currRand<32) {
     9b8:	80 e2       	ldi	r24, 0x20	; 32
     9ba:	a8 16       	cp	r10, r24
     9bc:	b1 04       	cpc	r11, r1
     9be:	08 f0       	brcs	.+2      	; 0x9c2 <main+0x7e6>
     9c0:	b9 c1       	rjmp	.+882    	; 0xd34 <main+0xb58>
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
     9c2:	80 91 0d 02 	lds	r24, 0x020D
     9c6:	8f 3f       	cpi	r24, 0xFF	; 255
     9c8:	09 f4       	brne	.+2      	; 0x9cc <main+0x7f0>
     9ca:	a7 ce       	rjmp	.-690    	; 0x71a <main+0x53e>
     9cc:	80 91 0e 02 	lds	r24, 0x020E
     9d0:	8f 3f       	cpi	r24, 0xFF	; 255
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <main+0x7fa>
     9d4:	a2 ce       	rjmp	.-700    	; 0x71a <main+0x53e>
						pwm_red = 255;
     9d6:	10 93 0c 02 	sts	0x020C, r17
     9da:	9f ce       	rjmp	.-706    	; 0x71a <main+0x53e>

				}

			} else if(currentSelector==7) {

				srand(TCNT3);
     9dc:	80 91 94 00 	lds	r24, 0x0094
     9e0:	90 91 95 00 	lds	r25, 0x0095
     9e4:	0e 94 75 52 	call	0xa4ea	; 0xa4ea <srand>
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption
     9e8:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <rand>
     9ec:	6e e1       	ldi	r22, 0x1E	; 30
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
     9f4:	4c 01       	movw	r8, r24
     9f6:	8a 0c       	add	r8, r10
     9f8:	9b 1c       	adc	r9, r11
     9fa:	ff e7       	ldi	r31, 0x7F	; 127
     9fc:	8f 22       	and	r8, r31
     9fe:	99 24       	eor	r9, r9

				pwm_red = 255 - currRand;
     a00:	88 2d       	mov	r24, r8
     a02:	80 95       	com	r24
     a04:	80 93 0c 02 	sts	0x020C, r24
				
				srand(TCNT3);
     a08:	80 91 94 00 	lds	r24, 0x0094
     a0c:	90 91 95 00 	lds	r25, 0x0095
     a10:	0e 94 75 52 	call	0xa4ea	; 0xa4ea <srand>
				currRand = (currRand + rand()%30) % 128;	
     a14:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <rand>
     a18:	6e e1       	ldi	r22, 0x1E	; 30
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
     a20:	6c 01       	movw	r12, r24
     a22:	c8 0c       	add	r12, r8
     a24:	d9 1c       	adc	r13, r9
     a26:	2f e7       	ldi	r18, 0x7F	; 127
     a28:	c2 22       	and	r12, r18
     a2a:	dd 24       	eor	r13, r13
				pwm_green = 255 - currRand;
     a2c:	8c 2d       	mov	r24, r12
     a2e:	80 95       	com	r24
     a30:	80 93 0d 02 	sts	0x020D, r24

				srand(TCNT3);
     a34:	80 91 94 00 	lds	r24, 0x0094
     a38:	90 91 95 00 	lds	r25, 0x0095
     a3c:	0e 94 75 52 	call	0xa4ea	; 0xa4ea <srand>
				currRand = (currRand + rand()%30) % 128;
     a40:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <rand>
     a44:	6e e1       	ldi	r22, 0x1E	; 30
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
     a4c:	5c 01       	movw	r10, r24
     a4e:	ac 0c       	add	r10, r12
     a50:	bd 1c       	adc	r11, r13
     a52:	3f e7       	ldi	r19, 0x7F	; 127
     a54:	a3 22       	and	r10, r19
     a56:	bb 24       	eor	r11, r11
				pwm_blue = 255 - currRand;
     a58:	8a 2d       	mov	r24, r10
     a5a:	80 95       	com	r24
     a5c:	80 93 0e 02 	sts	0x020E, r24

			
				srand(TCNT3);
     a60:	80 91 94 00 	lds	r24, 0x0094
     a64:	90 91 95 00 	lds	r25, 0x0095
     a68:	0e 94 75 52 	call	0xa4ea	; 0xa4ea <srand>
				currRand2 = rand()%128;
     a6c:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <rand>
     a70:	60 e8       	ldi	r22, 0x80	; 128
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
				if(currRand2<32) {
     a78:	80 32       	cpi	r24, 0x20	; 32
     a7a:	91 05       	cpc	r25, r1
     a7c:	08 f0       	brcs	.+2      	; 0xa80 <main+0x8a4>
     a7e:	6c c1       	rjmp	.+728    	; 0xd58 <main+0xb7c>
					pwm_red = 255;
     a80:	10 93 0c 02 	sts	0x020C, r17
					pwm_blue = 255;
				} else {	// do nothing => all 3 leds turned on

				}

				turnOffLedsTime = getTime100MicroSec();
     a84:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     a88:	69 83       	std	Y+1, r22	; 0x01
     a8a:	7a 83       	std	Y+2, r23	; 0x02
     a8c:	8b 83       	std	Y+3, r24	; 0x03
     a8e:	9c 83       	std	Y+4, r25	; 0x04
     a90:	44 ce       	rjmp	.-888    	; 0x71a <main+0x53e>
						break;
				}
				break;
			
			case 14: // IR comm receiver
				switch(demoState) {
     a92:	81 30       	cpi	r24, 0x01	; 1
     a94:	09 f0       	breq	.+2      	; 0xa98 <main+0x8bc>
     a96:	fd cc       	rjmp	.-1542   	; 0x492 <main+0x2b6>
						//setRightSpeed(25);
						demoState = 1;
						break;

					case 1:
						irCommTasks();
     a98:	0e 94 f3 43 	call	0x87e6	; 0x87e6 <irCommTasks>
						if(irCommDataAvailable()==1) {
     a9c:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <irCommDataAvailable>
     aa0:	81 30       	cpi	r24, 0x01	; 1
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <main+0x8ca>
     aa4:	60 c6       	rjmp	.+3264   	; 0x1766 <main+0x158a>
							i = irCommReadData();
     aa6:	80 91 4c 04 	lds	r24, 0x044C
     aaa:	13 cc       	rjmp	.-2010   	; 0x2d2 <main+0xf6>
					}
	
					if(pwm_left_desired == 0) {
						pwm_intermediate_left_desired = 0;
					} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
						pwm_intermediate_left_desired = 0;
     aac:	10 92 00 03 	sts	0x0300, r1
     ab0:	10 92 ff 02 	sts	0x02FF, r1
     ab4:	f6 cb       	rjmp	.-2068   	; 0x2a2 <main+0xc6>

				if(softAccEnabled) {
					if(pwm_right_desired == 0) {
						pwm_intermediate_right_desired = 0;
					} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
						pwm_intermediate_right_desired = 0;
     ab6:	10 92 fe 02 	sts	0x02FE, r1
     aba:	10 92 fd 02 	sts	0x02FD, r1
     abe:	b1 cd       	rjmp	.-1182   	; 0x622 <main+0x446>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
     ac0:	84 30       	cpi	r24, 0x04	; 4
     ac2:	09 f4       	brne	.+2      	; 0xac6 <main+0x8ea>
     ac4:	b4 c4       	rjmp	.+2408   	; 0x142e <main+0x1252>
     ac6:	84 30       	cpi	r24, 0x04	; 4
     ac8:	08 f4       	brcc	.+2      	; 0xacc <main+0x8f0>
     aca:	6c c4       	rjmp	.+2264   	; 0x13a4 <main+0x11c8>
     acc:	85 30       	cpi	r24, 0x05	; 5
     ace:	09 f0       	breq	.+2      	; 0xad2 <main+0x8f6>
     ad0:	cf cc       	rjmp	.-1634   	; 0x470 <main+0x294>
							//pwm_green = 0;
							//pwm_blue = 255;													
							break;

						case 5:	// turn around
							turnOffGreenLeds();
     ad2:	0e 94 99 3b 	call	0x7732	; 0x7732 <turnOffGreenLeds>
							GREEN_LED6_ON;
     ad6:	80 91 0b 01 	lds	r24, 0x010B
     ada:	8f 7b       	andi	r24, 0xBF	; 191
     adc:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
     ae0:	80 91 0b 01 	lds	r24, 0x010B
     ae4:	8f 77       	andi	r24, 0x7F	; 127
     ae6:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
     aea:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	60 93 5c 04 	sts	0x045C, r22
     af6:	70 93 5d 04 	sts	0x045D, r23
     afa:	80 93 5e 04 	sts	0x045E, r24
     afe:	90 93 5f 04 	sts	0x045F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_750_MSEC)) {
     b02:	80 91 54 04 	lds	r24, 0x0454
     b06:	90 91 55 04 	lds	r25, 0x0455
     b0a:	a0 91 56 04 	lds	r26, 0x0456
     b0e:	b0 91 57 04 	lds	r27, 0x0457
     b12:	28 1b       	sub	r18, r24
     b14:	39 0b       	sbc	r19, r25
     b16:	4a 0b       	sbc	r20, r26
     b18:	5b 0b       	sbc	r21, r27
     b1a:	2b 32       	cpi	r18, 0x2B	; 43
     b1c:	9c e1       	ldi	r25, 0x1C	; 28
     b1e:	39 07       	cpc	r19, r25
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	49 07       	cpc	r20, r25
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	59 07       	cpc	r21, r25
     b28:	08 f4       	brcc	.+2      	; 0xb2c <main+0x950>
     b2a:	a2 cc       	rjmp	.-1724   	; 0x470 <main+0x294>
								demoStartTime = getTime100MicroSec();
     b2c:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     b30:	60 93 54 04 	sts	0x0454, r22
     b34:	70 93 55 04 	sts	0x0455, r23
     b38:	80 93 56 04 	sts	0x0456, r24
     b3c:	90 93 57 04 	sts	0x0457, r25
								demoState = 0;							
     b40:	10 92 50 04 	sts	0x0450, r1
     b44:	95 cc       	rjmp	.-1750   	; 0x470 <main+0x294>
						setRightSpeed(0);
					}
					break;

			case 13: // IR comm transmitter
				switch(demoState) {
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	09 f0       	breq	.+2      	; 0xb4c <main+0x970>
     b4a:	a3 cc       	rjmp	.-1722   	; 0x492 <main+0x2b6>
						irCommSendData(irCommRxByteExpected, 0x01);												
						demoState = 2;
						break;

					case 2:
						irCommTasks();
     b4c:	0e 94 f3 43 	call	0x87e6	; 0x87e6 <irCommTasks>
						if(irCommDataSent()==1) {
     b50:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <irCommDataSent>
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	09 f0       	breq	.+2      	; 0xb5a <main+0x97e>
     b58:	a6 cf       	rjmp	.-180    	; 0xaa6 <main+0x8ca>
							demoState = 1;
     b5a:	80 93 50 04 	sts	0x0450, r24
							//setGreenLed(irCommRxByteExpected, 1);						
							//irCommRxByteExpected++;
							//if(irCommRxByteExpected==8) {
							//	irCommRxByteExpected=0;
							//}
							if(irCommRxByteExpected<255) {
     b5e:	80 91 fc 04 	lds	r24, 0x04FC
     b62:	8f 3f       	cpi	r24, 0xFF	; 255
     b64:	09 f4       	brne	.+2      	; 0xb68 <main+0x98c>
     b66:	33 c6       	rjmp	.+3174   	; 0x17ce <main+0x15f2>
								irCommRxByteExpected++;
     b68:	8f 5f       	subi	r24, 0xFF	; 255
     b6a:	80 93 fc 04 	sts	0x04FC, r24
     b6e:	80 91 4c 04 	lds	r24, 0x044C
     b72:	af cb       	rjmp	.-2210   	; 0x2d2 <main+0xf6>
								demoState = 1;							
							}
							break;
					}	
					
					switch(rgbLedState) {
     b74:	82 30       	cpi	r24, 0x02	; 2
     b76:	09 f0       	breq	.+2      	; 0xb7a <main+0x99e>
     b78:	96 cf       	rjmp	.-212    	; 0xaa6 <main+0x8ca>
							updateBlueLed(pwm_blue);
							rgbLedState = 2;
							break;

						case 2:
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_500_MSEC)) {
     b7a:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     b7e:	9b 01       	movw	r18, r22
     b80:	ac 01       	movw	r20, r24
     b82:	80 91 58 04 	lds	r24, 0x0458
     b86:	90 91 59 04 	lds	r25, 0x0459
     b8a:	a0 91 5a 04 	lds	r26, 0x045A
     b8e:	b0 91 5b 04 	lds	r27, 0x045B
     b92:	28 1b       	sub	r18, r24
     b94:	39 0b       	sbc	r19, r25
     b96:	4a 0b       	sbc	r20, r26
     b98:	5b 0b       	sbc	r21, r27
     b9a:	27 3c       	cpi	r18, 0xC7	; 199
     b9c:	62 e1       	ldi	r22, 0x12	; 18
     b9e:	36 07       	cpc	r19, r22
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	46 07       	cpc	r20, r22
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	56 07       	cpc	r21, r22
     ba8:	08 f4       	brcc	.+2      	; 0xbac <main+0x9d0>
     baa:	7d cf       	rjmp	.-262    	; 0xaa6 <main+0x8ca>
								rgbLedState = 0;
     bac:	10 92 6b 04 	sts	0x046B, r1
								demoStartTime2 = getTime100MicroSec();
     bb0:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     bb4:	60 93 58 04 	sts	0x0458, r22
     bb8:	70 93 59 04 	sts	0x0459, r23
     bbc:	80 93 5a 04 	sts	0x045A, r24
     bc0:	90 93 5b 04 	sts	0x045B, r25
								demoEndTime = getTime100MicroSec();
     bc4:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     bc8:	60 93 5c 04 	sts	0x045C, r22
     bcc:	70 93 5d 04 	sts	0x045D, r23
     bd0:	80 93 5e 04 	sts	0x045E, r24
     bd4:	90 93 5f 04 	sts	0x045F, r25
								greenLedState = 0;
     bd8:	10 92 6a 04 	sts	0x046A, r1
								setGreenLed(greenLedState, 1);
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <setGreenLed>
     be4:	80 91 4c 04 	lds	r24, 0x044C
     be8:	74 cb       	rjmp	.-2328   	; 0x2d2 <main+0xf6>
					setLeftSpeed(25);
					setRightSpeed(25);
					break;

			case 6:	// robot testing
					switch(menuChoice) {
     bea:	82 30       	cpi	r24, 0x02	; 2
     bec:	09 f0       	breq	.+2      	; 0xbf0 <main+0xa14>
     bee:	51 cc       	rjmp	.-1886   	; 0x492 <main+0x2b6>
							}

							break;

						case 2:	// address writing in eeprom
							if(addressReceived) {
     bf0:	80 91 24 04 	lds	r24, 0x0424
     bf4:	88 23       	and	r24, r24
     bf6:	09 f4       	brne	.+2      	; 0xbfa <main+0xa1e>
     bf8:	4c cc       	rjmp	.-1896   	; 0x492 <main+0x2b6>
								turnOnGreenLeds();
     bfa:	0e 94 b2 3b 	call	0x7764	; 0x7764 <turnOnGreenLeds>
								eeprom_write_word((uint16_t*)4094, rfAddress);
     bfe:	60 91 15 03 	lds	r22, 0x0315
     c02:	70 91 16 03 	lds	r23, 0x0316
     c06:	8e ef       	ldi	r24, 0xFE	; 254
     c08:	9f e0       	ldi	r25, 0x0F	; 15
     c0a:	0e 94 db 52 	call	0xa5b6	; 0xa5b6 <__eewr_word_m2560>
								turnOffGreenLeds();
     c0e:	0e 94 99 3b 	call	0x7732	; 0x7732 <turnOffGreenLeds>
								usart0Transmit(0xAA, 1);	// successfully written
     c12:	8a ea       	ldi	r24, 0xAA	; 170
     c14:	61 e0       	ldi	r22, 0x01	; 1
     c16:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								addressReceived = 0;
     c1a:	10 92 24 04 	sts	0x0424, r1
								menuChoice = 0;
     c1e:	10 92 23 04 	sts	0x0423, r1
     c22:	80 91 4c 04 	lds	r24, 0x044C
     c26:	55 cb       	rjmp	.-2390   	; 0x2d2 <main+0xf6>
					break;

			case 9:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
     c28:	82 30       	cpi	r24, 0x02	; 2
     c2a:	09 f0       	breq	.+2      	; 0xc2e <main+0xa52>
     c2c:	32 cc       	rjmp	.-1948   	; 0x492 <main+0x2b6>
								demoState = 2;
							}
							break;						

						case 2:
							if(!calibrationWritten) {
     c2e:	80 91 69 04 	lds	r24, 0x0469
     c32:	88 23       	and	r24, r24
     c34:	09 f0       	breq	.+2      	; 0xc38 <main+0xa5c>
     c36:	2d cc       	rjmp	.-1958   	; 0x492 <main+0x2b6>
								calibrationWritten = 1;
     c38:	20 92 69 04 	sts	0x0469, r2
								writeDefaultCalibration();
     c3c:	0e 94 e7 34 	call	0x69ce	; 0x69ce <writeDefaultCalibration>
     c40:	80 91 4c 04 	lds	r24, 0x044C
     c44:	46 cb       	rjmp	.-2420   	; 0x2d2 <main+0xf6>
							break;
					}
					break;

			case 10:// obstacle avoidance with random colors; 4 seconds motion and 10 seconds pause					
					switch(demoState) {
     c46:	82 30       	cpi	r24, 0x02	; 2
     c48:	09 f0       	breq	.+2      	; 0xc4c <main+0xa70>
     c4a:	d0 cb       	rjmp	.-2144   	; 0x3ec <main+0x210>
								demoState = 2;							
							}
							break;

						case 2: // pause							
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_10_SEC)) {
     c4c:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     c50:	9b 01       	movw	r18, r22
     c52:	ac 01       	movw	r20, r24
     c54:	80 91 54 04 	lds	r24, 0x0454
     c58:	90 91 55 04 	lds	r25, 0x0455
     c5c:	a0 91 56 04 	lds	r26, 0x0456
     c60:	b0 91 57 04 	lds	r27, 0x0457
     c64:	28 1b       	sub	r18, r24
     c66:	39 0b       	sbc	r19, r25
     c68:	4a 0b       	sbc	r20, r26
     c6a:	5b 0b       	sbc	r21, r27
     c6c:	2a 39       	cpi	r18, 0x9A	; 154
     c6e:	97 e7       	ldi	r25, 0x77	; 119
     c70:	39 07       	cpc	r19, r25
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	49 07       	cpc	r20, r25
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	59 07       	cpc	r21, r25
     c7a:	08 f4       	brcc	.+2      	; 0xc7e <main+0xaa2>
     c7c:	b7 cb       	rjmp	.-2194   	; 0x3ec <main+0x210>
								setRightSpeed(20);
     c7e:	84 e1       	ldi	r24, 0x14	; 20
     c80:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
								setLeftSpeed(20);								
     c84:	84 e1       	ldi	r24, 0x14	; 20
     c86:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();								
     c8a:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
     c8e:	60 93 54 04 	sts	0x0454, r22
     c92:	70 93 55 04 	sts	0x0455, r23
     c96:	80 93 56 04 	sts	0x0456, r24
     c9a:	90 93 57 04 	sts	0x0457, r25
								demoState = 1;							
     c9e:	20 92 50 04 	sts	0x0450, r2
							}
							break;
					}	
					
					switch(rgbLedState) {
     ca2:	80 91 6b 04 	lds	r24, 0x046B
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	09 f0       	breq	.+2      	; 0xcac <main+0xad0>
     caa:	a5 cb       	rjmp	.-2230   	; 0x3f6 <main+0x21a>
							updateGreenLed(pwm_green);
							updateBlueLed(pwm_blue);
							break;

						case 1:		
							turnOffGreenLeds();					
     cac:	0e 94 99 3b 	call	0x7732	; 0x7732 <turnOffGreenLeds>
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
     cb0:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <rand>
     cb4:	60 e8       	ldi	r22, 0x80	; 128
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
							if(currRand > 95) {
     cbc:	80 36       	cpi	r24, 0x60	; 96
     cbe:	91 05       	cpc	r25, r1
     cc0:	08 f4       	brcc	.+2      	; 0xcc4 <main+0xae8>
     cc2:	a7 c4       	rjmp	.+2382   	; 0x1612 <main+0x1436>
								pwm_red = 255;
     cc4:	10 93 0c 02 	sts	0x020C, r17
							} else {
								pwm_red = currRand;
							}

							currRand = rand()% 128;
     cc8:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <rand>
     ccc:	60 e8       	ldi	r22, 0x80	; 128
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
							if(currRand > 95) {
     cd4:	80 36       	cpi	r24, 0x60	; 96
     cd6:	91 05       	cpc	r25, r1
     cd8:	08 f4       	brcc	.+2      	; 0xcdc <main+0xb00>
     cda:	98 c4       	rjmp	.+2352   	; 0x160c <main+0x1430>
								pwm_green = 255;
     cdc:	10 93 0d 02 	sts	0x020D, r17
							} else {
								pwm_green = currRand;
							}

							currRand = rand()% 128;
     ce0:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <rand>
     ce4:	60 e8       	ldi	r22, 0x80	; 128
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
							if(currRand > 95) {
     cec:	80 36       	cpi	r24, 0x60	; 96
     cee:	91 05       	cpc	r25, r1
     cf0:	08 f4       	brcc	.+2      	; 0xcf4 <main+0xb18>
     cf2:	89 c4       	rjmp	.+2322   	; 0x1606 <main+0x142a>
								pwm_blue = 255;
     cf4:	10 93 0e 02 	sts	0x020E, r17
							} else {
								pwm_blue = currRand;
							}

							currRand = rand()% 200;
     cf8:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <rand>
     cfc:	68 ec       	ldi	r22, 0xC8	; 200
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
     d04:	5c 01       	movw	r10, r24
							if(currRand<50) {
     d06:	82 33       	cpi	r24, 0x32	; 50
     d08:	91 05       	cpc	r25, r1
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <main+0xb32>
     d0c:	73 c4       	rjmp	.+2278   	; 0x15f4 <main+0x1418>
								pwm_red = 255;
     d0e:	10 93 0c 02 	sts	0x020C, r17
     d12:	8f ef       	ldi	r24, 0xFF	; 255
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
								pwm_blue = 255;
							}
							updateRedLed(pwm_red);
     d14:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
							updateGreenLed(pwm_green);
     d18:	80 91 0d 02 	lds	r24, 0x020D
     d1c:	0e 94 d4 3a 	call	0x75a8	; 0x75a8 <updateGreenLed>
							updateBlueLed(pwm_blue);
     d20:	80 91 0e 02 	lds	r24, 0x020E
     d24:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <updateBlueLed>
							rgbLedState = 2;
     d28:	52 e0       	ldi	r21, 0x02	; 2
     d2a:	50 93 6b 04 	sts	0x046B, r21
     d2e:	80 91 4c 04 	lds	r24, 0x044C
							break;
     d32:	cf ca       	rjmp	.-2658   	; 0x2d2 <main+0xf6>
				
				if(currRand<32) {
					if(pwm_green!=255 && pwm_blue!=255) {	// do not turn on all leds
						pwm_red = 255;
					}
				} else if(currRand<64) {
     d34:	90 e4       	ldi	r25, 0x40	; 64
     d36:	a9 16       	cp	r10, r25
     d38:	b1 04       	cpc	r11, r1
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <main+0xb62>
     d3c:	21 c3       	rjmp	.+1602   	; 0x1380 <main+0x11a4>
					if(pwm_red!=255 && pwm_blue!=255) {
     d3e:	80 91 0c 02 	lds	r24, 0x020C
     d42:	8f 3f       	cpi	r24, 0xFF	; 255
     d44:	09 f4       	brne	.+2      	; 0xd48 <main+0xb6c>
     d46:	e9 cc       	rjmp	.-1582   	; 0x71a <main+0x53e>
     d48:	80 91 0e 02 	lds	r24, 0x020E
     d4c:	8f 3f       	cpi	r24, 0xFF	; 255
     d4e:	09 f4       	brne	.+2      	; 0xd52 <main+0xb76>
     d50:	e4 cc       	rjmp	.-1592   	; 0x71a <main+0x53e>
						pwm_green = 255;
     d52:	10 93 0d 02 	sts	0x020D, r17
     d56:	e1 cc       	rjmp	.-1598   	; 0x71a <main+0x53e>
			
				srand(TCNT3);
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
     d58:	80 34       	cpi	r24, 0x40	; 64
     d5a:	91 05       	cpc	r25, r1
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <main+0xb84>
     d5e:	27 c4       	rjmp	.+2126   	; 0x15ae <main+0x13d2>
					pwm_green = 255;
     d60:	10 93 0d 02 	sts	0x020D, r17
     d64:	8f ce       	rjmp	.-738    	; 0xa84 <main+0x8a8>
							break;

						case 1:	// send sensors data and activate actuators
							//setRightSpeed(20);
							//setLeftSpeed(20);
							turnOnGreenLeds();
     d66:	0e 94 b2 3b 	call	0x7764	; 0x7764 <turnOnGreenLeds>
							updateRedLed(pwm_red);
     d6a:	80 91 0c 02 	lds	r24, 0x020C
     d6e:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
							updateGreenLed(pwm_green);
     d72:	80 91 0d 02 	lds	r24, 0x020D
     d76:	0e 94 d4 3a 	call	0x75a8	; 0x75a8 <updateGreenLed>
							updateBlueLed(pwm_blue);
     d7a:	80 91 0e 02 	lds	r24, 0x020E
     d7e:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <updateBlueLed>
							LED_IR1_LOW;
     d82:	44 98       	cbi	0x08, 4	; 8
							LED_IR2_LOW;
     d84:	45 98       	cbi	0x08, 5	; 8
							
							if(getDataNow) {
     d86:	80 91 26 04 	lds	r24, 0x0426
     d8a:	88 23       	and	r24, r24
     d8c:	09 f4       	brne	.+2      	; 0xd90 <main+0xbb4>
     d8e:	8b ce       	rjmp	.-746    	; 0xaa6 <main+0x8ca>
								getDataNow = 0;	
     d90:	10 92 26 04 	sts	0x0426, r1
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     d94:	80 91 59 02 	lds	r24, 0x0259
     d98:	61 e0       	ldi	r22, 0x01	; 1
     d9a:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     d9e:	80 91 5a 02 	lds	r24, 0x025A
     da2:	61 e0       	ldi	r22, 0x01	; 1
     da4:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     da8:	80 91 29 02 	lds	r24, 0x0229
     dac:	90 91 2a 02 	lds	r25, 0x022A
     db0:	61 e0       	ldi	r22, 0x01	; 1
     db2:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     db6:	80 91 29 02 	lds	r24, 0x0229
     dba:	90 91 2a 02 	lds	r25, 0x022A
     dbe:	89 2f       	mov	r24, r25
     dc0:	61 e0       	ldi	r22, 0x01	; 1
     dc2:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     dc6:	80 91 5b 02 	lds	r24, 0x025B
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     dd0:	80 91 5c 02 	lds	r24, 0x025C
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     dda:	80 91 2d 02 	lds	r24, 0x022D
     dde:	90 91 2e 02 	lds	r25, 0x022E
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     de8:	80 91 2d 02 	lds	r24, 0x022D
     dec:	90 91 2e 02 	lds	r25, 0x022E
     df0:	89 2f       	mov	r24, r25
     df2:	61 e0       	ldi	r22, 0x01	; 1
     df4:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     df8:	80 91 5d 02 	lds	r24, 0x025D
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e02:	80 91 5e 02 	lds	r24, 0x025E
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e0c:	80 91 31 02 	lds	r24, 0x0231
     e10:	90 91 32 02 	lds	r25, 0x0232
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e1a:	80 91 31 02 	lds	r24, 0x0231
     e1e:	90 91 32 02 	lds	r25, 0x0232
     e22:	89 2f       	mov	r24, r25
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e2a:	80 91 5f 02 	lds	r24, 0x025F
     e2e:	61 e0       	ldi	r22, 0x01	; 1
     e30:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e34:	80 91 60 02 	lds	r24, 0x0260
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e3e:	80 91 35 02 	lds	r24, 0x0235
     e42:	90 91 36 02 	lds	r25, 0x0236
     e46:	61 e0       	ldi	r22, 0x01	; 1
     e48:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e4c:	80 91 35 02 	lds	r24, 0x0235
     e50:	90 91 36 02 	lds	r25, 0x0236
     e54:	89 2f       	mov	r24, r25
     e56:	61 e0       	ldi	r22, 0x01	; 1
     e58:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e5c:	80 91 61 02 	lds	r24, 0x0261
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e66:	80 91 62 02 	lds	r24, 0x0262
     e6a:	61 e0       	ldi	r22, 0x01	; 1
     e6c:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     e70:	80 91 39 02 	lds	r24, 0x0239
     e74:	90 91 3a 02 	lds	r25, 0x023A
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     e7e:	80 91 39 02 	lds	r24, 0x0239
     e82:	90 91 3a 02 	lds	r25, 0x023A
     e86:	89 2f       	mov	r24, r25
     e88:	61 e0       	ldi	r22, 0x01	; 1
     e8a:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     e8e:	80 91 63 02 	lds	r24, 0x0263
     e92:	61 e0       	ldi	r22, 0x01	; 1
     e94:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     e98:	80 91 64 02 	lds	r24, 0x0264
     e9c:	61 e0       	ldi	r22, 0x01	; 1
     e9e:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ea2:	80 91 3d 02 	lds	r24, 0x023D
     ea6:	90 91 3e 02 	lds	r25, 0x023E
     eaa:	61 e0       	ldi	r22, 0x01	; 1
     eac:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     eb0:	80 91 3d 02 	lds	r24, 0x023D
     eb4:	90 91 3e 02 	lds	r25, 0x023E
     eb8:	89 2f       	mov	r24, r25
     eba:	61 e0       	ldi	r22, 0x01	; 1
     ebc:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ec0:	80 91 65 02 	lds	r24, 0x0265
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     eca:	80 91 66 02 	lds	r24, 0x0266
     ece:	61 e0       	ldi	r22, 0x01	; 1
     ed0:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     ed4:	80 91 41 02 	lds	r24, 0x0241
     ed8:	90 91 42 02 	lds	r25, 0x0242
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     ee2:	80 91 41 02 	lds	r24, 0x0241
     ee6:	90 91 42 02 	lds	r25, 0x0242
     eea:	89 2f       	mov	r24, r25
     eec:	61 e0       	ldi	r22, 0x01	; 1
     eee:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     ef2:	80 91 67 02 	lds	r24, 0x0267
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     efc:	80 91 68 02 	lds	r24, 0x0268
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f06:	80 91 45 02 	lds	r24, 0x0245
     f0a:	90 91 46 02 	lds	r25, 0x0246
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f14:	80 91 45 02 	lds	r24, 0x0245
     f18:	90 91 46 02 	lds	r25, 0x0246
     f1c:	89 2f       	mov	r24, r25
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f24:	80 91 69 02 	lds	r24, 0x0269
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f2e:	80 91 6a 02 	lds	r24, 0x026A
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f38:	80 91 49 02 	lds	r24, 0x0249
     f3c:	90 91 4a 02 	lds	r25, 0x024A
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f46:	80 91 49 02 	lds	r24, 0x0249
     f4a:	90 91 4a 02 	lds	r25, 0x024A
     f4e:	89 2f       	mov	r24, r25
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f56:	80 91 6b 02 	lds	r24, 0x026B
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f60:	80 91 6c 02 	lds	r24, 0x026C
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f6a:	80 91 4d 02 	lds	r24, 0x024D
     f6e:	90 91 4e 02 	lds	r25, 0x024E
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     f78:	80 91 4d 02 	lds	r24, 0x024D
     f7c:	90 91 4e 02 	lds	r25, 0x024E
     f80:	89 2f       	mov	r24, r25
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     f88:	80 91 6d 02 	lds	r24, 0x026D
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     f92:	80 91 6e 02 	lds	r24, 0x026E
     f96:	61 e0       	ldi	r22, 0x01	; 1
     f98:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     f9c:	80 91 51 02 	lds	r24, 0x0251
     fa0:	90 91 52 02 	lds	r25, 0x0252
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     faa:	80 91 51 02 	lds	r24, 0x0251
     fae:	90 91 52 02 	lds	r25, 0x0252
     fb2:	89 2f       	mov	r24, r25
     fb4:	61 e0       	ldi	r22, 0x01	; 1
     fb6:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
							LED_IR2_LOW;
							
							if(getDataNow) {
								getDataNow = 0;	
								for(i=0; i<12; i++) {
									usart0Transmit(proximityResult[i]&0xFF,1);
     fba:	80 91 6f 02 	lds	r24, 0x026F
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityResult[i]>>8,1);
     fc4:	80 91 70 02 	lds	r24, 0x0270
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]&0xFF,1);
     fce:	80 91 55 02 	lds	r24, 0x0255
     fd2:	90 91 56 02 	lds	r25, 0x0256
     fd6:	61 e0       	ldi	r22, 0x01	; 1
     fd8:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
									usart0Transmit(proximityValue[i*2]>>8,1);
     fdc:	80 91 55 02 	lds	r24, 0x0255
     fe0:	90 91 56 02 	lds	r25, 0x0256
     fe4:	89 2f       	mov	r24, r25
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								}
								usart0Transmit(accX&0xFF,1);
     fec:	80 91 2c 04 	lds	r24, 0x042C
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(accX>>8,1);
     ff6:	80 91 2d 04 	lds	r24, 0x042D
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(accY&0xFF,1);
    1000:	80 91 2e 04 	lds	r24, 0x042E
    1004:	61 e0       	ldi	r22, 0x01	; 1
    1006:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(accY>>8,1);
    100a:	80 91 2f 04 	lds	r24, 0x042F
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(accZ&0xFF,1);
    1014:	80 91 30 04 	lds	r24, 0x0430
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(accZ>>8,1);
    101e:	80 91 31 04 	lds	r24, 0x0431
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(irCommand,1);
    1028:	80 91 27 04 	lds	r24, 0x0427
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(currentSelector,1);
    1032:	80 91 4c 04 	lds	r24, 0x044C
    1036:	61 e0       	ldi	r22, 0x01	; 1
    1038:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(BUTTON0,1);
    103c:	80 91 03 01 	lds	r24, 0x0103
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	80 72       	andi	r24, 0x20	; 32
    1044:	90 70       	andi	r25, 0x00	; 0
    1046:	95 95       	asr	r25
    1048:	87 95       	ror	r24
    104a:	95 95       	asr	r25
    104c:	87 95       	ror	r24
    104e:	95 95       	asr	r25
    1050:	87 95       	ror	r24
    1052:	95 95       	asr	r25
    1054:	87 95       	ror	r24
    1056:	95 95       	asr	r25
    1058:	87 95       	ror	r24
    105a:	61 e0       	ldi	r22, 0x01	; 1
    105c:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(rfFlags,1);
    1060:	80 91 17 03 	lds	r24, 0x0317
    1064:	61 e0       	ldi	r22, 0x01	; 1
    1066:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))&0xFF,1);	// radians to degrees => 573 = 1800/PI
    106a:	60 91 6f 04 	lds	r22, 0x046F
    106e:	70 91 70 04 	lds	r23, 0x0470
    1072:	80 91 71 04 	lds	r24, 0x0471
    1076:	90 91 72 04 	lds	r25, 0x0472
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e4       	ldi	r19, 0x40	; 64
    107e:	4f e0       	ldi	r20, 0x0F	; 15
    1080:	54 e4       	ldi	r21, 0x44	; 68
    1082:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    1086:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <__fixunssfsi>
    108a:	86 2f       	mov	r24, r22
    108c:	61 e0       	ldi	r22, 0x01	; 1
    108e:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(((unsigned int)(theta*573.0))>>8,1);
    1092:	60 91 6f 04 	lds	r22, 0x046F
    1096:	70 91 70 04 	lds	r23, 0x0470
    109a:	80 91 71 04 	lds	r24, 0x0471
    109e:	90 91 72 04 	lds	r25, 0x0472
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e4       	ldi	r19, 0x40	; 64
    10a6:	4f e0       	ldi	r20, 0x0F	; 15
    10a8:	54 e4       	ldi	r21, 0x44	; 68
    10aa:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    10ae:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <__fixunssfsi>
    10b2:	87 2f       	mov	r24, r23
    10b4:	61 e0       	ldi	r22, 0x01	; 1
    10b6:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)&0xFF,1);
    10ba:	60 91 77 04 	lds	r22, 0x0477
    10be:	70 91 78 04 	lds	r23, 0x0478
    10c2:	80 91 79 04 	lds	r24, 0x0479
    10c6:	90 91 7a 04 	lds	r25, 0x047A
    10ca:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <__fixunssfsi>
    10ce:	86 2f       	mov	r24, r22
    10d0:	61 e0       	ldi	r22, 0x01	; 1
    10d2:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(((unsigned int)xPos)>>8,1);
    10d6:	60 91 77 04 	lds	r22, 0x0477
    10da:	70 91 78 04 	lds	r23, 0x0478
    10de:	80 91 79 04 	lds	r24, 0x0479
    10e2:	90 91 7a 04 	lds	r25, 0x047A
    10e6:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <__fixunssfsi>
    10ea:	87 2f       	mov	r24, r23
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)&0xFF,1);
    10f2:	60 91 7b 04 	lds	r22, 0x047B
    10f6:	70 91 7c 04 	lds	r23, 0x047C
    10fa:	80 91 7d 04 	lds	r24, 0x047D
    10fe:	90 91 7e 04 	lds	r25, 0x047E
    1102:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <__fixunssfsi>
    1106:	86 2f       	mov	r24, r22
    1108:	61 e0       	ldi	r22, 0x01	; 1
    110a:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(((unsigned int)yPos)>>8,1);
    110e:	60 91 7b 04 	lds	r22, 0x047B
    1112:	70 91 7c 04 	lds	r23, 0x047C
    1116:	80 91 7d 04 	lds	r24, 0x047D
    111a:	90 91 7e 04 	lds	r25, 0x047E
    111e:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <__fixunssfsi>
    1122:	87 2f       	mov	r24, r23
    1124:	61 e0       	ldi	r22, 0x01	; 1
    1126:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)&0xFF,1);
    112a:	60 91 d5 02 	lds	r22, 0x02D5
    112e:	70 91 d6 02 	lds	r23, 0x02D6
    1132:	80 91 d7 02 	lds	r24, 0x02D7
    1136:	90 91 d8 02 	lds	r25, 0x02D8
    113a:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    113e:	86 2f       	mov	r24, r22
    1140:	61 e0       	ldi	r22, 0x01	; 1
    1142:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>8,1);
    1146:	60 91 d5 02 	lds	r22, 0x02D5
    114a:	70 91 d6 02 	lds	r23, 0x02D6
    114e:	80 91 d7 02 	lds	r24, 0x02D7
    1152:	90 91 d8 02 	lds	r25, 0x02D8
    1156:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    115a:	87 2f       	mov	r24, r23
    115c:	61 e0       	ldi	r22, 0x01	; 1
    115e:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>16,1);
    1162:	60 91 d5 02 	lds	r22, 0x02D5
    1166:	70 91 d6 02 	lds	r23, 0x02D6
    116a:	80 91 d7 02 	lds	r24, 0x02D7
    116e:	90 91 d8 02 	lds	r25, 0x02D8
    1172:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(((signed long int)leftMotSteps)>>24,1);
    117c:	60 91 d5 02 	lds	r22, 0x02D5
    1180:	70 91 d6 02 	lds	r23, 0x02D6
    1184:	80 91 d7 02 	lds	r24, 0x02D7
    1188:	90 91 d8 02 	lds	r25, 0x02D8
    118c:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    1190:	89 2f       	mov	r24, r25
    1192:	61 e0       	ldi	r22, 0x01	; 1
    1194:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)&0xFF,1);
    1198:	60 91 d1 02 	lds	r22, 0x02D1
    119c:	70 91 d2 02 	lds	r23, 0x02D2
    11a0:	80 91 d3 02 	lds	r24, 0x02D3
    11a4:	90 91 d4 02 	lds	r25, 0x02D4
    11a8:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    11ac:	86 2f       	mov	r24, r22
    11ae:	61 e0       	ldi	r22, 0x01	; 1
    11b0:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>8,1);
    11b4:	60 91 d1 02 	lds	r22, 0x02D1
    11b8:	70 91 d2 02 	lds	r23, 0x02D2
    11bc:	80 91 d3 02 	lds	r24, 0x02D3
    11c0:	90 91 d4 02 	lds	r25, 0x02D4
    11c4:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    11c8:	87 2f       	mov	r24, r23
    11ca:	61 e0       	ldi	r22, 0x01	; 1
    11cc:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>16,1);
    11d0:	60 91 d1 02 	lds	r22, 0x02D1
    11d4:	70 91 d2 02 	lds	r23, 0x02D2
    11d8:	80 91 d3 02 	lds	r24, 0x02D3
    11dc:	90 91 d4 02 	lds	r25, 0x02D4
    11e0:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    11e4:	61 e0       	ldi	r22, 0x01	; 1
    11e6:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(((signed long int)rightMotSteps)>>24,1);
    11ea:	60 91 d1 02 	lds	r22, 0x02D1
    11ee:	70 91 d2 02 	lds	r23, 0x02D2
    11f2:	80 91 d3 02 	lds	r24, 0x02D3
    11f6:	90 91 d4 02 	lds	r25, 0x02D4
    11fa:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    11fe:	89 2f       	mov	r24, r25
    1200:	61 e0       	ldi	r22, 0x01	; 1
    1202:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(pwm_left_desired>>2, 1);
    1206:	80 91 fb 02 	lds	r24, 0x02FB
    120a:	90 91 fc 02 	lds	r25, 0x02FC
    120e:	95 95       	asr	r25
    1210:	87 95       	ror	r24
    1212:	95 95       	asr	r25
    1214:	87 95       	ror	r24
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
								usart0Transmit(pwm_right_desired>>2, 1);
    121c:	80 91 f9 02 	lds	r24, 0x02F9
    1220:	90 91 fa 02 	lds	r25, 0x02FA
    1224:	95 95       	asr	r25
    1226:	87 95       	ror	r24
    1228:	95 95       	asr	r25
    122a:	87 95       	ror	r24
    122c:	61 e0       	ldi	r22, 0x01	; 1
    122e:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    1232:	80 91 4c 04 	lds	r24, 0x044C
    1236:	4d c8       	rjmp	.-3942   	; 0x2d2 <main+0xf6>
							demoStartTime = getTime100MicroSec();
							demoState = 1;
							break;

						case 1:
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_2_SEC)) {
    1238:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    123c:	9b 01       	movw	r18, r22
    123e:	ac 01       	movw	r20, r24
    1240:	80 91 54 04 	lds	r24, 0x0454
    1244:	90 91 55 04 	lds	r25, 0x0455
    1248:	a0 91 56 04 	lds	r26, 0x0456
    124c:	b0 91 57 04 	lds	r27, 0x0457
    1250:	28 1b       	sub	r18, r24
    1252:	39 0b       	sbc	r19, r25
    1254:	4a 0b       	sbc	r20, r26
    1256:	5b 0b       	sbc	r21, r27
    1258:	2e 31       	cpi	r18, 0x1E	; 30
    125a:	eb e4       	ldi	r30, 0x4B	; 75
    125c:	3e 07       	cpc	r19, r30
    125e:	e0 e0       	ldi	r30, 0x00	; 0
    1260:	4e 07       	cpc	r20, r30
    1262:	e0 e0       	ldi	r30, 0x00	; 0
    1264:	5e 07       	cpc	r21, r30
    1266:	08 f4       	brcc	.+2      	; 0x126a <main+0x108e>
    1268:	1e cc       	rjmp	.-1988   	; 0xaa6 <main+0x8ca>
								demoState = 2;
    126a:	f2 e0       	ldi	r31, 0x02	; 2
    126c:	f0 93 50 04 	sts	0x0450, r31
    1270:	80 91 4c 04 	lds	r24, 0x044C
    1274:	2e c8       	rjmp	.-4004   	; 0x2d2 <main+0xf6>
						//setRightSpeed(25);
						demoState = 1;
						break;

					case 1:						
						irCommSendData(irCommRxByteExpected, 0x01);												
    1276:	80 91 fc 04 	lds	r24, 0x04FC
    127a:	61 e0       	ldi	r22, 0x01	; 1
    127c:	0e 94 7b 4e 	call	0x9cf6	; 0x9cf6 <irCommSendData>
						demoState = 2;
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	80 93 50 04 	sts	0x0450, r24
    1286:	80 91 4c 04 	lds	r24, 0x044C
						break;
    128a:	23 c8       	rjmp	.-4026   	; 0x2d2 <main+0xf6>
							setLeftSpeed(20);
							setRightSpeed(20);
							demoState = 1;
							break;
						case 1: // motion					
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_4_SEC)) {
    128c:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    1290:	9b 01       	movw	r18, r22
    1292:	ac 01       	movw	r20, r24
    1294:	80 91 54 04 	lds	r24, 0x0454
    1298:	90 91 55 04 	lds	r25, 0x0455
    129c:	a0 91 56 04 	lds	r26, 0x0456
    12a0:	b0 91 57 04 	lds	r27, 0x0457
    12a4:	28 1b       	sub	r18, r24
    12a6:	39 0b       	sbc	r19, r25
    12a8:	4a 0b       	sbc	r20, r26
    12aa:	5b 0b       	sbc	r21, r27
    12ac:	2e 33       	cpi	r18, 0x3E	; 62
    12ae:	66 e9       	ldi	r22, 0x96	; 150
    12b0:	36 07       	cpc	r19, r22
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	46 07       	cpc	r20, r22
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	56 07       	cpc	r21, r22
    12ba:	08 f4       	brcc	.+2      	; 0x12be <main+0x10e2>
    12bc:	97 c8       	rjmp	.-3794   	; 0x3ec <main+0x210>
								setRightSpeed(0);
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
								setLeftSpeed(0);								
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    12ca:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    12ce:	60 93 54 04 	sts	0x0454, r22
    12d2:	70 93 55 04 	sts	0x0455, r23
    12d6:	80 93 56 04 	sts	0x0456, r24
    12da:	90 93 57 04 	sts	0x0457, r25
								demoState = 2;							
    12de:	82 e0       	ldi	r24, 0x02	; 2
    12e0:	80 93 50 04 	sts	0x0450, r24
    12e4:	83 c8       	rjmp	.-3834   	; 0x3ec <main+0x210>
			readBatteryLevel();				// the battery level is updated every two seconds
             		
			if(currentSelector==4 || currentSelector==5) {
				currRand = (currRand + rand()%30) % 128;	// 0 to 255 is the maximum, we use 128 to 255 to reduce consumption

				switch(rgbState) {
    12e6:	82 30       	cpi	r24, 0x02	; 2
    12e8:	09 f0       	breq	.+2      	; 0x12ec <main+0x1110>
    12ea:	66 cb       	rjmp	.-2356   	; 0x9b8 <main+0x7dc>
						pwm_green = 255 - currRand;
						rgbState = 2;
						break;

					case 2:
						pwm_blue = 255 - currRand;
    12ec:	8a 2d       	mov	r24, r10
    12ee:	80 95       	com	r24
    12f0:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    12f4:	10 92 1c 03 	sts	0x031C, r1
						break;
    12f8:	5f cb       	rjmp	.-2370   	; 0x9b8 <main+0x7dc>
							break;
					}
					break;
			
			case 7:
					switch(demoState) {
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	09 f0       	breq	.+2      	; 0x1300 <main+0x1124>
    12fe:	b8 c8       	rjmp	.-3728   	; 0x470 <main+0x294>
							//pwm_green = 255;
							//pwm_blue = 255;
							break;

						case 1:	// search for a line
							turnOffGreenLeds();
    1300:	0e 94 99 3b 	call	0x7732	; 0x7732 <turnOffGreenLeds>
							GREEN_LED2_ON;
    1304:	80 91 0b 01 	lds	r24, 0x010B
    1308:	8b 7f       	andi	r24, 0xFB	; 251
    130a:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED3_ON;
							outOfLine = 0;
    130e:	10 92 52 04 	sts	0x0452, r1
							enableObstacleAvoidance();
    1312:	0e 94 75 3a 	call	0x74ea	; 0x74ea <enableObstacleAvoidance>
							setRightSpeed(15);
    1316:	8f e0       	ldi	r24, 0x0F	; 15
    1318:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
							setLeftSpeed(15);
    131c:	8f e0       	ldi	r24, 0x0F	; 15
    131e:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
    1322:	80 91 6b 02 	lds	r24, 0x026B
    1326:	90 91 6c 02 	lds	r25, 0x026C
    132a:	e1 e0       	ldi	r30, 0x01	; 1
    132c:	80 39       	cpi	r24, 0x90	; 144
    132e:	9e 07       	cpc	r25, r30
    1330:	0c f4       	brge	.+2      	; 0x1334 <main+0x1158>
    1332:	44 c1       	rjmp	.+648    	; 0x15bc <main+0x13e0>
    1334:	80 91 6d 02 	lds	r24, 0x026D
    1338:	90 91 6e 02 	lds	r25, 0x026E
    133c:	f1 e0       	ldi	r31, 0x01	; 1
    133e:	80 39       	cpi	r24, 0x90	; 144
    1340:	9f 07       	cpc	r25, r31
    1342:	0c f4       	brge	.+2      	; 0x1346 <main+0x116a>
    1344:	3b c1       	rjmp	.+630    	; 0x15bc <main+0x13e0>
    1346:	80 91 69 02 	lds	r24, 0x0269
    134a:	90 91 6a 02 	lds	r25, 0x026A
    134e:	21 e0       	ldi	r18, 0x01	; 1
    1350:	80 39       	cpi	r24, 0x90	; 144
    1352:	92 07       	cpc	r25, r18
    1354:	0c f4       	brge	.+2      	; 0x1358 <main+0x117c>
    1356:	32 c1       	rjmp	.+612    	; 0x15bc <main+0x13e0>
    1358:	80 91 6f 02 	lds	r24, 0x026F
    135c:	90 91 70 02 	lds	r25, 0x0270
    1360:	31 e0       	ldi	r19, 0x01	; 1
    1362:	80 39       	cpi	r24, 0x90	; 144
    1364:	93 07       	cpc	r25, r19
    1366:	0c f4       	brge	.+2      	; 0x136a <main+0x118e>
    1368:	29 c1       	rjmp	.+594    	; 0x15bc <main+0x13e0>
									demoStartTime = getTime100MicroSec();
									demoState = 2;
									break;
								}
							} else {
								lineFound = 0;
    136a:	10 92 51 04 	sts	0x0451, r1
    136e:	80 c8       	rjmp	.-3840   	; 0x470 <main+0x294>
						pwm_red = 255 - currRand;	
						rgbState = 1;
						break;

					case 1:
						pwm_green = 255 - currRand;
    1370:	8a 2d       	mov	r24, r10
    1372:	80 95       	com	r24
    1374:	80 93 0d 02 	sts	0x020D, r24
						rgbState = 2;
    1378:	62 e0       	ldi	r22, 0x02	; 2
    137a:	60 93 1c 03 	sts	0x031C, r22
						break;
    137e:	1c cb       	rjmp	.-2504   	; 0x9b8 <main+0x7dc>
					}
				} else if(currRand<64) {
					if(pwm_red!=255 && pwm_blue!=255) {
						pwm_green = 255;
					}
				} else if (currRand<96) {
    1380:	e0 e6       	ldi	r30, 0x60	; 96
    1382:	ae 16       	cp	r10, r30
    1384:	b1 04       	cpc	r11, r1
    1386:	08 f0       	brcs	.+2      	; 0x138a <main+0x11ae>
    1388:	c8 c9       	rjmp	.-3184   	; 0x71a <main+0x53e>
					if(pwm_red!=255 && pwm_green!=255) {
    138a:	80 91 0c 02 	lds	r24, 0x020C
    138e:	8f 3f       	cpi	r24, 0xFF	; 255
    1390:	09 f4       	brne	.+2      	; 0x1394 <main+0x11b8>
    1392:	c3 c9       	rjmp	.-3194   	; 0x71a <main+0x53e>
    1394:	80 91 0d 02 	lds	r24, 0x020D
    1398:	8f 3f       	cpi	r24, 0xFF	; 255
    139a:	09 f4       	brne	.+2      	; 0x139e <main+0x11c2>
    139c:	be c9       	rjmp	.-3204   	; 0x71a <main+0x53e>
						pwm_blue = 255;
    139e:	10 93 0e 02 	sts	0x020E, r17
    13a2:	bb c9       	rjmp	.-3210   	; 0x71a <main+0x53e>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;

						case 3:	// charge for some time
							turnOffGreenLeds();
    13a4:	0e 94 99 3b 	call	0x7732	; 0x7732 <turnOffGreenLeds>
							GREEN_LED6_ON;
    13a8:	80 91 0b 01 	lds	r24, 0x010B
    13ac:	8f 7b       	andi	r24, 0xBF	; 191
    13ae:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED7_ON;
							demoEndTime = getTime100MicroSec();
    13b2:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    13b6:	9b 01       	movw	r18, r22
    13b8:	ac 01       	movw	r20, r24
    13ba:	60 93 5c 04 	sts	0x045C, r22
    13be:	70 93 5d 04 	sts	0x045D, r23
    13c2:	80 93 5e 04 	sts	0x045E, r24
    13c6:	90 93 5f 04 	sts	0x045F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_30_SEC)) {
    13ca:	80 91 54 04 	lds	r24, 0x0454
    13ce:	90 91 55 04 	lds	r25, 0x0455
    13d2:	a0 91 56 04 	lds	r26, 0x0456
    13d6:	b0 91 57 04 	lds	r27, 0x0457
    13da:	28 1b       	sub	r18, r24
    13dc:	39 0b       	sbc	r19, r25
    13de:	4a 0b       	sbc	r20, r26
    13e0:	5b 0b       	sbc	r21, r27
    13e2:	2d 3c       	cpi	r18, 0xCD	; 205
    13e4:	66 e6       	ldi	r22, 0x66	; 102
    13e6:	36 07       	cpc	r19, r22
    13e8:	64 e0       	ldi	r22, 0x04	; 4
    13ea:	46 07       	cpc	r20, r22
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	56 07       	cpc	r21, r22
    13f0:	08 f4       	brcc	.+2      	; 0x13f4 <main+0x1218>
    13f2:	39 c1       	rjmp	.+626    	; 0x1666 <main+0x148a>
								if(batteryLevel<890) {//860) {	// stay in charge if too much discharged (consider the fact that the robot
    13f4:	80 91 bd 02 	lds	r24, 0x02BD
    13f8:	90 91 be 02 	lds	r25, 0x02BE
    13fc:	e3 e0       	ldi	r30, 0x03	; 3
    13fe:	8a 37       	cpi	r24, 0x7A	; 122
    1400:	9e 07       	cpc	r25, r30
    1402:	08 f4       	brcc	.+2      	; 0x1406 <main+0x122a>
    1404:	3e c1       	rjmp	.+636    	; 0x1682 <main+0x14a6>
														// is still in charge thus the battery value measured is higher)
									demoStartTime = getTime100MicroSec();
									break;
								} else {
									setRightSpeed(-13);
    1406:	83 ef       	ldi	r24, 0xF3	; 243
    1408:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
									setLeftSpeed(-13);
    140c:	83 ef       	ldi	r24, 0xF3	; 243
    140e:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
									demoStartTime = getTime100MicroSec();
    1412:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    1416:	60 93 54 04 	sts	0x0454, r22
    141a:	70 93 55 04 	sts	0x0455, r23
    141e:	80 93 56 04 	sts	0x0456, r24
    1422:	90 93 57 04 	sts	0x0457, r25
									demoState = 4;
    1426:	f4 e0       	ldi	r31, 0x04	; 4
    1428:	f0 93 50 04 	sts	0x0450, r31
									break;
    142c:	21 c8       	rjmp	.-4030   	; 0x470 <main+0x294>
							//pwm_green = 255;
							//pwm_blue = 0;
							break;
						
						case 4: // go back from charger
							turnOffGreenLeds();
    142e:	0e 94 99 3b 	call	0x7732	; 0x7732 <turnOffGreenLeds>
							GREEN_LED6_ON;
    1432:	80 91 0b 01 	lds	r24, 0x010B
    1436:	8f 7b       	andi	r24, 0xBF	; 191
    1438:	80 93 0b 01 	sts	0x010B, r24
							GREEN_LED7_ON;
    143c:	80 91 0b 01 	lds	r24, 0x010B
    1440:	8f 77       	andi	r24, 0x7F	; 127
    1442:	80 93 0b 01 	sts	0x010B, r24
							demoEndTime = getTime100MicroSec();
    1446:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    144a:	9b 01       	movw	r18, r22
    144c:	ac 01       	movw	r20, r24
    144e:	60 93 5c 04 	sts	0x045C, r22
    1452:	70 93 5d 04 	sts	0x045D, r23
    1456:	80 93 5e 04 	sts	0x045E, r24
    145a:	90 93 5f 04 	sts	0x045F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_1_SEC)) {
    145e:	80 91 54 04 	lds	r24, 0x0454
    1462:	90 91 55 04 	lds	r25, 0x0455
    1466:	a0 91 56 04 	lds	r26, 0x0456
    146a:	b0 91 57 04 	lds	r27, 0x0457
    146e:	28 1b       	sub	r18, r24
    1470:	39 0b       	sbc	r19, r25
    1472:	4a 0b       	sbc	r20, r26
    1474:	5b 0b       	sbc	r21, r27
    1476:	2f 38       	cpi	r18, 0x8F	; 143
    1478:	65 e2       	ldi	r22, 0x25	; 37
    147a:	36 07       	cpc	r19, r22
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	46 07       	cpc	r20, r22
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	56 07       	cpc	r21, r22
    1484:	10 f4       	brcc	.+4      	; 0x148a <main+0x12ae>
    1486:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
								setRightSpeed(20);
    148a:	84 e1       	ldi	r24, 0x14	; 20
    148c:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
								setLeftSpeed(-20);								
    1490:	8c ee       	ldi	r24, 0xEC	; 236
    1492:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    1496:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    149a:	60 93 54 04 	sts	0x0454, r22
    149e:	70 93 55 04 	sts	0x0455, r23
    14a2:	80 93 56 04 	sts	0x0456, r24
    14a6:	90 93 57 04 	sts	0x0457, r25
								demoState = 5;							
    14aa:	85 e0       	ldi	r24, 0x05	; 5
    14ac:	80 93 50 04 	sts	0x0450, r24
    14b0:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
							//pwm_green = 0;
							//pwm_blue = 255;
							break;

						case 2:	// line found, follow it
							turnOffGreenLeds();
    14b4:	0e 94 99 3b 	call	0x7732	; 0x7732 <turnOffGreenLeds>
							GREEN_LED4_ON;
    14b8:	80 91 0b 01 	lds	r24, 0x010B
    14bc:	8f 7e       	andi	r24, 0xEF	; 239
    14be:	80 93 0b 01 	sts	0x010B, r24
							//GREEN_LED5_ON;
							disableObstacleAvoidance();
    14c2:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <disableObstacleAvoidance>

							demoEndTime = getTime100MicroSec();
    14c6:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    14ca:	9b 01       	movw	r18, r22
    14cc:	ac 01       	movw	r20, r24
    14ce:	60 93 5c 04 	sts	0x045C, r22
    14d2:	70 93 5d 04 	sts	0x045D, r23
    14d6:	80 93 5e 04 	sts	0x045E, r24
    14da:	90 93 5f 04 	sts	0x045F, r25
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
    14de:	80 91 54 04 	lds	r24, 0x0454
    14e2:	90 91 55 04 	lds	r25, 0x0455
    14e6:	a0 91 56 04 	lds	r26, 0x0456
    14ea:	b0 91 57 04 	lds	r27, 0x0457
    14ee:	28 1b       	sub	r18, r24
    14f0:	39 0b       	sbc	r19, r25
    14f2:	4a 0b       	sbc	r20, r26
    14f4:	5b 0b       	sbc	r21, r27
    14f6:	23 33       	cpi	r18, 0x33	; 51
    14f8:	6f ee       	ldi	r22, 0xEF	; 239
    14fa:	36 07       	cpc	r19, r22
    14fc:	62 e0       	ldi	r22, 0x02	; 2
    14fe:	46 07       	cpc	r20, r22
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	56 07       	cpc	r21, r22
    1504:	08 f0       	brcs	.+2      	; 0x1508 <main+0x132c>
    1506:	32 c1       	rjmp	.+612    	; 0x176c <main+0x1590>
								demoStartTime = getTime100MicroSec();
								demoState = 4;
								break;
							}

							if(CHARGE_ON) {
    1508:	80 91 03 01 	lds	r24, 0x0103
    150c:	84 ff       	sbrs	r24, 4
    150e:	0f c1       	rjmp	.+542    	; 0x172e <main+0x1552>
								outOfLine = 0;
    1510:	10 92 52 04 	sts	0x0452, r1
								chargeContact++;
    1514:	80 91 53 04 	lds	r24, 0x0453
    1518:	8f 5f       	subi	r24, 0xFF	; 255
    151a:	80 93 53 04 	sts	0x0453, r24
								if(chargeContact > 20) {
    151e:	85 31       	cpi	r24, 0x15	; 21
    1520:	08 f0       	brcs	.+2      	; 0x1524 <main+0x1348>
    1522:	5b c1       	rjmp	.+694    	; 0x17da <main+0x15fe>
    1524:	80 91 6b 02 	lds	r24, 0x026B
    1528:	90 91 6c 02 	lds	r25, 0x026C
								} else {
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
    152c:	20 91 69 02 	lds	r18, 0x0269
    1530:	30 91 6a 02 	lds	r19, 0x026A
    1534:	41 e0       	ldi	r20, 0x01	; 1
    1536:	22 3c       	cpi	r18, 0xC2	; 194
    1538:	34 07       	cpc	r19, r20
    153a:	ac f4       	brge	.+42     	; 0x1566 <main+0x138a>
    153c:	51 e0       	ldi	r21, 0x01	; 1
    153e:	83 3c       	cpi	r24, 0xC3	; 195
    1540:	95 07       	cpc	r25, r21
    1542:	8c f0       	brlt	.+34     	; 0x1566 <main+0x138a>
    1544:	40 91 6d 02 	lds	r20, 0x026D
    1548:	50 91 6e 02 	lds	r21, 0x026E
    154c:	61 e0       	ldi	r22, 0x01	; 1
    154e:	43 3c       	cpi	r20, 0xC3	; 195
    1550:	56 07       	cpc	r21, r22
    1552:	4c f0       	brlt	.+18     	; 0x1566 <main+0x138a>
    1554:	40 91 6f 02 	lds	r20, 0x026F
    1558:	50 91 70 02 	lds	r21, 0x0270
    155c:	e1 e0       	ldi	r30, 0x01	; 1
    155e:	43 3c       	cpi	r20, 0xC3	; 195
    1560:	5e 07       	cpc	r21, r30
    1562:	0c f0       	brlt	.+2      	; 0x1566 <main+0x138a>
    1564:	63 c1       	rjmp	.+710    	; 0x182c <main+0x1650>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
    1566:	40 91 6f 02 	lds	r20, 0x026F
    156a:	50 91 70 02 	lds	r21, 0x0270
    156e:	f1 e0       	ldi	r31, 0x01	; 1
    1570:	42 3c       	cpi	r20, 0xC2	; 194
    1572:	5f 07       	cpc	r21, r31
    1574:	0c f0       	brlt	.+2      	; 0x1578 <main+0x139c>
    1576:	c5 c0       	rjmp	.+394    	; 0x1702 <main+0x1526>
    1578:	41 e0       	ldi	r20, 0x01	; 1
    157a:	23 3c       	cpi	r18, 0xC3	; 195
    157c:	34 07       	cpc	r19, r20
    157e:	0c f4       	brge	.+2      	; 0x1582 <main+0x13a6>
    1580:	c0 c0       	rjmp	.+384    	; 0x1702 <main+0x1526>
    1582:	51 e0       	ldi	r21, 0x01	; 1
    1584:	83 3c       	cpi	r24, 0xC3	; 195
    1586:	95 07       	cpc	r25, r21
    1588:	0c f4       	brge	.+2      	; 0x158c <main+0x13b0>
    158a:	c0 c0       	rjmp	.+384    	; 0x170c <main+0x1530>
    158c:	80 91 6d 02 	lds	r24, 0x026D
    1590:	90 91 6e 02 	lds	r25, 0x026E
    1594:	61 e0       	ldi	r22, 0x01	; 1
    1596:	83 3c       	cpi	r24, 0xC3	; 195
    1598:	96 07       	cpc	r25, r22
    159a:	0c f0       	brlt	.+2      	; 0x159e <main+0x13c2>
    159c:	3f c1       	rjmp	.+638    	; 0x181c <main+0x1640>
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
								setLeftSpeed(15);
    159e:	8f e0       	ldi	r24, 0x0F	; 15
    15a0:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
								setRightSpeed(-5);
    15a4:	8b ef       	ldi	r24, 0xFB	; 251
    15a6:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
    15aa:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
				currRand2 = rand()%128;
				if(currRand2<32) {
					pwm_red = 255;
				} else if(currRand2<64) {
					pwm_green = 255;
				} else if (currRand2<96) {
    15ae:	80 36       	cpi	r24, 0x60	; 96
    15b0:	91 05       	cpc	r25, r1
    15b2:	08 f0       	brcs	.+2      	; 0x15b6 <main+0x13da>
    15b4:	67 ca       	rjmp	.-2866   	; 0xa84 <main+0x8a8>
					pwm_blue = 255;
    15b6:	10 93 0e 02 	sts	0x020E, r17
    15ba:	64 ca       	rjmp	.-2872   	; 0xa84 <main+0x8a8>
							outOfLine = 0;
							enableObstacleAvoidance();
							setRightSpeed(15);
							setLeftSpeed(15);
							if(proximityResult[9]<LINE_IN_THR || proximityResult[10]<LINE_IN_THR || proximityResult[8]<LINE_IN_THR || proximityResult[11]<LINE_IN_THR) {
								lineFound++;
    15bc:	80 91 51 04 	lds	r24, 0x0451
    15c0:	8f 5f       	subi	r24, 0xFF	; 255
    15c2:	80 93 51 04 	sts	0x0451, r24
								if(lineFound > 10) {
    15c6:	8b 30       	cpi	r24, 0x0B	; 11
    15c8:	10 f4       	brcc	.+4      	; 0x15ce <main+0x13f2>
    15ca:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
									outOfLine = 0;
    15ce:	10 92 52 04 	sts	0x0452, r1
									chargeContact = 0;
    15d2:	10 92 53 04 	sts	0x0453, r1
									demoStartTime = getTime100MicroSec();
    15d6:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    15da:	60 93 54 04 	sts	0x0454, r22
    15de:	70 93 55 04 	sts	0x0455, r23
    15e2:	80 93 56 04 	sts	0x0456, r24
    15e6:	90 93 57 04 	sts	0x0457, r25
									demoState = 2;
    15ea:	42 e0       	ldi	r20, 0x02	; 2
    15ec:	40 93 50 04 	sts	0x0450, r20
									break;
    15f0:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
							}

							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
    15f4:	84 36       	cpi	r24, 0x64	; 100
    15f6:	91 05       	cpc	r25, r1
    15f8:	08 f0       	brcs	.+2      	; 0x15fc <main+0x1420>
    15fa:	7b c0       	rjmp	.+246    	; 0x16f2 <main+0x1516>
								pwm_green = 255;
    15fc:	10 93 0d 02 	sts	0x020D, r17
    1600:	80 91 0c 02 	lds	r24, 0x020C
    1604:	87 cb       	rjmp	.-2290   	; 0xd14 <main+0xb38>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_blue = 255;
							} else {
								pwm_blue = currRand;
    1606:	80 93 0e 02 	sts	0x020E, r24
    160a:	76 cb       	rjmp	.-2324   	; 0xcf8 <main+0xb1c>

							currRand = rand()% 128;
							if(currRand > 95) {
								pwm_green = 255;
							} else {
								pwm_green = currRand;
    160c:	80 93 0d 02 	sts	0x020D, r24
    1610:	67 cb       	rjmp	.-2354   	; 0xce0 <main+0xb04>
							turnOffGreenLeds();					
							currRand = rand()% 128;	// 0 to 255 is the maximum, we use 0 to 127 to get brighter colors
							if(currRand > 95) {
								pwm_red = 255;
							} else {
								pwm_red = currRand;
    1612:	80 93 0c 02 	sts	0x020C, r24
    1616:	58 cb       	rjmp	.-2384   	; 0xcc8 <main+0xaec>
					} else if(pwm_right_desired > pwm_intermediate_right_desired) {
						pwm_intermediate_right_desired += speedStep;
						if(pwm_intermediate_right_desired > pwm_right_desired) {
							pwm_intermediate_right_desired = pwm_right_desired;
						}
					} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    1618:	82 17       	cp	r24, r18
    161a:	93 07       	cpc	r25, r19
    161c:	14 f0       	brlt	.+4      	; 0x1622 <main+0x1446>
    161e:	0c 94 11 03 	jmp	0x622	; 0x622 <main+0x446>
						pwm_intermediate_right_desired -= speedStep;
    1622:	40 91 17 02 	lds	r20, 0x0217
    1626:	24 1b       	sub	r18, r20
    1628:	31 09       	sbc	r19, r1
    162a:	30 93 fe 02 	sts	0x02FE, r19
    162e:	20 93 fd 02 	sts	0x02FD, r18
						if(pwm_intermediate_right_desired < pwm_right_desired) {
    1632:	28 17       	cp	r18, r24
    1634:	39 07       	cpc	r19, r25
    1636:	14 f0       	brlt	.+4      	; 0x163c <main+0x1460>
    1638:	0c 94 11 03 	jmp	0x622	; 0x622 <main+0x446>
    163c:	0c 94 0d 03 	jmp	0x61a	; 0x61a <main+0x43e>
					} else if(pwm_left_desired > pwm_intermediate_left_desired) {
						pwm_intermediate_left_desired += speedStep;
						if(pwm_intermediate_left_desired > pwm_left_desired) {
							pwm_intermediate_left_desired = pwm_left_desired;
						}
					} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    1640:	82 17       	cp	r24, r18
    1642:	93 07       	cpc	r25, r19
    1644:	14 f0       	brlt	.+4      	; 0x164a <main+0x146e>
    1646:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
						pwm_intermediate_left_desired -= speedStep;
    164a:	40 91 17 02 	lds	r20, 0x0217
    164e:	24 1b       	sub	r18, r20
    1650:	31 09       	sbc	r19, r1
    1652:	30 93 00 03 	sts	0x0300, r19
    1656:	20 93 ff 02 	sts	0x02FF, r18
						if(pwm_intermediate_left_desired < pwm_left_desired) {
    165a:	28 17       	cp	r18, r24
    165c:	39 07       	cpc	r19, r25
    165e:	14 f0       	brlt	.+4      	; 0x1664 <main+0x1488>
    1660:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <main+0xc6>
    1664:	02 c8       	rjmp	.-4092   	; 0x66a <main+0x48e>
									demoStartTime = getTime100MicroSec();
									demoState = 4;
									break;
								}
							}
							if(!CHARGE_ON) {
    1666:	80 91 03 01 	lds	r24, 0x0103
    166a:	84 ff       	sbrs	r24, 4
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <main+0x1496>
    166e:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
								chargeContact = 0;
    1672:	10 92 53 04 	sts	0x0453, r1
								outOfLine = 0;
    1676:	10 92 52 04 	sts	0x0452, r1
								demoState = 2;
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	98 2e       	mov	r9, r24
    167e:	90 92 50 04 	sts	0x0450, r9
								demoStartTime = getTime100MicroSec();
    1682:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    1686:	60 93 54 04 	sts	0x0454, r22
    168a:	70 93 55 04 	sts	0x0455, r23
    168e:	80 93 56 04 	sts	0x0456, r24
    1692:	90 93 57 04 	sts	0x0457, r25
								break;						
    1696:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
								}
								setGreenLed(greenLedState, 1);
								demoEndTime = getTime100MicroSec();											
							}
							if((getTime100MicroSec()-demoStartTime2) >= (PAUSE_2_SEC)) {
								rgbLedState = 1;
    169a:	20 92 6b 04 	sts	0x046B, r2
								demoStartTime2 = getTime100MicroSec();
    169e:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    16a2:	60 93 58 04 	sts	0x0458, r22
    16a6:	70 93 59 04 	sts	0x0459, r23
    16aa:	80 93 5a 04 	sts	0x045A, r24
    16ae:	90 93 5b 04 	sts	0x045B, r25
    16b2:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
						case 0:							
							pwm_red = 255;
							pwm_green = 255;
							pwm_blue = 255;
							if((getTime100MicroSec()-demoEndTime) >= (PAUSE_100_MSEC)) {
								setGreenLed(greenLedState, 0);
    16b6:	80 91 6a 04 	lds	r24, 0x046A
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <setGreenLed>
								greenLedState++;
    16c0:	80 91 6a 04 	lds	r24, 0x046A
    16c4:	8f 5f       	subi	r24, 0xFF	; 255
    16c6:	80 93 6a 04 	sts	0x046A, r24
								if(greenLedState > 7) {
    16ca:	88 30       	cpi	r24, 0x08	; 8
    16cc:	18 f0       	brcs	.+6      	; 0x16d4 <main+0x14f8>
									greenLedState = 0;
    16ce:	10 92 6a 04 	sts	0x046A, r1
    16d2:	80 e0       	ldi	r24, 0x00	; 0
								}
								setGreenLed(greenLedState, 1);
    16d4:	61 e0       	ldi	r22, 0x01	; 1
    16d6:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <setGreenLed>
								demoEndTime = getTime100MicroSec();											
    16da:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    16de:	60 93 5c 04 	sts	0x045C, r22
    16e2:	70 93 5d 04 	sts	0x045D, r23
    16e6:	80 93 5e 04 	sts	0x045E, r24
    16ea:	90 93 5f 04 	sts	0x045F, r25
    16ee:	0c 94 1e 02 	jmp	0x43c	; 0x43c <main+0x260>
							currRand = rand()% 200;
							if(currRand<50) {
								pwm_red = 255;
							} else if(currRand<100) {
								pwm_green = 255;
							} else if (currRand<150) {	
    16f2:	86 39       	cpi	r24, 0x96	; 150
    16f4:	91 05       	cpc	r25, r1
    16f6:	10 f4       	brcc	.+4      	; 0x16fc <main+0x1520>
								pwm_blue = 255;
    16f8:	10 93 0e 02 	sts	0x020E, r17
    16fc:	80 91 0c 02 	lds	r24, 0x020C
    1700:	09 cb       	rjmp	.-2542   	; 0xd14 <main+0xb38>
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
								setRightSpeed(-10);
							} else if(proximityResult[9]>LINE_OUT_THR) {	// center left is leaving the line => turn right
    1702:	e1 e0       	ldi	r30, 0x01	; 1
    1704:	83 3c       	cpi	r24, 0xC3	; 195
    1706:	9e 07       	cpc	r25, r30
    1708:	0c f0       	brlt	.+2      	; 0x170c <main+0x1530>
    170a:	49 cf       	rjmp	.-366    	; 0x159e <main+0x13c2>
								setRightSpeed(-5);
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else if(proximityResult[10]>LINE_OUT_THR) {	// center right is leaving the lnie => turn left
    170c:	80 91 6d 02 	lds	r24, 0x026D
    1710:	90 91 6e 02 	lds	r25, 0x026E
    1714:	f1 e0       	ldi	r31, 0x01	; 1
    1716:	83 3c       	cpi	r24, 0xC3	; 195
    1718:	9f 07       	cpc	r25, r31
    171a:	0c f4       	brge	.+2      	; 0x171e <main+0x1542>
    171c:	50 c0       	rjmp	.+160    	; 0x17be <main+0x15e2>
								setLeftSpeed(-5);
    171e:	8b ef       	ldi	r24, 0xFB	; 251
    1720:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
								setRightSpeed(15);
    1724:	8f e0       	ldi	r24, 0x0F	; 15
    1726:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
    172a:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
									demoStartTime = getTime100MicroSec();
									demoState = 3;
									break;
								}
							} else {
								chargeContact = 0;
    172e:	10 92 53 04 	sts	0x0453, r1

								if(proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {
    1732:	80 91 6b 02 	lds	r24, 0x026B
    1736:	90 91 6c 02 	lds	r25, 0x026C
    173a:	e1 e0       	ldi	r30, 0x01	; 1
    173c:	83 3c       	cpi	r24, 0xC3	; 195
    173e:	9e 07       	cpc	r25, r30
    1740:	54 f1       	brlt	.+84     	; 0x1796 <main+0x15ba>
    1742:	20 91 6d 02 	lds	r18, 0x026D
    1746:	30 91 6e 02 	lds	r19, 0x026E
    174a:	f1 e0       	ldi	r31, 0x01	; 1
    174c:	23 3c       	cpi	r18, 0xC3	; 195
    174e:	3f 07       	cpc	r19, r31
    1750:	14 f1       	brlt	.+68     	; 0x1796 <main+0x15ba>
									outOfLine++;
    1752:	20 91 52 04 	lds	r18, 0x0452
    1756:	2f 5f       	subi	r18, 0xFF	; 255
    1758:	20 93 52 04 	sts	0x0452, r18
									if(outOfLine > 250) {
    175c:	2b 3f       	cpi	r18, 0xFB	; 251
    175e:	08 f4       	brcc	.+2      	; 0x1762 <main+0x1586>
    1760:	e5 ce       	rjmp	.-566    	; 0x152c <main+0x1350>
    1762:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <main+0x51a>
						break;

					case 1:
						irCommTasks();
						if(irCommDataAvailable()==1) {
							i = irCommReadData();
    1766:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <irCommReadData>
    176a:	9d c9       	rjmp	.-3270   	; 0xaa6 <main+0x8ca>
							disableObstacleAvoidance();

							demoEndTime = getTime100MicroSec();
							if((demoEndTime-demoStartTime) >= (PAUSE_20_SEC)) {	// the robot seems to be blocked somehow
								// go back for a while
								setRightSpeed(-20);
    176c:	8c ee       	ldi	r24, 0xEC	; 236
    176e:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
								setLeftSpeed(-20);
    1772:	8c ee       	ldi	r24, 0xEC	; 236
    1774:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
								demoStartTime = getTime100MicroSec();
    1778:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    177c:	60 93 54 04 	sts	0x0454, r22
    1780:	70 93 55 04 	sts	0x0455, r23
    1784:	80 93 56 04 	sts	0x0456, r24
    1788:	90 93 57 04 	sts	0x0457, r25
								demoState = 4;
    178c:	84 e0       	ldi	r24, 0x04	; 4
    178e:	80 93 50 04 	sts	0x0450, r24
								break;
    1792:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
										chargeContact = 0;
										demoState = 1;
										break;
									}
								} else {
									outOfLine = 0;
    1796:	10 92 52 04 	sts	0x0452, r1
    179a:	c8 ce       	rjmp	.-624    	; 0x152c <main+0x1350>
					if(rgbState == 0) {
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
    179c:	91 30       	cpi	r25, 0x01	; 1
    179e:	91 f1       	breq	.+100    	; 0x1804 <main+0x1628>
						pwm_red = 255;
						pwm_green = 254;
						pwm_blue = 255;
						rgbState = 2;
					} else if(rgbState == 2) {
    17a0:	92 30       	cpi	r25, 0x02	; 2
    17a2:	11 f0       	breq	.+4      	; 0x17a8 <main+0x15cc>
    17a4:	0c 94 8d 03 	jmp	0x71a	; 0x71a <main+0x53e>
						pwm_red = 255;
    17a8:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 255;
    17ac:	10 93 0d 02 	sts	0x020D, r17
						pwm_blue = 254;
    17b0:	8e ef       	ldi	r24, 0xFE	; 254
    17b2:	80 93 0e 02 	sts	0x020E, r24
						rgbState = 0;
    17b6:	10 92 1c 03 	sts	0x031C, r1
    17ba:	0c 94 8d 03 	jmp	0x71a	; 0x71a <main+0x53e>
								//outOfLine++;
								//if(outOfLine > 250) {
								//	demoState = 1;
								//}
							} else {
								setRightSpeed(15);
    17be:	8f e0       	ldi	r24, 0x0F	; 15
    17c0:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
								setLeftSpeed(15);
    17c4:	8f e0       	ldi	r24, 0x0F	; 15
    17c6:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
    17ca:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
							//	irCommRxByteExpected=0;
							//}
							if(irCommRxByteExpected<255) {
								irCommRxByteExpected++;
							} else {
								irCommRxByteExpected = 0;
    17ce:	10 92 fc 04 	sts	0x04FC, r1
    17d2:	80 91 4c 04 	lds	r24, 0x044C
    17d6:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <main+0xf6>

							if(CHARGE_ON) {
								outOfLine = 0;
								chargeContact++;
								if(chargeContact > 20) {
									setLeftSpeed(0);
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
									setRightSpeed(0);
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
									demoStartTime = getTime100MicroSec();
    17e6:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    17ea:	60 93 54 04 	sts	0x0454, r22
    17ee:	70 93 55 04 	sts	0x0455, r23
    17f2:	80 93 56 04 	sts	0x0456, r24
    17f6:	90 93 57 04 	sts	0x0457, r25
									demoState = 3;
    17fa:	93 e0       	ldi	r25, 0x03	; 3
    17fc:	90 93 50 04 	sts	0x0450, r25
									break;
    1800:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
						pwm_red = 254;
						pwm_green = 255;
						pwm_blue = 255;
						rgbState = 1;
					} else if(rgbState == 1) {
						pwm_red = 255;
    1804:	10 93 0c 02 	sts	0x020C, r17
						pwm_green = 254;
    1808:	5e ef       	ldi	r21, 0xFE	; 254
    180a:	50 93 0d 02 	sts	0x020D, r21
						pwm_blue = 255;
    180e:	10 93 0e 02 	sts	0x020E, r17
						rgbState = 2;
    1812:	62 e0       	ldi	r22, 0x02	; 2
    1814:	60 93 1c 03 	sts	0x031C, r22
    1818:	0c 94 8d 03 	jmp	0x71a	; 0x71a <main+0x53e>
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
								setRightSpeed(15);
							} else if(proximityResult[11]<LINE_OUT_THR && proximityResult[8]>LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR) {	// right ground is the only within the black line => turn right
								setLeftSpeed(15);
    181c:	8f e0       	ldi	r24, 0x0F	; 15
    181e:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
								setRightSpeed(-10);
    1822:	86 ef       	ldi	r24, 0xF6	; 246
    1824:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
    1828:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>
									outOfLine = 0;
								}
							}
							
							if(proximityResult[8]<LINE_OUT_THR && proximityResult[9]>LINE_OUT_THR && proximityResult[10]>LINE_OUT_THR && proximityResult[11]>LINE_OUT_THR) {	// left ground is the only within the black line => turn left
								setLeftSpeed(-10);
    182c:	86 ef       	ldi	r24, 0xF6	; 246
    182e:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <setLeftSpeed>
								setRightSpeed(15);
    1832:	8f e0       	ldi	r24, 0x0F	; 15
    1834:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <setRightSpeed>
    1838:	0c 94 38 02 	jmp	0x470	; 0x470 <main+0x294>

0000183c <SPI_WAIT>:
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    1840:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    1842:	0d b4       	in	r0, 0x2d	; 45
    1844:	07 fc       	sbrc	r0, 7
    1846:	0a c0       	rjmp	.+20     	; 0x185c <SPI_WAIT+0x20>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1848:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    184a:	37 e2       	ldi	r19, 0x27	; 39
    184c:	80 31       	cpi	r24, 0x10	; 16
    184e:	93 07       	cpc	r25, r19
    1850:	c0 f3       	brcs	.-16     	; 0x1842 <SPI_WAIT+0x6>
			spiCommError = 1;
    1852:	20 93 18 03 	sts	0x0318, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    1856:	0d b4       	in	r0, 0x2d	; 45
    1858:	07 fe       	sbrs	r0, 7
    185a:	f6 cf       	rjmp	.-20     	; 0x1848 <SPI_WAIT+0xc>
			return;
		}
	}
}
    185c:	08 95       	ret

0000185e <initSPI>:

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    185e:	84 b1       	in	r24, 0x04	; 4
    1860:	80 7f       	andi	r24, 0xF0	; 240
    1862:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    1864:	84 b1       	in	r24, 0x04	; 4
    1866:	87 60       	ori	r24, 0x07	; 7
    1868:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    186a:	80 e5       	ldi	r24, 0x50	; 80
    186c:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    186e:	8d b5       	in	r24, 0x2d	; 45
    1870:	81 60       	ori	r24, 0x01	; 1
    1872:	8d bd       	out	0x2d, r24	; 45

}
    1874:	08 95       	ret

00001876 <closeSPI>:

void closeSPI() {

	SPCR = 0x00;
    1876:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0x00;
    1878:	1d bc       	out	0x2d, r1	; 45
}
    187a:	08 95       	ret

0000187c <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    187c:	44 23       	and	r20, r20
    187e:	09 f1       	breq	.+66     	; 0x18c2 <SPI_ReadWrite_Block+0x46>
    1880:	a6 2f       	mov	r26, r22
    1882:	b7 2f       	mov	r27, r23
    1884:	e8 2f       	mov	r30, r24
    1886:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    1888:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    188a:	21 91       	ld	r18, Z+
    188c:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    188e:	21 e0       	ldi	r18, 0x01	; 1
    1890:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    1892:	0d b4       	in	r0, 0x2d	; 45
    1894:	07 fc       	sbrc	r0, 7
    1896:	0b c0       	rjmp	.+22     	; 0x18ae <SPI_ReadWrite_Block+0x32>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1898:	2f 5f       	subi	r18, 0xFF	; 255
    189a:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    189c:	57 e2       	ldi	r21, 0x27	; 39
    189e:	20 31       	cpi	r18, 0x10	; 16
    18a0:	35 07       	cpc	r19, r21
    18a2:	b8 f3       	brcs	.-18     	; 0x1892 <SPI_ReadWrite_Block+0x16>
			spiCommError = 1;
    18a4:	90 93 18 03 	sts	0x0318, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    18a8:	0d b4       	in	r0, 0x2d	; 45
    18aa:	07 fe       	sbrs	r0, 7
    18ac:	f5 cf       	rjmp	.-22     	; 0x1898 <SPI_ReadWrite_Block+0x1c>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    18ae:	20 91 18 03 	lds	r18, 0x0318
    18b2:	22 23       	and	r18, r18
    18b4:	31 f4       	brne	.+12     	; 0x18c2 <SPI_ReadWrite_Block+0x46>
			return;
		  }
          buffer[i] = SPDR;
    18b6:	2e b5       	in	r18, 0x2e	; 46
    18b8:	2d 93       	st	X+, r18
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    18ba:	2e 2f       	mov	r18, r30
    18bc:	28 1b       	sub	r18, r24
    18be:	24 17       	cp	r18, r20
    18c0:	20 f3       	brcs	.-56     	; 0x188a <SPI_ReadWrite_Block+0xe>
    18c2:	08 95       	ret

000018c4 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    18c4:	66 23       	and	r22, r22
    18c6:	e9 f0       	breq	.+58     	; 0x1902 <SPI_Write_Block+0x3e>
    18c8:	e8 2f       	mov	r30, r24
    18ca:	f9 2f       	mov	r31, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    18cc:	91 e0       	ldi	r25, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    18ce:	21 91       	ld	r18, Z+
    18d0:	2e bd       	out	0x2e, r18	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    18d2:	21 e0       	ldi	r18, 0x01	; 1
    18d4:	30 e0       	ldi	r19, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    18d6:	0d b4       	in	r0, 0x2d	; 45
    18d8:	07 fc       	sbrc	r0, 7
    18da:	0b c0       	rjmp	.+22     	; 0x18f2 <SPI_Write_Block+0x2e>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    18dc:	2f 5f       	subi	r18, 0xFF	; 255
    18de:	3f 4f       	sbci	r19, 0xFF	; 255
		if(timeout>=10000) {
    18e0:	47 e2       	ldi	r20, 0x27	; 39
    18e2:	20 31       	cpi	r18, 0x10	; 16
    18e4:	34 07       	cpc	r19, r20
    18e6:	b8 f3       	brcs	.-18     	; 0x18d6 <SPI_Write_Block+0x12>
			spiCommError = 1;
    18e8:	90 93 18 03 	sts	0x0318, r25
		}
	
		if(SPSR & _BV(SPIF)) {
    18ec:	0d b4       	in	r0, 0x2d	; 45
    18ee:	07 fe       	sbrs	r0, 7
    18f0:	f5 cf       	rjmp	.-22     	; 0x18dc <SPI_Write_Block+0x18>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    18f2:	20 91 18 03 	lds	r18, 0x0318
    18f6:	22 23       	and	r18, r18
    18f8:	21 f4       	brne	.+8      	; 0x1902 <SPI_Write_Block+0x3e>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    18fa:	2e 2f       	mov	r18, r30
    18fc:	28 1b       	sub	r18, r24
    18fe:	26 17       	cp	r18, r22
    1900:	30 f3       	brcs	.-52     	; 0x18ce <SPI_Write_Block+0xa>
    1902:	08 95       	ret

00001904 <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    1904:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    190a:	21 e0       	ldi	r18, 0x01	; 1
		}
	
		if(SPSR & _BV(SPIF)) {
    190c:	0d b4       	in	r0, 0x2d	; 45
    190e:	07 fc       	sbrc	r0, 7
    1910:	0a c0       	rjmp	.+20     	; 0x1926 <SPI_Write_Byte+0x22>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    1912:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    1914:	37 e2       	ldi	r19, 0x27	; 39
    1916:	80 31       	cpi	r24, 0x10	; 16
    1918:	93 07       	cpc	r25, r19
    191a:	c0 f3       	brcs	.-16     	; 0x190c <SPI_Write_Byte+0x8>
			spiCommError = 1;
    191c:	20 93 18 03 	sts	0x0318, r18
		}
	
		if(SPSR & _BV(SPIF)) {
    1920:	0d b4       	in	r0, 0x2d	; 45
    1922:	07 fe       	sbrs	r0, 7
    1924:	f6 cf       	rjmp	.-20     	; 0x1912 <SPI_Write_Byte+0xe>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    1926:	8e b5       	in	r24, 0x2e	; 46
}
    1928:	08 95       	ret

0000192a <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <mirf_config+0xa>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1938:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    193a:	80 e2       	ldi	r24, 0x20	; 32
    193c:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1940:	8d e0       	ldi	r24, 0x0D	; 13
    1942:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    1946:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1948:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    194a:	83 e2       	ldi	r24, 0x23	; 35
    194c:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    1956:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    1958:	80 91 15 03 	lds	r24, 0x0315
    195c:	90 91 16 03 	lds	r25, 0x0316
    1960:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    1962:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    1964:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1966:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1968:	80 e3       	ldi	r24, 0x30	; 48
    196a:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    196e:	8e 01       	movw	r16, r28
    1970:	0f 5f       	subi	r16, 0xFF	; 255
    1972:	1f 4f       	sbci	r17, 0xFF	; 255
    1974:	c8 01       	movw	r24, r16
    1976:	63 e0       	ldi	r22, 0x03	; 3
    1978:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <SPI_Write_Block>
    mirf_CSN_hi;
    197c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    197e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1980:	8a e2       	ldi	r24, 0x2A	; 42
    1982:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1986:	c8 01       	movw	r24, r16
    1988:	63 e0       	ldi	r22, 0x03	; 3
    198a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <SPI_Write_Block>
    mirf_CSN_hi;
    198e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1990:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1992:	81 e2       	ldi	r24, 0x21	; 33
    1994:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    199e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19a0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19a2:	82 e2       	ldi	r24, 0x22	; 34
    19a4:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    19ae:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19b0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19b2:	84 e2       	ldi	r24, 0x24	; 36
    19b4:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19b8:	82 e1       	ldi	r24, 0x12	; 18
    19ba:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    19be:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19c0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19c2:	85 e2       	ldi	r24, 0x25	; 37
    19c4:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19c8:	88 e2       	ldi	r24, 0x28	; 40
    19ca:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    19ce:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19d0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19d2:	81 e3       	ldi	r24, 0x31	; 49
    19d4:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19d8:	8d e0       	ldi	r24, 0x0D	; 13
    19da:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    19de:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    19e0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    19e2:	80 e5       	ldi	r24, 0x50	; 80
    19e4:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    19e8:	83 e7       	ldi	r24, 0x73	; 115
    19ea:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    19ee:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    19f0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    19f2:	8c e3       	ldi	r24, 0x3C	; 60
    19f4:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    19fe:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1a00:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a02:	8d e3       	ldi	r24, 0x3D	; 61
    1a04:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1a08:	86 e0       	ldi	r24, 0x06	; 6
    1a0a:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    1a0e:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1a10:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a12:	80 e2       	ldi	r24, 0x20	; 32
    1a14:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1a18:	8f e0       	ldi	r24, 0x0F	; 15
    1a1a:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    1a1e:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	08 95       	ret

00001a30 <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    1a30:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    1a32:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    1a34:	0e 94 95 0c 	call	0x192a	; 0x192a <mirf_config>
}
    1a38:	08 95       	ret

00001a3a <mirf_set_RADDR>:
    //mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	ec 01       	movw	r28, r24
    mirf_CE_lo;
    1a40:	2c 98       	cbi	0x05, 4	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1a42:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a44:	8a e2       	ldi	r24, 0x2A	; 42
    1a46:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	65 e0       	ldi	r22, 0x05	; 5
    1a4e:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <SPI_Write_Block>
    mirf_CSN_hi;
    1a52:	28 9a       	sbi	0x05, 0	; 5
void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    mirf_CE_lo;
    mirf_write_register(RX_ADDR_P0,adr,5);
    mirf_CE_hi;
    1a54:	2c 9a       	sbi	0x05, 4	; 5
}
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	08 95       	ret

00001a5c <mirf_set_TADDR>:

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	ec 01       	movw	r28, r24
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    1a62:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1a64:	80 e3       	ldi	r24, 0x30	; 48
    1a66:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	65 e0       	ldi	r22, 0x05	; 5
    1a6e:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <SPI_Write_Block>
    mirf_CSN_hi;
    1a72:	28 9a       	sbi	0x05, 0	; 5

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
	mirf_write_register(TX_ADDR, adr,5);
}
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	08 95       	ret

00001a7a <mirf_data_ready>:
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1a7a:	80 91 14 05 	lds	r24, 0x0514
    1a7e:	88 23       	and	r24, r24
    1a80:	11 f0       	breq	.+4      	; 0x1a86 <mirf_data_ready+0xc>
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Write_Byte(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);

}
    1a84:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1a86:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1a88:	8f ef       	ldi	r24, 0xFF	; 255
    1a8a:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1a8e:	28 9a       	sbi	0x05, 0	; 5
    return status & (1<<RX_DR);
    1a90:	80 74       	andi	r24, 0x40	; 64
    1a92:	08 95       	ret

00001a94 <rx_fifo_is_empty>:

}

uint8_t rx_fifo_is_empty() {
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	0f 92       	push	r0
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t fifo_status = 0;
    1a9e:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1aa0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1aa2:	87 e1       	ldi	r24, 0x17	; 23
    1aa4:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1aa8:	be 01       	movw	r22, r28
    1aaa:	6f 5f       	subi	r22, 0xFF	; 255
    1aac:	7f 4f       	sbci	r23, 0xFF	; 255
    1aae:	cb 01       	movw	r24, r22
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	0e 94 3e 0c 	call	0x187c	; 0x187c <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1ab6:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aba:	81 70       	andi	r24, 0x01	; 1
    1abc:	0f 90       	pop	r0
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <flush_rx_fifo>:

void flush_rx_fifo() {

    mirf_CSN_lo;
    1ac4:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1ac6:	82 ee       	ldi	r24, 0xE2	; 226
    1ac8:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    1acc:	28 9a       	sbi	0x05, 0	; 5

}
    1ace:	08 95       	ret

00001ad0 <mirf_get_data>:

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               		// Pull down chip select
    1ad6:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1ad8:	81 e6       	ldi	r24, 0x61	; 97
    1ada:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1ade:	ce 01       	movw	r24, r28
    1ae0:	be 01       	movw	r22, r28
    1ae2:	4d e0       	ldi	r20, 0x0D	; 13
    1ae4:	0e 94 3e 0c 	call	0x187c	; 0x187c <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1ae8:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1aea:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1aec:	87 e2       	ldi	r24, 0x27	; 39
    1aee:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1af2:	80 e4       	ldi	r24, 0x40	; 64
    1af4:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    1af8:	28 9a       	sbi	0x05, 0	; 5
    mirf_CSN_lo;                               		// Pull down chip select
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    mirf_CSN_hi;                               		// Pull up chip select
    mirf_config_register(STATUS,(1<<RX_DR));   		// Reset status register
}
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	08 95       	ret

00001b00 <mirf_config_register>:

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	0f 92       	push	r0
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1b0a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b0c:	8f 71       	andi	r24, 0x1F	; 31
    1b0e:	80 62       	ori	r24, 0x20	; 32
    1b10:	69 83       	std	Y+1, r22	; 0x01
    1b12:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1b16:	69 81       	ldd	r22, Y+1	; 0x01
    1b18:	86 2f       	mov	r24, r22
    1b1a:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    1b1e:	28 9a       	sbi	0x05, 0	; 5
}
    1b20:	0f 90       	pop	r0
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <mirf_read_register>:

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	0f 92       	push	r0
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1b38:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1b3a:	8f 71       	andi	r24, 0x1F	; 31
    1b3c:	49 83       	std	Y+1, r20	; 0x01
    1b3e:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1b42:	c8 01       	movw	r24, r16
    1b44:	b8 01       	movw	r22, r16
    1b46:	49 81       	ldd	r20, Y+1	; 0x01
    1b48:	0e 94 3e 0c 	call	0x187c	; 0x187c <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1b4c:	28 9a       	sbi	0x05, 0	; 5
}
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	1f 91       	pop	r17
    1b56:	0f 91       	pop	r16
    1b58:	08 95       	ret

00001b5a <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	0f 92       	push	r0
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1b6a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1b6c:	8f 71       	andi	r24, 0x1F	; 31
    1b6e:	80 62       	ori	r24, 0x20	; 32
    1b70:	49 83       	std	Y+1, r20	; 0x01
    1b72:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    1b76:	c8 01       	movw	r24, r16
    1b78:	49 81       	ldd	r20, Y+1	; 0x01
    1b7a:	64 2f       	mov	r22, r20
    1b7c:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <SPI_Write_Block>
    mirf_CSN_hi;
    1b80:	28 9a       	sbi	0x05, 0	; 5
}
    1b82:	0f 90       	pop	r0
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	08 95       	ret

00001b8e <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1b8e:	0f 93       	push	r16
    1b90:	1f 93       	push	r17
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	0f 92       	push	r0
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	8c 01       	movw	r16, r24
    while (PTX) {}                  // Wait until last paket is send
    1b9e:	80 91 14 05 	lds	r24, 0x0514
    1ba2:	88 23       	and	r24, r24
    1ba4:	e1 f7       	brne	.-8      	; 0x1b9e <mirf_send+0x10>

    mirf_CE_lo;
    1ba6:	2c 98       	cbi	0x05, 4	; 5

    PTX = 1;                        // Set to transmitter mode
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	80 93 14 05 	sts	0x0514, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1bae:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1bb0:	80 e2       	ldi	r24, 0x20	; 32
    1bb2:	69 83       	std	Y+1, r22	; 0x01
    1bb4:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1bb8:	8a e4       	ldi	r24, 0x4A	; 74
    1bba:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    1bbe:	28 9a       	sbi	0x05, 0	; 5
    mirf_CE_lo;

    PTX = 1;                        // Set to transmitter mode
    TX_POWERUP;                     // Power up
    
    mirf_CSN_lo;                    // Pull down chip select
    1bc0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( FLUSH_TX );     // Write cmd to flush tx fifo
    1bc2:	81 ee       	ldi	r24, 0xE1	; 225
    1bc4:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;                    // Pull up chip select
    1bc8:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CSN_lo;                    // Pull down chip select
    1bca:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( W_TX_PAYLOAD ); // Write cmd to write payload
    1bcc:	80 ea       	ldi	r24, 0xA0	; 160
    1bce:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Block(value,len);   // Write payload
    1bd2:	c8 01       	movw	r24, r16
    1bd4:	69 81       	ldd	r22, Y+1	; 0x01
    1bd6:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <SPI_Write_Block>
    mirf_CSN_hi;                    // Pull up chip select
    1bda:	28 9a       	sbi	0x05, 0	; 5
    
    mirf_CE_hi;                     // Start transmission
    1bdc:	2c 9a       	sbi	0x05, 4	; 5
}
    1bde:	0f 90       	pop	r0
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	1f 91       	pop	r17
    1be6:	0f 91       	pop	r16
    1be8:	08 95       	ret

00001bea <writeAckPayload>:

void writeAckPayload(unsigned char *data, unsigned char size) {
    1bea:	ef 92       	push	r14
    1bec:	ff 92       	push	r15
    1bee:	0f 93       	push	r16
    1bf0:	1f 93       	push	r17
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	0f 92       	push	r0
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	18 2f       	mov	r17, r24
    1bfe:	06 2f       	mov	r16, r22
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    1c00:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1c02:	81 ee       	ldi	r24, 0xE1	; 225
    1c04:	99 83       	std	Y+1, r25	; 0x01
    1c06:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    1c0a:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1c0c:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1c0e:	88 ea       	ldi	r24, 0xA8	; 168
    1c10:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
    1c14:	99 81       	ldd	r25, Y+1	; 0x01
    1c16:	00 23       	and	r16, r16
    1c18:	61 f0       	breq	.+24     	; 0x1c32 <writeAckPayload+0x48>
    1c1a:	61 2f       	mov	r22, r17
    1c1c:	79 2f       	mov	r23, r25
    1c1e:	7b 01       	movw	r14, r22
		SPI_Write_Byte(data[k]);
    1c20:	f7 01       	movw	r30, r14
    1c22:	81 91       	ld	r24, Z+
    1c24:	7f 01       	movw	r14, r30
    1c26:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    1c2a:	8e 2d       	mov	r24, r14
    1c2c:	81 1b       	sub	r24, r17
    1c2e:	80 17       	cp	r24, r16
    1c30:	b8 f3       	brcs	.-18     	; 0x1c20 <writeAckPayload+0x36>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    1c32:	28 9a       	sbi	0x05, 0	; 5


}
    1c34:	0f 90       	pop	r0
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	1f 91       	pop	r17
    1c3c:	0f 91       	pop	r16
    1c3e:	ff 90       	pop	r15
    1c40:	ef 90       	pop	r14
    1c42:	08 95       	ret

00001c44 <readPayloadWidthFromTopFifo>:

uint8_t readPayloadWidthFromTopFifo() {
	uint8_t pWidth = 0;

    mirf_CSN_lo;
    1c44:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_R_RX_PL_WID);
    1c46:	80 e6       	ldi	r24, 0x60	; 96
    1c48:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
	pWidth = SPI_Write_Byte(NOP); 	// not specified in the datasheet but the "NRF_R_RX_PL_WID" has a parameter,
    1c4c:	8f ef       	ldi	r24, 0xFF	; 255
    1c4e:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
									// we need to send a NOP to receive the actual payload size
    mirf_CSN_hi;
    1c52:	28 9a       	sbi	0x05, 0	; 5
	
	return pWidth;
}
    1c54:	08 95       	ret

00001c56 <readPayloadWidthFromPipe0>:

uint8_t readPayloadWidthFromPipe0() {
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	0f 92       	push	r0
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
	uint8_t pWidth = 0;
    1c60:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1c62:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1c64:	81 e1       	ldi	r24, 0x11	; 17
    1c66:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1c6a:	be 01       	movw	r22, r28
    1c6c:	6f 5f       	subi	r22, 0xFF	; 255
    1c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c70:	cb 01       	movw	r24, r22
    1c72:	41 e0       	ldi	r20, 0x01	; 1
    1c74:	0e 94 3e 0c 	call	0x187c	; 0x187c <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1c78:	28 9a       	sbi	0x05, 0	; 5
	uint8_t pWidth = 0;

	mirf_read_register(RX_PW_P0, &pWidth, 1);
	
	return pWidth;
}
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	0f 90       	pop	r0
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <flushTxFifo>:

void flushTxFifo() {

    mirf_CSN_lo;
    1c84:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1c86:	81 ee       	ldi	r24, 0xE1	; 225
    1c88:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    1c8c:	28 9a       	sbi	0x05, 0	; 5

}
    1c8e:	08 95       	ret

00001c90 <handleRFCommands>:

void handleRFCommands() {
    1c90:	ff 92       	push	r15
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	0f 92       	push	r0
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1ca0:	80 91 14 05 	lds	r24, 0x0514
    1ca4:	88 23       	and	r24, r24
    1ca6:	39 f0       	breq	.+14     	; 0x1cb6 <handleRFCommands+0x26>

		

	}

}
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	1f 91       	pop	r17
    1cb0:	0f 91       	pop	r16
    1cb2:	ff 90       	pop	r15
    1cb4:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1cb6:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    1cb8:	8f ef       	ldi	r24, 0xFF	; 255
    1cba:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    1cbe:	28 9a       	sbi	0x05, 0	; 5

	unsigned int i=0;
	//uint8_t pWidth = 0;
	//uint8_t pWidthP0 = 0;

	if(mirf_data_ready()) {
    1cc0:	86 ff       	sbrs	r24, 6
    1cc2:	f2 cf       	rjmp	.-28     	; 0x1ca8 <handleRFCommands+0x18>
		//if(spiCommError) {
		//	usart0Transmit(0xFE,1);
		//	return;
		//}

		rfFlags |= 0x02;
    1cc4:	80 91 17 03 	lds	r24, 0x0317
    1cc8:	82 60       	ori	r24, 0x02	; 2
    1cca:	80 93 17 03 	sts	0x0317, r24
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1cce:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1cd0:	87 e2       	ldi	r24, 0x27	; 39
    1cd2:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1cd6:	80 e7       	ldi	r24, 0x70	; 112
    1cd8:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    1cdc:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
    1cde:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    1ce0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1ce2:	87 e1       	ldi	r24, 0x17	; 23
    1ce4:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    1ce8:	be 01       	movw	r22, r28
    1cea:	6f 5f       	subi	r22, 0xFF	; 255
    1cec:	7f 4f       	sbci	r23, 0xFF	; 255
    1cee:	cb 01       	movw	r24, r22
    1cf0:	41 e0       	ldi	r20, 0x01	; 1
    1cf2:	0e 94 3e 0c 	call	0x187c	; 0x187c <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    1cf6:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
		// aren't present in the fifo with consequent wrong data read and wrong behavior of the robot.
		// To avoid this situtation we add this check before actually reading from the fifo to be 
		// sure there are correct data to be read.
		// We don't know why the IRQ for data reception is raised, maybe is not correctly reset sometimes
		// or it is raised when it shouldn't...
		if(rx_fifo_is_empty()) {
    1cfa:	80 fd       	sbrc	r24, 0
    1cfc:	d5 cf       	rjmp	.-86     	; 0x1ca8 <handleRFCommands+0x18>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    1cfe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    1d00:	81 e6       	ldi	r24, 0x61	; 97
    1d02:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    1d06:	8b e6       	ldi	r24, 0x6B	; 107
    1d08:	99 e0       	ldi	r25, 0x09	; 9
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	4d e0       	ldi	r20, 0x0D	; 13
    1d0e:	0e 94 3e 0c 	call	0x187c	; 0x187c <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    1d12:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    1d14:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1d16:	87 e2       	ldi	r24, 0x27	; 39
    1d18:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    1d1c:	80 e4       	ldi	r24, 0x40	; 64
    1d1e:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d22:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    1d24:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    1d26:	82 ee       	ldi	r24, 0xE2	; 226
    1d28:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    1d2c:	28 9a       	sbi	0x05, 0	; 5
		mirf_get_data(rfData);
		flush_rx_fifo();

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {
    1d2e:	80 91 19 03 	lds	r24, 0x0319
    1d32:	81 30       	cpi	r24, 0x01	; 1
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <handleRFCommands+0xa8>
    1d36:	3a c1       	rjmp	.+628    	; 0x1fac <handleRFCommands+0x31c>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    1d38:	40 91 6b 09 	lds	r20, 0x096B
    1d3c:	24 2f       	mov	r18, r20
    1d3e:	44 23       	and	r20, r20
    1d40:	09 f0       	breq	.+2      	; 0x1d44 <handleRFCommands+0xb4>
    1d42:	8b c1       	rjmp	.+790    	; 0x205a <handleRFCommands+0x3ca>
    1d44:	50 91 6c 09 	lds	r21, 0x096C
    1d48:	e5 2f       	mov	r30, r21
    1d4a:	55 23       	and	r21, r21
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <handleRFCommands+0xc0>
    1d4e:	ff c1       	rjmp	.+1022   	; 0x214e <handleRFCommands+0x4be>

				sleep(60);
    1d50:	00 91 6d 09 	lds	r16, 0x096D

			}

			if(calibrateOdomFlag==0) { 
    1d54:	80 91 4d 05 	lds	r24, 0x054D
    1d58:	88 23       	and	r24, r24
    1d5a:	41 f5       	brne	.+80     	; 0x1dac <handleRFCommands+0x11c>
				speedr = (rfData[4]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    1d5c:	70 91 6f 09 	lds	r23, 0x096F
    1d60:	27 2f       	mov	r18, r23
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	2f 77       	andi	r18, 0x7F	; 127
    1d66:	30 70       	andi	r19, 0x00	; 0
    1d68:	30 93 14 03 	sts	0x0314, r19
    1d6c:	20 93 13 03 	sts	0x0313, r18
				speedl = (rfData[5]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    1d70:	60 91 70 09 	lds	r22, 0x0970
    1d74:	86 2f       	mov	r24, r22
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	8f 77       	andi	r24, 0x7F	; 127
    1d7a:	90 70       	andi	r25, 0x00	; 0
    1d7c:	90 93 12 03 	sts	0x0312, r25
    1d80:	80 93 11 03 	sts	0x0311, r24
											// in the same range of the measured speed that is 0..800.
											// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
											// this means that the range is more or less 0..400.


				if((rfData[4]&0x80)==0x80) {			// motor right forward
    1d84:	77 fd       	sbrc	r23, 7
    1d86:	03 c0       	rjmp	.+6      	; 0x1d8e <handleRFCommands+0xfe>
					pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
				} else {								// backward
					pwm_right_desired = -(speedr);
    1d88:	30 95       	com	r19
    1d8a:	21 95       	neg	r18
    1d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8e:	30 93 fa 02 	sts	0x02FA, r19
    1d92:	20 93 f9 02 	sts	0x02F9, r18
				}

				if((rfData[5]&0x80)==0x80) {			// motor left forward
    1d96:	67 fd       	sbrc	r22, 7
    1d98:	03 c0       	rjmp	.+6      	; 0x1da0 <handleRFCommands+0x110>
					pwm_left_desired = speedl;
				} else {								// backward
					pwm_left_desired = -(speedl);
    1d9a:	90 95       	com	r25
    1d9c:	81 95       	neg	r24
    1d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1da0:	90 93 fc 02 	sts	0x02FC, r25
    1da4:	80 93 fb 02 	sts	0x02FB, r24
    1da8:	24 2f       	mov	r18, r20
    1daa:	e5 2f       	mov	r30, r21

			}


			for(i=0; i<3; i++) {
				dataLED[i]=rfData[i]&0xFF;
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	30 93 54 09 	sts	0x0954, r19
    1db2:	20 93 53 09 	sts	0x0953, r18
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	f0 93 56 09 	sts	0x0956, r31
    1dbc:	e0 93 55 09 	sts	0x0955, r30
    1dc0:	10 e0       	ldi	r17, 0x00	; 0
    1dc2:	10 93 58 09 	sts	0x0958, r17
    1dc6:	00 93 57 09 	sts	0x0957, r16
			}
			pwm_red = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[0]&0xFF)/100;
    1dca:	92 2f       	mov	r25, r18
    1dcc:	88 27       	eor	r24, r24
    1dce:	82 1b       	sub	r24, r18
    1dd0:	93 0b       	sbc	r25, r19
    1dd2:	24 e6       	ldi	r18, 0x64	; 100
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	b9 01       	movw	r22, r18
    1dd8:	0e 94 be 51 	call	0xa37c	; 0xa37c <__udivmodhi4>
    1ddc:	f6 2e       	mov	r15, r22
    1dde:	f0 94       	com	r15
    1de0:	f0 92 0c 02 	sts	0x020C, r15
			pwm_blue = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[1]&0xFF)/100;
    1de4:	5e 2f       	mov	r21, r30
    1de6:	44 27       	eor	r20, r20
    1de8:	4e 1b       	sub	r20, r30
    1dea:	5f 0b       	sbc	r21, r31
    1dec:	ca 01       	movw	r24, r20
    1dee:	b9 01       	movw	r22, r18
    1df0:	0e 94 be 51 	call	0xa37c	; 0xa37c <__udivmodhi4>
    1df4:	60 95       	com	r22
    1df6:	60 93 0e 02 	sts	0x020E, r22
			pwm_green = MAX_LEDS_PWM-MAX_LEDS_PWM*(dataLED[2]&0xFF)/100;
    1dfa:	50 2f       	mov	r21, r16
    1dfc:	44 27       	eor	r20, r20
    1dfe:	40 1b       	sub	r20, r16
    1e00:	51 0b       	sbc	r21, r17
    1e02:	ca 01       	movw	r24, r20
    1e04:	b9 01       	movw	r22, r18
    1e06:	0e 94 be 51 	call	0xa37c	; 0xa37c <__udivmodhi4>
    1e0a:	60 95       	com	r22
    1e0c:	60 93 0d 02 	sts	0x020D, r22
			updateRedLed(pwm_red);
    1e10:	8f 2d       	mov	r24, r15
    1e12:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
			updateGreenLed(pwm_green);
    1e16:	80 91 0d 02 	lds	r24, 0x020D
    1e1a:	0e 94 d4 3a 	call	0x75a8	; 0x75a8 <updateGreenLed>
			updateBlueLed(pwm_blue);
    1e1e:	80 91 0e 02 	lds	r24, 0x020E
    1e22:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <updateBlueLed>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
    1e26:	80 91 6e 09 	lds	r24, 0x096E
    1e2a:	80 ff       	sbrs	r24, 0
    1e2c:	48 c1       	rjmp	.+656    	; 0x20be <handleRFCommands+0x42e>
				LED_IR1_LOW;
    1e2e:	44 98       	cbi	0x08, 4	; 8
			} else {
				LED_IR1_HIGH;
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
    1e30:	81 ff       	sbrs	r24, 1
    1e32:	43 c1       	rjmp	.+646    	; 0x20ba <handleRFCommands+0x42a>
				LED_IR2_LOW;
    1e34:	45 98       	cbi	0x08, 5	; 8
			} else {
				LED_IR2_HIGH;
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
    1e36:	98 2f       	mov	r25, r24
    1e38:	82 ff       	sbrs	r24, 2
    1e3a:	3c c1       	rjmp	.+632    	; 0x20b4 <handleRFCommands+0x424>
				irEnabled = 1;
    1e3c:	21 e0       	ldi	r18, 0x01	; 1
    1e3e:	20 93 12 02 	sts	0x0212, r18
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
    1e42:	84 fd       	sbrc	r24, 4
    1e44:	91 c1       	rjmp	.+802    	; 0x2168 <handleRFCommands+0x4d8>
				calibrateSensors();
				resetOdometry();
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
    1e46:	86 ff       	sbrs	r24, 6
    1e48:	32 c1       	rjmp	.+612    	; 0x20ae <handleRFCommands+0x41e>
				obstacleAvoidanceEnabled = 1;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	80 93 6c 04 	sts	0x046C, r24
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
    1e50:	97 fd       	sbrc	r25, 7
    1e52:	b5 c1       	rjmp	.+874    	; 0x21be <handleRFCommands+0x52e>
				cliffAvoidanceEnabled = 1;
			} else {
				cliffAvoidanceEnabled = 0;
    1e54:	10 92 6d 04 	sts	0x046D, r1
			}

			// handle small green leds
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
    1e58:	80 91 71 09 	lds	r24, 0x0971
    1e5c:	80 ff       	sbrs	r24, 0
    1e5e:	21 c1       	rjmp	.+578    	; 0x20a2 <handleRFCommands+0x412>
					GREEN_LED0_ON;
    1e60:	80 91 0b 01 	lds	r24, 0x010B
    1e64:	8e 7f       	andi	r24, 0xFE	; 254
    1e66:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED0_OFF;
				}
				
				if(bit_is_set(rfData[6], 1) ) {
    1e6a:	80 91 71 09 	lds	r24, 0x0971
    1e6e:	81 ff       	sbrs	r24, 1
    1e70:	12 c1       	rjmp	.+548    	; 0x2096 <handleRFCommands+0x406>
					GREEN_LED1_ON;
    1e72:	80 91 0b 01 	lds	r24, 0x010B
    1e76:	8d 7f       	andi	r24, 0xFD	; 253
    1e78:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED1_OFF;
				}
				
				if(bit_is_set(rfData[6], 2) ) {
    1e7c:	80 91 71 09 	lds	r24, 0x0971
    1e80:	82 ff       	sbrs	r24, 2
    1e82:	03 c1       	rjmp	.+518    	; 0x208a <handleRFCommands+0x3fa>
					GREEN_LED2_ON;
    1e84:	80 91 0b 01 	lds	r24, 0x010B
    1e88:	8b 7f       	andi	r24, 0xFB	; 251
    1e8a:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED2_OFF;
				}												

				if(bit_is_set(rfData[6], 3) ) {
    1e8e:	80 91 71 09 	lds	r24, 0x0971
    1e92:	83 ff       	sbrs	r24, 3
    1e94:	f8 c0       	rjmp	.+496    	; 0x2086 <handleRFCommands+0x3f6>
					GREEN_LED3_ON;
    1e96:	a3 98       	cbi	0x14, 3	; 20
				} else {
					GREEN_LED3_OFF;
				}

				if(bit_is_set(rfData[6], 4) ) {
    1e98:	80 91 71 09 	lds	r24, 0x0971
    1e9c:	84 ff       	sbrs	r24, 4
    1e9e:	ed c0       	rjmp	.+474    	; 0x207a <handleRFCommands+0x3ea>
					GREEN_LED4_ON;
    1ea0:	80 91 0b 01 	lds	r24, 0x010B
    1ea4:	8f 7e       	andi	r24, 0xEF	; 239
    1ea6:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED4_OFF;
				}

				if(bit_is_set(rfData[6], 5) ) {
    1eaa:	80 91 71 09 	lds	r24, 0x0971
    1eae:	85 ff       	sbrs	r24, 5
    1eb0:	de c0       	rjmp	.+444    	; 0x206e <handleRFCommands+0x3de>
					GREEN_LED5_ON;
    1eb2:	80 91 0b 01 	lds	r24, 0x010B
    1eb6:	8f 7d       	andi	r24, 0xDF	; 223
    1eb8:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED5_OFF;
				}

				if(bit_is_set(rfData[6], 6) ) {
    1ebc:	80 91 71 09 	lds	r24, 0x0971
    1ec0:	86 ff       	sbrs	r24, 6
    1ec2:	cf c0       	rjmp	.+414    	; 0x2062 <handleRFCommands+0x3d2>
					GREEN_LED6_ON;
    1ec4:	80 91 0b 01 	lds	r24, 0x010B
    1ec8:	8f 7b       	andi	r24, 0xBF	; 191
    1eca:	80 93 0b 01 	sts	0x010B, r24
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
    1ece:	80 91 71 09 	lds	r24, 0x0971
    1ed2:	87 fd       	sbrc	r24, 7
    1ed4:	6e c1       	rjmp	.+732    	; 0x21b2 <handleRFCommands+0x522>
					GREEN_LED7_ON;
				} else {
					GREEN_LED7_OFF;
    1ed6:	80 91 0b 01 	lds	r24, 0x010B
    1eda:	80 68       	ori	r24, 0x80	; 128
    1edc:	80 93 0b 01 	sts	0x010B, r24
				}

			#endif
		
			if(currentSelector == 8) {
    1ee0:	80 91 4c 04 	lds	r24, 0x044C
    1ee4:	88 30       	cpi	r24, 0x08	; 8
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <handleRFCommands+0x25a>
    1ee8:	47 c1       	rjmp	.+654    	; 0x2178 <handleRFCommands+0x4e8>

			// read and handle the remaining bytes of the payload (at the moment not used)


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;
    1eea:	80 91 0b 02 	lds	r24, 0x020B
    1eee:	80 93 a3 08 	sts	0x08A3, r24

			switch(packetId) {
    1ef2:	85 30       	cpi	r24, 0x05	; 5
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <handleRFCommands+0x268>
    1ef6:	67 c1       	rjmp	.+718    	; 0x21c6 <handleRFCommands+0x536>
    1ef8:	86 30       	cpi	r24, 0x06	; 6
    1efa:	08 f4       	brcc	.+2      	; 0x1efe <handleRFCommands+0x26e>
    1efc:	e2 c0       	rjmp	.+452    	; 0x20c2 <handleRFCommands+0x432>
    1efe:	86 30       	cpi	r24, 0x06	; 6
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <handleRFCommands+0x274>
    1f02:	ed c1       	rjmp	.+986    	; 0x22de <__stack+0xdf>
    1f04:	87 30       	cpi	r24, 0x07	; 7
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <handleRFCommands+0x27a>
    1f08:	51 c0       	rjmp	.+162    	; 0x1fac <handleRFCommands+0x31c>
					packetId = 7;
					break;


				case 7:
					ackPayload[1] = ((signed long int)leftMotSteps)&0xFF;
    1f0a:	60 91 d5 02 	lds	r22, 0x02D5
    1f0e:	70 91 d6 02 	lds	r23, 0x02D6
    1f12:	80 91 d7 02 	lds	r24, 0x02D7
    1f16:	90 91 d8 02 	lds	r25, 0x02D8
    1f1a:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    1f1e:	60 93 a4 08 	sts	0x08A4, r22
					ackPayload[2] = ((signed long int)leftMotSteps)>>8;
    1f22:	70 93 a5 08 	sts	0x08A5, r23
					ackPayload[3] = ((signed long int)leftMotSteps)>>16;
    1f26:	80 93 a6 08 	sts	0x08A6, r24
					ackPayload[4] = ((signed long int)leftMotSteps)>>24;
    1f2a:	90 93 a7 08 	sts	0x08A7, r25
					ackPayload[5] = ((signed long int)rightMotSteps)&0xFF;
    1f2e:	60 91 d1 02 	lds	r22, 0x02D1
    1f32:	70 91 d2 02 	lds	r23, 0x02D2
    1f36:	80 91 d3 02 	lds	r24, 0x02D3
    1f3a:	90 91 d4 02 	lds	r25, 0x02D4
    1f3e:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    1f42:	60 93 a8 08 	sts	0x08A8, r22
					ackPayload[6] = ((signed long int)rightMotSteps)>>8;
    1f46:	70 93 a9 08 	sts	0x08A9, r23
					ackPayload[7] = ((signed long int)rightMotSteps)>>16;
    1f4a:	80 93 aa 08 	sts	0x08AA, r24
					ackPayload[8] = ((signed long int)rightMotSteps)>>24;
    1f4e:	90 93 ab 08 	sts	0x08AB, r25
					lastTheta = theta;
    1f52:	80 91 6f 04 	lds	r24, 0x046F
    1f56:	90 91 70 04 	lds	r25, 0x0470
    1f5a:	a0 91 71 04 	lds	r26, 0x0471
    1f5e:	b0 91 72 04 	lds	r27, 0x0472
    1f62:	80 93 73 04 	sts	0x0473, r24
    1f66:	90 93 74 04 	sts	0x0474, r25
    1f6a:	a0 93 75 04 	sts	0x0475, r26
    1f6e:	b0 93 76 04 	sts	0x0476, r27
					ackPayload[9] = irCommMaxSensorSignalTemp[16]&0xFF; //((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    1f72:	90 91 6c 08 	lds	r25, 0x086C
    1f76:	80 91 6d 08 	lds	r24, 0x086D
    1f7a:	90 93 ac 08 	sts	0x08AC, r25
					ackPayload[10] = irCommMaxSensorSignalTemp[16]>>8; //((signed int)(lastTheta*573.0))>>8;				
    1f7e:	80 93 ad 08 	sts	0x08AD, r24
					ackPayload[11] = irCommMaxSensorSignalTemp[17]&0xFF; //((unsigned int)xPos)&0xFF;
    1f82:	90 91 6e 08 	lds	r25, 0x086E
    1f86:	80 91 6f 08 	lds	r24, 0x086F
    1f8a:	90 93 ae 08 	sts	0x08AE, r25
					ackPayload[12] = irCommMaxSensorSignalTemp[17]>>8; //((unsigned int)xPos)>>8;
    1f8e:	80 93 af 08 	sts	0x08AF, r24
					ackPayload[13] = irCommMaxSensorSignalTemp[18]&0xFF; //((unsigned int)yPos)&0xFF;
    1f92:	90 91 70 08 	lds	r25, 0x0870
    1f96:	80 91 71 08 	lds	r24, 0x0871
    1f9a:	90 93 b0 08 	sts	0x08B0, r25
					ackPayload[14] = irCommMaxSensorSignalTemp[18]>>8; //((unsigned int)yPos)>>8;
    1f9e:	80 93 b1 08 	sts	0x08B1, r24
					//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
					//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
					//ackPayload[12] = ((unsigned int)xPosOld)>>8;
					//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
					//ackPayload[14] = ((unsigned int)yPosOld)>>8;
					ackPayload[15] = 0;
    1fa2:	10 92 b2 08 	sts	0x08B2, r1
					packetId = 3;
    1fa6:	83 e0       	ldi	r24, 0x03	; 3
    1fa8:	80 93 0b 02 	sts	0x020B, r24
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    1fac:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    1fae:	81 ee       	ldi	r24, 0xE1	; 225
    1fb0:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    mirf_CSN_hi;
    1fb4:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    1fb6:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    1fb8:	88 ea       	ldi	r24, 0xA8	; 168
    1fba:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    1fbe:	80 91 a3 08 	lds	r24, 0x08A3
    1fc2:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    1fc6:	80 91 a4 08 	lds	r24, 0x08A4
    1fca:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    1fce:	80 91 a5 08 	lds	r24, 0x08A5
    1fd2:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    1fd6:	80 91 a6 08 	lds	r24, 0x08A6
    1fda:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    1fde:	80 91 a7 08 	lds	r24, 0x08A7
    1fe2:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    1fe6:	80 91 a8 08 	lds	r24, 0x08A8
    1fea:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    1fee:	80 91 a9 08 	lds	r24, 0x08A9
    1ff2:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    1ff6:	80 91 aa 08 	lds	r24, 0x08AA
    1ffa:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    1ffe:	80 91 ab 08 	lds	r24, 0x08AB
    2002:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    2006:	80 91 ac 08 	lds	r24, 0x08AC
    200a:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    200e:	80 91 ad 08 	lds	r24, 0x08AD
    2012:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    2016:	80 91 ae 08 	lds	r24, 0x08AE
    201a:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    201e:	80 91 af 08 	lds	r24, 0x08AF
    2022:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    2026:	80 91 b0 08 	lds	r24, 0x08B0
    202a:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    202e:	80 91 b1 08 	lds	r24, 0x08B1
    2032:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
    2036:	80 91 b2 08 	lds	r24, 0x08B2
    203a:	0e 94 82 0c 	call	0x1904	; 0x1904 <SPI_Write_Byte>
	}	

    mirf_CSN_hi;
    203e:	28 9a       	sbi	0x05, 0	; 5

		

	}

}
    2040:	0f 90       	pop	r0
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	1f 91       	pop	r17
    2048:	0f 91       	pop	r16
    204a:	ff 90       	pop	r15
    204c:	08 95       	ret
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {

				sleep(60);
    204e:	8c e3       	ldi	r24, 0x3C	; 60
    2050:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <sleep>
    2054:	40 91 6b 09 	lds	r20, 0x096B
    2058:	24 2f       	mov	r18, r20
    205a:	50 91 6c 09 	lds	r21, 0x096C
    205e:	e5 2f       	mov	r30, r21
    2060:	77 ce       	rjmp	.-786    	; 0x1d50 <handleRFCommands+0xc0>
				}

				if(bit_is_set(rfData[6], 6) ) {
					GREEN_LED6_ON;
				} else {
					GREEN_LED6_OFF;
    2062:	80 91 0b 01 	lds	r24, 0x010B
    2066:	80 64       	ori	r24, 0x40	; 64
    2068:	80 93 0b 01 	sts	0x010B, r24
    206c:	30 cf       	rjmp	.-416    	; 0x1ece <handleRFCommands+0x23e>
				}

				if(bit_is_set(rfData[6], 5) ) {
					GREEN_LED5_ON;
				} else {
					GREEN_LED5_OFF;
    206e:	80 91 0b 01 	lds	r24, 0x010B
    2072:	80 62       	ori	r24, 0x20	; 32
    2074:	80 93 0b 01 	sts	0x010B, r24
    2078:	21 cf       	rjmp	.-446    	; 0x1ebc <handleRFCommands+0x22c>
				}

				if(bit_is_set(rfData[6], 4) ) {
					GREEN_LED4_ON;
				} else {
					GREEN_LED4_OFF;
    207a:	80 91 0b 01 	lds	r24, 0x010B
    207e:	80 61       	ori	r24, 0x10	; 16
    2080:	80 93 0b 01 	sts	0x010B, r24
    2084:	12 cf       	rjmp	.-476    	; 0x1eaa <handleRFCommands+0x21a>
				}												

				if(bit_is_set(rfData[6], 3) ) {
					GREEN_LED3_ON;
				} else {
					GREEN_LED3_OFF;
    2086:	a3 9a       	sbi	0x14, 3	; 20
    2088:	07 cf       	rjmp	.-498    	; 0x1e98 <handleRFCommands+0x208>
				}
				
				if(bit_is_set(rfData[6], 2) ) {
					GREEN_LED2_ON;
				} else {
					GREEN_LED2_OFF;
    208a:	80 91 0b 01 	lds	r24, 0x010B
    208e:	84 60       	ori	r24, 0x04	; 4
    2090:	80 93 0b 01 	sts	0x010B, r24
    2094:	fc ce       	rjmp	.-520    	; 0x1e8e <handleRFCommands+0x1fe>
				}
				
				if(bit_is_set(rfData[6], 1) ) {
					GREEN_LED1_ON;
				} else {
					GREEN_LED1_OFF;
    2096:	80 91 0b 01 	lds	r24, 0x010B
    209a:	82 60       	ori	r24, 0x02	; 2
    209c:	80 93 0b 01 	sts	0x010B, r24
    20a0:	ed ce       	rjmp	.-550    	; 0x1e7c <handleRFCommands+0x1ec>
			#ifdef HW_REV_3_1			

				if(bit_is_set(rfData[6], 0) ) {
					GREEN_LED0_ON;
				} else {
					GREEN_LED0_OFF;
    20a2:	80 91 0b 01 	lds	r24, 0x010B
    20a6:	81 60       	ori	r24, 0x01	; 1
    20a8:	80 93 0b 01 	sts	0x010B, r24
    20ac:	de ce       	rjmp	.-580    	; 0x1e6a <handleRFCommands+0x1da>
			}

			if((rfData[3]&0b01000000)==0b01000000) {	// check the seventh bit to enable/disable obstacle avoidance
				obstacleAvoidanceEnabled = 1;
			} else {
				obstacleAvoidanceEnabled = 0;
    20ae:	10 92 6c 04 	sts	0x046C, r1
    20b2:	ce ce       	rjmp	.-612    	; 0x1e50 <handleRFCommands+0x1c0>
			}

			if((rfData[3]&0b00000100)==0b00000100) {	// check the 3rd bit to enable/disable the IR receiving
				irEnabled = 1;
			} else {
				irEnabled = 0;
    20b4:	10 92 12 02 	sts	0x0212, r1
    20b8:	c4 ce       	rjmp	.-632    	; 0x1e42 <handleRFCommands+0x1b2>
			}

			if((rfData[3]&0b00000010)==0b00000010) {	// turn on front IRs
				LED_IR2_LOW;
			} else {
				LED_IR2_HIGH;
    20ba:	45 9a       	sbi	0x08, 5	; 8
    20bc:	bc ce       	rjmp	.-648    	; 0x1e36 <handleRFCommands+0x1a6>


			if((rfData[3]&0b00000001)==0b00000001) {	// turn on back IR
				LED_IR1_LOW;
			} else {
				LED_IR1_HIGH;
    20be:	44 9a       	sbi	0x08, 4	; 8
    20c0:	b7 ce       	rjmp	.-658    	; 0x1e30 <handleRFCommands+0x1a0>


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    20c2:	83 30       	cpi	r24, 0x03	; 3
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <handleRFCommands+0x438>
    20c6:	bf c0       	rjmp	.+382    	; 0x2246 <__stack+0x47>
    20c8:	84 30       	cpi	r24, 0x04	; 4
    20ca:	09 f0       	breq	.+2      	; 0x20ce <handleRFCommands+0x43e>
    20cc:	6f cf       	rjmp	.-290    	; 0x1fac <handleRFCommands+0x31c>
					#endif
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
    20ce:	90 91 61 02 	lds	r25, 0x0261
    20d2:	80 91 62 02 	lds	r24, 0x0262
    20d6:	90 93 a4 08 	sts	0x08A4, r25
					ackPayload[2] = proximityResult[4]>>8;
    20da:	80 93 a5 08 	sts	0x08A5, r24
					ackPayload[3] = irCommMaxSensorSignalTemp[12]&0xFF; //proximityResult[8]&0xFF;
    20de:	90 91 64 08 	lds	r25, 0x0864
    20e2:	80 91 65 08 	lds	r24, 0x0865
    20e6:	90 93 a6 08 	sts	0x08A6, r25
					ackPayload[4] = irCommMaxSensorSignalTemp[12]>>8; //proximityResult[8]>>8;
    20ea:	80 93 a7 08 	sts	0x08A7, r24
					ackPayload[5] = irCommMaxSensorSignalTemp[13]&0xFF; //proximityResult[9]&0xFF;
    20ee:	90 91 66 08 	lds	r25, 0x0866
    20f2:	80 91 67 08 	lds	r24, 0x0867
    20f6:	90 93 a8 08 	sts	0x08A8, r25
					ackPayload[6] = irCommMaxSensorSignalTemp[13]>>8; //proximityResult[9]>>8;
    20fa:	80 93 a9 08 	sts	0x08A9, r24
					ackPayload[7] = irCommMaxSensorSignalTemp[14]&0xFF; //proximityResult[10]&0xFF;
    20fe:	90 91 68 08 	lds	r25, 0x0868
    2102:	80 91 69 08 	lds	r24, 0x0869
    2106:	90 93 aa 08 	sts	0x08AA, r25
					ackPayload[8] = irCommMaxSensorSignalTemp[14]>>8; //proximityResult[10]>>8;
    210a:	80 93 ab 08 	sts	0x08AB, r24
					ackPayload[9] = irCommMaxSensorSignalTemp[15]&0xFF; //proximityResult[11]&0xFF;
    210e:	90 91 6a 08 	lds	r25, 0x086A
    2112:	80 91 6b 08 	lds	r24, 0x086B
    2116:	90 93 ac 08 	sts	0x08AC, r25
					ackPayload[10] = irCommMaxSensorSignalTemp[15]>>8; //proximityResult[11]>>8;
    211a:	80 93 ad 08 	sts	0x08AD, r24
					ackPayload[11] = accX&0xFF;
    211e:	90 91 2c 04 	lds	r25, 0x042C
    2122:	80 91 2d 04 	lds	r24, 0x042D
    2126:	90 93 ae 08 	sts	0x08AE, r25
					ackPayload[12] = accX>>8;
    212a:	80 93 af 08 	sts	0x08AF, r24
					ackPayload[13] = accY&0xFF;
    212e:	90 91 2e 04 	lds	r25, 0x042E
    2132:	80 91 2f 04 	lds	r24, 0x042F
    2136:	90 93 b0 08 	sts	0x08B0, r25
					ackPayload[14] = accY>>8;
    213a:	80 93 b1 08 	sts	0x08B1, r24
					ackPayload[15] = irCommShiftCountTemp; //irCommand;
    213e:	8e e5       	ldi	r24, 0x5E	; 94
    2140:	9b e0       	ldi	r25, 0x0B	; 11
    2142:	80 93 b2 08 	sts	0x08B2, r24
					packetId = 5;
    2146:	85 e0       	ldi	r24, 0x05	; 5
    2148:	80 93 0b 02 	sts	0x020B, r24
					break;
    214c:	2f cf       	rjmp	.-418    	; 0x1fac <handleRFCommands+0x31c>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    214e:	00 91 6d 09 	lds	r16, 0x096D
    2152:	00 23       	and	r16, r16
    2154:	09 f0       	breq	.+2      	; 0x2158 <handleRFCommands+0x4c8>
    2156:	01 c1       	rjmp	.+514    	; 0x235a <__stack+0x15b>
    2158:	80 91 6e 09 	lds	r24, 0x096E
    215c:	88 30       	cpi	r24, 0x08	; 8
    215e:	09 f4       	brne	.+2      	; 0x2162 <handleRFCommands+0x4d2>
    2160:	fe c0       	rjmp	.+508    	; 0x235e <__stack+0x15f>
    2162:	e0 2f       	mov	r30, r16
    2164:	20 2f       	mov	r18, r16
    2166:	f6 cd       	rjmp	.-1044   	; 0x1d54 <handleRFCommands+0xc4>
			} else {
				irEnabled = 0;
			}

			if((rfData[3]&0b00010000)==0b00010000) {	// check the 5th bit to start calibration of all sensors
				calibrateSensors();
    2168:	0e 94 b8 3d 	call	0x7b70	; 0x7b70 <calibrateSensors>
				resetOdometry();
    216c:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <resetOdometry>
    2170:	90 91 6e 09 	lds	r25, 0x096E
    2174:	89 2f       	mov	r24, r25
    2176:	67 ce       	rjmp	.-818    	; 0x1e46 <handleRFCommands+0x1b6>
				}

			#endif
		
			if(currentSelector == 8) {
				if(calibrateOdomFlag==0) {
    2178:	80 91 4d 05 	lds	r24, 0x054D
    217c:	88 23       	and	r24, r24
    217e:	09 f0       	breq	.+2      	; 0x2182 <handleRFCommands+0x4f2>
    2180:	b4 ce       	rjmp	.-664    	; 0x1eea <handleRFCommands+0x25a>
					if((rfData[7]&0b00000001)==0b00000001) {
    2182:	80 91 72 09 	lds	r24, 0x0972
    2186:	80 ff       	sbrs	r24, 0
    2188:	b0 ce       	rjmp	.-672    	; 0x1eea <handleRFCommands+0x25a>
						calibrateSensors();
    218a:	0e 94 b8 3d 	call	0x7b70	; 0x7b70 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    218e:	8f ef       	ldi	r24, 0xFF	; 255
    2190:	93 e0       	ldi	r25, 0x03	; 3
    2192:	90 93 6a 02 	sts	0x026A, r25
    2196:	80 93 69 02 	sts	0x0269, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    219a:	90 93 70 02 	sts	0x0270, r25
    219e:	80 93 6f 02 	sts	0x026F, r24
						calibState = 0;
    21a2:	10 92 42 0b 	sts	0x0B42, r1
						calibVelIndex = 1;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	80 93 9c 08 	sts	0x089C, r24
						calibrateOdomFlag = 1;
    21ac:	80 93 4d 05 	sts	0x054D, r24
    21b0:	9c ce       	rjmp	.-712    	; 0x1eea <handleRFCommands+0x25a>
				} else {
					GREEN_LED6_OFF;
				}

				if(bit_is_set(rfData[6], 7) ) {
					GREEN_LED7_ON;
    21b2:	80 91 0b 01 	lds	r24, 0x010B
    21b6:	8f 77       	andi	r24, 0x7F	; 127
    21b8:	80 93 0b 01 	sts	0x010B, r24
    21bc:	91 ce       	rjmp	.-734    	; 0x1ee0 <handleRFCommands+0x250>
			} else {
				obstacleAvoidanceEnabled = 0;
			}

			if((rfData[3]&0b10000000)==0b10000000) {	// check the eight bit to enable/disable obstacle avoidance
				cliffAvoidanceEnabled = 1;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	80 93 6d 04 	sts	0x046D, r24
    21c4:	49 ce       	rjmp	.-878    	; 0x1e58 <handleRFCommands+0x1c8>
					ackPayload[15] = irCommShiftCountTemp; //irCommand;
					packetId = 5;
					break;

				case 5:
					ackPayload[1] = irCommMaxSensorSignalTemp[0]&0xFF; //proximityValue[0]&0xFF;
    21c6:	90 91 4c 08 	lds	r25, 0x084C
    21ca:	80 91 4d 08 	lds	r24, 0x084D
    21ce:	90 93 a4 08 	sts	0x08A4, r25
					ackPayload[2] = irCommMaxSensorSignalTemp[0]>>8; //proximityValue[0]>>8;
    21d2:	80 93 a5 08 	sts	0x08A5, r24
					ackPayload[3] = irCommMaxSensorSignalTemp[1]&0xFF; //proximityValue[2]&0xFF;
    21d6:	90 91 4e 08 	lds	r25, 0x084E
    21da:	80 91 4f 08 	lds	r24, 0x084F
    21de:	90 93 a6 08 	sts	0x08A6, r25
					ackPayload[4] = irCommMaxSensorSignalTemp[1]>>8; //proximityValue[2]>>8;
    21e2:	80 93 a7 08 	sts	0x08A7, r24
					ackPayload[5] = irCommMaxSensorSignalTemp[2]&0xFF; //proximityValue[4]&0xFF;
    21e6:	90 91 50 08 	lds	r25, 0x0850
    21ea:	80 91 51 08 	lds	r24, 0x0851
    21ee:	90 93 a8 08 	sts	0x08A8, r25
					ackPayload[6] = irCommMaxSensorSignalTemp[2]>>8; //proximityValue[4]>>8;
    21f2:	80 93 a9 08 	sts	0x08A9, r24
					ackPayload[7] = irCommMaxSensorSignalTemp[3]&0xFF; //proximityValue[6]&0xFF;
    21f6:	90 91 52 08 	lds	r25, 0x0852
    21fa:	80 91 53 08 	lds	r24, 0x0853
    21fe:	90 93 aa 08 	sts	0x08AA, r25
					ackPayload[8] = irCommMaxSensorSignalTemp[3]>>8; //proximityValue[6]>>8;
    2202:	80 93 ab 08 	sts	0x08AB, r24
					ackPayload[9] = irCommMaxSensorSignalTemp[5]&0xFF; //proximityValue[10]&0xFF;
    2206:	90 91 56 08 	lds	r25, 0x0856
    220a:	80 91 57 08 	lds	r24, 0x0857
    220e:	90 93 ac 08 	sts	0x08AC, r25
					ackPayload[10] = irCommMaxSensorSignalTemp[5]>>8; //proximityValue[10]>>8;
    2212:	80 93 ad 08 	sts	0x08AD, r24
					ackPayload[11] = irCommMaxSensorSignalTemp[6]&0xFF; //proximityValue[12]&0xFF;
    2216:	90 91 58 08 	lds	r25, 0x0858
    221a:	80 91 59 08 	lds	r24, 0x0859
    221e:	90 93 ae 08 	sts	0x08AE, r25
					ackPayload[12] = irCommMaxSensorSignalTemp[6]>>8; //proximityValue[12]>>8;
    2222:	80 93 af 08 	sts	0x08AF, r24
					ackPayload[13] = irCommMaxSensorSignalTemp[7]&0xFF; //proximityValue[14]&0xFF;
    2226:	90 91 5a 08 	lds	r25, 0x085A
    222a:	80 91 5b 08 	lds	r24, 0x085B
    222e:	90 93 b0 08 	sts	0x08B0, r25
					ackPayload[14] = irCommMaxSensorSignalTemp[7]>>8; //proximityValue[14]>>8;
    2232:	80 93 b1 08 	sts	0x08B1, r24
					ackPayload[15] = currentSelector;
    2236:	80 91 4c 04 	lds	r24, 0x044C
    223a:	80 93 b2 08 	sts	0x08B2, r24
					packetId = 6;
    223e:	86 e0       	ldi	r24, 0x06	; 6
    2240:	80 93 0b 02 	sts	0x020B, r24
					break;
    2244:	b3 ce       	rjmp	.-666    	; 0x1fac <handleRFCommands+0x31c>

			switch(packetId) {
				case 3:
					//ackPayload[1] = irCommRxMaxDiffTemp&0xFF; //proximityResult[0]&0xFF;
					//ackPayload[2] = irCommRxMaxDiffTemp>>8; //proximityResult[0]>>8;
					ackPayload[3] = irCommTempValue&0xFF; //proximityResult[1]&0xFF;
    2246:	90 91 c7 04 	lds	r25, 0x04C7
    224a:	80 91 c8 04 	lds	r24, 0x04C8
    224e:	90 93 a6 08 	sts	0x08A6, r25
					ackPayload[4] = irCommTempValue>>8; //proximityResult[1]>>8;
    2252:	80 93 a7 08 	sts	0x08A7, r24
					ackPayload[5] = irCommComputeShift&0xFF; //proximityResult[2]&0xFF;
    2256:	80 91 f2 04 	lds	r24, 0x04F2
    225a:	80 93 a8 08 	sts	0x08A8, r24
					ackPayload[6] = irCommComputeShift>>8; //proximityResult[2]>>8;
    225e:	10 92 a9 08 	sts	0x08A9, r1
					ackPayload[7] = irCommState&0xFF; //proximityResult[3]&0xFF;
    2262:	80 91 c6 04 	lds	r24, 0x04C6
    2266:	80 93 aa 08 	sts	0x08AA, r24
					ackPayload[8] = irCommState>>8; //proximityResult[3]>>8;
    226a:	80 91 c6 04 	lds	r24, 0x04C6
    226e:	10 92 ab 08 	sts	0x08AB, r1
					ackPayload[9] = irCommTickCounter&0xFF; //proximityResult[5]&0xFF;
    2272:	90 91 ca 04 	lds	r25, 0x04CA
    2276:	80 91 cb 04 	lds	r24, 0x04CB
    227a:	90 93 ac 08 	sts	0x08AC, r25
					ackPayload[10] = irCommTickCounter>>8; //proximityResult[5]>>8;
    227e:	80 93 ad 08 	sts	0x08AD, r24
					//ackPayload[11] = irCommMaxSensorValueCurrTemp&0xFF; //proximityResult[6]&0xFF;
					//ackPayload[12] = irCommMaxSensorValueCurrTemp>>8; //proximityResult[6]>>8;
					//ackPayload[13] = irCommMinSensorValueCurrTemp&0xFF; //proximityResult[7]&0xFF;
					//ackPayload[14] = irCommMinSensorValueCurrTemp>>8; //proximityResult[7]>>8;
					#ifdef HW_REV_3_1
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    2282:	30 91 03 01 	lds	r19, 0x0103
    2286:	80 91 03 01 	lds	r24, 0x0103
    228a:	20 91 03 01 	lds	r18, 0x0103
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	80 72       	andi	r24, 0x20	; 32
    2292:	90 70       	andi	r25, 0x00	; 0
    2294:	95 95       	asr	r25
    2296:	87 95       	ror	r24
    2298:	95 95       	asr	r25
    229a:	87 95       	ror	r24
    229c:	95 95       	asr	r25
    229e:	87 95       	ror	r24
    22a0:	95 95       	asr	r25
    22a2:	87 95       	ror	r24
    22a4:	95 95       	asr	r25
    22a6:	87 95       	ror	r24
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	22 1f       	adc	r18, r18
    22ae:	22 27       	eor	r18, r18
    22b0:	22 1f       	adc	r18, r18
    22b2:	22 0f       	add	r18, r18
    22b4:	22 0f       	add	r18, r18
    22b6:	28 2b       	or	r18, r24
    22b8:	83 2f       	mov	r24, r19
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	80 71       	andi	r24, 0x10	; 16
    22be:	90 70       	andi	r25, 0x00	; 0
    22c0:	95 95       	asr	r25
    22c2:	87 95       	ror	r24
    22c4:	95 95       	asr	r25
    22c6:	87 95       	ror	r24
    22c8:	95 95       	asr	r25
    22ca:	87 95       	ror	r24
    22cc:	95 95       	asr	r25
    22ce:	87 95       	ror	r24
    22d0:	28 2b       	or	r18, r24
    22d2:	20 93 b2 08 	sts	0x08B2, r18
					#else
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					#endif
					packetId = 4;
    22d6:	84 e0       	ldi	r24, 0x04	; 4
    22d8:	80 93 0b 02 	sts	0x020B, r24
					break;
    22dc:	67 ce       	rjmp	.-818    	; 0x1fac <handleRFCommands+0x31c>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;

				case 6:
					ackPayload[1] = irCommMaxSensorSignalTemp[4]&0xFF; //proximityValue[8]&0xFF;
    22de:	90 91 54 08 	lds	r25, 0x0854
    22e2:	80 91 55 08 	lds	r24, 0x0855
    22e6:	90 93 a4 08 	sts	0x08A4, r25
					ackPayload[2] = irCommMaxSensorSignalTemp[4]>>8; //proximityValue[8]>>8;
    22ea:	80 93 a5 08 	sts	0x08A5, r24
					ackPayload[3] = irCommMaxSensorSignalTemp[8]&0xFF; //proximityValue[16]&0xFF;
    22ee:	90 91 5c 08 	lds	r25, 0x085C
    22f2:	80 91 5d 08 	lds	r24, 0x085D
    22f6:	90 93 a6 08 	sts	0x08A6, r25
					ackPayload[4] = irCommMaxSensorSignalTemp[8]>>8; //proximityValue[16]>>8;
    22fa:	80 93 a7 08 	sts	0x08A7, r24
					ackPayload[5] = irCommMaxSensorSignalTemp[9]&0xFF; //proximityValue[18]&0xFF;
    22fe:	90 91 5e 08 	lds	r25, 0x085E
    2302:	80 91 5f 08 	lds	r24, 0x085F
    2306:	90 93 a8 08 	sts	0x08A8, r25
					ackPayload[6] = irCommMaxSensorSignalTemp[9]>>8; //proximityValue[18]>>8;
    230a:	80 93 a9 08 	sts	0x08A9, r24
					ackPayload[7] = irCommMaxSensorSignalTemp[10]&0xFF; //proximityValue[20]&0xFF;
    230e:	90 91 60 08 	lds	r25, 0x0860
    2312:	80 91 61 08 	lds	r24, 0x0861
    2316:	90 93 aa 08 	sts	0x08AA, r25
					ackPayload[8] = irCommMaxSensorSignalTemp[10]>>8; //proximityValue[20]>>8;
    231a:	80 93 ab 08 	sts	0x08AB, r24
					ackPayload[9] = irCommMaxSensorSignalTemp[11]&0xFF; //proximityValue[22]&0xFF;
    231e:	90 91 62 08 	lds	r25, 0x0862
    2322:	80 91 63 08 	lds	r24, 0x0863
    2326:	90 93 ac 08 	sts	0x08AC, r25
					ackPayload[10] = irCommMaxSensorSignalTemp[11]>>8; //proximityValue[22]>>8;
    232a:	80 93 ad 08 	sts	0x08AD, r24
					ackPayload[11] = accZ&0xFF;
    232e:	90 91 30 04 	lds	r25, 0x0430
    2332:	80 91 31 04 	lds	r24, 0x0431
    2336:	90 93 ae 08 	sts	0x08AE, r25
					ackPayload[12] = accZ>>8;	
    233a:	80 93 af 08 	sts	0x08AF, r24
					ackPayload[13] = irCommMaxSensorSignalTemp[19]&0xFF; //batteryLevel&0xFF;
    233e:	90 91 72 08 	lds	r25, 0x0872
    2342:	80 91 73 08 	lds	r24, 0x0873
    2346:	90 93 b0 08 	sts	0x08B0, r25
					ackPayload[14] = irCommMaxSensorSignalTemp[19]>>8; //batteryLevel>>8;
    234a:	80 93 b1 08 	sts	0x08B1, r24
					ackPayload[15] = 0;
    234e:	10 92 b2 08 	sts	0x08B2, r1
					packetId = 7;
    2352:	87 e0       	ldi	r24, 0x07	; 7
    2354:	80 93 0b 02 	sts	0x020B, r24
					break;
    2358:	29 ce       	rjmp	.-942    	; 0x1fac <handleRFCommands+0x31c>

			//if((data[3]&0b00001000)==0b00001000) {	// check the 4th bit to sleep
			// it was noticed that some robots sometimes "think" to receive something and the data read are wrong,
			// this could lead to go to sleep involuntarily; in order to avoid this situation we define that the
			// sleep message should be completely zero, but the flag bit
			if(rfData[0]==0 && rfData[1]==0 && rfData[2]==0 && rfData[3]==0b00001000 && rfData[4]==0 && rfData[5]==0) {
    235a:	25 2f       	mov	r18, r21
    235c:	fb cc       	rjmp	.-1546   	; 0x1d54 <handleRFCommands+0xc4>
    235e:	80 91 6f 09 	lds	r24, 0x096F
    2362:	88 23       	and	r24, r24
    2364:	09 f0       	breq	.+2      	; 0x2368 <__stack+0x169>
    2366:	fd ce       	rjmp	.-518    	; 0x2162 <handleRFCommands+0x4d2>
    2368:	80 91 70 09 	lds	r24, 0x0970
    236c:	88 23       	and	r24, r24
    236e:	09 f4       	brne	.+2      	; 0x2372 <__stack+0x173>
    2370:	6e ce       	rjmp	.-804    	; 0x204e <handleRFCommands+0x3be>
    2372:	e0 e0       	ldi	r30, 0x00	; 0
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	ee cc       	rjmp	.-1572   	; 0x1d54 <handleRFCommands+0xc4>

00002378 <rfEnableDebugMode>:
	}

}

void rfEnableDebugMode() {
	rfDebugMode = 1;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	80 93 19 03 	sts	0x0319, r24
	rfDebugCounter = 3;
    237e:	83 e0       	ldi	r24, 0x03	; 3
    2380:	80 93 1a 03 	sts	0x031A, r24
}
    2384:	08 95       	ret

00002386 <rfDisableDebugMode>:

void rfDisableDebugMode() {
	rfDebugMode = 0;
    2386:	10 92 19 03 	sts	0x0319, r1
}
    238a:	08 95       	ret

0000238c <rfDebugSendData>:

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
    238c:	80 91 1a 03 	lds	r24, 0x031A
    2390:	80 93 a3 08 	sts	0x08A3, r24
	while(rfData[0] != rfDebugCounter) {
    2394:	90 91 6b 09 	lds	r25, 0x096B
    2398:	89 17       	cp	r24, r25
    239a:	41 f0       	breq	.+16     	; 0x23ac <rfDebugSendData+0x20>
		handleRFCommands();
    239c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <handleRFCommands>
	rfDebugMode = 0;
}

void rfDebugSendData() {
	ackPayload[0] = rfDebugCounter;
	while(rfData[0] != rfDebugCounter) {
    23a0:	80 91 1a 03 	lds	r24, 0x031A
    23a4:	90 91 6b 09 	lds	r25, 0x096B
    23a8:	98 17       	cp	r25, r24
    23aa:	c1 f7       	brne	.-16     	; 0x239c <rfDebugSendData+0x10>
		handleRFCommands();
	}
	ackPayload[0] = 0x00;
    23ac:	10 92 a3 08 	sts	0x08A3, r1
	if(rfDebugCounter < 255) {
    23b0:	8f 3f       	cpi	r24, 0xFF	; 255
    23b2:	21 f0       	breq	.+8      	; 0x23bc <rfDebugSendData+0x30>
		rfDebugCounter++;
    23b4:	8f 5f       	subi	r24, 0xFF	; 255
    23b6:	80 93 1a 03 	sts	0x031A, r24
    23ba:	08 95       	ret
	} else {
		rfDebugCounter = 3;
    23bc:	83 e0       	ldi	r24, 0x03	; 3
    23be:	80 93 1a 03 	sts	0x031A, r24
    23c2:	08 95       	ret

000023c4 <rfDebugNextPacket>:
	}
}

void rfDebugNextPacket() {
	rfDebugCounter = 3;
    23c4:	83 e0       	ldi	r24, 0x03	; 3
    23c6:	80 93 1a 03 	sts	0x031A, r24
}
    23ca:	08 95       	ret

000023cc <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29

	PCICR = 0;
    23d0:	c8 e6       	ldi	r28, 0x68	; 104
    23d2:	d0 e0       	ldi	r29, 0x00	; 0
    23d4:	18 82       	st	Y, r1
	PCMSK1 = 0;
    23d6:	ac e6       	ldi	r26, 0x6C	; 108
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	1c 92       	st	X, r1
	TCCR2A = 0;
    23dc:	e0 eb       	ldi	r30, 0xB0	; 176
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	10 82       	st	Z, r1
	TCCR2B = 0;
    23e2:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    23e6:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    23ea:	88 81       	ld	r24, Y
    23ec:	82 60       	ori	r24, 0x02	; 2
    23ee:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    23f0:	8c 91       	ld	r24, X
    23f2:	80 68       	ori	r24, 0x80	; 128
    23f4:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    23f6:	80 81       	ld	r24, Z
    23f8:	82 60       	ori	r24, 0x02	; 2
    23fa:	80 83       	st	Z, r24

}
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	08 95       	ret

00002402 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    2402:	1f 92       	push	r1
    2404:	0f 92       	push	r0
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	0f 92       	push	r0
    240a:	11 24       	eor	r1, r1
    240c:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    240e:	80 91 12 02 	lds	r24, 0x0212
    2412:	88 23       	and	r24, r24
    2414:	21 f1       	breq	.+72     	; 0x245e <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    2416:	80 91 03 01 	lds	r24, 0x0103
    241a:	86 fd       	sbrc	r24, 6
    241c:	20 c0       	rjmp	.+64     	; 0x245e <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    241e:	80 91 68 00 	lds	r24, 0x0068
    2422:	8d 7f       	andi	r24, 0xFD	; 253
    2424:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    2428:	80 91 6c 00 	lds	r24, 0x006C
    242c:	8f 77       	andi	r24, 0x7F	; 127
    242e:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	80 93 13 02 	sts	0x0213, r24
			OCR2A = 13;									// output compare register
    2438:	8d e0       	ldi	r24, 0x0D	; 13
    243a:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    243e:	80 91 b1 00 	lds	r24, 0x00B1
    2442:	86 60       	ori	r24, 0x06	; 6
    2444:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    2448:	80 91 70 00 	lds	r24, 0x0070
    244c:	82 60       	ori	r24, 0x02	; 2
    244e:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    2452:	10 92 20 02 	sts	0x0220, r1
    2456:	10 92 21 02 	sts	0x0221, r1
    245a:	10 92 22 02 	sts	0x0222, r1

		}

	}
	
}
    245e:	8f 91       	pop	r24
    2460:	0f 90       	pop	r0
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	0f 90       	pop	r0
    2466:	1f 90       	pop	r1
    2468:	18 95       	reti

0000246a <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    246a:	1f 92       	push	r1
    246c:	0f 92       	push	r0
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	0f 92       	push	r0
    2472:	11 24       	eor	r1, r1
    2474:	2f 93       	push	r18
    2476:	3f 93       	push	r19
    2478:	4f 93       	push	r20
    247a:	5f 93       	push	r21
    247c:	8f 93       	push	r24
    247e:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    2480:	80 91 b1 00 	lds	r24, 0x00B1
    2484:	88 7f       	andi	r24, 0xF8	; 248
    2486:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    248a:	80 91 13 02 	lds	r24, 0x0213
    248e:	88 23       	and	r24, r24
    2490:	a9 f0       	breq	.+42     	; 0x24bc <__vector_13+0x52>

			if(REMOTE) {					// if high it is a glitch
    2492:	80 91 03 01 	lds	r24, 0x0103
    2496:	86 ff       	sbrs	r24, 6
    2498:	65 c0       	rjmp	.+202    	; 0x2564 <__vector_13+0xfa>

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    249a:	80 91 68 00 	lds	r24, 0x0068
    249e:	82 60       	ori	r24, 0x02	; 2
    24a0:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    24a4:	80 91 6c 00 	lds	r24, 0x006C
    24a8:	80 68       	ori	r24, 0x80	; 128
    24aa:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    24ae:	8f ef       	ldi	r24, 0xFF	; 255
    24b0:	9f ef       	ldi	r25, 0xFF	; 255
    24b2:	90 93 02 02 	sts	0x0202, r25
    24b6:	80 93 01 02 	sts	0x0201, r24
    24ba:	49 c0       	rjmp	.+146    	; 0x254e <__vector_13+0xe4>
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    24bc:	80 91 01 02 	lds	r24, 0x0201
    24c0:	90 91 02 02 	lds	r25, 0x0202
    24c4:	2f ef       	ldi	r18, 0xFF	; 255
    24c6:	8f 3f       	cpi	r24, 0xFF	; 255
    24c8:	92 07       	cpc	r25, r18
    24ca:	09 f4       	brne	.+2      	; 0x24ce <__vector_13+0x64>
    24cc:	63 c0       	rjmp	.+198    	; 0x2594 <__vector_13+0x12a>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    24ce:	81 30       	cpi	r24, 0x01	; 1
    24d0:	91 05       	cpc	r25, r1
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <__vector_13+0x6c>
    24d4:	98 c0       	rjmp	.+304    	; 0x2606 <__vector_13+0x19c>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    24d6:	9c 01       	movw	r18, r24
    24d8:	22 50       	subi	r18, 0x02	; 2
    24da:	30 40       	sbci	r19, 0x00	; 0
    24dc:	25 30       	cpi	r18, 0x05	; 5
    24de:	31 05       	cpc	r19, r1
    24e0:	08 f4       	brcc	.+2      	; 0x24e4 <__vector_13+0x7a>
    24e2:	67 c0       	rjmp	.+206    	; 0x25b2 <__vector_13+0x148>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    24e4:	9c 01       	movw	r18, r24
    24e6:	27 50       	subi	r18, 0x07	; 7
    24e8:	30 40       	sbci	r19, 0x00	; 0
    24ea:	26 30       	cpi	r18, 0x06	; 6
    24ec:	31 05       	cpc	r19, r1
    24ee:	08 f0       	brcs	.+2      	; 0x24f2 <__vector_13+0x88>
    24f0:	bd c0       	rjmp	.+378    	; 0x266c <__vector_13+0x202>

				OCR2A = 54;
    24f2:	26 e3       	ldi	r18, 0x36	; 54
    24f4:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    24f8:	20 91 b1 00 	lds	r18, 0x00B1
    24fc:	26 60       	ori	r18, 0x06	; 6
    24fe:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    2502:	20 91 70 00 	lds	r18, 0x0070
    2506:	22 60       	ori	r18, 0x02	; 2
    2508:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    250c:	20 91 03 01 	lds	r18, 0x0103
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	20 74       	andi	r18, 0x40	; 64
    2514:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6+6-i;
    2516:	00 24       	eor	r0, r0
    2518:	22 0f       	add	r18, r18
    251a:	33 1f       	adc	r19, r19
    251c:	00 1c       	adc	r0, r0
    251e:	22 0f       	add	r18, r18
    2520:	33 1f       	adc	r19, r19
    2522:	00 1c       	adc	r0, r0
    2524:	23 2f       	mov	r18, r19
    2526:	30 2d       	mov	r19, r0
    2528:	4c e0       	ldi	r20, 0x0C	; 12
    252a:	50 e0       	ldi	r21, 0x00	; 0
    252c:	48 1b       	sub	r20, r24
    252e:	59 0b       	sbc	r21, r25
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <__vector_13+0xcc>
    2532:	22 0f       	add	r18, r18
    2534:	33 1f       	adc	r19, r19
    2536:	4a 95       	dec	r20
    2538:	e2 f7       	brpl	.-8      	; 0x2532 <__vector_13+0xc8>
				data_temp += temp;
    253a:	40 91 20 02 	lds	r20, 0x0220
    253e:	42 0f       	add	r20, r18
    2540:	40 93 20 02 	sts	0x0220, r20

				i = -1;
				check = check_temp;
				address = address_temp;
				data_ir = data_temp;
				command_received=1;
    2544:	01 96       	adiw	r24, 0x01	; 1

		}
	
		if(i!=-1) {

			i++;
    2546:	90 93 02 02 	sts	0x0202, r25
    254a:	80 93 01 02 	sts	0x0201, r24

		}

}
    254e:	9f 91       	pop	r25
    2550:	8f 91       	pop	r24
    2552:	5f 91       	pop	r21
    2554:	4f 91       	pop	r20
    2556:	3f 91       	pop	r19
    2558:	2f 91       	pop	r18
    255a:	0f 90       	pop	r0
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	0f 90       	pop	r0
    2560:	1f 90       	pop	r1
    2562:	18 95       	reti
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    2564:	10 92 13 02 	sts	0x0213, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    2568:	83 e3       	ldi	r24, 0x33	; 51
    256a:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    256e:	80 91 b1 00 	lds	r24, 0x00B1
    2572:	86 60       	ori	r24, 0x06	; 6
    2574:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2578:	80 91 70 00 	lds	r24, 0x0070
    257c:	82 60       	ori	r24, 0x02	; 2
    257e:	80 93 70 00 	sts	0x0070, r24
    2582:	80 91 01 02 	lds	r24, 0x0201
    2586:	90 91 02 02 	lds	r25, 0x0202

			} 

		}
	
		if(i!=-1) {
    258a:	2f ef       	ldi	r18, 0xFF	; 255
    258c:	8f 3f       	cpi	r24, 0xFF	; 255
    258e:	92 07       	cpc	r25, r18
    2590:	c9 f6       	brne	.-78     	; 0x2544 <__vector_13+0xda>
    2592:	dd cf       	rjmp	.-70     	; 0x254e <__vector_13+0xe4>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    2594:	20 91 03 01 	lds	r18, 0x0103
    2598:	26 ff       	sbrs	r18, 6
    259a:	52 c0       	rjmp	.+164    	; 0x2640 <__vector_13+0x1d6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    259c:	20 91 68 00 	lds	r18, 0x0068
    25a0:	22 60       	ori	r18, 0x02	; 2
    25a2:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    25a6:	20 91 6c 00 	lds	r18, 0x006C
    25aa:	20 68       	ori	r18, 0x80	; 128
    25ac:	20 93 6c 00 	sts	0x006C, r18
    25b0:	ce cf       	rjmp	.-100    	; 0x254e <__vector_13+0xe4>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    25b2:	26 e3       	ldi	r18, 0x36	; 54
    25b4:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);
    25b8:	20 91 b1 00 	lds	r18, 0x00B1
    25bc:	26 60       	ori	r18, 0x06	; 6
    25be:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);
    25c2:	20 91 70 00 	lds	r18, 0x0070
    25c6:	22 60       	ori	r18, 0x02	; 2
    25c8:	20 93 70 00 	sts	0x0070, r18

				unsigned char temp = REMOTE;
    25cc:	20 91 03 01 	lds	r18, 0x0103
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	20 74       	andi	r18, 0x40	; 64
    25d4:	30 70       	andi	r19, 0x00	; 0
				temp <<= 6-i;
    25d6:	00 24       	eor	r0, r0
    25d8:	22 0f       	add	r18, r18
    25da:	33 1f       	adc	r19, r19
    25dc:	00 1c       	adc	r0, r0
    25de:	22 0f       	add	r18, r18
    25e0:	33 1f       	adc	r19, r19
    25e2:	00 1c       	adc	r0, r0
    25e4:	23 2f       	mov	r18, r19
    25e6:	30 2d       	mov	r19, r0
    25e8:	46 e0       	ldi	r20, 0x06	; 6
    25ea:	50 e0       	ldi	r21, 0x00	; 0
    25ec:	48 1b       	sub	r20, r24
    25ee:	59 0b       	sbc	r21, r25
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <__vector_13+0x18c>
    25f2:	22 0f       	add	r18, r18
    25f4:	33 1f       	adc	r19, r19
    25f6:	4a 95       	dec	r20
    25f8:	e2 f7       	brpl	.-8      	; 0x25f2 <__vector_13+0x188>
				address_temp += temp;
    25fa:	40 91 21 02 	lds	r20, 0x0221
    25fe:	42 0f       	add	r20, r18
    2600:	40 93 21 02 	sts	0x0221, r20
    2604:	9f cf       	rjmp	.-194    	; 0x2544 <__vector_13+0xda>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    2606:	20 91 03 01 	lds	r18, 0x0103
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	20 74       	andi	r18, 0x40	; 64
    260e:	30 70       	andi	r19, 0x00	; 0
    2610:	02 2e       	mov	r0, r18
    2612:	23 2f       	mov	r18, r19
    2614:	00 0c       	add	r0, r0
    2616:	22 1f       	adc	r18, r18
    2618:	33 0b       	sbc	r19, r19
    261a:	00 0c       	add	r0, r0
    261c:	22 1f       	adc	r18, r18
    261e:	33 1f       	adc	r19, r19
    2620:	20 93 22 02 	sts	0x0222, r18
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    2624:	26 e3       	ldi	r18, 0x36	; 54
    2626:	20 93 b3 00 	sts	0x00B3, r18
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    262a:	20 91 b1 00 	lds	r18, 0x00B1
    262e:	26 60       	ori	r18, 0x06	; 6
    2630:	20 93 b1 00 	sts	0x00B1, r18
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    2634:	20 91 70 00 	lds	r18, 0x0070
    2638:	22 60       	ori	r18, 0x02	; 2
    263a:	20 93 70 00 	sts	0x0070, r18
    263e:	82 cf       	rjmp	.-252    	; 0x2544 <__vector_13+0xda>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    2640:	8c e1       	ldi	r24, 0x1C	; 28
    2642:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    2646:	80 91 b1 00 	lds	r24, 0x00B1
    264a:	86 60       	ori	r24, 0x06	; 6
    264c:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    2650:	80 91 70 00 	lds	r24, 0x0070
    2654:	82 60       	ori	r24, 0x02	; 2
    2656:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    265a:	10 92 20 02 	sts	0x0220, r1
    265e:	10 92 21 02 	sts	0x0221, r1
    2662:	10 92 22 02 	sts	0x0222, r1
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	6d cf       	rjmp	.-294    	; 0x2546 <__vector_13+0xdc>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    266c:	8d 30       	cpi	r24, 0x0D	; 13
    266e:	91 05       	cpc	r25, r1
    2670:	09 f0       	breq	.+2      	; 0x2674 <__vector_13+0x20a>
    2672:	68 cf       	rjmp	.-304    	; 0x2544 <__vector_13+0xda>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    2674:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    2678:	80 91 68 00 	lds	r24, 0x0068
    267c:	82 60       	ori	r24, 0x02	; 2
    267e:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    2682:	80 91 6c 00 	lds	r24, 0x006C
    2686:	80 68       	ori	r24, 0x80	; 128
    2688:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    268c:	8f ef       	ldi	r24, 0xFF	; 255
    268e:	9f ef       	ldi	r25, 0xFF	; 255
    2690:	90 93 02 02 	sts	0x0202, r25
    2694:	80 93 01 02 	sts	0x0201, r24
				check = check_temp;
    2698:	80 91 22 02 	lds	r24, 0x0222
    269c:	80 93 00 02 	sts	0x0200, r24
				address = address_temp;
    26a0:	80 91 21 02 	lds	r24, 0x0221
    26a4:	80 93 1e 02 	sts	0x021E, r24
				data_ir = data_temp;
    26a8:	80 91 20 02 	lds	r24, 0x0220
    26ac:	80 93 1f 02 	sts	0x021F, r24
				command_received=1;
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	80 93 28 04 	sts	0x0428, r24
    26b6:	4b cf       	rjmp	.-362    	; 0x254e <__vector_13+0xe4>

000026b8 <ir_remote_get_check>:

}

unsigned char ir_remote_get_check(void) {
	return check;
}
    26b8:	80 91 00 02 	lds	r24, 0x0200
    26bc:	08 95       	ret

000026be <ir_remote_get_address>:

unsigned char ir_remote_get_address(void) {
	return address;
}
    26be:	80 91 1e 02 	lds	r24, 0x021E
    26c2:	08 95       	ret

000026c4 <ir_remote_get_data>:

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    26c4:	80 91 1f 02 	lds	r24, 0x021F
    26c8:	08 95       	ret

000026ca <handleIRRemoteCommands>:

void handleIRRemoteCommands() {

	if(irEnabled) {
    26ca:	80 91 12 02 	lds	r24, 0x0212
    26ce:	88 23       	and	r24, r24
    26d0:	51 f1       	breq	.+84     	; 0x2726 <handleIRRemoteCommands+0x5c>

		if(command_received) {
    26d2:	80 91 28 04 	lds	r24, 0x0428
    26d6:	88 23       	and	r24, r24
    26d8:	31 f1       	breq	.+76     	; 0x2726 <handleIRRemoteCommands+0x5c>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    26da:	e0 91 1f 02 	lds	r30, 0x021F

	if(irEnabled) {

		if(command_received) {

            irCommand = ir_remote_get_data();
    26de:	e0 93 27 04 	sts	0x0427, r30

		    //usartTransmit(irCommand);

			command_received = 0;
    26e2:	10 92 28 04 	sts	0x0428, r1

			switch(irCommand) {
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	e5 33       	cpi	r30, 0x35	; 53
    26ea:	f1 05       	cpc	r31, r1
    26ec:	e8 f0       	brcs	.+58     	; 0x2728 <handleIRRemoteCommands+0x5e>
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 1;
    26ee:	20 91 f9 02 	lds	r18, 0x02F9
    26f2:	30 91 fa 02 	lds	r19, 0x02FA
    26f6:	80 91 fb 02 	lds	r24, 0x02FB
    26fa:	90 91 fc 02 	lds	r25, 0x02FC
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    26fe:	37 fd       	sbrc	r19, 7
    2700:	b9 c1       	rjmp	.+882    	; 0x2a74 <handleIRRemoteCommands+0x3aa>
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    2702:	30 93 14 03 	sts	0x0314, r19
    2706:	20 93 13 03 	sts	0x0313, r18
			}
			if(pwm_left_desired >= 0) {
    270a:	97 fd       	sbrc	r25, 7
    270c:	05 c0       	rjmp	.+10     	; 0x2718 <handleIRRemoteCommands+0x4e>
				speedl = pwm_left_desired;
    270e:	90 93 12 03 	sts	0x0312, r25
    2712:	80 93 11 03 	sts	0x0311, r24
    2716:	08 95       	ret
			} else {
				speedl = (-pwm_left_desired);
    2718:	90 95       	com	r25
    271a:	81 95       	neg	r24
    271c:	9f 4f       	sbci	r25, 0xFF	; 255
    271e:	90 93 12 03 	sts	0x0312, r25
    2722:	80 93 11 03 	sts	0x0311, r24
    2726:	08 95       	ret

		    //usartTransmit(irCommand);

			command_received = 0;

			switch(irCommand) {
    2728:	ee 58       	subi	r30, 0x8E	; 142
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	ee 0f       	add	r30, r30
    272e:	ff 1f       	adc	r31, r31
    2730:	05 90       	lpm	r0, Z+
    2732:	f4 91       	lpm	r31, Z+
    2734:	e0 2d       	mov	r30, r0
    2736:	19 94       	eijmp
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    2738:	80 93 6c 04 	sts	0x046C, r24
							cliffAvoidanceEnabled = 0;
    273c:	10 92 6d 04 	sts	0x046D, r1
    2740:	20 91 f9 02 	lds	r18, 0x02F9
    2744:	30 91 fa 02 	lds	r19, 0x02FA
    2748:	80 91 fb 02 	lds	r24, 0x02FB
    274c:	90 91 fc 02 	lds	r25, 0x02FC
							break;
    2750:	d6 cf       	rjmp	.-84     	; 0x26fe <handleIRRemoteCommands+0x34>
						case 2:
							obstacleAvoidanceEnabled = 0;
    2752:	10 92 6c 04 	sts	0x046C, r1
							cliffAvoidanceEnabled = 1;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	80 93 6d 04 	sts	0x046D, r24
    275c:	20 91 f9 02 	lds	r18, 0x02F9
    2760:	30 91 fa 02 	lds	r19, 0x02FA
    2764:	80 91 fb 02 	lds	r24, 0x02FB
    2768:	90 91 fc 02 	lds	r25, 0x02FC
							break;
    276c:	c8 cf       	rjmp	.-112    	; 0x26fe <handleIRRemoteCommands+0x34>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    276e:	80 91 2a 04 	lds	r24, 0x042A
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	01 96       	adiw	r24, 0x01	; 1
    2776:	83 70       	andi	r24, 0x03	; 3
    2778:	90 70       	andi	r25, 0x00	; 0
    277a:	80 93 2a 04 	sts	0x042A, r24
					switch(behaviorState) {
    277e:	82 30       	cpi	r24, 0x02	; 2
    2780:	41 f3       	breq	.-48     	; 0x2752 <handleIRRemoteCommands+0x88>
    2782:	83 30       	cpi	r24, 0x03	; 3
    2784:	09 f4       	brne	.+2      	; 0x2788 <handleIRRemoteCommands+0xbe>
    2786:	8a c1       	rjmp	.+788    	; 0x2a9c <handleIRRemoteCommands+0x3d2>
    2788:	81 30       	cpi	r24, 0x01	; 1
    278a:	b1 f2       	breq	.-84     	; 0x2738 <handleIRRemoteCommands+0x6e>
						case 0:
							obstacleAvoidanceEnabled = 0;
    278c:	10 92 6c 04 	sts	0x046C, r1
							cliffAvoidanceEnabled = 0;
    2790:	10 92 6d 04 	sts	0x046D, r1
    2794:	20 91 f9 02 	lds	r18, 0x02F9
    2798:	30 91 fa 02 	lds	r19, 0x02FA
    279c:	80 91 fb 02 	lds	r24, 0x02FB
    27a0:	90 91 fc 02 	lds	r25, 0x02FC
							break;
    27a4:	ac cf       	rjmp	.-168    	; 0x26fe <handleIRRemoteCommands+0x34>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    27a6:	10 92 6c 04 	sts	0x046C, r1
    27aa:	20 91 f9 02 	lds	r18, 0x02F9
    27ae:	30 91 fa 02 	lds	r19, 0x02FA
    27b2:	80 91 fb 02 	lds	r24, 0x02FB
    27b6:	90 91 fc 02 	lds	r25, 0x02FC
					break;
    27ba:	a1 cf       	rjmp	.-190    	; 0x26fe <handleIRRemoteCommands+0x34>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    27bc:	80 91 fb 02 	lds	r24, 0x02FB
    27c0:	90 91 fc 02 	lds	r25, 0x02FC
    27c4:	02 97       	sbiw	r24, 0x02	; 2
    27c6:	90 93 fc 02 	sts	0x02FC, r25
    27ca:	80 93 fb 02 	sts	0x02FB, r24
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    27ce:	2e ef       	ldi	r18, 0xFE	; 254
    27d0:	80 30       	cpi	r24, 0x00	; 0
    27d2:	92 07       	cpc	r25, r18
    27d4:	9c f5       	brge	.+102    	; 0x283c <handleIRRemoteCommands+0x172>
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	9e ef       	ldi	r25, 0xFE	; 254
    27da:	90 93 fc 02 	sts	0x02FC, r25
    27de:	80 93 fb 02 	sts	0x02FB, r24
    27e2:	20 91 f9 02 	lds	r18, 0x02F9
    27e6:	30 91 fa 02 	lds	r19, 0x02FA
    27ea:	89 cf       	rjmp	.-238    	; 0x26fe <handleIRRemoteCommands+0x34>
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    27ec:	20 91 f9 02 	lds	r18, 0x02F9
    27f0:	30 91 fa 02 	lds	r19, 0x02FA
    27f4:	80 91 f7 02 	lds	r24, 0x02F7
    27f8:	90 91 f8 02 	lds	r25, 0x02F8
    27fc:	28 17       	cp	r18, r24
    27fe:	39 07       	cpc	r19, r25
    2800:	24 f0       	brlt	.+8      	; 0x280a <handleIRRemoteCommands+0x140>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    2802:	20 91 fb 02 	lds	r18, 0x02FB
    2806:	30 91 fc 02 	lds	r19, 0x02FC
					}
					pwm_right_desired -= STEP_MOTORS;
    280a:	22 50       	subi	r18, 0x02	; 2
    280c:	30 40       	sbci	r19, 0x00	; 0
    280e:	30 93 fa 02 	sts	0x02FA, r19
    2812:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired -= STEP_MOTORS;
    2816:	c9 01       	movw	r24, r18
    2818:	30 93 fc 02 	sts	0x02FC, r19
    281c:	20 93 fb 02 	sts	0x02FB, r18
	                if (pwm_right_desired < -(MAX_MOTORS_PWM/2)) pwm_right_desired = -(MAX_MOTORS_PWM/2);
    2820:	4e ef       	ldi	r20, 0xFE	; 254
    2822:	20 30       	cpi	r18, 0x00	; 0
    2824:	34 07       	cpc	r19, r20
    2826:	34 f4       	brge	.+12     	; 0x2834 <handleIRRemoteCommands+0x16a>
    2828:	40 e0       	ldi	r20, 0x00	; 0
    282a:	5e ef       	ldi	r21, 0xFE	; 254
    282c:	50 93 fa 02 	sts	0x02FA, r21
    2830:	40 93 f9 02 	sts	0x02F9, r20
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
    2834:	4e ef       	ldi	r20, 0xFE	; 254
    2836:	20 30       	cpi	r18, 0x00	; 0
    2838:	34 07       	cpc	r19, r20
    283a:	6c f2       	brlt	.-102    	; 0x27d6 <handleIRRemoteCommands+0x10c>
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    283c:	20 91 f9 02 	lds	r18, 0x02F9
    2840:	30 91 fa 02 	lds	r19, 0x02FA
    2844:	5c cf       	rjmp	.-328    	; 0x26fe <handleIRRemoteCommands+0x34>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	80 93 6c 04 	sts	0x046C, r24
    284c:	20 91 f9 02 	lds	r18, 0x02F9
    2850:	30 91 fa 02 	lds	r19, 0x02FA
    2854:	80 91 fb 02 	lds	r24, 0x02FB
    2858:	90 91 fc 02 	lds	r25, 0x02FC
					break;
    285c:	50 cf       	rjmp	.-352    	; 0x26fe <handleIRRemoteCommands+0x34>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    285e:	20 91 f9 02 	lds	r18, 0x02F9
    2862:	30 91 fa 02 	lds	r19, 0x02FA
    2866:	22 50       	subi	r18, 0x02	; 2
    2868:	30 40       	sbci	r19, 0x00	; 0
    286a:	30 93 fa 02 	sts	0x02FA, r19
    286e:	20 93 f9 02 	sts	0x02F9, r18
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    2872:	4e ef       	ldi	r20, 0xFE	; 254
    2874:	20 30       	cpi	r18, 0x00	; 0
    2876:	34 07       	cpc	r19, r20
    2878:	0c f0       	brlt	.+2      	; 0x287c <handleIRRemoteCommands+0x1b2>
    287a:	3d cf       	rjmp	.-390    	; 0x26f6 <handleIRRemoteCommands+0x2c>
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	9e ef       	ldi	r25, 0xFE	; 254
    2880:	90 93 fa 02 	sts	0x02FA, r25
    2884:	80 93 f9 02 	sts	0x02F9, r24
    2888:	80 91 fb 02 	lds	r24, 0x02FB
    288c:	90 91 fc 02 	lds	r25, 0x02FC
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	32 e0       	ldi	r19, 0x02	; 2
    2894:	36 cf       	rjmp	.-404    	; 0x2702 <handleIRRemoteCommands+0x38>
    	            if (pwm_left_desired < -(MAX_MOTORS_PWM/2)) pwm_left_desired = -(MAX_MOTORS_PWM/2);
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    2896:	20 91 f9 02 	lds	r18, 0x02F9
    289a:	30 91 fa 02 	lds	r19, 0x02FA
    289e:	22 50       	subi	r18, 0x02	; 2
    28a0:	30 40       	sbci	r19, 0x00	; 0
    28a2:	30 93 fa 02 	sts	0x02FA, r19
    28a6:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired += STEP_MOTORS;
    28aa:	80 91 fb 02 	lds	r24, 0x02FB
    28ae:	90 91 fc 02 	lds	r25, 0x02FC
    28b2:	02 96       	adiw	r24, 0x02	; 2
    28b4:	90 93 fc 02 	sts	0x02FC, r25
    28b8:	80 93 fb 02 	sts	0x02FB, r24
                	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
    28bc:	4e ef       	ldi	r20, 0xFE	; 254
    28be:	20 30       	cpi	r18, 0x00	; 0
    28c0:	34 07       	cpc	r19, r20
    28c2:	34 f4       	brge	.+12     	; 0x28d0 <handleIRRemoteCommands+0x206>
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	3e ef       	ldi	r19, 0xFE	; 254
    28c8:	30 93 fa 02 	sts	0x02FA, r19
    28cc:	20 93 f9 02 	sts	0x02F9, r18
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    28d0:	42 e0       	ldi	r20, 0x02	; 2
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	94 07       	cpc	r25, r20
    28d6:	0c f4       	brge	.+2      	; 0x28da <handleIRRemoteCommands+0x210>
    28d8:	12 cf       	rjmp	.-476    	; 0x26fe <handleIRRemoteCommands+0x34>
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	92 e0       	ldi	r25, 0x02	; 2
    28de:	90 93 fc 02 	sts	0x02FC, r25
    28e2:	80 93 fb 02 	sts	0x02FB, r24
    28e6:	0b cf       	rjmp	.-490    	; 0x26fe <handleIRRemoteCommands+0x34>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    28e8:	10 92 fa 02 	sts	0x02FA, r1
    28ec:	10 92 f9 02 	sts	0x02F9, r1
					pwm_left_desired = 0;
    28f0:	10 92 fc 02 	sts	0x02FC, r1
    28f4:	10 92 fb 02 	sts	0x02FB, r1
					if(currentSelector == 8) {
    28f8:	80 91 4c 04 	lds	r24, 0x044C
    28fc:	88 30       	cpi	r24, 0x08	; 8
    28fe:	09 f4       	brne	.+2      	; 0x2902 <handleIRRemoteCommands+0x238>
    2900:	db c0       	rjmp	.+438    	; 0x2ab8 <handleIRRemoteCommands+0x3ee>
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	fb ce       	rjmp	.-522    	; 0x2702 <handleIRRemoteCommands+0x38>
                	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    290c:	20 91 f9 02 	lds	r18, 0x02F9
    2910:	30 91 fa 02 	lds	r19, 0x02FA
    2914:	2e 5f       	subi	r18, 0xFE	; 254
    2916:	3f 4f       	sbci	r19, 0xFF	; 255
    2918:	30 93 fa 02 	sts	0x02FA, r19
    291c:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired -= STEP_MOTORS;
    2920:	80 91 fb 02 	lds	r24, 0x02FB
    2924:	90 91 fc 02 	lds	r25, 0x02FC
    2928:	02 97       	sbiw	r24, 0x02	; 2
    292a:	90 93 fc 02 	sts	0x02FC, r25
    292e:	80 93 fb 02 	sts	0x02FB, r24
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    2932:	42 e0       	ldi	r20, 0x02	; 2
    2934:	21 30       	cpi	r18, 0x01	; 1
    2936:	34 07       	cpc	r19, r20
    2938:	34 f0       	brlt	.+12     	; 0x2946 <handleIRRemoteCommands+0x27c>
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	32 e0       	ldi	r19, 0x02	; 2
    293e:	30 93 fa 02 	sts	0x02FA, r19
    2942:	20 93 f9 02 	sts	0x02F9, r18
	   	            if (pwm_left_desired<-(MAX_MOTORS_PWM/2)) pwm_left_desired=-(MAX_MOTORS_PWM/2);
    2946:	4e ef       	ldi	r20, 0xFE	; 254
    2948:	80 30       	cpi	r24, 0x00	; 0
    294a:	94 07       	cpc	r25, r20
    294c:	0c f0       	brlt	.+2      	; 0x2950 <handleIRRemoteCommands+0x286>
    294e:	d7 ce       	rjmp	.-594    	; 0x26fe <handleIRRemoteCommands+0x34>
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	9e ef       	ldi	r25, 0xFE	; 254
    2954:	90 93 fc 02 	sts	0x02FC, r25
    2958:	80 93 fb 02 	sts	0x02FB, r24
    295c:	d0 ce       	rjmp	.-608    	; 0x26fe <handleIRRemoteCommands+0x34>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    295e:	80 91 fb 02 	lds	r24, 0x02FB
    2962:	90 91 fc 02 	lds	r25, 0x02FC
    2966:	02 96       	adiw	r24, 0x02	; 2
    2968:	90 93 fc 02 	sts	0x02FC, r25
    296c:	80 93 fb 02 	sts	0x02FB, r24
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
    2970:	22 e0       	ldi	r18, 0x02	; 2
    2972:	81 30       	cpi	r24, 0x01	; 1
    2974:	92 07       	cpc	r25, r18
    2976:	0c f4       	brge	.+2      	; 0x297a <handleIRRemoteCommands+0x2b0>
    2978:	61 cf       	rjmp	.-318    	; 0x283c <handleIRRemoteCommands+0x172>
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	92 e0       	ldi	r25, 0x02	; 2
    297e:	90 93 fc 02 	sts	0x02FC, r25
    2982:	80 93 fb 02 	sts	0x02FB, r24
    2986:	5a cf       	rjmp	.-332    	; 0x283c <handleIRRemoteCommands+0x172>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    2988:	20 91 f9 02 	lds	r18, 0x02F9
    298c:	30 91 fa 02 	lds	r19, 0x02FA
    2990:	80 91 fb 02 	lds	r24, 0x02FB
    2994:	90 91 fc 02 	lds	r25, 0x02FC
    2998:	82 17       	cp	r24, r18
    299a:	93 07       	cpc	r25, r19
    299c:	0c f4       	brge	.+2      	; 0x29a0 <handleIRRemoteCommands+0x2d6>
    299e:	6e c0       	rjmp	.+220    	; 0x2a7c <handleIRRemoteCommands+0x3b2>
    29a0:	9c 01       	movw	r18, r24
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    29a2:	2e 5f       	subi	r18, 0xFE	; 254
    29a4:	3f 4f       	sbci	r19, 0xFF	; 255
    29a6:	30 93 fa 02 	sts	0x02FA, r19
    29aa:	20 93 f9 02 	sts	0x02F9, r18
					pwm_left_desired += STEP_MOTORS;
    29ae:	02 96       	adiw	r24, 0x02	; 2
    29b0:	90 93 fc 02 	sts	0x02FC, r25
    29b4:	80 93 fb 02 	sts	0x02FB, r24
	                if (pwm_right_desired > (MAX_MOTORS_PWM/2)) pwm_right_desired = (MAX_MOTORS_PWM/2);
    29b8:	42 e0       	ldi	r20, 0x02	; 2
    29ba:	21 30       	cpi	r18, 0x01	; 1
    29bc:	34 07       	cpc	r19, r20
    29be:	34 f0       	brlt	.+12     	; 0x29cc <handleIRRemoteCommands+0x302>
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	32 e0       	ldi	r19, 0x02	; 2
    29c4:	30 93 fa 02 	sts	0x02FA, r19
    29c8:	20 93 f9 02 	sts	0x02F9, r18
    	            if (pwm_left_desired > (MAX_MOTORS_PWM/2)) pwm_left_desired = (MAX_MOTORS_PWM/2);
    29cc:	22 e0       	ldi	r18, 0x02	; 2
    29ce:	81 30       	cpi	r24, 0x01	; 1
    29d0:	92 07       	cpc	r25, r18
    29d2:	0c f4       	brge	.+2      	; 0x29d6 <handleIRRemoteCommands+0x30c>
    29d4:	33 cf       	rjmp	.-410    	; 0x283c <handleIRRemoteCommands+0x172>
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	92 e0       	ldi	r25, 0x02	; 2
    29da:	90 93 fc 02 	sts	0x02FC, r25
    29de:	80 93 fb 02 	sts	0x02FB, r24
    29e2:	20 91 f9 02 	lds	r18, 0x02F9
    29e6:	30 91 fa 02 	lds	r19, 0x02FA
    29ea:	89 ce       	rjmp	.-750    	; 0x26fe <handleIRRemoteCommands+0x34>
					pwm_left_desired += STEP_MOTORS;
	               	if (pwm_left_desired>(MAX_MOTORS_PWM/2)) pwm_left_desired=(MAX_MOTORS_PWM/2);
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    29ec:	20 91 f9 02 	lds	r18, 0x02F9
    29f0:	30 91 fa 02 	lds	r19, 0x02FA
    29f4:	2e 5f       	subi	r18, 0xFE	; 254
    29f6:	3f 4f       	sbci	r19, 0xFF	; 255
    29f8:	30 93 fa 02 	sts	0x02FA, r19
    29fc:	20 93 f9 02 	sts	0x02F9, r18
	                if (pwm_right_desired>(MAX_MOTORS_PWM/2)) pwm_right_desired=(MAX_MOTORS_PWM/2);
    2a00:	42 e0       	ldi	r20, 0x02	; 2
    2a02:	21 30       	cpi	r18, 0x01	; 1
    2a04:	34 07       	cpc	r19, r20
    2a06:	0c f4       	brge	.+2      	; 0x2a0a <handleIRRemoteCommands+0x340>
    2a08:	76 ce       	rjmp	.-788    	; 0x26f6 <handleIRRemoteCommands+0x2c>
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	92 e0       	ldi	r25, 0x02	; 2
    2a0e:	90 93 fa 02 	sts	0x02FA, r25
    2a12:	80 93 f9 02 	sts	0x02F9, r24
    2a16:	80 91 fb 02 	lds	r24, 0x02FB
    2a1a:	90 91 fc 02 	lds	r25, 0x02FC
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	32 e0       	ldi	r19, 0x02	; 2
    2a22:	6f ce       	rjmp	.-802    	; 0x2702 <handleIRRemoteCommands+0x38>
	               	if (pwm_right_desired<-(MAX_MOTORS_PWM/2)) pwm_right_desired=-(MAX_MOTORS_PWM/2);
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    2a24:	80 91 29 04 	lds	r24, 0x0429
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	01 96       	adiw	r24, 0x01	; 1
    2a2c:	65 e0       	ldi	r22, 0x05	; 5
    2a2e:	70 e0       	ldi	r23, 0x00	; 0
    2a30:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
    2a34:	80 93 29 04 	sts	0x0429, r24

					if(colorState==0) {			// turn on blue and off all IRs
    2a38:	88 23       	and	r24, r24
    2a3a:	11 f5       	brne	.+68     	; 0x2a80 <handleIRRemoteCommands+0x3b6>
						LED_IR1_HIGH;
    2a3c:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    2a3e:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    2a40:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = MAX_LEDS_PWM;
    2a44:	8f ef       	ldi	r24, 0xFF	; 255
    2a46:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2a4a:	80 93 0c 02 	sts	0x020C, r24
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    2a4e:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
					updateGreenLed(pwm_green);
    2a52:	80 91 0d 02 	lds	r24, 0x020D
    2a56:	0e 94 d4 3a 	call	0x75a8	; 0x75a8 <updateGreenLed>
					updateBlueLed(pwm_blue);
    2a5a:	80 91 0e 02 	lds	r24, 0x020E
    2a5e:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <updateBlueLed>
    2a62:	20 91 f9 02 	lds	r18, 0x02F9
    2a66:	30 91 fa 02 	lds	r19, 0x02FA
    2a6a:	80 91 fb 02 	lds	r24, 0x02FB
    2a6e:	90 91 fc 02 	lds	r25, 0x02FC

	               	break;
    2a72:	45 ce       	rjmp	.-886    	; 0x26fe <handleIRRemoteCommands+0x34>

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
				speedr = pwm_right_desired;
    2a74:	30 95       	com	r19
    2a76:	21 95       	neg	r18
    2a78:	3f 4f       	sbci	r19, 0xFF	; 255
    2a7a:	43 ce       	rjmp	.-890    	; 0x2702 <handleIRRemoteCommands+0x38>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    2a7c:	c9 01       	movw	r24, r18
    2a7e:	91 cf       	rjmp	.-222    	; 0x29a2 <handleIRRemoteCommands+0x2d8>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    2a80:	81 30       	cpi	r24, 0x01	; 1
    2a82:	91 f0       	breq	.+36     	; 0x2aa8 <handleIRRemoteCommands+0x3de>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    2a84:	82 30       	cpi	r24, 0x02	; 2
    2a86:	a1 f1       	breq	.+104    	; 0x2af0 <handleIRRemoteCommands+0x426>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    2a88:	83 30       	cpi	r24, 0x03	; 3
    2a8a:	e9 f1       	breq	.+122    	; 0x2b06 <handleIRRemoteCommands+0x43c>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    2a8c:	8f ef       	ldi	r24, 0xFF	; 255
    2a8e:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    2a92:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = MAX_LEDS_PWM;
    2a96:	80 93 0c 02 	sts	0x020C, r24
    2a9a:	d9 cf       	rjmp	.-78     	; 0x2a4e <handleIRRemoteCommands+0x384>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	80 93 6c 04 	sts	0x046C, r24
							cliffAvoidanceEnabled = 1;
    2aa2:	80 93 6d 04 	sts	0x046D, r24
    2aa6:	23 ce       	rjmp	.-954    	; 0x26ee <handleIRRemoteCommands+0x24>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    2aa8:	8f ef       	ldi	r24, 0xFF	; 255
    2aaa:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = 0;
    2aae:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = MAX_LEDS_PWM;
    2ab2:	80 93 0c 02 	sts	0x020C, r24
    2ab6:	cb cf       	rjmp	.-106    	; 0x2a4e <handleIRRemoteCommands+0x384>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    2ab8:	0e 94 b8 3d 	call	0x7b70	; 0x7b70 <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    2abc:	8f ef       	ldi	r24, 0xFF	; 255
    2abe:	93 e0       	ldi	r25, 0x03	; 3
    2ac0:	90 93 6a 02 	sts	0x026A, r25
    2ac4:	80 93 69 02 	sts	0x0269, r24
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    2ac8:	90 93 70 02 	sts	0x0270, r25
    2acc:	80 93 6f 02 	sts	0x026F, r24
						calibState = 0;
    2ad0:	10 92 42 0b 	sts	0x0B42, r1
						calibVelIndex = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	80 93 9c 08 	sts	0x089C, r24
						calibrateOdomFlag = 1;
    2ada:	80 93 4d 05 	sts	0x054D, r24
    2ade:	20 91 f9 02 	lds	r18, 0x02F9
    2ae2:	30 91 fa 02 	lds	r19, 0x02FA
    2ae6:	80 91 fb 02 	lds	r24, 0x02FB
    2aea:	90 91 fc 02 	lds	r25, 0x02FC
    2aee:	07 ce       	rjmp	.-1010   	; 0x26fe <handleIRRemoteCommands+0x34>
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    2af0:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    2af2:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    2af4:	8f ef       	ldi	r24, 0xFF	; 255
    2af6:	80 93 0e 02 	sts	0x020E, r24
						pwm_green = MAX_LEDS_PWM;
    2afa:	80 93 0d 02 	sts	0x020D, r24
						pwm_red = 0;
    2afe:	10 92 0c 02 	sts	0x020C, r1
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	a4 cf       	rjmp	.-184    	; 0x2a4e <handleIRRemoteCommands+0x384>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    2b06:	10 92 0e 02 	sts	0x020E, r1
						pwm_green = 0;
    2b0a:	10 92 0d 02 	sts	0x020D, r1
						pwm_red = 0;
    2b0e:	10 92 0c 02 	sts	0x020C, r1
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	9c cf       	rjmp	.-200    	; 0x2a4e <handleIRRemoteCommands+0x384>

00002b16 <init_speed_control>:
	//d_speed_control = 5;
	//i_speed_control = 10;
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}
    2b16:	08 95       	ret

00002b18 <start_vertical_speed_control_left>:

void start_vertical_speed_control_left(signed int *pwm_left) {
    2b18:	cf 92       	push	r12
    2b1a:	df 92       	push	r13
    2b1c:	ef 92       	push	r14
    2b1e:	ff 92       	push	r15
    2b20:	0f 93       	push	r16
    2b22:	1f 93       	push	r17
    2b24:	cf 93       	push	r28
    2b26:	df 93       	push	r29
    2b28:	fc 01       	movw	r30, r24
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
    2b2a:	80 81       	ld	r24, Z
    2b2c:	91 81       	ldd	r25, Z+1	; 0x01
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <start_vertical_speed_control_left+0x1c>
    2b32:	f7 c0       	rjmp	.+494    	; 0x2d22 <start_vertical_speed_control_left+0x20a>
		delta_left_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2b34:	20 91 3e 04 	lds	r18, 0x043E
    2b38:	30 91 3f 04 	lds	r19, 0x043F
    2b3c:	41 e0       	ldi	r20, 0x01	; 1
    2b3e:	2e 30       	cpi	r18, 0x0E	; 14
    2b40:	34 07       	cpc	r19, r20
    2b42:	0c f4       	brge	.+2      	; 0x2b46 <start_vertical_speed_control_left+0x2e>
    2b44:	c7 c0       	rjmp	.+398    	; 0x2cd4 <start_vertical_speed_control_left+0x1bc>
		if(*pwm_left > 0) {
    2b46:	18 16       	cp	r1, r24
    2b48:	19 06       	cpc	r1, r25
    2b4a:	0c f0       	brlt	.+2      	; 0x2b4e <start_vertical_speed_control_left+0x36>
    2b4c:	68 c1       	rjmp	.+720    	; 0x2e1e <start_vertical_speed_control_left+0x306>
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
    2b4e:	88 e6       	ldi	r24, 0x68	; 104
    2b50:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2b52:	82 1b       	sub	r24, r18
    2b54:	93 0b       	sbc	r25, r19
    2b56:	95 95       	asr	r25
    2b58:	87 95       	ror	r24
    2b5a:	95 95       	asr	r25
    2b5c:	87 95       	ror	r24
    2b5e:	29 e1       	ldi	r18, 0x19	; 25
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	28 1b       	sub	r18, r24
    2b64:	39 0b       	sbc	r19, r25
    2b66:	30 93 04 02 	sts	0x0204, r19
    2b6a:	20 93 03 02 	sts	0x0203, r18
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    2b6e:	c0 91 52 05 	lds	r28, 0x0552
    2b72:	d0 91 53 05 	lds	r29, 0x0553
    2b76:	d0 93 6a 09 	sts	0x096A, r29
    2b7a:	c0 93 69 09 	sts	0x0969, r28
	if(*pwm_left >= 0) {
    2b7e:	80 81       	ld	r24, Z
    2b80:	91 81       	ldd	r25, Z+1	; 0x01
    2b82:	97 fd       	sbrc	r25, 7
    2b84:	2e c1       	rjmp	.+604    	; 0x2de2 <start_vertical_speed_control_left+0x2ca>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    2b86:	20 91 f1 02 	lds	r18, 0x02F1
    2b8a:	30 91 f2 02 	lds	r19, 0x02F2
    2b8e:	dc 01       	movw	r26, r24
    2b90:	a2 1b       	sub	r26, r18
    2b92:	b3 0b       	sbc	r27, r19
    2b94:	b0 93 53 05 	sts	0x0553, r27
    2b98:	a0 93 52 05 	sts	0x0552, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;
    2b9c:	80 91 09 03 	lds	r24, 0x0309
    2ba0:	90 91 0a 03 	lds	r25, 0x030A
    2ba4:	8a 0f       	add	r24, r26
    2ba6:	9b 1f       	adc	r25, r27
    2ba8:	90 93 0a 03 	sts	0x030A, r25
    2bac:	80 93 09 03 	sts	0x0309, r24

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
    2bb0:	66 e0       	ldi	r22, 0x06	; 6
    2bb2:	81 34       	cpi	r24, 0x41	; 65
    2bb4:	96 07       	cpc	r25, r22
    2bb6:	0c f4       	brge	.+2      	; 0x2bba <start_vertical_speed_control_left+0xa2>
    2bb8:	cb c0       	rjmp	.+406    	; 0x2d50 <start_vertical_speed_control_left+0x238>
		delta_left_speed_sum = I_LIMIT_VERTICAL;
    2bba:	80 e4       	ldi	r24, 0x40	; 64
    2bbc:	96 e0       	ldi	r25, 0x06	; 6
    2bbe:	90 93 0a 03 	sts	0x030A, r25
    2bc2:	80 93 09 03 	sts	0x0309, r24
    2bc6:	10 ec       	ldi	r17, 0xC0	; 192
    2bc8:	c1 2e       	mov	r12, r17
    2bca:	12 e1       	ldi	r17, 0x12	; 18
    2bcc:	d1 2e       	mov	r13, r17
    2bce:	e1 2c       	mov	r14, r1
    2bd0:	f1 2c       	mov	r15, r1
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    2bd2:	00 81       	ld	r16, Z
    2bd4:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    2bd6:	9d 01       	movw	r18, r26
    2bd8:	22 0f       	add	r18, r18
    2bda:	33 1f       	adc	r19, r19
    2bdc:	2a 0f       	add	r18, r26
    2bde:	3b 1f       	adc	r19, r27
    2be0:	22 0f       	add	r18, r18
    2be2:	33 1f       	adc	r19, r19
    2be4:	22 0f       	add	r18, r18
    2be6:	33 1f       	adc	r19, r19
    2be8:	22 0f       	add	r18, r18
    2bea:	33 1f       	adc	r19, r19
    2bec:	2a 0f       	add	r18, r26
    2bee:	3b 1f       	adc	r19, r27
    2bf0:	44 27       	eor	r20, r20
    2bf2:	37 fd       	sbrc	r19, 7
    2bf4:	40 95       	com	r20
    2bf6:	54 2f       	mov	r21, r20
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_left_speed_controller = (signed long int)(k_ff_speed_control_left*(*pwm_left));
    2bf8:	80 91 03 02 	lds	r24, 0x0203
    2bfc:	90 91 04 02 	lds	r25, 0x0204
    2c00:	08 9f       	mul	r16, r24
    2c02:	b0 01       	movw	r22, r0
    2c04:	09 9f       	mul	r16, r25
    2c06:	70 0d       	add	r23, r0
    2c08:	18 9f       	mul	r17, r24
    2c0a:	70 0d       	add	r23, r0
    2c0c:	11 24       	eor	r1, r1
    2c0e:	88 27       	eor	r24, r24
    2c10:	77 fd       	sbrc	r23, 7
    2c12:	80 95       	com	r24
    2c14:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
    2c16:	26 0f       	add	r18, r22
    2c18:	37 1f       	adc	r19, r23
    2c1a:	48 1f       	adc	r20, r24
    2c1c:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
    2c1e:	ac 1b       	sub	r26, r28
    2c20:	bd 0b       	sbc	r27, r29
    2c22:	aa 0f       	add	r26, r26
    2c24:	bb 1f       	adc	r27, r27
    2c26:	bd 01       	movw	r22, r26
    2c28:	cb 01       	movw	r24, r22
    2c2a:	aa 27       	eor	r26, r26
    2c2c:	97 fd       	sbrc	r25, 7
    2c2e:	a0 95       	com	r26
    2c30:	ba 2f       	mov	r27, r26
    2c32:	28 0f       	add	r18, r24
    2c34:	39 1f       	adc	r19, r25
    2c36:	4a 1f       	adc	r20, r26
    2c38:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);
    2c3a:	2c 0d       	add	r18, r12
    2c3c:	3d 1d       	adc	r19, r13
    2c3e:	4e 1d       	adc	r20, r14
    2c40:	5f 1d       	adc	r21, r15
    2c42:	20 93 05 03 	sts	0x0305, r18
    2c46:	30 93 06 03 	sts	0x0306, r19
    2c4a:	40 93 07 03 	sts	0x0307, r20
    2c4e:	50 93 08 03 	sts	0x0308, r21

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2c52:	57 fd       	sbrc	r21, 7
    2c54:	9d c0       	rjmp	.+314    	; 0x2d90 <start_vertical_speed_control_left+0x278>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    2c56:	12 16       	cp	r1, r18
    2c58:	13 06       	cpc	r1, r19
    2c5a:	14 06       	cpc	r1, r20
    2c5c:	15 06       	cpc	r1, r21
    2c5e:	0c f0       	brlt	.+2      	; 0x2c62 <start_vertical_speed_control_left+0x14a>
    2c60:	a4 c0       	rjmp	.+328    	; 0x2daa <start_vertical_speed_control_left+0x292>
    2c62:	17 fd       	sbrc	r17, 7
    2c64:	c9 c0       	rjmp	.+402    	; 0x2df8 <start_vertical_speed_control_left+0x2e0>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    2c66:	21 3c       	cpi	r18, 0xC1	; 193
    2c68:	7d e5       	ldi	r23, 0x5D	; 93
    2c6a:	37 07       	cpc	r19, r23
    2c6c:	70 e0       	ldi	r23, 0x00	; 0
    2c6e:	47 07       	cpc	r20, r23
    2c70:	70 e0       	ldi	r23, 0x00	; 0
    2c72:	57 07       	cpc	r21, r23
    2c74:	0c f4       	brge	.+2      	; 0x2c78 <start_vertical_speed_control_left+0x160>
    2c76:	99 c0       	rjmp	.+306    	; 0x2daa <start_vertical_speed_control_left+0x292>
    2c78:	80 ec       	ldi	r24, 0xC0	; 192
    2c7a:	9d e5       	ldi	r25, 0x5D	; 93
    2c7c:	a0 e0       	ldi	r26, 0x00	; 0
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	80 93 05 03 	sts	0x0305, r24
    2c84:	90 93 06 03 	sts	0x0306, r25
    2c88:	a0 93 07 03 	sts	0x0307, r26
    2c8c:	b0 93 08 03 	sts	0x0308, r27
    2c90:	2c ed       	ldi	r18, 0xDC	; 220
    2c92:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    2c94:	31 83       	std	Z+1, r19	; 0x01
    2c96:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    2c98:	80 91 eb 02 	lds	r24, 0x02EB
    2c9c:	90 91 ec 02 	lds	r25, 0x02EC
    2ca0:	18 16       	cp	r1, r24
    2ca2:	19 06       	cpc	r1, r25
    2ca4:	0c f0       	brlt	.+2      	; 0x2ca8 <start_vertical_speed_control_left+0x190>
    2ca6:	98 c0       	rjmp	.+304    	; 0x2dd8 <start_vertical_speed_control_left+0x2c0>
		*pwm_left += 1;
    2ca8:	2f 5f       	subi	r18, 0xFF	; 255
    2caa:	3f 4f       	sbci	r19, 0xFF	; 255
    2cac:	31 83       	std	Z+1, r19	; 0x01
    2cae:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    2cb0:	42 e0       	ldi	r20, 0x02	; 2
    2cb2:	21 30       	cpi	r18, 0x01	; 1
    2cb4:	34 07       	cpc	r19, r20
    2cb6:	0c f4       	brge	.+2      	; 0x2cba <start_vertical_speed_control_left+0x1a2>
    2cb8:	41 c0       	rjmp	.+130    	; 0x2d3c <start_vertical_speed_control_left+0x224>
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	92 e0       	ldi	r25, 0x02	; 2
    2cbe:	91 83       	std	Z+1, r25	; 0x01
    2cc0:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);


}
    2cc2:	df 91       	pop	r29
    2cc4:	cf 91       	pop	r28
    2cc6:	1f 91       	pop	r17
    2cc8:	0f 91       	pop	r16
    2cca:	ff 90       	pop	r15
    2ccc:	ef 90       	pop	r14
    2cce:	df 90       	pop	r13
    2cd0:	cf 90       	pop	r12
    2cd2:	08 95       	ret
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    2cd4:	24 3b       	cpi	r18, 0xB4	; 180
    2cd6:	31 05       	cpc	r19, r1
    2cd8:	94 f4       	brge	.+36     	; 0x2cfe <start_vertical_speed_control_left+0x1e6>
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    2cda:	2a 35       	cpi	r18, 0x5A	; 90
    2cdc:	31 05       	cpc	r19, r1
    2cde:	7c f4       	brge	.+30     	; 0x2cfe <start_vertical_speed_control_left+0x1e6>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
    2ce0:	18 16       	cp	r1, r24
    2ce2:	19 06       	cpc	r1, r25
    2ce4:	0c f0       	brlt	.+2      	; 0x2ce8 <start_vertical_speed_control_left+0x1d0>
    2ce6:	a9 c0       	rjmp	.+338    	; 0x2e3a <start_vertical_speed_control_left+0x322>
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
    2ce8:	35 95       	asr	r19
    2cea:	27 95       	ror	r18
    2cec:	35 95       	asr	r19
    2cee:	27 95       	ror	r18
    2cf0:	27 5e       	subi	r18, 0xE7	; 231
    2cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf4:	30 93 04 02 	sts	0x0204, r19
    2cf8:	20 93 03 02 	sts	0x0203, r18
    2cfc:	38 cf       	rjmp	.-400    	; 0x2b6e <start_vertical_speed_control_left+0x56>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
    2cfe:	18 16       	cp	r1, r24
    2d00:	19 06       	cpc	r1, r25
    2d02:	0c f0       	brlt	.+2      	; 0x2d06 <start_vertical_speed_control_left+0x1ee>
    2d04:	42 c0       	rjmp	.+132    	; 0x2d8a <start_vertical_speed_control_left+0x272>
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
    2d06:	84 eb       	ldi	r24, 0xB4	; 180
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	82 1b       	sub	r24, r18
    2d0c:	93 0b       	sbc	r25, r19
    2d0e:	95 95       	asr	r25
    2d10:	87 95       	ror	r24
    2d12:	95 95       	asr	r25
    2d14:	87 95       	ror	r24
    2d16:	49 96       	adiw	r24, 0x19	; 25
    2d18:	90 93 04 02 	sts	0x0204, r25
    2d1c:	80 93 03 02 	sts	0x0203, r24
    2d20:	26 cf       	rjmp	.-436    	; 0x2b6e <start_vertical_speed_control_left+0x56>
void start_vertical_speed_control_left(signed int *pwm_left) {
	
	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).
	
	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    2d22:	10 92 0a 03 	sts	0x030A, r1
    2d26:	10 92 09 03 	sts	0x0309, r1
		delta_left_speed_current = 0;
    2d2a:	10 92 53 05 	sts	0x0553, r1
    2d2e:	10 92 52 05 	sts	0x0552, r1
		delta_left_speed_prev = 0;
    2d32:	10 92 6a 09 	sts	0x096A, r1
    2d36:	10 92 69 09 	sts	0x0969, r1
		return;
    2d3a:	c3 cf       	rjmp	.-122    	; 0x2cc2 <start_vertical_speed_control_left+0x1aa>
	} else {
		*pwm_left -= 1;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    2d3c:	6e ef       	ldi	r22, 0xFE	; 254
    2d3e:	20 30       	cpi	r18, 0x00	; 0
    2d40:	36 07       	cpc	r19, r22
    2d42:	0c f0       	brlt	.+2      	; 0x2d46 <start_vertical_speed_control_left+0x22e>
    2d44:	be cf       	rjmp	.-132    	; 0x2cc2 <start_vertical_speed_control_left+0x1aa>
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	9e ef       	ldi	r25, 0xFE	; 254
    2d4a:	91 83       	std	Z+1, r25	; 0x01
    2d4c:	80 83       	st	Z, r24
    2d4e:	b9 cf       	rjmp	.-142    	; 0x2cc2 <start_vertical_speed_control_left+0x1aa>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2d50:	79 ef       	ldi	r23, 0xF9	; 249
    2d52:	80 3c       	cpi	r24, 0xC0	; 192
    2d54:	97 07       	cpc	r25, r23
    2d56:	7c f4       	brge	.+30     	; 0x2d76 <start_vertical_speed_control_left+0x25e>
		delta_left_speed_sum = -I_LIMIT_VERTICAL;
    2d58:	80 ec       	ldi	r24, 0xC0	; 192
    2d5a:	99 ef       	ldi	r25, 0xF9	; 249
    2d5c:	90 93 0a 03 	sts	0x030A, r25
    2d60:	80 93 09 03 	sts	0x0309, r24
    2d64:	60 e4       	ldi	r22, 0x40	; 64
    2d66:	c6 2e       	mov	r12, r22
    2d68:	6d ee       	ldi	r22, 0xED	; 237
    2d6a:	d6 2e       	mov	r13, r22
    2d6c:	6f ef       	ldi	r22, 0xFF	; 255
    2d6e:	e6 2e       	mov	r14, r22
    2d70:	6f ef       	ldi	r22, 0xFF	; 255
    2d72:	f6 2e       	mov	r15, r22
    2d74:	2e cf       	rjmp	.-420    	; 0x2bd2 <start_vertical_speed_control_left+0xba>
	// sum the error
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_VERTICAL) {
		delta_left_speed_sum = I_LIMIT_VERTICAL;
	} else if(delta_left_speed_sum < -I_LIMIT_VERTICAL) {
    2d76:	6c 01       	movw	r12, r24
    2d78:	cc 0c       	add	r12, r12
    2d7a:	dd 1c       	adc	r13, r13
    2d7c:	c8 0e       	add	r12, r24
    2d7e:	d9 1e       	adc	r13, r25
    2d80:	ee 24       	eor	r14, r14
    2d82:	d7 fc       	sbrc	r13, 7
    2d84:	e0 94       	com	r14
    2d86:	fe 2c       	mov	r15, r14
    2d88:	24 cf       	rjmp	.-440    	; 0x2bd2 <start_vertical_speed_control_left+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - ((180 - currentAngle)>>2);
    2d8a:	84 eb       	ldi	r24, 0xB4	; 180
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	e1 ce       	rjmp	.-574    	; 0x2b52 <start_vertical_speed_control_left+0x3a>
	pwm_left_speed_controller += (signed long int)(P_VERTICAL * delta_left_speed_current);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_VERTICAL);
	pwm_left_speed_controller += (signed long int)(I_VERTICAL*delta_left_speed_sum);

	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    2d90:	17 fd       	sbrc	r17, 7
    2d92:	0b c0       	rjmp	.+22     	; 0x2daa <start_vertical_speed_control_left+0x292>
		pwm_left_speed_controller = 0;
    2d94:	10 92 05 03 	sts	0x0305, r1
    2d98:	10 92 06 03 	sts	0x0306, r1
    2d9c:	10 92 07 03 	sts	0x0307, r1
    2da0:	10 92 08 03 	sts	0x0308, r1
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2daa:	20 34       	cpi	r18, 0x40	; 64
    2dac:	82 ea       	ldi	r24, 0xA2	; 162
    2dae:	38 07       	cpc	r19, r24
    2db0:	8f ef       	ldi	r24, 0xFF	; 255
    2db2:	48 07       	cpc	r20, r24
    2db4:	8f ef       	ldi	r24, 0xFF	; 255
    2db6:	58 07       	cpc	r21, r24
    2db8:	54 f5       	brge	.+84     	; 0x2e0e <start_vertical_speed_control_left+0x2f6>
    2dba:	80 e4       	ldi	r24, 0x40	; 64
    2dbc:	92 ea       	ldi	r25, 0xA2	; 162
    2dbe:	af ef       	ldi	r26, 0xFF	; 255
    2dc0:	bf ef       	ldi	r27, 0xFF	; 255
    2dc2:	80 93 05 03 	sts	0x0305, r24
    2dc6:	90 93 06 03 	sts	0x0306, r25
    2dca:	a0 93 07 03 	sts	0x0307, r26
    2dce:	b0 93 08 03 	sts	0x0308, r27
    2dd2:	24 e2       	ldi	r18, 0x24	; 36
    2dd4:	3a ef       	ldi	r19, 0xFA	; 250
    2dd6:	5e cf       	rjmp	.-324    	; 0x2c94 <start_vertical_speed_control_left+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    2dd8:	21 50       	subi	r18, 0x01	; 1
    2dda:	30 40       	sbci	r19, 0x00	; 0
    2ddc:	31 83       	std	Z+1, r19	; 0x01
    2dde:	20 83       	st	Z, r18
    2de0:	67 cf       	rjmp	.-306    	; 0x2cb0 <start_vertical_speed_control_left+0x198>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    2de2:	a0 91 f1 02 	lds	r26, 0x02F1
    2de6:	b0 91 f2 02 	lds	r27, 0x02F2
    2dea:	a8 0f       	add	r26, r24
    2dec:	b9 1f       	adc	r27, r25
    2dee:	b0 93 53 05 	sts	0x0553, r27
    2df2:	a0 93 52 05 	sts	0x0552, r26
    2df6:	d2 ce       	rjmp	.-604    	; 0x2b9c <start_vertical_speed_control_left+0x84>
	// avoid to change motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    2df8:	10 92 05 03 	sts	0x0305, r1
    2dfc:	10 92 06 03 	sts	0x0306, r1
    2e00:	10 92 07 03 	sts	0x0307, r1
    2e04:	10 92 08 03 	sts	0x0308, r1
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    2e0e:	84 e0       	ldi	r24, 0x04	; 4
    2e10:	55 95       	asr	r21
    2e12:	47 95       	ror	r20
    2e14:	37 95       	ror	r19
    2e16:	27 95       	ror	r18
    2e18:	8a 95       	dec	r24
    2e1a:	d1 f7       	brne	.-12     	; 0x2e10 <start_vertical_speed_control_left+0x2f8>
    2e1c:	3b cf       	rjmp	.-394    	; 0x2c94 <start_vertical_speed_control_left+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF + ((360 - currentAngle)>>2);
    2e1e:	88 e6       	ldi	r24, 0x68	; 104
    2e20:	91 e0       	ldi	r25, 0x01	; 1
    2e22:	82 1b       	sub	r24, r18
    2e24:	93 0b       	sbc	r25, r19
    2e26:	95 95       	asr	r25
    2e28:	87 95       	ror	r24
    2e2a:	95 95       	asr	r25
    2e2c:	87 95       	ror	r24
    2e2e:	49 96       	adiw	r24, 0x19	; 25
    2e30:	90 93 04 02 	sts	0x0204, r25
    2e34:	80 93 03 02 	sts	0x0203, r24
    2e38:	9a ce       	rjmp	.-716    	; 0x2b6e <start_vertical_speed_control_left+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_left > 0) {
			k_ff_speed_control_left = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_left = INIT_KFF - (currentAngle>>2);
    2e3a:	35 95       	asr	r19
    2e3c:	27 95       	ror	r18
    2e3e:	35 95       	asr	r19
    2e40:	27 95       	ror	r18
    2e42:	89 e1       	ldi	r24, 0x19	; 25
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	82 1b       	sub	r24, r18
    2e48:	93 0b       	sbc	r25, r19
    2e4a:	90 93 04 02 	sts	0x0204, r25
    2e4e:	80 93 03 02 	sts	0x0203, r24
    2e52:	8d ce       	rjmp	.-742    	; 0x2b6e <start_vertical_speed_control_left+0x56>

00002e54 <start_vertical_speed_control_right>:


}


void start_vertical_speed_control_right(signed int *pwm_right) {
    2e54:	cf 92       	push	r12
    2e56:	df 92       	push	r13
    2e58:	ef 92       	push	r14
    2e5a:	ff 92       	push	r15
    2e5c:	0f 93       	push	r16
    2e5e:	1f 93       	push	r17
    2e60:	cf 93       	push	r28
    2e62:	df 93       	push	r29
    2e64:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    2e66:	80 81       	ld	r24, Z
    2e68:	91 81       	ldd	r25, Z+1	; 0x01
    2e6a:	00 97       	sbiw	r24, 0x00	; 0
    2e6c:	09 f4       	brne	.+2      	; 0x2e70 <start_vertical_speed_control_right+0x1c>
    2e6e:	f7 c0       	rjmp	.+494    	; 0x305e <start_vertical_speed_control_right+0x20a>
		delta_right_speed_prev = 0;
		return;
	}

	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
    2e70:	20 91 3e 04 	lds	r18, 0x043E
    2e74:	30 91 3f 04 	lds	r19, 0x043F
    2e78:	41 e0       	ldi	r20, 0x01	; 1
    2e7a:	2e 30       	cpi	r18, 0x0E	; 14
    2e7c:	34 07       	cpc	r19, r20
    2e7e:	0c f4       	brge	.+2      	; 0x2e82 <start_vertical_speed_control_right+0x2e>
    2e80:	c7 c0       	rjmp	.+398    	; 0x3010 <start_vertical_speed_control_right+0x1bc>
		if(*pwm_right > 0) {
    2e82:	18 16       	cp	r1, r24
    2e84:	19 06       	cpc	r1, r25
    2e86:	0c f0       	brlt	.+2      	; 0x2e8a <start_vertical_speed_control_right+0x36>
    2e88:	68 c1       	rjmp	.+720    	; 0x315a <start_vertical_speed_control_right+0x306>
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
    2e8a:	88 e6       	ldi	r24, 0x68	; 104
    2e8c:	91 e0       	ldi	r25, 0x01	; 1
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    2e8e:	82 1b       	sub	r24, r18
    2e90:	93 0b       	sbc	r25, r19
    2e92:	95 95       	asr	r25
    2e94:	87 95       	ror	r24
    2e96:	95 95       	asr	r25
    2e98:	87 95       	ror	r24
    2e9a:	29 e1       	ldi	r18, 0x19	; 25
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	28 1b       	sub	r18, r24
    2ea0:	39 0b       	sbc	r19, r25
    2ea2:	30 93 06 02 	sts	0x0206, r19
    2ea6:	20 93 05 02 	sts	0x0205, r18
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
		}
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    2eaa:	c0 91 08 0b 	lds	r28, 0x0B08
    2eae:	d0 91 09 0b 	lds	r29, 0x0B09
    2eb2:	d0 93 a2 08 	sts	0x08A2, r29
    2eb6:	c0 93 a1 08 	sts	0x08A1, r28
	if(*pwm_right >= 0) {
    2eba:	80 81       	ld	r24, Z
    2ebc:	91 81       	ldd	r25, Z+1	; 0x01
    2ebe:	97 fd       	sbrc	r25, 7
    2ec0:	2e c1       	rjmp	.+604    	; 0x311e <start_vertical_speed_control_right+0x2ca>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    2ec2:	20 91 f3 02 	lds	r18, 0x02F3
    2ec6:	30 91 f4 02 	lds	r19, 0x02F4
    2eca:	dc 01       	movw	r26, r24
    2ecc:	a2 1b       	sub	r26, r18
    2ece:	b3 0b       	sbc	r27, r19
    2ed0:	b0 93 09 0b 	sts	0x0B09, r27
    2ed4:	a0 93 08 0b 	sts	0x0B08, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    2ed8:	80 91 0b 03 	lds	r24, 0x030B
    2edc:	90 91 0c 03 	lds	r25, 0x030C
    2ee0:	8a 0f       	add	r24, r26
    2ee2:	9b 1f       	adc	r25, r27
    2ee4:	90 93 0c 03 	sts	0x030C, r25
    2ee8:	80 93 0b 03 	sts	0x030B, r24

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
    2eec:	66 e0       	ldi	r22, 0x06	; 6
    2eee:	81 34       	cpi	r24, 0x41	; 65
    2ef0:	96 07       	cpc	r25, r22
    2ef2:	0c f4       	brge	.+2      	; 0x2ef6 <start_vertical_speed_control_right+0xa2>
    2ef4:	cb c0       	rjmp	.+406    	; 0x308c <start_vertical_speed_control_right+0x238>
		delta_right_speed_sum = I_LIMIT_VERTICAL;
    2ef6:	80 e4       	ldi	r24, 0x40	; 64
    2ef8:	96 e0       	ldi	r25, 0x06	; 6
    2efa:	90 93 0c 03 	sts	0x030C, r25
    2efe:	80 93 0b 03 	sts	0x030B, r24
    2f02:	40 ec       	ldi	r20, 0xC0	; 192
    2f04:	c4 2e       	mov	r12, r20
    2f06:	42 e1       	ldi	r20, 0x12	; 18
    2f08:	d4 2e       	mov	r13, r20
    2f0a:	e1 2c       	mov	r14, r1
    2f0c:	f1 2c       	mov	r15, r1
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2f0e:	00 81       	ld	r16, Z
    2f10:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    2f12:	9d 01       	movw	r18, r26
    2f14:	22 0f       	add	r18, r18
    2f16:	33 1f       	adc	r19, r19
    2f18:	2a 0f       	add	r18, r26
    2f1a:	3b 1f       	adc	r19, r27
    2f1c:	22 0f       	add	r18, r18
    2f1e:	33 1f       	adc	r19, r19
    2f20:	22 0f       	add	r18, r18
    2f22:	33 1f       	adc	r19, r19
    2f24:	22 0f       	add	r18, r18
    2f26:	33 1f       	adc	r19, r19
    2f28:	2a 0f       	add	r18, r26
    2f2a:	3b 1f       	adc	r19, r27
    2f2c:	44 27       	eor	r20, r20
    2f2e:	37 fd       	sbrc	r19, 7
    2f30:	40 95       	com	r20
    2f32:	54 2f       	mov	r21, r20
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
	}

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	pwm_right_speed_controller = (signed long int)(k_ff_speed_control_right*(*pwm_right)); //(signed int)((*pwm_right) << 3); //<< 5);
    2f34:	80 91 05 02 	lds	r24, 0x0205
    2f38:	90 91 06 02 	lds	r25, 0x0206
    2f3c:	08 9f       	mul	r16, r24
    2f3e:	b0 01       	movw	r22, r0
    2f40:	09 9f       	mul	r16, r25
    2f42:	70 0d       	add	r23, r0
    2f44:	18 9f       	mul	r17, r24
    2f46:	70 0d       	add	r23, r0
    2f48:	11 24       	eor	r1, r1
    2f4a:	88 27       	eor	r24, r24
    2f4c:	77 fd       	sbrc	r23, 7
    2f4e:	80 95       	com	r24
    2f50:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
    2f52:	26 0f       	add	r18, r22
    2f54:	37 1f       	adc	r19, r23
    2f56:	48 1f       	adc	r20, r24
    2f58:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
    2f5a:	ac 1b       	sub	r26, r28
    2f5c:	bd 0b       	sbc	r27, r29
    2f5e:	aa 0f       	add	r26, r26
    2f60:	bb 1f       	adc	r27, r27
    2f62:	bd 01       	movw	r22, r26
    2f64:	cb 01       	movw	r24, r22
    2f66:	aa 27       	eor	r26, r26
    2f68:	97 fd       	sbrc	r25, 7
    2f6a:	a0 95       	com	r26
    2f6c:	ba 2f       	mov	r27, r26
    2f6e:	28 0f       	add	r18, r24
    2f70:	39 1f       	adc	r19, r25
    2f72:	4a 1f       	adc	r20, r26
    2f74:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);
    2f76:	2c 0d       	add	r18, r12
    2f78:	3d 1d       	adc	r19, r13
    2f7a:	4e 1d       	adc	r20, r14
    2f7c:	5f 1d       	adc	r21, r15
    2f7e:	20 93 01 03 	sts	0x0301, r18
    2f82:	30 93 02 03 	sts	0x0302, r19
    2f86:	40 93 03 03 	sts	0x0303, r20
    2f8a:	50 93 04 03 	sts	0x0304, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    2f8e:	57 fd       	sbrc	r21, 7
    2f90:	9d c0       	rjmp	.+314    	; 0x30cc <start_vertical_speed_control_right+0x278>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    2f92:	12 16       	cp	r1, r18
    2f94:	13 06       	cpc	r1, r19
    2f96:	14 06       	cpc	r1, r20
    2f98:	15 06       	cpc	r1, r21
    2f9a:	0c f0       	brlt	.+2      	; 0x2f9e <start_vertical_speed_control_right+0x14a>
    2f9c:	a4 c0       	rjmp	.+328    	; 0x30e6 <start_vertical_speed_control_right+0x292>
    2f9e:	17 fd       	sbrc	r17, 7
    2fa0:	c9 c0       	rjmp	.+402    	; 0x3134 <start_vertical_speed_control_right+0x2e0>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    2fa2:	21 3c       	cpi	r18, 0xC1	; 193
    2fa4:	7d e5       	ldi	r23, 0x5D	; 93
    2fa6:	37 07       	cpc	r19, r23
    2fa8:	70 e0       	ldi	r23, 0x00	; 0
    2faa:	47 07       	cpc	r20, r23
    2fac:	70 e0       	ldi	r23, 0x00	; 0
    2fae:	57 07       	cpc	r21, r23
    2fb0:	0c f4       	brge	.+2      	; 0x2fb4 <start_vertical_speed_control_right+0x160>
    2fb2:	99 c0       	rjmp	.+306    	; 0x30e6 <start_vertical_speed_control_right+0x292>
    2fb4:	80 ec       	ldi	r24, 0xC0	; 192
    2fb6:	9d e5       	ldi	r25, 0x5D	; 93
    2fb8:	a0 e0       	ldi	r26, 0x00	; 0
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	80 93 01 03 	sts	0x0301, r24
    2fc0:	90 93 02 03 	sts	0x0302, r25
    2fc4:	a0 93 03 03 	sts	0x0303, r26
    2fc8:	b0 93 04 03 	sts	0x0304, r27
    2fcc:	2c ed       	ldi	r18, 0xDC	; 220
    2fce:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    2fd0:	31 83       	std	Z+1, r19	; 0x01
    2fd2:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    2fd4:	80 91 e9 02 	lds	r24, 0x02E9
    2fd8:	90 91 ea 02 	lds	r25, 0x02EA
    2fdc:	18 16       	cp	r1, r24
    2fde:	19 06       	cpc	r1, r25
    2fe0:	0c f0       	brlt	.+2      	; 0x2fe4 <start_vertical_speed_control_right+0x190>
    2fe2:	98 c0       	rjmp	.+304    	; 0x3114 <start_vertical_speed_control_right+0x2c0>
		*pwm_right += 1;
    2fe4:	2f 5f       	subi	r18, 0xFF	; 255
    2fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe8:	31 83       	std	Z+1, r19	; 0x01
    2fea:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    2fec:	42 e0       	ldi	r20, 0x02	; 2
    2fee:	21 30       	cpi	r18, 0x01	; 1
    2ff0:	34 07       	cpc	r19, r20
    2ff2:	0c f4       	brge	.+2      	; 0x2ff6 <start_vertical_speed_control_right+0x1a2>
    2ff4:	41 c0       	rjmp	.+130    	; 0x3078 <start_vertical_speed_control_right+0x224>
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	92 e0       	ldi	r25, 0x02	; 2
    2ffa:	91 83       	std	Z+1, r25	; 0x01
    2ffc:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    2ffe:	df 91       	pop	r29
    3000:	cf 91       	pop	r28
    3002:	1f 91       	pop	r17
    3004:	0f 91       	pop	r16
    3006:	ff 90       	pop	r15
    3008:	ef 90       	pop	r14
    300a:	df 90       	pop	r13
    300c:	cf 90       	pop	r12
    300e:	08 95       	ret
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
		}
	} else if(currentAngle >= 180) {	// pointing down-left
    3010:	24 3b       	cpi	r18, 0xB4	; 180
    3012:	31 05       	cpc	r19, r1
    3014:	94 f4       	brge	.+36     	; 0x303a <start_vertical_speed_control_right+0x1e6>
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
    3016:	2a 35       	cpi	r18, 0x5A	; 90
    3018:	31 05       	cpc	r19, r1
    301a:	7c f4       	brge	.+30     	; 0x303a <start_vertical_speed_control_right+0x1e6>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
    301c:	18 16       	cp	r1, r24
    301e:	19 06       	cpc	r1, r25
    3020:	0c f0       	brlt	.+2      	; 0x3024 <start_vertical_speed_control_right+0x1d0>
    3022:	a9 c0       	rjmp	.+338    	; 0x3176 <start_vertical_speed_control_right+0x322>
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
    3024:	35 95       	asr	r19
    3026:	27 95       	ror	r18
    3028:	35 95       	asr	r19
    302a:	27 95       	ror	r18
    302c:	27 5e       	subi	r18, 0xE7	; 231
    302e:	3f 4f       	sbci	r19, 0xFF	; 255
    3030:	30 93 06 02 	sts	0x0206, r19
    3034:	20 93 05 02 	sts	0x0205, r18
    3038:	38 cf       	rjmp	.-400    	; 0x2eaa <start_vertical_speed_control_right+0x56>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
    303a:	18 16       	cp	r1, r24
    303c:	19 06       	cpc	r1, r25
    303e:	0c f0       	brlt	.+2      	; 0x3042 <start_vertical_speed_control_right+0x1ee>
    3040:	42 c0       	rjmp	.+132    	; 0x30c6 <start_vertical_speed_control_right+0x272>
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
    3042:	84 eb       	ldi	r24, 0xB4	; 180
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	82 1b       	sub	r24, r18
    3048:	93 0b       	sbc	r25, r19
    304a:	95 95       	asr	r25
    304c:	87 95       	ror	r24
    304e:	95 95       	asr	r25
    3050:	87 95       	ror	r24
    3052:	49 96       	adiw	r24, 0x19	; 25
    3054:	90 93 06 02 	sts	0x0206, r25
    3058:	80 93 05 02 	sts	0x0205, r24
    305c:	26 cf       	rjmp	.-436    	; 0x2eaa <start_vertical_speed_control_right+0x56>
void start_vertical_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    305e:	10 92 0c 03 	sts	0x030C, r1
    3062:	10 92 0b 03 	sts	0x030B, r1
		delta_right_speed_current = 0;
    3066:	10 92 09 0b 	sts	0x0B09, r1
    306a:	10 92 08 0b 	sts	0x0B08, r1
		delta_right_speed_prev = 0;
    306e:	10 92 a2 08 	sts	0x08A2, r1
    3072:	10 92 a1 08 	sts	0x08A1, r1
		return;
    3076:	c3 cf       	rjmp	.-122    	; 0x2ffe <start_vertical_speed_control_right+0x1aa>
	} else {
		*pwm_right -= 1;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    3078:	6e ef       	ldi	r22, 0xFE	; 254
    307a:	20 30       	cpi	r18, 0x00	; 0
    307c:	36 07       	cpc	r19, r22
    307e:	0c f0       	brlt	.+2      	; 0x3082 <start_vertical_speed_control_right+0x22e>
    3080:	be cf       	rjmp	.-132    	; 0x2ffe <start_vertical_speed_control_right+0x1aa>
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	9e ef       	ldi	r25, 0xFE	; 254
    3086:	91 83       	std	Z+1, r25	; 0x01
    3088:	80 83       	st	Z, r24
    308a:	b9 cf       	rjmp	.-142    	; 0x2ffe <start_vertical_speed_control_right+0x1aa>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    308c:	79 ef       	ldi	r23, 0xF9	; 249
    308e:	80 3c       	cpi	r24, 0xC0	; 192
    3090:	97 07       	cpc	r25, r23
    3092:	7c f4       	brge	.+30     	; 0x30b2 <start_vertical_speed_control_right+0x25e>
		delta_right_speed_sum = -I_LIMIT_VERTICAL;
    3094:	80 ec       	ldi	r24, 0xC0	; 192
    3096:	99 ef       	ldi	r25, 0xF9	; 249
    3098:	90 93 0c 03 	sts	0x030C, r25
    309c:	80 93 0b 03 	sts	0x030B, r24
    30a0:	20 e4       	ldi	r18, 0x40	; 64
    30a2:	c2 2e       	mov	r12, r18
    30a4:	2d ee       	ldi	r18, 0xED	; 237
    30a6:	d2 2e       	mov	r13, r18
    30a8:	2f ef       	ldi	r18, 0xFF	; 255
    30aa:	e2 2e       	mov	r14, r18
    30ac:	2f ef       	ldi	r18, 0xFF	; 255
    30ae:	f2 2e       	mov	r15, r18
    30b0:	2e cf       	rjmp	.-420    	; 0x2f0e <start_vertical_speed_control_right+0xba>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_VERTICAL ) {
		delta_right_speed_sum = I_LIMIT_VERTICAL;
	}else if(delta_right_speed_sum < -I_LIMIT_VERTICAL) {
    30b2:	6c 01       	movw	r12, r24
    30b4:	cc 0c       	add	r12, r12
    30b6:	dd 1c       	adc	r13, r13
    30b8:	c8 0e       	add	r12, r24
    30ba:	d9 1e       	adc	r13, r25
    30bc:	ee 24       	eor	r14, r14
    30be:	d7 fc       	sbrc	r13, 7
    30c0:	e0 94       	com	r14
    30c2:	fe 2c       	mov	r15, r14
    30c4:	24 cf       	rjmp	.-440    	; 0x2f0e <start_vertical_speed_control_right+0xba>
		}
	} else if(currentAngle >= 90) {		// pointing up-left
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + ((180 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - ((180 - currentAngle)>>2);
    30c6:	84 eb       	ldi	r24, 0xB4	; 180
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	e1 ce       	rjmp	.-574    	; 0x2e8e <start_vertical_speed_control_right+0x3a>
	pwm_right_speed_controller += (signed long int)(P_VERTICAL * delta_right_speed_current);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_VERTICAL);
	pwm_right_speed_controller += (signed long int)(I_VERTICAL*delta_right_speed_sum);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    30cc:	17 fd       	sbrc	r17, 7
    30ce:	0b c0       	rjmp	.+22     	; 0x30e6 <start_vertical_speed_control_right+0x292>
		pwm_right_speed_controller = 0;
    30d0:	10 92 01 03 	sts	0x0301, r1
    30d4:	10 92 02 03 	sts	0x0302, r1
    30d8:	10 92 03 03 	sts	0x0303, r1
    30dc:	10 92 04 03 	sts	0x0304, r1
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    30e6:	20 34       	cpi	r18, 0x40	; 64
    30e8:	82 ea       	ldi	r24, 0xA2	; 162
    30ea:	38 07       	cpc	r19, r24
    30ec:	8f ef       	ldi	r24, 0xFF	; 255
    30ee:	48 07       	cpc	r20, r24
    30f0:	8f ef       	ldi	r24, 0xFF	; 255
    30f2:	58 07       	cpc	r21, r24
    30f4:	54 f5       	brge	.+84     	; 0x314a <start_vertical_speed_control_right+0x2f6>
    30f6:	80 e4       	ldi	r24, 0x40	; 64
    30f8:	92 ea       	ldi	r25, 0xA2	; 162
    30fa:	af ef       	ldi	r26, 0xFF	; 255
    30fc:	bf ef       	ldi	r27, 0xFF	; 255
    30fe:	80 93 01 03 	sts	0x0301, r24
    3102:	90 93 02 03 	sts	0x0302, r25
    3106:	a0 93 03 03 	sts	0x0303, r26
    310a:	b0 93 04 03 	sts	0x0304, r27
    310e:	24 e2       	ldi	r18, 0x24	; 36
    3110:	3a ef       	ldi	r19, 0xFA	; 250
    3112:	5e cf       	rjmp	.-324    	; 0x2fd0 <start_vertical_speed_control_right+0x17c>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    3114:	21 50       	subi	r18, 0x01	; 1
    3116:	30 40       	sbci	r19, 0x00	; 0
    3118:	31 83       	std	Z+1, r19	; 0x01
    311a:	20 83       	st	Z, r18
    311c:	67 cf       	rjmp	.-306    	; 0x2fec <start_vertical_speed_control_right+0x198>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    311e:	a0 91 f3 02 	lds	r26, 0x02F3
    3122:	b0 91 f4 02 	lds	r27, 0x02F4
    3126:	a8 0f       	add	r26, r24
    3128:	b9 1f       	adc	r27, r25
    312a:	b0 93 09 0b 	sts	0x0B09, r27
    312e:	a0 93 08 0b 	sts	0x0B08, r26
    3132:	d2 ce       	rjmp	.-604    	; 0x2ed8 <start_vertical_speed_control_right+0x84>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    3134:	10 92 01 03 	sts	0x0301, r1
    3138:	10 92 02 03 	sts	0x0302, r1
    313c:	10 92 03 03 	sts	0x0303, r1
    3140:	10 92 04 03 	sts	0x0304, r1
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    314a:	64 e0       	ldi	r22, 0x04	; 4
    314c:	55 95       	asr	r21
    314e:	47 95       	ror	r20
    3150:	37 95       	ror	r19
    3152:	27 95       	ror	r18
    3154:	6a 95       	dec	r22
    3156:	d1 f7       	brne	.-12     	; 0x314c <start_vertical_speed_control_right+0x2f8>
    3158:	3b cf       	rjmp	.-394    	; 0x2fd0 <start_vertical_speed_control_right+0x17c>
	// change the feedforward based on the current measured angle
	if(currentAngle >= 270) {			// pointing down-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF - ((360 - currentAngle)>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF + ((360 - currentAngle)>>2);
    315a:	88 e6       	ldi	r24, 0x68	; 104
    315c:	91 e0       	ldi	r25, 0x01	; 1
    315e:	82 1b       	sub	r24, r18
    3160:	93 0b       	sbc	r25, r19
    3162:	95 95       	asr	r25
    3164:	87 95       	ror	r24
    3166:	95 95       	asr	r25
    3168:	87 95       	ror	r24
    316a:	49 96       	adiw	r24, 0x19	; 25
    316c:	90 93 06 02 	sts	0x0206, r25
    3170:	80 93 05 02 	sts	0x0205, r24
    3174:	9a ce       	rjmp	.-716    	; 0x2eaa <start_vertical_speed_control_right+0x56>
		}
	} else {							// pointing up-right
		if(*pwm_right > 0) {
			k_ff_speed_control_right = INIT_KFF + (currentAngle>>2);
		} else {
			k_ff_speed_control_right = INIT_KFF - (currentAngle>>2);
    3176:	35 95       	asr	r19
    3178:	27 95       	ror	r18
    317a:	35 95       	asr	r19
    317c:	27 95       	ror	r18
    317e:	89 e1       	ldi	r24, 0x19	; 25
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	82 1b       	sub	r24, r18
    3184:	93 0b       	sbc	r25, r19
    3186:	90 93 06 02 	sts	0x0206, r25
    318a:	80 93 05 02 	sts	0x0205, r24
    318e:	8d ce       	rjmp	.-742    	; 0x2eaa <start_vertical_speed_control_right+0x56>

00003190 <start_horizontal_speed_control_right>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_right(signed int *pwm_right) {
    3190:	cf 92       	push	r12
    3192:	df 92       	push	r13
    3194:	ef 92       	push	r14
    3196:	ff 92       	push	r15
    3198:	0f 93       	push	r16
    319a:	1f 93       	push	r17
    319c:	cf 93       	push	r28
    319e:	df 93       	push	r29
    31a0:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    31a2:	80 81       	ld	r24, Z
    31a4:	91 81       	ldd	r25, Z+1	; 0x01
    31a6:	00 97       	sbiw	r24, 0x00	; 0
    31a8:	09 f4       	brne	.+2      	; 0x31ac <start_horizontal_speed_control_right+0x1c>
    31aa:	b8 c0       	rjmp	.+368    	; 0x331c <start_horizontal_speed_control_right+0x18c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    31ac:	c0 91 08 0b 	lds	r28, 0x0B08
    31b0:	d0 91 09 0b 	lds	r29, 0x0B09
    31b4:	d0 93 a2 08 	sts	0x08A2, r29
    31b8:	c0 93 a1 08 	sts	0x08A1, r28
	if(*pwm_right >= 0) {
    31bc:	80 81       	ld	r24, Z
    31be:	91 81       	ldd	r25, Z+1	; 0x01
    31c0:	97 fd       	sbrc	r25, 7
    31c2:	cd c0       	rjmp	.+410    	; 0x335e <start_horizontal_speed_control_right+0x1ce>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    31c4:	20 91 f3 02 	lds	r18, 0x02F3
    31c8:	30 91 f4 02 	lds	r19, 0x02F4
    31cc:	dc 01       	movw	r26, r24
    31ce:	a2 1b       	sub	r26, r18
    31d0:	b3 0b       	sbc	r27, r19
    31d2:	b0 93 09 0b 	sts	0x0B09, r27
    31d6:	a0 93 08 0b 	sts	0x0B08, r26
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    31da:	c0 90 0b 03 	lds	r12, 0x030B
    31de:	d0 90 0c 03 	lds	r13, 0x030C
    31e2:	ca 0e       	add	r12, r26
    31e4:	db 1e       	adc	r13, r27
    31e6:	d0 92 0c 03 	sts	0x030C, r13
    31ea:	c0 92 0b 03 	sts	0x030B, r12

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
    31ee:	81 e4       	ldi	r24, 0x41	; 65
    31f0:	c8 16       	cp	r12, r24
    31f2:	86 e0       	ldi	r24, 0x06	; 6
    31f4:	d8 06       	cpc	r13, r24
    31f6:	0c f4       	brge	.+2      	; 0x31fa <start_horizontal_speed_control_right+0x6a>
    31f8:	9e c0       	rjmp	.+316    	; 0x3336 <start_horizontal_speed_control_right+0x1a6>
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
    31fa:	80 e4       	ldi	r24, 0x40	; 64
    31fc:	96 e0       	ldi	r25, 0x06	; 6
    31fe:	90 93 0c 03 	sts	0x030C, r25
    3202:	80 93 0b 03 	sts	0x030B, r24
    3206:	10 e8       	ldi	r17, 0x80	; 128
    3208:	c1 2e       	mov	r12, r17
    320a:	1c e0       	ldi	r17, 0x0C	; 12
    320c:	d1 2e       	mov	r13, r17
    320e:	e1 2c       	mov	r14, r1
    3210:	f1 2c       	mov	r15, r1
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    3212:	00 81       	ld	r16, Z
    3214:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    3216:	cd 01       	movw	r24, r26
    3218:	88 0f       	add	r24, r24
    321a:	99 1f       	adc	r25, r25
    321c:	8a 0f       	add	r24, r26
    321e:	9b 1f       	adc	r25, r27
    3220:	9c 01       	movw	r18, r24
    3222:	22 0f       	add	r18, r18
    3224:	33 1f       	adc	r19, r19
    3226:	22 0f       	add	r18, r18
    3228:	33 1f       	adc	r19, r19
    322a:	28 0f       	add	r18, r24
    322c:	39 1f       	adc	r19, r25
    322e:	44 27       	eor	r20, r20
    3230:	37 fd       	sbrc	r19, 7
    3232:	40 95       	com	r20
    3234:	54 2f       	mov	r21, r20
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    3236:	b8 01       	movw	r22, r16
    3238:	66 0f       	add	r22, r22
    323a:	77 1f       	adc	r23, r23
    323c:	66 0f       	add	r22, r22
    323e:	77 1f       	adc	r23, r23
    3240:	66 0f       	add	r22, r22
    3242:	77 1f       	adc	r23, r23
    3244:	88 27       	eor	r24, r24
    3246:	77 fd       	sbrc	r23, 7
    3248:	80 95       	com	r24
    324a:	98 2f       	mov	r25, r24
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
    324c:	26 0f       	add	r18, r22
    324e:	37 1f       	adc	r19, r23
    3250:	48 1f       	adc	r20, r24
    3252:	59 1f       	adc	r21, r25
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
    3254:	ac 1b       	sub	r26, r28
    3256:	bd 0b       	sbc	r27, r29
    3258:	cd 01       	movw	r24, r26
    325a:	88 0f       	add	r24, r24
    325c:	99 1f       	adc	r25, r25
    325e:	8a 0f       	add	r24, r26
    3260:	9b 1f       	adc	r25, r27
    3262:	aa 27       	eor	r26, r26
    3264:	97 fd       	sbrc	r25, 7
    3266:	a0 95       	com	r26
    3268:	ba 2f       	mov	r27, r26
    326a:	28 0f       	add	r18, r24
    326c:	39 1f       	adc	r19, r25
    326e:	4a 1f       	adc	r20, r26
    3270:	5b 1f       	adc	r21, r27
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);
    3272:	2c 0d       	add	r18, r12
    3274:	3d 1d       	adc	r19, r13
    3276:	4e 1d       	adc	r20, r14
    3278:	5f 1d       	adc	r21, r15
    327a:	20 93 01 03 	sts	0x0301, r18
    327e:	30 93 02 03 	sts	0x0302, r19
    3282:	40 93 03 03 	sts	0x0303, r20
    3286:	50 93 04 03 	sts	0x0304, r21

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    328a:	57 fd       	sbrc	r21, 7
    328c:	7a c0       	rjmp	.+244    	; 0x3382 <start_horizontal_speed_control_right+0x1f2>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    328e:	12 16       	cp	r1, r18
    3290:	13 06       	cpc	r1, r19
    3292:	14 06       	cpc	r1, r20
    3294:	15 06       	cpc	r1, r21
    3296:	0c f0       	brlt	.+2      	; 0x329a <start_horizontal_speed_control_right+0x10a>
    3298:	81 c0       	rjmp	.+258    	; 0x339c <start_horizontal_speed_control_right+0x20c>
    329a:	17 fd       	sbrc	r17, 7
    329c:	ad c0       	rjmp	.+346    	; 0x33f8 <start_horizontal_speed_control_right+0x268>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    329e:	21 3c       	cpi	r18, 0xC1	; 193
    32a0:	8d e5       	ldi	r24, 0x5D	; 93
    32a2:	38 07       	cpc	r19, r24
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	48 07       	cpc	r20, r24
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	58 07       	cpc	r21, r24
    32ac:	0c f4       	brge	.+2      	; 0x32b0 <start_horizontal_speed_control_right+0x120>
    32ae:	76 c0       	rjmp	.+236    	; 0x339c <start_horizontal_speed_control_right+0x20c>
    32b0:	80 ec       	ldi	r24, 0xC0	; 192
    32b2:	9d e5       	ldi	r25, 0x5D	; 93
    32b4:	a0 e0       	ldi	r26, 0x00	; 0
    32b6:	b0 e0       	ldi	r27, 0x00	; 0
    32b8:	80 93 01 03 	sts	0x0301, r24
    32bc:	90 93 02 03 	sts	0x0302, r25
    32c0:	a0 93 03 03 	sts	0x0303, r26
    32c4:	b0 93 04 03 	sts	0x0304, r27
    32c8:	2c ed       	ldi	r18, 0xDC	; 220
    32ca:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    32cc:	31 83       	std	Z+1, r19	; 0x01
    32ce:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    32d0:	80 91 e9 02 	lds	r24, 0x02E9
    32d4:	90 91 ea 02 	lds	r25, 0x02EA
    32d8:	18 16       	cp	r1, r24
    32da:	19 06       	cpc	r1, r25
    32dc:	0c f0       	brlt	.+2      	; 0x32e0 <start_horizontal_speed_control_right+0x150>
    32de:	87 c0       	rjmp	.+270    	; 0x33ee <start_horizontal_speed_control_right+0x25e>
		*pwm_right += 1;
    32e0:	2f 5f       	subi	r18, 0xFF	; 255
    32e2:	3f 4f       	sbci	r19, 0xFF	; 255
    32e4:	31 83       	std	Z+1, r19	; 0x01
    32e6:	20 83       	st	Z, r18
	} else {
		*pwm_right -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
    32e8:	12 16       	cp	r1, r18
    32ea:	13 06       	cpc	r1, r19
    32ec:	0c f0       	brlt	.+2      	; 0x32f0 <start_horizontal_speed_control_right+0x160>
    32ee:	6d c0       	rjmp	.+218    	; 0x33ca <start_horizontal_speed_control_right+0x23a>
		*pwm_right += 30;
    32f0:	22 5e       	subi	r18, 0xE2	; 226
    32f2:	3f 4f       	sbci	r19, 0xFF	; 255
    32f4:	31 83       	std	Z+1, r19	; 0x01
    32f6:	20 83       	st	Z, r18
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    32f8:	82 e0       	ldi	r24, 0x02	; 2
    32fa:	21 30       	cpi	r18, 0x01	; 1
    32fc:	38 07       	cpc	r19, r24
    32fe:	0c f4       	brge	.+2      	; 0x3302 <start_horizontal_speed_control_right+0x172>
    3300:	6c c0       	rjmp	.+216    	; 0x33da <start_horizontal_speed_control_right+0x24a>
    3302:	80 e0       	ldi	r24, 0x00	; 0
    3304:	92 e0       	ldi	r25, 0x02	; 2
    3306:	91 83       	std	Z+1, r25	; 0x01
    3308:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    330a:	df 91       	pop	r29
    330c:	cf 91       	pop	r28
    330e:	1f 91       	pop	r17
    3310:	0f 91       	pop	r16
    3312:	ff 90       	pop	r15
    3314:	ef 90       	pop	r14
    3316:	df 90       	pop	r13
    3318:	cf 90       	pop	r12
    331a:	08 95       	ret
void start_horizontal_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    331c:	10 92 0c 03 	sts	0x030C, r1
    3320:	10 92 0b 03 	sts	0x030B, r1
		delta_right_speed_current = 0;
    3324:	10 92 09 0b 	sts	0x0B09, r1
    3328:	10 92 08 0b 	sts	0x0B08, r1
		delta_right_speed_prev = 0;
    332c:	10 92 a2 08 	sts	0x08A2, r1
    3330:	10 92 a1 08 	sts	0x08A1, r1
		return;
    3334:	ea cf       	rjmp	.-44     	; 0x330a <start_horizontal_speed_control_right+0x17a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    3336:	80 ec       	ldi	r24, 0xC0	; 192
    3338:	c8 16       	cp	r12, r24
    333a:	89 ef       	ldi	r24, 0xF9	; 249
    333c:	d8 06       	cpc	r13, r24
    333e:	d4 f4       	brge	.+52     	; 0x3374 <start_horizontal_speed_control_right+0x1e4>
		delta_right_speed_sum = -I_LIMIT_HORIZONTAL;
    3340:	80 ec       	ldi	r24, 0xC0	; 192
    3342:	99 ef       	ldi	r25, 0xF9	; 249
    3344:	90 93 0c 03 	sts	0x030C, r25
    3348:	80 93 0b 03 	sts	0x030B, r24
    334c:	60 e8       	ldi	r22, 0x80	; 128
    334e:	c6 2e       	mov	r12, r22
    3350:	63 ef       	ldi	r22, 0xF3	; 243
    3352:	d6 2e       	mov	r13, r22
    3354:	6f ef       	ldi	r22, 0xFF	; 255
    3356:	e6 2e       	mov	r14, r22
    3358:	6f ef       	ldi	r22, 0xFF	; 255
    335a:	f6 2e       	mov	r15, r22
    335c:	5a cf       	rjmp	.-332    	; 0x3212 <start_horizontal_speed_control_right+0x82>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    335e:	a0 91 f3 02 	lds	r26, 0x02F3
    3362:	b0 91 f4 02 	lds	r27, 0x02F4
    3366:	a8 0f       	add	r26, r24
    3368:	b9 1f       	adc	r27, r25
    336a:	b0 93 09 0b 	sts	0x0B09, r27
    336e:	a0 93 08 0b 	sts	0x0B08, r26
    3372:	33 cf       	rjmp	.-410    	; 0x31da <start_horizontal_speed_control_right+0x4a>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT_HORIZONTAL ) {
		delta_right_speed_sum = I_LIMIT_HORIZONTAL;
	}else if(delta_right_speed_sum < -I_LIMIT_HORIZONTAL) {
    3374:	cc 0c       	add	r12, r12
    3376:	dd 1c       	adc	r13, r13
    3378:	ee 24       	eor	r14, r14
    337a:	d7 fc       	sbrc	r13, 7
    337c:	e0 94       	com	r14
    337e:	fe 2c       	mov	r15, r14
    3380:	48 cf       	rjmp	.-368    	; 0x3212 <start_horizontal_speed_control_right+0x82>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_HORIZONTAL);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    3382:	17 fd       	sbrc	r17, 7
    3384:	0b c0       	rjmp	.+22     	; 0x339c <start_horizontal_speed_control_right+0x20c>
		pwm_right_speed_controller = 0;
    3386:	10 92 01 03 	sts	0x0301, r1
    338a:	10 92 02 03 	sts	0x0302, r1
    338e:	10 92 03 03 	sts	0x0303, r1
    3392:	10 92 04 03 	sts	0x0304, r1
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	a9 01       	movw	r20, r18
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    339c:	20 34       	cpi	r18, 0x40	; 64
    339e:	82 ea       	ldi	r24, 0xA2	; 162
    33a0:	38 07       	cpc	r19, r24
    33a2:	8f ef       	ldi	r24, 0xFF	; 255
    33a4:	48 07       	cpc	r20, r24
    33a6:	8f ef       	ldi	r24, 0xFF	; 255
    33a8:	58 07       	cpc	r21, r24
    33aa:	8c f5       	brge	.+98     	; 0x340e <start_horizontal_speed_control_right+0x27e>
    33ac:	80 e4       	ldi	r24, 0x40	; 64
    33ae:	92 ea       	ldi	r25, 0xA2	; 162
    33b0:	af ef       	ldi	r26, 0xFF	; 255
    33b2:	bf ef       	ldi	r27, 0xFF	; 255
    33b4:	80 93 01 03 	sts	0x0301, r24
    33b8:	90 93 02 03 	sts	0x0302, r25
    33bc:	a0 93 03 03 	sts	0x0303, r26
    33c0:	b0 93 04 03 	sts	0x0304, r27
    33c4:	24 e2       	ldi	r18, 0x24	; 36
    33c6:	3a ef       	ldi	r19, 0xFA	; 250
    33c8:	81 cf       	rjmp	.-254    	; 0x32cc <start_horizontal_speed_control_right+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_right > 0) {
		*pwm_right += 30;
	} else if(*pwm_right < 0) {
    33ca:	21 15       	cp	r18, r1
    33cc:	31 05       	cpc	r19, r1
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <start_horizontal_speed_control_right+0x242>
    33d0:	9c cf       	rjmp	.-200    	; 0x330a <start_horizontal_speed_control_right+0x17a>
		*pwm_right -= 30;
    33d2:	2e 51       	subi	r18, 0x1E	; 30
    33d4:	30 40       	sbci	r19, 0x00	; 0
    33d6:	31 83       	std	Z+1, r19	; 0x01
    33d8:	20 83       	st	Z, r18
	}

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    33da:	8e ef       	ldi	r24, 0xFE	; 254
    33dc:	20 30       	cpi	r18, 0x00	; 0
    33de:	38 07       	cpc	r19, r24
    33e0:	0c f0       	brlt	.+2      	; 0x33e4 <start_horizontal_speed_control_right+0x254>
    33e2:	93 cf       	rjmp	.-218    	; 0x330a <start_horizontal_speed_control_right+0x17a>
    33e4:	80 e0       	ldi	r24, 0x00	; 0
    33e6:	9e ef       	ldi	r25, 0xFE	; 254
    33e8:	91 83       	std	Z+1, r25	; 0x01
    33ea:	80 83       	st	Z, r24
    33ec:	8e cf       	rjmp	.-228    	; 0x330a <start_horizontal_speed_control_right+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    33ee:	21 50       	subi	r18, 0x01	; 1
    33f0:	30 40       	sbci	r19, 0x00	; 0
    33f2:	31 83       	std	Z+1, r19	; 0x01
    33f4:	20 83       	st	Z, r18
    33f6:	78 cf       	rjmp	.-272    	; 0x32e8 <start_horizontal_speed_control_right+0x158>
	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    33f8:	10 92 01 03 	sts	0x0301, r1
    33fc:	10 92 02 03 	sts	0x0302, r1
    3400:	10 92 03 03 	sts	0x0303, r1
    3404:	10 92 04 03 	sts	0x0304, r1
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	a9 01       	movw	r20, r18
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    340e:	14 e0       	ldi	r17, 0x04	; 4
    3410:	55 95       	asr	r21
    3412:	47 95       	ror	r20
    3414:	37 95       	ror	r19
    3416:	27 95       	ror	r18
    3418:	1a 95       	dec	r17
    341a:	d1 f7       	brne	.-12     	; 0x3410 <start_horizontal_speed_control_right+0x280>
    341c:	57 cf       	rjmp	.-338    	; 0x32cc <start_horizontal_speed_control_right+0x13c>

0000341e <start_horizontal_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_horizontal_speed_control_left(signed int *pwm_left) {
    341e:	cf 92       	push	r12
    3420:	df 92       	push	r13
    3422:	ef 92       	push	r14
    3424:	ff 92       	push	r15
    3426:	0f 93       	push	r16
    3428:	1f 93       	push	r17
    342a:	cf 93       	push	r28
    342c:	df 93       	push	r29
    342e:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    3430:	80 81       	ld	r24, Z
    3432:	91 81       	ldd	r25, Z+1	; 0x01
    3434:	00 97       	sbiw	r24, 0x00	; 0
    3436:	09 f4       	brne	.+2      	; 0x343a <start_horizontal_speed_control_left+0x1c>
    3438:	b8 c0       	rjmp	.+368    	; 0x35aa <start_horizontal_speed_control_left+0x18c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    343a:	c0 91 52 05 	lds	r28, 0x0552
    343e:	d0 91 53 05 	lds	r29, 0x0553
    3442:	d0 93 6a 09 	sts	0x096A, r29
    3446:	c0 93 69 09 	sts	0x0969, r28
	if(*pwm_left >= 0) {
    344a:	80 81       	ld	r24, Z
    344c:	91 81       	ldd	r25, Z+1	; 0x01
    344e:	97 fd       	sbrc	r25, 7
    3450:	cd c0       	rjmp	.+410    	; 0x35ec <start_horizontal_speed_control_left+0x1ce>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    3452:	20 91 f1 02 	lds	r18, 0x02F1
    3456:	30 91 f2 02 	lds	r19, 0x02F2
    345a:	dc 01       	movw	r26, r24
    345c:	a2 1b       	sub	r26, r18
    345e:	b3 0b       	sbc	r27, r19
    3460:	b0 93 53 05 	sts	0x0553, r27
    3464:	a0 93 52 05 	sts	0x0552, r26
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    3468:	c0 90 09 03 	lds	r12, 0x0309
    346c:	d0 90 0a 03 	lds	r13, 0x030A
    3470:	ca 0e       	add	r12, r26
    3472:	db 1e       	adc	r13, r27
    3474:	d0 92 0a 03 	sts	0x030A, r13
    3478:	c0 92 09 03 	sts	0x0309, r12

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
    347c:	81 e4       	ldi	r24, 0x41	; 65
    347e:	c8 16       	cp	r12, r24
    3480:	86 e0       	ldi	r24, 0x06	; 6
    3482:	d8 06       	cpc	r13, r24
    3484:	0c f4       	brge	.+2      	; 0x3488 <start_horizontal_speed_control_left+0x6a>
    3486:	9e c0       	rjmp	.+316    	; 0x35c4 <start_horizontal_speed_control_left+0x1a6>
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
    3488:	80 e4       	ldi	r24, 0x40	; 64
    348a:	96 e0       	ldi	r25, 0x06	; 6
    348c:	90 93 0a 03 	sts	0x030A, r25
    3490:	80 93 09 03 	sts	0x0309, r24
    3494:	10 e8       	ldi	r17, 0x80	; 128
    3496:	c1 2e       	mov	r12, r17
    3498:	1c e0       	ldi	r17, 0x0C	; 12
    349a:	d1 2e       	mov	r13, r17
    349c:	e1 2c       	mov	r14, r1
    349e:	f1 2c       	mov	r15, r1
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    34a0:	00 81       	ld	r16, Z
    34a2:	11 81       	ldd	r17, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    34a4:	cd 01       	movw	r24, r26
    34a6:	88 0f       	add	r24, r24
    34a8:	99 1f       	adc	r25, r25
    34aa:	8a 0f       	add	r24, r26
    34ac:	9b 1f       	adc	r25, r27
    34ae:	9c 01       	movw	r18, r24
    34b0:	22 0f       	add	r18, r18
    34b2:	33 1f       	adc	r19, r19
    34b4:	22 0f       	add	r18, r18
    34b6:	33 1f       	adc	r19, r19
    34b8:	28 0f       	add	r18, r24
    34ba:	39 1f       	adc	r19, r25
    34bc:	44 27       	eor	r20, r20
    34be:	37 fd       	sbrc	r19, 7
    34c0:	40 95       	com	r20
    34c2:	54 2f       	mov	r21, r20
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    34c4:	b8 01       	movw	r22, r16
    34c6:	66 0f       	add	r22, r22
    34c8:	77 1f       	adc	r23, r23
    34ca:	66 0f       	add	r22, r22
    34cc:	77 1f       	adc	r23, r23
    34ce:	66 0f       	add	r22, r22
    34d0:	77 1f       	adc	r23, r23
    34d2:	88 27       	eor	r24, r24
    34d4:	77 fd       	sbrc	r23, 7
    34d6:	80 95       	com	r24
    34d8:	98 2f       	mov	r25, r24
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
    34da:	26 0f       	add	r18, r22
    34dc:	37 1f       	adc	r19, r23
    34de:	48 1f       	adc	r20, r24
    34e0:	59 1f       	adc	r21, r25
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
    34e2:	ac 1b       	sub	r26, r28
    34e4:	bd 0b       	sbc	r27, r29
    34e6:	cd 01       	movw	r24, r26
    34e8:	88 0f       	add	r24, r24
    34ea:	99 1f       	adc	r25, r25
    34ec:	8a 0f       	add	r24, r26
    34ee:	9b 1f       	adc	r25, r27
    34f0:	aa 27       	eor	r26, r26
    34f2:	97 fd       	sbrc	r25, 7
    34f4:	a0 95       	com	r26
    34f6:	ba 2f       	mov	r27, r26
    34f8:	28 0f       	add	r18, r24
    34fa:	39 1f       	adc	r19, r25
    34fc:	4a 1f       	adc	r20, r26
    34fe:	5b 1f       	adc	r21, r27
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);
    3500:	2c 0d       	add	r18, r12
    3502:	3d 1d       	adc	r19, r13
    3504:	4e 1d       	adc	r20, r14
    3506:	5f 1d       	adc	r21, r15
    3508:	20 93 05 03 	sts	0x0305, r18
    350c:	30 93 06 03 	sts	0x0306, r19
    3510:	40 93 07 03 	sts	0x0307, r20
    3514:	50 93 08 03 	sts	0x0308, r21

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3518:	57 fd       	sbrc	r21, 7
    351a:	7a c0       	rjmp	.+244    	; 0x3610 <start_horizontal_speed_control_left+0x1f2>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    351c:	12 16       	cp	r1, r18
    351e:	13 06       	cpc	r1, r19
    3520:	14 06       	cpc	r1, r20
    3522:	15 06       	cpc	r1, r21
    3524:	0c f0       	brlt	.+2      	; 0x3528 <start_horizontal_speed_control_left+0x10a>
    3526:	81 c0       	rjmp	.+258    	; 0x362a <start_horizontal_speed_control_left+0x20c>
    3528:	17 fd       	sbrc	r17, 7
    352a:	ad c0       	rjmp	.+346    	; 0x3686 <start_horizontal_speed_control_left+0x268>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    352c:	21 3c       	cpi	r18, 0xC1	; 193
    352e:	8d e5       	ldi	r24, 0x5D	; 93
    3530:	38 07       	cpc	r19, r24
    3532:	80 e0       	ldi	r24, 0x00	; 0
    3534:	48 07       	cpc	r20, r24
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	58 07       	cpc	r21, r24
    353a:	0c f4       	brge	.+2      	; 0x353e <start_horizontal_speed_control_left+0x120>
    353c:	76 c0       	rjmp	.+236    	; 0x362a <start_horizontal_speed_control_left+0x20c>
    353e:	80 ec       	ldi	r24, 0xC0	; 192
    3540:	9d e5       	ldi	r25, 0x5D	; 93
    3542:	a0 e0       	ldi	r26, 0x00	; 0
    3544:	b0 e0       	ldi	r27, 0x00	; 0
    3546:	80 93 05 03 	sts	0x0305, r24
    354a:	90 93 06 03 	sts	0x0306, r25
    354e:	a0 93 07 03 	sts	0x0307, r26
    3552:	b0 93 08 03 	sts	0x0308, r27
    3556:	2c ed       	ldi	r18, 0xDC	; 220
    3558:	35 e0       	ldi	r19, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    355a:	31 83       	std	Z+1, r19	; 0x01
    355c:	20 83       	st	Z, r18

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    355e:	80 91 eb 02 	lds	r24, 0x02EB
    3562:	90 91 ec 02 	lds	r25, 0x02EC
    3566:	18 16       	cp	r1, r24
    3568:	19 06       	cpc	r1, r25
    356a:	0c f0       	brlt	.+2      	; 0x356e <start_horizontal_speed_control_left+0x150>
    356c:	87 c0       	rjmp	.+270    	; 0x367c <start_horizontal_speed_control_left+0x25e>
		*pwm_left += 1;
    356e:	2f 5f       	subi	r18, 0xFF	; 255
    3570:	3f 4f       	sbci	r19, 0xFF	; 255
    3572:	31 83       	std	Z+1, r19	; 0x01
    3574:	20 83       	st	Z, r18
	} else {
		*pwm_left -= 1;
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
    3576:	12 16       	cp	r1, r18
    3578:	13 06       	cpc	r1, r19
    357a:	0c f0       	brlt	.+2      	; 0x357e <start_horizontal_speed_control_left+0x160>
    357c:	6d c0       	rjmp	.+218    	; 0x3658 <start_horizontal_speed_control_left+0x23a>
		*pwm_left += 30;
    357e:	22 5e       	subi	r18, 0xE2	; 226
    3580:	3f 4f       	sbci	r19, 0xFF	; 255
    3582:	31 83       	std	Z+1, r19	; 0x01
    3584:	20 83       	st	Z, r18
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    3586:	82 e0       	ldi	r24, 0x02	; 2
    3588:	21 30       	cpi	r18, 0x01	; 1
    358a:	38 07       	cpc	r19, r24
    358c:	0c f4       	brge	.+2      	; 0x3590 <start_horizontal_speed_control_left+0x172>
    358e:	6c c0       	rjmp	.+216    	; 0x3668 <start_horizontal_speed_control_left+0x24a>
    3590:	80 e0       	ldi	r24, 0x00	; 0
    3592:	92 e0       	ldi	r25, 0x02	; 2
    3594:	91 83       	std	Z+1, r25	; 0x01
    3596:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    3598:	df 91       	pop	r29
    359a:	cf 91       	pop	r28
    359c:	1f 91       	pop	r17
    359e:	0f 91       	pop	r16
    35a0:	ff 90       	pop	r15
    35a2:	ef 90       	pop	r14
    35a4:	df 90       	pop	r13
    35a6:	cf 90       	pop	r12
    35a8:	08 95       	ret
void start_horizontal_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    35aa:	10 92 0a 03 	sts	0x030A, r1
    35ae:	10 92 09 03 	sts	0x0309, r1
		delta_left_speed_current = 0;
    35b2:	10 92 53 05 	sts	0x0553, r1
    35b6:	10 92 52 05 	sts	0x0552, r1
		delta_left_speed_prev = 0;
    35ba:	10 92 6a 09 	sts	0x096A, r1
    35be:	10 92 69 09 	sts	0x0969, r1
		return;
    35c2:	ea cf       	rjmp	.-44     	; 0x3598 <start_horizontal_speed_control_left+0x17a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    35c4:	80 ec       	ldi	r24, 0xC0	; 192
    35c6:	c8 16       	cp	r12, r24
    35c8:	89 ef       	ldi	r24, 0xF9	; 249
    35ca:	d8 06       	cpc	r13, r24
    35cc:	d4 f4       	brge	.+52     	; 0x3602 <start_horizontal_speed_control_left+0x1e4>
		delta_left_speed_sum = -I_LIMIT_HORIZONTAL;
    35ce:	80 ec       	ldi	r24, 0xC0	; 192
    35d0:	99 ef       	ldi	r25, 0xF9	; 249
    35d2:	90 93 0a 03 	sts	0x030A, r25
    35d6:	80 93 09 03 	sts	0x0309, r24
    35da:	60 e8       	ldi	r22, 0x80	; 128
    35dc:	c6 2e       	mov	r12, r22
    35de:	63 ef       	ldi	r22, 0xF3	; 243
    35e0:	d6 2e       	mov	r13, r22
    35e2:	6f ef       	ldi	r22, 0xFF	; 255
    35e4:	e6 2e       	mov	r14, r22
    35e6:	6f ef       	ldi	r22, 0xFF	; 255
    35e8:	f6 2e       	mov	r15, r22
    35ea:	5a cf       	rjmp	.-332    	; 0x34a0 <start_horizontal_speed_control_left+0x82>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    35ec:	a0 91 f1 02 	lds	r26, 0x02F1
    35f0:	b0 91 f2 02 	lds	r27, 0x02F2
    35f4:	a8 0f       	add	r26, r24
    35f6:	b9 1f       	adc	r27, r25
    35f8:	b0 93 53 05 	sts	0x0553, r27
    35fc:	a0 93 52 05 	sts	0x0552, r26
    3600:	33 cf       	rjmp	.-410    	; 0x3468 <start_horizontal_speed_control_left+0x4a>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT_HORIZONTAL) {
		delta_left_speed_sum = I_LIMIT_HORIZONTAL;
	} else if(delta_left_speed_sum < -I_LIMIT_HORIZONTAL) {
    3602:	cc 0c       	add	r12, r12
    3604:	dd 1c       	adc	r13, r13
    3606:	ee 24       	eor	r14, r14
    3608:	d7 fc       	sbrc	r13, 7
    360a:	e0 94       	com	r14
    360c:	fe 2c       	mov	r15, r14
    360e:	48 cf       	rjmp	.-368    	; 0x34a0 <start_horizontal_speed_control_left+0x82>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_HORIZONTAL);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_HORIZONTAL);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    3610:	17 fd       	sbrc	r17, 7
    3612:	0b c0       	rjmp	.+22     	; 0x362a <start_horizontal_speed_control_left+0x20c>
		pwm_left_speed_controller = 0;
    3614:	10 92 05 03 	sts	0x0305, r1
    3618:	10 92 06 03 	sts	0x0306, r1
    361c:	10 92 07 03 	sts	0x0307, r1
    3620:	10 92 08 03 	sts	0x0308, r1
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	a9 01       	movw	r20, r18
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    362a:	20 34       	cpi	r18, 0x40	; 64
    362c:	82 ea       	ldi	r24, 0xA2	; 162
    362e:	38 07       	cpc	r19, r24
    3630:	8f ef       	ldi	r24, 0xFF	; 255
    3632:	48 07       	cpc	r20, r24
    3634:	8f ef       	ldi	r24, 0xFF	; 255
    3636:	58 07       	cpc	r21, r24
    3638:	8c f5       	brge	.+98     	; 0x369c <start_horizontal_speed_control_left+0x27e>
    363a:	80 e4       	ldi	r24, 0x40	; 64
    363c:	92 ea       	ldi	r25, 0xA2	; 162
    363e:	af ef       	ldi	r26, 0xFF	; 255
    3640:	bf ef       	ldi	r27, 0xFF	; 255
    3642:	80 93 05 03 	sts	0x0305, r24
    3646:	90 93 06 03 	sts	0x0306, r25
    364a:	a0 93 07 03 	sts	0x0307, r26
    364e:	b0 93 08 03 	sts	0x0308, r27
    3652:	24 e2       	ldi	r18, 0x24	; 36
    3654:	3a ef       	ldi	r19, 0xFA	; 250
    3656:	81 cf       	rjmp	.-254    	; 0x355a <start_horizontal_speed_control_left+0x13c>
	}

	// the feed forward is composed by the previous scale factor (x8) and by an offset
	if(*pwm_left > 0) {
		*pwm_left += 30;
	} else if(*pwm_left < 0) {
    3658:	21 15       	cp	r18, r1
    365a:	31 05       	cpc	r19, r1
    365c:	09 f4       	brne	.+2      	; 0x3660 <start_horizontal_speed_control_left+0x242>
    365e:	9c cf       	rjmp	.-200    	; 0x3598 <start_horizontal_speed_control_left+0x17a>
		*pwm_left -= 30;
    3660:	2e 51       	subi	r18, 0x1E	; 30
    3662:	30 40       	sbci	r19, 0x00	; 0
    3664:	31 83       	std	Z+1, r19	; 0x01
    3666:	20 83       	st	Z, r18
	}

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    3668:	8e ef       	ldi	r24, 0xFE	; 254
    366a:	20 30       	cpi	r18, 0x00	; 0
    366c:	38 07       	cpc	r19, r24
    366e:	0c f0       	brlt	.+2      	; 0x3672 <start_horizontal_speed_control_left+0x254>
    3670:	93 cf       	rjmp	.-218    	; 0x3598 <start_horizontal_speed_control_left+0x17a>
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	9e ef       	ldi	r25, 0xFE	; 254
    3676:	91 83       	std	Z+1, r25	; 0x01
    3678:	80 83       	st	Z, r24
    367a:	8e cf       	rjmp	.-228    	; 0x3598 <start_horizontal_speed_control_left+0x17a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    367c:	21 50       	subi	r18, 0x01	; 1
    367e:	30 40       	sbci	r19, 0x00	; 0
    3680:	31 83       	std	Z+1, r19	; 0x01
    3682:	20 83       	st	Z, r18
    3684:	78 cf       	rjmp	.-272    	; 0x3576 <start_horizontal_speed_control_left+0x158>
	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    3686:	10 92 05 03 	sts	0x0305, r1
    368a:	10 92 06 03 	sts	0x0306, r1
    368e:	10 92 07 03 	sts	0x0307, r1
    3692:	10 92 08 03 	sts	0x0308, r1
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	a9 01       	movw	r20, r18
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    369c:	04 e0       	ldi	r16, 0x04	; 4
    369e:	55 95       	asr	r21
    36a0:	47 95       	ror	r20
    36a2:	37 95       	ror	r19
    36a4:	27 95       	ror	r18
    36a6:	0a 95       	dec	r16
    36a8:	d1 f7       	brne	.-12     	; 0x369e <start_horizontal_speed_control_left+0x280>
    36aa:	57 cf       	rjmp	.-338    	; 0x355a <start_horizontal_speed_control_left+0x13c>

000036ac <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    36ac:	85 b7       	in	r24, 0x35	; 53
    36ae:	80 61       	ori	r24, 0x10	; 16
    36b0:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    36b2:	8f ef       	ldi	r24, 0xFF	; 255
    36b4:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    36b6:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    36b8:	97 ef       	ldi	r25, 0xF7	; 247
    36ba:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    36bc:	90 ee       	ldi	r25, 0xE0	; 224
    36be:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    36c0:	90 ef       	ldi	r25, 0xF0	; 240
    36c2:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    36c4:	90 eb       	ldi	r25, 0xB0	; 176
    36c6:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    36c8:	9c ef       	ldi	r25, 0xFC	; 252
    36ca:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    36cc:	93 e0       	ldi	r25, 0x03	; 3
    36ce:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    36d0:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    36d2:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    36d4:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    36d6:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    36d8:	80 91 4f 04 	lds	r24, 0x044F
    36dc:	88 23       	and	r24, r24
    36de:	e1 f0       	breq	.+56     	; 0x3718 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    36e0:	81 30       	cpi	r24, 0x01	; 1
    36e2:	d1 f0       	breq	.+52     	; 0x3718 <initPortsIO+0x6c>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    36e4:	82 30       	cpi	r24, 0x02	; 2
    36e6:	51 f1       	breq	.+84     	; 0x373c <initPortsIO+0x90>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    36e8:	9f ef       	ldi	r25, 0xFF	; 255
    36ea:	90 93 01 01 	sts	0x0101, r25
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    36ee:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    36f2:	9f e0       	ldi	r25, 0x0F	; 15
    36f4:	90 93 04 01 	sts	0x0104, r25
	if(hardwareRevision == HW_REV_3_0) {
    36f8:	88 23       	and	r24, r24
    36fa:	a9 f4       	brne	.+42     	; 0x3726 <initPortsIO+0x7a>
		PORTJ &= 0x00;		// cliff pulse turned off
    36fc:	90 91 05 01 	lds	r25, 0x0105
    3700:	10 92 05 01 	sts	0x0105, r1
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    3704:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    3708:	9f ef       	ldi	r25, 0xFF	; 255
    370a:	90 93 0a 01 	sts	0x010A, r25
	if(hardwareRevision == HW_REV_3_0) {
    370e:	88 23       	and	r24, r24
    3710:	29 f4       	brne	.+10     	; 0x371c <initPortsIO+0x70>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    3712:	10 92 0b 01 	sts	0x010B, r1
    3716:	08 95       	ret
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    3718:	14 ba       	out	0x14, r1	; 20
    371a:	e6 cf       	rjmp	.-52     	; 0x36e8 <initPortsIO+0x3c>

	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    371c:	81 30       	cpi	r24, 0x01	; 1
    371e:	c9 f3       	breq	.-14     	; 0x3712 <initPortsIO+0x66>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    3720:	82 30       	cpi	r24, 0x02	; 2
    3722:	41 f0       	breq	.+16     	; 0x3734 <initPortsIO+0x88>
    3724:	08 95       	ret
	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    3726:	81 30       	cpi	r24, 0x01	; 1
    3728:	11 f0       	breq	.+4      	; 0x372e <initPortsIO+0x82>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    372a:	82 30       	cpi	r24, 0x02	; 2
    372c:	59 f7       	brne	.-42     	; 0x3704 <initPortsIO+0x58>
		PORTJ = 0x0F;
    372e:	90 93 05 01 	sts	0x0105, r25
    3732:	e8 cf       	rjmp	.-48     	; 0x3704 <initPortsIO+0x58>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    3734:	87 ef       	ldi	r24, 0xF7	; 247
    3736:	80 93 0b 01 	sts	0x010B, r24
    373a:	08 95       	ret
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    373c:	98 e0       	ldi	r25, 0x08	; 8
    373e:	94 bb       	out	0x14, r25	; 20
    3740:	d3 cf       	rjmp	.-90     	; 0x36e8 <initPortsIO+0x3c>

00003742 <i2c_close>:

/* I2C clock in Hz */
#define SCL_CLOCK  440000L

void i2c_close() {
	TWBR = 0x00;
    3742:	10 92 b8 00 	sts	0x00B8, r1
	TWCR = 0x00;
    3746:	10 92 bc 00 	sts	0x00BC, r1
}
    374a:	08 95       	ret

0000374c <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    374c:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    374e:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    3750:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    375a:	08 95       	ret

0000375c <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    375c:	94 ea       	ldi	r25, 0xA4	; 164
    375e:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3762:	90 91 bc 00 	lds	r25, 0x00BC
    3766:	97 ff       	sbrs	r25, 7
    3768:	fc cf       	rjmp	.-8      	; 0x3762 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    376a:	90 91 b9 00 	lds	r25, 0x00B9
    376e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    3770:	98 30       	cpi	r25, 0x08	; 8
    3772:	21 f0       	breq	.+8      	; 0x377c <i2c_start+0x20>
    3774:	90 31       	cpi	r25, 0x10	; 16
    3776:	11 f0       	breq	.+4      	; 0x377c <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    3778:	81 e0       	ldi	r24, 0x01	; 1
    377a:	08 95       	ret
	}

	// send device address
	TWDR = address;
    377c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3780:	84 e8       	ldi	r24, 0x84	; 132
    3782:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3786:	80 91 bc 00 	lds	r24, 0x00BC
    378a:	87 ff       	sbrs	r24, 7
    378c:	fc cf       	rjmp	.-8      	; 0x3786 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    378e:	90 91 b9 00 	lds	r25, 0x00B9
    3792:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    3794:	98 31       	cpi	r25, 0x18	; 24
    3796:	21 f0       	breq	.+8      	; 0x37a0 <i2c_start+0x44>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3798:	81 e0       	ldi	r24, 0x01	; 1
    379a:	90 34       	cpi	r25, 0x40	; 64
    379c:	19 f0       	breq	.+6      	; 0x37a4 <i2c_start+0x48>
		return 1;
	}

	return 0;

}/* i2c_start */
    379e:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    37a0:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    37a2:	08 95       	ret

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    37a4:	80 e0       	ldi	r24, 0x00	; 0
    37a6:	08 95       	ret

000037a8 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    37a8:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    37aa:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    37ac:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    37ae:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    37b2:	90 91 bc 00 	lds	r25, 0x00BC
    37b6:	97 ff       	sbrs	r25, 7
    37b8:	fc cf       	rjmp	.-8      	; 0x37b2 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    37ba:	90 91 b9 00 	lds	r25, 0x00B9
    37be:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    37c0:	98 30       	cpi	r25, 0x08	; 8
    37c2:	11 f0       	breq	.+4      	; 0x37c8 <i2c_start_wait+0x20>
    37c4:	90 31       	cpi	r25, 0x10	; 16
    37c6:	99 f7       	brne	.-26     	; 0x37ae <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    37c8:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    37cc:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    37d0:	90 91 bc 00 	lds	r25, 0x00BC
    37d4:	97 ff       	sbrs	r25, 7
    37d6:	fc cf       	rjmp	.-8      	; 0x37d0 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    37d8:	90 91 b9 00 	lds	r25, 0x00B9
    37dc:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    37de:	90 32       	cpi	r25, 0x20	; 32
    37e0:	19 f0       	breq	.+6      	; 0x37e8 <i2c_start_wait+0x40>
    37e2:	98 35       	cpi	r25, 0x58	; 88
    37e4:	09 f0       	breq	.+2      	; 0x37e8 <i2c_start_wait+0x40>
    37e6:	08 95       	ret
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    37e8:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    37ec:	90 91 bc 00 	lds	r25, 0x00BC
    37f0:	94 fd       	sbrc	r25, 4
    37f2:	fc cf       	rjmp	.-8      	; 0x37ec <i2c_start_wait+0x44>
    37f4:	dc cf       	rjmp	.-72     	; 0x37ae <i2c_start_wait+0x6>

000037f6 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    37f6:	94 ea       	ldi	r25, 0xA4	; 164
    37f8:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    37fc:	90 91 bc 00 	lds	r25, 0x00BC
    3800:	97 ff       	sbrs	r25, 7
    3802:	fc cf       	rjmp	.-8      	; 0x37fc <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3804:	90 91 b9 00 	lds	r25, 0x00B9
    3808:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    380a:	98 30       	cpi	r25, 0x08	; 8
    380c:	21 f0       	breq	.+8      	; 0x3816 <i2c_rep_start+0x20>
    380e:	90 31       	cpi	r25, 0x10	; 16
    3810:	11 f0       	breq	.+4      	; 0x3816 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	08 95       	ret
	}

	// send device address
	TWDR = address;
    3816:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    381a:	84 e8       	ldi	r24, 0x84	; 132
    381c:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3820:	80 91 bc 00 	lds	r24, 0x00BC
    3824:	87 ff       	sbrs	r24, 7
    3826:	fc cf       	rjmp	.-8      	; 0x3820 <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3828:	90 91 b9 00 	lds	r25, 0x00B9
    382c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    382e:	98 31       	cpi	r25, 0x18	; 24
    3830:	21 f0       	breq	.+8      	; 0x383a <i2c_rep_start+0x44>
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	90 34       	cpi	r25, 0x40	; 64
    3836:	19 f0       	breq	.+6      	; 0x383e <i2c_rep_start+0x48>
{
    return i2c_start( address );

}/* i2c_rep_start */
    3838:	08 95       	ret
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    383a:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    383c:	08 95       	ret
 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
    383e:	80 e0       	ldi	r24, 0x00	; 0
    3840:	08 95       	ret

00003842 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3842:	84 e9       	ldi	r24, 0x94	; 148
    3844:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    3848:	80 91 bc 00 	lds	r24, 0x00BC
    384c:	84 fd       	sbrc	r24, 4
    384e:	fc cf       	rjmp	.-8      	; 0x3848 <i2c_stop+0x6>

}/* i2c_stop */
    3850:	08 95       	ret

00003852 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3852:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3856:	84 e8       	ldi	r24, 0x84	; 132
    3858:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    385c:	80 91 bc 00 	lds	r24, 0x00BC
    3860:	87 ff       	sbrs	r24, 7
    3862:	fc cf       	rjmp	.-8      	; 0x385c <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    3864:	90 91 b9 00 	lds	r25, 0x00B9
    3868:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	98 32       	cpi	r25, 0x28	; 40
    386e:	09 f0       	breq	.+2      	; 0x3872 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    3870:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    3872:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    3874:	08 95       	ret

00003876 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3876:	84 ec       	ldi	r24, 0xC4	; 196
    3878:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    387c:	80 91 bc 00 	lds	r24, 0x00BC
    3880:	87 ff       	sbrs	r24, 7
    3882:	fc cf       	rjmp	.-8      	; 0x387c <i2c_readAck+0x6>

    return TWDR;
    3884:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    3888:	08 95       	ret

0000388a <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    388a:	84 e8       	ldi	r24, 0x84	; 132
    388c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3890:	80 91 bc 00 	lds	r24, 0x00BC
    3894:	87 ff       	sbrs	r24, 7
    3896:	fc cf       	rjmp	.-8      	; 0x3890 <i2c_readNak+0x6>
	
    return TWDR;
    3898:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    389c:	08 95       	ret

0000389e <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    389e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    38a2:	80 e1       	ldi	r24, 0x10	; 16
    38a4:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    38a8:	e0 ec       	ldi	r30, 0xC0	; 192
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	80 81       	ld	r24, Z
    38ae:	82 60       	ori	r24, 0x02	; 2
    38b0:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    38b2:	e1 ec       	ldi	r30, 0xC1	; 193
    38b4:	f0 e0       	ldi	r31, 0x00	; 0
    38b6:	80 81       	ld	r24, Z
    38b8:	88 69       	ori	r24, 0x98	; 152
    38ba:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    38bc:	e2 ec       	ldi	r30, 0xC2	; 194
    38be:	f0 e0       	ldi	r31, 0x00	; 0
    38c0:	80 81       	ld	r24, Z
    38c2:	86 60       	ori	r24, 0x06	; 6
    38c4:	80 83       	st	Z, r24



}
    38c6:	08 95       	ret

000038c8 <initUsart1>:

void initUsart1() {

	UBRR1H = 0;												// set baudrate
    38c8:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 16;
    38cc:	80 e1       	ldi	r24, 0x10	; 16
    38ce:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A  |= (1 << U2X1);									// enable double speed
    38d2:	e8 ec       	ldi	r30, 0xC8	; 200
    38d4:	f0 e0       	ldi	r31, 0x00	; 0
    38d6:	80 81       	ld	r24, Z
    38d8:	82 60       	ori	r24, 0x02	; 2
    38da:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X1);
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);					// enable uart0 transmitter and receiver
    38dc:	e9 ec       	ldi	r30, 0xC9	; 201
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	80 81       	ld	r24, Z
    38e2:	88 61       	ori	r24, 0x18	; 24
    38e4:	80 83       	st	Z, r24
	UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);					// set frame format: 8-bit data, no parity, 1 stop bit
    38e6:	ea ec       	ldi	r30, 0xCA	; 202
    38e8:	f0 e0       	ldi	r31, 0x00	; 0
    38ea:	80 81       	ld	r24, Z
    38ec:	86 60       	ori	r24, 0x06	; 6
    38ee:	80 83       	st	Z, r24

}
    38f0:	08 95       	ret

000038f2 <closeUsart>:

void closeUsart() {

	UCSR0A = 0x00;	// clear all usart registers
    38f2:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x00;
    38f6:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 0x00;
    38fa:	10 92 c2 00 	sts	0x00C2, r1

}
    38fe:	08 95       	ret

00003900 <usart0Transmit>:

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3900:	90 91 c0 00 	lds	r25, 0x00C0
    3904:	95 ff       	sbrs	r25, 5
    3906:	fc cf       	rjmp	.-8      	; 0x3900 <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    3908:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    390c:	66 23       	and	r22, r22
    390e:	21 f0       	breq	.+8      	; 0x3918 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3910:	80 91 c0 00 	lds	r24, 0x00C0
    3914:	86 ff       	sbrs	r24, 6
    3916:	fc cf       	rjmp	.-8      	; 0x3910 <usart0Transmit+0x10>
    3918:	08 95       	ret

0000391a <usart1Transmit>:
	}
}

void usart1Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR1A & (1<<UDRE1)));		// wait for empty transmit buffer
    391a:	90 91 c8 00 	lds	r25, 0x00C8
    391e:	95 ff       	sbrs	r25, 5
    3920:	fc cf       	rjmp	.-8      	; 0x391a <usart1Transmit>
	UDR1 = data;						// put data into buffer, sends the data
    3922:	80 93 ce 00 	sts	0x00CE, r24
	if(isBlocking) {
    3926:	66 23       	and	r22, r22
    3928:	21 f0       	breq	.+8      	; 0x3932 <usart1Transmit+0x18>
		while (!(UCSR1A & (1<<TXC1)));	// wait transmission complete
    392a:	80 91 c8 00 	lds	r24, 0x00C8
    392e:	86 ff       	sbrs	r24, 6
    3930:	fc cf       	rjmp	.-8      	; 0x392a <usart1Transmit+0x10>
    3932:	08 95       	ret

00003934 <usart0InputBufferEmpty>:

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    3934:	80 91 c0 00 	lds	r24, 0x00C0
		return 0;
    3938:	80 95       	com	r24
	} else {
		return 1;
	}

}
    393a:	88 1f       	adc	r24, r24
    393c:	88 27       	eor	r24, r24
    393e:	88 1f       	adc	r24, r24
    3940:	08 95       	ret

00003942 <usart0Receive>:

unsigned char usart0Receive() {

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
    3942:	87 e9       	ldi	r24, 0x97	; 151
    3944:	90 e0       	ldi	r25, 0x00	; 0

}

char usart0InputBufferEmpty() {

	if(UCSR0A & (1<<RXC0)) {	// something received
    3946:	20 91 c0 00 	lds	r18, 0x00C0
    394a:	27 fd       	sbrc	r18, 7
    394c:	07 c0       	rjmp	.+14     	; 0x395c <usart0Receive+0x1a>
			commError = 1;
			return 0;				// timeout
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    394e:	01 97       	sbiw	r24, 0x01	; 1

	unsigned int i=0;

	while(usart0InputBufferEmpty()) {
		i++;
		if(i>150) {
    3950:	d1 f7       	brne	.-12     	; 0x3946 <usart0Receive+0x4>
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	80 93 1e 03 	sts	0x031E, r24
			return 0;				// timeout
    3958:	80 e0       	ldi	r24, 0x00	; 0
    395a:	08 95       	ret
		}
	}								// wait for data to be received

	return UDR0;					// get and return received data from buffer
    395c:	80 91 c6 00 	lds	r24, 0x00C6

}
    3960:	08 95       	ret

00003962 <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    3962:	1f 92       	push	r1
    3964:	0f 92       	push	r0
    3966:	0f b6       	in	r0, 0x3f	; 63
    3968:	0f 92       	push	r0
    396a:	0b b6       	in	r0, 0x3b	; 59
    396c:	0f 92       	push	r0
    396e:	11 24       	eor	r1, r1
    3970:	2f 93       	push	r18
    3972:	3f 93       	push	r19
    3974:	4f 93       	push	r20
    3976:	5f 93       	push	r21
    3978:	6f 93       	push	r22
    397a:	7f 93       	push	r23
    397c:	8f 93       	push	r24
    397e:	9f 93       	push	r25
    3980:	af 93       	push	r26
    3982:	bf 93       	push	r27
    3984:	ef 93       	push	r30
    3986:	ff 93       	push	r31

	char receivedByte = UDR0;
    3988:	90 91 c6 00 	lds	r25, 0x00C6


	if(currentSelector==14) {
    398c:	80 91 4c 04 	lds	r24, 0x044C
    3990:	8e 30       	cpi	r24, 0x0E	; 14
    3992:	09 f4       	brne	.+2      	; 0x3996 <__vector_25+0x34>
    3994:	3f c0       	rjmp	.+126    	; 0x3a14 <__vector_25+0xb2>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {
    3996:	8f 30       	cpi	r24, 0x0F	; 15
    3998:	09 f4       	brne	.+2      	; 0x399c <__vector_25+0x3a>
    399a:	42 c0       	rjmp	.+132    	; 0x3a20 <__vector_25+0xbe>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    399c:	80 91 11 02 	lds	r24, 0x0211
    39a0:	88 23       	and	r24, r24
    39a2:	09 f5       	brne	.+66     	; 0x39e6 <__vector_25+0x84>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    39a4:	80 91 23 04 	lds	r24, 0x0423
    39a8:	81 30       	cpi	r24, 0x01	; 1
    39aa:	09 f4       	brne	.+2      	; 0x39ae <__vector_25+0x4c>
    39ac:	65 c0       	rjmp	.+202    	; 0x3a78 <__vector_25+0x116>
    39ae:	82 30       	cpi	r24, 0x02	; 2
    39b0:	f1 f4       	brne	.+60     	; 0x39ee <__vector_25+0x8c>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    39b2:	40 91 25 04 	lds	r20, 0x0425
    39b6:	44 23       	and	r20, r20
    39b8:	09 f4       	brne	.+2      	; 0x39bc <__vector_25+0x5a>
    39ba:	74 c0       	rjmp	.+232    	; 0x3aa4 <__vector_25+0x142>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    39bc:	41 30       	cpi	r20, 0x01	; 1
    39be:	b9 f4       	brne	.+46     	; 0x39ee <__vector_25+0x8c>
						rfAddress |= ((unsigned int)receivedByte<<8);
    39c0:	39 2f       	mov	r19, r25
    39c2:	20 e0       	ldi	r18, 0x00	; 0
    39c4:	80 91 15 03 	lds	r24, 0x0315
    39c8:	90 91 16 03 	lds	r25, 0x0316
    39cc:	82 2b       	or	r24, r18
    39ce:	93 2b       	or	r25, r19
    39d0:	90 93 16 03 	sts	0x0316, r25
    39d4:	80 93 15 03 	sts	0x0315, r24
						addressReceived = 1;
    39d8:	40 93 24 04 	sts	0x0424, r20
						menuState = 0;
    39dc:	10 92 25 04 	sts	0x0425, r1
						chooseMenu = 1;
    39e0:	40 93 11 02 	sts	0x0211, r20
    39e4:	04 c0       	rjmp	.+8      	; 0x39ee <__vector_25+0x8c>
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    39e6:	10 92 11 02 	sts	0x0211, r1
			menuChoice = receivedByte;
    39ea:	90 93 23 04 	sts	0x0423, r25
			}
		}

	}

}
    39ee:	ff 91       	pop	r31
    39f0:	ef 91       	pop	r30
    39f2:	bf 91       	pop	r27
    39f4:	af 91       	pop	r26
    39f6:	9f 91       	pop	r25
    39f8:	8f 91       	pop	r24
    39fa:	7f 91       	pop	r23
    39fc:	6f 91       	pop	r22
    39fe:	5f 91       	pop	r21
    3a00:	4f 91       	pop	r20
    3a02:	3f 91       	pop	r19
    3a04:	2f 91       	pop	r18
    3a06:	0f 90       	pop	r0
    3a08:	0b be       	out	0x3b, r0	; 59
    3a0a:	0f 90       	pop	r0
    3a0c:	0f be       	out	0x3f, r0	; 63
    3a0e:	0f 90       	pop	r0
    3a10:	1f 90       	pop	r1
    3a12:	18 95       	reti

	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
    3a14:	9a 3a       	cpi	r25, 0xAA	; 170
    3a16:	59 f7       	brne	.-42     	; 0x39ee <__vector_25+0x8c>
			irCommSendValues = 1;
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	80 93 c9 04 	sts	0x04C9, r24
    3a1e:	e7 cf       	rjmp	.-50     	; 0x39ee <__vector_25+0x8c>
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
    3a20:	9b 32       	cpi	r25, 0x2B	; 43
    3a22:	01 f1       	breq	.+64     	; 0x3a64 <__vector_25+0x102>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    3a24:	9d 32       	cpi	r25, 0x2D	; 45
    3a26:	91 f1       	breq	.+100    	; 0x3a8c <__vector_25+0x12a>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    3a28:	97 36       	cpi	r25, 0x67	; 103
    3a2a:	09 f0       	breq	.+2      	; 0x3a2e <__vector_25+0xcc>
    3a2c:	43 c0       	rjmp	.+134    	; 0x3ab4 <__vector_25+0x152>
			usart0Transmit(irCommand,1);
    3a2e:	90 91 27 04 	lds	r25, 0x0427

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3a32:	80 91 c0 00 	lds	r24, 0x00C0
    3a36:	85 ff       	sbrs	r24, 5
    3a38:	fc cf       	rjmp	.-8      	; 0x3a32 <__vector_25+0xd0>
	UDR0 = data;						// put data into buffer, sends the data
    3a3a:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3a3e:	80 91 c0 00 	lds	r24, 0x00C0
    3a42:	86 ff       	sbrs	r24, 6
    3a44:	fc cf       	rjmp	.-8      	; 0x3a3e <__vector_25+0xdc>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    3a46:	90 91 66 00 	lds	r25, 0x0066
    3a4a:	90 93 2f 05 	sts	0x052F, r25

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    3a4e:	80 91 c0 00 	lds	r24, 0x00C0
    3a52:	85 ff       	sbrs	r24, 5
    3a54:	fc cf       	rjmp	.-8      	; 0x3a4e <__vector_25+0xec>
	UDR0 = data;						// put data into buffer, sends the data
    3a56:	90 93 c6 00 	sts	0x00C6, r25
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    3a5a:	80 91 c0 00 	lds	r24, 0x00C0
    3a5e:	86 ff       	sbrs	r24, 6
    3a60:	fc cf       	rjmp	.-8      	; 0x3a5a <__vector_25+0xf8>
    3a62:	c5 cf       	rjmp	.-118    	; 0x39ee <__vector_25+0x8c>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    3a64:	80 91 2f 05 	lds	r24, 0x052F
    3a68:	8f 3f       	cpi	r24, 0xFF	; 255
    3a6a:	d1 f0       	breq	.+52     	; 0x3aa0 <__vector_25+0x13e>
				currentOsccal++;
    3a6c:	8f 5f       	subi	r24, 0xFF	; 255
    3a6e:	80 93 2f 05 	sts	0x052F, r24

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    3a72:	80 93 66 00 	sts	0x0066, r24
    3a76:	bb cf       	rjmp	.-138    	; 0x39ee <__vector_25+0x8c>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    3a78:	9a 3a       	cpi	r25, 0xAA	; 170
    3a7a:	31 f1       	breq	.+76     	; 0x3ac8 <__vector_25+0x166>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    3a7c:	95 35       	cpi	r25, 0x55	; 85
    3a7e:	09 f0       	breq	.+2      	; 0x3a82 <__vector_25+0x120>
    3a80:	b6 cf       	rjmp	.-148    	; 0x39ee <__vector_25+0x8c>
						chooseMenu = 1;
    3a82:	80 93 11 02 	sts	0x0211, r24
						menuChoice = 0;
    3a86:	10 92 23 04 	sts	0x0423, r1
    3a8a:	b1 cf       	rjmp	.-158    	; 0x39ee <__vector_25+0x8c>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    3a8c:	80 91 2f 05 	lds	r24, 0x052F
    3a90:	88 23       	and	r24, r24
    3a92:	21 f0       	breq	.+8      	; 0x3a9c <__vector_25+0x13a>
				currentOsccal--;	
    3a94:	81 50       	subi	r24, 0x01	; 1
    3a96:	80 93 2f 05 	sts	0x052F, r24
    3a9a:	eb cf       	rjmp	.-42     	; 0x3a72 <__vector_25+0x110>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	e9 cf       	rjmp	.-46     	; 0x3a72 <__vector_25+0x110>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    3aa0:	8f ef       	ldi	r24, 0xFF	; 255
    3aa2:	e7 cf       	rjmp	.-50     	; 0x3a72 <__vector_25+0x110>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    3aa4:	90 93 15 03 	sts	0x0315, r25
    3aa8:	10 92 16 03 	sts	0x0316, r1
						menuState = 1;
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	80 93 25 04 	sts	0x0425, r24
    3ab2:	9d cf       	rjmp	.-198    	; 0x39ee <__vector_25+0x8c>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    3ab4:	93 37       	cpi	r25, 0x73	; 115
    3ab6:	09 f0       	breq	.+2      	; 0x3aba <__vector_25+0x158>
    3ab8:	9a cf       	rjmp	.-204    	; 0x39ee <__vector_25+0x8c>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    3aba:	8d ef       	ldi	r24, 0xFD	; 253
    3abc:	9f e0       	ldi	r25, 0x0F	; 15
    3abe:	60 91 2f 05 	lds	r22, 0x052F
    3ac2:	0e 94 cd 52 	call	0xa59a	; 0xa59a <__eewr_byte_m2560>
    3ac6:	93 cf       	rjmp	.-218    	; 0x39ee <__vector_25+0x8c>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    3ac8:	80 93 26 04 	sts	0x0426, r24
    3acc:	90 cf       	rjmp	.-224    	; 0x39ee <__vector_25+0x8c>

00003ace <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    3ace:	86 b1       	in	r24, 0x06	; 6
    3ad0:	66 b1       	in	r22, 0x06	; 6
    3ad2:	26 b1       	in	r18, 0x06	; 6
    3ad4:	46 b1       	in	r20, 0x06	; 6
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	28 70       	andi	r18, 0x08	; 8
    3ada:	30 70       	andi	r19, 0x00	; 0
    3adc:	35 95       	asr	r19
    3ade:	27 95       	ror	r18
    3ae0:	35 95       	asr	r19
    3ae2:	27 95       	ror	r18
    3ae4:	35 95       	asr	r19
    3ae6:	27 95       	ror	r18
    3ae8:	22 0f       	add	r18, r18
    3aea:	33 1f       	adc	r19, r19
    3aec:	70 e0       	ldi	r23, 0x00	; 0
    3aee:	64 70       	andi	r22, 0x04	; 4
    3af0:	70 70       	andi	r23, 0x00	; 0
    3af2:	75 95       	asr	r23
    3af4:	67 95       	ror	r22
    3af6:	75 95       	asr	r23
    3af8:	67 95       	ror	r22
    3afa:	26 0f       	add	r18, r22
    3afc:	37 1f       	adc	r19, r23
    3afe:	22 0f       	add	r18, r18
    3b00:	33 1f       	adc	r19, r19
    3b02:	50 e0       	ldi	r21, 0x00	; 0
    3b04:	42 70       	andi	r20, 0x02	; 2
    3b06:	50 70       	andi	r21, 0x00	; 0
    3b08:	55 95       	asr	r21
    3b0a:	47 95       	ror	r20
    3b0c:	24 0f       	add	r18, r20
    3b0e:	35 1f       	adc	r19, r21
    3b10:	22 0f       	add	r18, r18
    3b12:	81 70       	andi	r24, 0x01	; 1
}
    3b14:	82 0f       	add	r24, r18
    3b16:	08 95       	ret

00003b18 <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    3b18:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    3b1a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    3b1c:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    3b1e:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    3b22:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    3b26:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    3b2a:	8e ef       	ldi	r24, 0xFE	; 254
    3b2c:	9f e0       	ldi	r25, 0x0F	; 15
    3b2e:	0e 94 9f 52 	call	0xa53e	; 0xa53e <__eerd_word_m2560>
    3b32:	90 93 16 03 	sts	0x0316, r25
    3b36:	80 93 15 03 	sts	0x0315, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    3b3a:	8d ef       	ldi	r24, 0xFD	; 253
    3b3c:	9f e0       	ldi	r25, 0x0F	; 15
    3b3e:	0e 94 97 52 	call	0xa52e	; 0xa52e <__eerd_byte_m2560>
    3b42:	80 93 2f 05 	sts	0x052F, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    3b46:	98 2f       	mov	r25, r24
    3b48:	91 50       	subi	r25, 0x01	; 1
    3b4a:	9e 3f       	cpi	r25, 0xFE	; 254
    3b4c:	e8 f5       	brcc	.+122    	; 0x3bc8 <initPeripherals+0xb0>
		OSCCAL = currentOsccal;
    3b4e:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    3b52:	80 91 15 03 	lds	r24, 0x0315
    3b56:	90 91 16 03 	lds	r25, 0x0316
    3b5a:	9c 01       	movw	r18, r24
    3b5c:	21 58       	subi	r18, 0x81	; 129
    3b5e:	3c 40       	sbci	r19, 0x0C	; 12
    3b60:	23 30       	cpi	r18, 0x03	; 3
    3b62:	31 05       	cpc	r19, r1
    3b64:	08 f5       	brcc	.+66     	; 0x3ba8 <initPeripherals+0x90>
		hardwareRevision = HW_REV_3_0;
    3b66:	10 92 4f 04 	sts	0x044F, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initCalibration();
    3b6a:	0e 94 a8 36 	call	0x6d50	; 0x6d50 <initCalibration>
	initPortsIO();
    3b6e:	0e 94 56 1b 	call	0x36ac	; 0x36ac <initPortsIO>
	initAdc();
    3b72:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <initAdc>
	initMotors();
    3b76:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <initMotors>
	initRGBleds();
    3b7a:	0e 94 83 3a 	call	0x7506	; 0x7506 <initRGBleds>
	initSPI();
    3b7e:	0e 94 2f 0c 	call	0x185e	; 0x185e <initSPI>
	mirf_init();
    3b82:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <mirf_init>
	if(spiCommError==0) {
    3b86:	80 91 18 03 	lds	r24, 0x0318
    3b8a:	88 23       	and	r24, r24
    3b8c:	29 f4       	brne	.+10     	; 0x3b98 <initPeripherals+0x80>
		rfFlags |= 1;
    3b8e:	80 91 17 03 	lds	r24, 0x0317
    3b92:	81 60       	ori	r24, 0x01	; 1
    3b94:	80 93 17 03 	sts	0x0317, r24
	}
	initUsart0();
    3b98:	0e 94 4f 1c 	call	0x389e	; 0x389e <initUsart0>
	initAccelerometer();
    3b9c:	0e 94 cb 3b 	call	0x7796	; 0x7796 <initAccelerometer>
	init_ir_remote_control();
    3ba0:	0e 94 e6 11 	call	0x23cc	; 0x23cc <init_ir_remote_control>

	sei();			// enable global interrupts
    3ba4:	78 94       	sei

	
}
    3ba6:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    3ba8:	2c e0       	ldi	r18, 0x0C	; 12
    3baa:	80 38       	cpi	r24, 0x80	; 128
    3bac:	92 07       	cpc	r25, r18
    3bae:	21 f4       	brne	.+8      	; 0x3bb8 <initPeripherals+0xa0>
		hardwareRevision = HW_REV_3_0_1;
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	80 93 4f 04 	sts	0x044F, r24
    3bb6:	d9 cf       	rjmp	.-78     	; 0x3b6a <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    3bb8:	2c e0       	ldi	r18, 0x0C	; 12
    3bba:	84 38       	cpi	r24, 0x84	; 132
    3bbc:	92 07       	cpc	r25, r18
    3bbe:	a8 f2       	brcs	.-86     	; 0x3b6a <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    3bc0:	82 e0       	ldi	r24, 0x02	; 2
    3bc2:	80 93 4f 04 	sts	0x044F, r24
    3bc6:	d1 cf       	rjmp	.-94     	; 0x3b6a <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    3bc8:	60 91 66 00 	lds	r22, 0x0066
    3bcc:	60 93 2f 05 	sts	0x052F, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    3bd0:	8d ef       	ldi	r24, 0xFD	; 253
    3bd2:	9f e0       	ldi	r25, 0x0F	; 15
    3bd4:	0e 94 cd 52 	call	0xa59a	; 0xa59a <__eewr_byte_m2560>
    3bd8:	bc cf       	rjmp	.-136    	; 0x3b52 <initPeripherals+0x3a>

00003bda <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    3bda:	1f 92       	push	r1
    3bdc:	0f 92       	push	r0
    3bde:	0f b6       	in	r0, 0x3f	; 63
    3be0:	0f 92       	push	r0
    3be2:	11 24       	eor	r1, r1

}
    3be4:	0f 90       	pop	r0
    3be6:	0f be       	out	0x3f, r0	; 63
    3be8:	0f 90       	pop	r0
    3bea:	1f 90       	pop	r1
    3bec:	18 95       	reti

00003bee <sleep>:

void sleep(unsigned char seconds) {
    3bee:	cf 93       	push	r28
    3bf0:	df 93       	push	r29

	unsigned int pause = seconds*30;	// the timer2 used to wake-up from sleep is configured to run at 30 Hz
    3bf2:	9e e1       	ldi	r25, 0x1E	; 30
    3bf4:	89 9f       	mul	r24, r25
    3bf6:	e0 01       	movw	r28, r0
    3bf8:	11 24       	eor	r1, r1

	// disable external interrupt because it uses the timer2 to interpret the tv
	// remote signal and the timer2 must be free in order to be used for wake-up from sleep
	PCICR &= ~(1 << PCIE1);			// disable interrupt from falling edge
    3bfa:	80 91 68 00 	lds	r24, 0x0068
    3bfe:	8d 7f       	andi	r24, 0xFD	; 253
    3c00:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 &= ~(1 << PCINT15);		
    3c04:	80 91 6c 00 	lds	r24, 0x006C
    3c08:	8f 77       	andi	r24, 0x7F	; 127
    3c0a:	80 93 6c 00 	sts	0x006C, r24
	PCIFR |= (1 << PCIF1);			// clear interrupt flag
    3c0e:	d9 9a       	sbi	0x1b, 1	; 27

	// disable adc
	ADCSRA = 0x00;					// disable interrupt and turn off adc
    3c10:	10 92 7a 00 	sts	0x007A, r1
	ADCSRA |= (1 << ADIF);			// clear interrupt flag
    3c14:	80 91 7a 00 	lds	r24, 0x007A
    3c18:	80 61       	ori	r24, 0x10	; 16
    3c1a:	80 93 7a 00 	sts	0x007A, r24

	// disable motors pwm
	TCCR3A = 0x00;	// turn off timer
    3c1e:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
    3c22:	10 92 91 00 	sts	0x0091, r1
	TIMSK3 = 0x00;	// disable interrupt
    3c26:	10 92 71 00 	sts	0x0071, r1
	TIFR3 |= (1 << OCF3A) | (1 << OCF3B) | (1 << TOV3);	// clear output compares and timer overflow interrupt flags
    3c2a:	88 b3       	in	r24, 0x18	; 24
    3c2c:	87 60       	ori	r24, 0x07	; 7
    3c2e:	88 bb       	out	0x18, r24	; 24
	TCCR4A = 0x00;
    3c30:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0x00;
    3c34:	10 92 a1 00 	sts	0x00A1, r1
	TIMSK4 = 0x00;
    3c38:	10 92 72 00 	sts	0x0072, r1
	TIFR4 |= (1 << OCF4A) | (1 << OCF4B) | (1 << TOV4);	// clear output compares and timer overflow interrupt flags
    3c3c:	89 b3       	in	r24, 0x19	; 25
    3c3e:	87 60       	ori	r24, 0x07	; 7
    3c40:	89 bb       	out	0x19, r24	; 25

	// disable leds pwm
	TCCR1A = 0x00;	// turn off timer
    3c42:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
    3c46:	10 92 81 00 	sts	0x0081, r1

	// close communication channels
	closeUsart();
    3c4a:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <closeUsart>
	closeSPI();
    3c4e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <closeSPI>
	i2c_close();
    3c52:	0e 94 a1 1b 	call	0x3742	; 0x3742 <i2c_close>

	// set port pins
	initPortsIO();
    3c56:	0e 94 56 1b 	call	0x36ac	; 0x36ac <initPortsIO>
	//PORTB &= ~(1 << 4);	// radio CE pin
	//DDRD = 0xFF;
	//PORTD = 0x00;	// I2C and uart pins to 0

	// set extendend standby mode and enable it
	SMCR |= (1 << SM2) | (1 << SM1) | (1 << SM0) | (1 << SE);	// extended standby
    3c5a:	83 b7       	in	r24, 0x33	; 51
    3c5c:	8f 60       	ori	r24, 0x0F	; 15
    3c5e:	83 bf       	out	0x33, r24	; 51

	// set timer2 for wake-up: 
	// source clock = 8 MHz
	// prescaler = 1/1024 => 7812.5 Hz
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
    3c60:	81 e0       	ldi	r24, 0x01	; 1
    3c62:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
    3c66:	80 91 b0 00 	lds	r24, 0x00B0
    3c6a:	8d 7f       	andi	r24, 0xFD	; 253
    3c6c:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler
    3c70:	80 91 b1 00 	lds	r24, 0x00B1
    3c74:	87 60       	ori	r24, 0x07	; 7
    3c76:	80 93 b1 00 	sts	0x00B1, r24

	while(pause > 0) {	
    3c7a:	20 97       	sbiw	r28, 0x00	; 0
    3c7c:	19 f0       	breq	.+6      	; 0x3c84 <sleep+0x96>
		// enter extended standby mode
		//sleep_cpu();
		__asm__("sleep");
    3c7e:	88 95       	sleep
		pause--;
    3c80:	21 97       	sbiw	r28, 0x01	; 1
	// max delay = 7812.5 / 256 = about 30 Hz (33 ms)
	TIMSK2 = 0x01; //(1 << TOIE2);
	TCCR2A &= ~(1 << WGM21); 	// mode 0 => normal mode
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);	// 1/1024 prescaler

	while(pause > 0) {	
    3c82:	e9 f7       	brne	.-6      	; 0x3c7e <sleep+0x90>
//		PORTB ^= (1 << 6);
	}

	// disable power mode
	//SMCR &= ~(1 << SE);
	SMCR = 0x00;
    3c84:	13 be       	out	0x33, r1	; 51

	// disable timer2 and its timer overflow interrupt
	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);	// disable timer2
    3c86:	80 91 b1 00 	lds	r24, 0x00B1
    3c8a:	88 7f       	andi	r24, 0xF8	; 248
    3c8c:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;					// disable all interrupt for timer2
    3c90:	10 92 70 00 	sts	0x0070, r1
	TCCR2A |= (1 << WGM21); 	// mode 2 => CTC mode
    3c94:	80 91 b0 00 	lds	r24, 0x00B0
    3c98:	82 60       	ori	r24, 0x02	; 2
    3c9a:	80 93 b0 00 	sts	0x00B0, r24

	pwm_red = 255;
    3c9e:	8f ef       	ldi	r24, 0xFF	; 255
    3ca0:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    3ca4:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    3ca8:	80 93 0e 02 	sts	0x020E, r24
	pwm_right = 0;
    3cac:	10 92 f6 02 	sts	0x02F6, r1
    3cb0:	10 92 f5 02 	sts	0x02F5, r1
	pwm_left = 0;
    3cb4:	10 92 f8 02 	sts	0x02F8, r1
    3cb8:	10 92 f7 02 	sts	0x02F7, r1
	initPeripherals();
    3cbc:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <initPeripherals>

}
    3cc0:	df 91       	pop	r29
    3cc2:	cf 91       	pop	r28
    3cc4:	08 95       	ret

00003cc6 <getTime100MicroSec>:

unsigned long int getTime100MicroSec() {
    3cc6:	60 91 48 04 	lds	r22, 0x0448
    3cca:	70 91 49 04 	lds	r23, 0x0449
	return clockTick;
}
    3cce:	80 91 4a 04 	lds	r24, 0x044A
    3cd2:	90 91 4b 04 	lds	r25, 0x044B
    3cd6:	08 95       	ret

00003cd8 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	80 93 bf 02 	sts	0x02BF, r24
}
    3cde:	08 95       	ret

00003ce0 <resetOdometry>:

void resetOdometry() {
	leftMotSteps = 0;
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	80 93 d5 02 	sts	0x02D5, r24
    3cea:	90 93 d6 02 	sts	0x02D6, r25
    3cee:	a0 93 d7 02 	sts	0x02D7, r26
    3cf2:	b0 93 d8 02 	sts	0x02D8, r27
	rightMotSteps = 0;
    3cf6:	80 93 d1 02 	sts	0x02D1, r24
    3cfa:	90 93 d2 02 	sts	0x02D2, r25
    3cfe:	a0 93 d3 02 	sts	0x02D3, r26
    3d02:	b0 93 d4 02 	sts	0x02D4, r27
	theta = 0;
    3d06:	80 93 6f 04 	sts	0x046F, r24
    3d0a:	90 93 70 04 	sts	0x0470, r25
    3d0e:	a0 93 71 04 	sts	0x0471, r26
    3d12:	b0 93 72 04 	sts	0x0472, r27
	xPos = 0;
    3d16:	80 93 77 04 	sts	0x0477, r24
    3d1a:	90 93 78 04 	sts	0x0478, r25
    3d1e:	a0 93 79 04 	sts	0x0479, r26
    3d22:	b0 93 7a 04 	sts	0x047A, r27
	yPos = 0;
    3d26:	80 93 7b 04 	sts	0x047B, r24
    3d2a:	90 93 7c 04 	sts	0x047C, r25
    3d2e:	a0 93 7d 04 	sts	0x047D, r26
    3d32:	b0 93 7e 04 	sts	0x047E, r27
}
    3d36:	08 95       	ret

00003d38 <initAdc>:

#include "adc.h"


void initAdc(void) {
    3d38:	cf 93       	push	r28
    3d3a:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    3d3c:	ea e7       	ldi	r30, 0x7A	; 122
    3d3e:	f0 e0       	ldi	r31, 0x00	; 0
    3d40:	10 82       	st	Z, r1
	ADCSRB = 0;
    3d42:	ab e7       	ldi	r26, 0x7B	; 123
    3d44:	b0 e0       	ldi	r27, 0x00	; 0
    3d46:	1c 92       	st	X, r1
	ADMUX = 0;
    3d48:	cc e7       	ldi	r28, 0x7C	; 124
    3d4a:	d0 e0       	ldi	r29, 0x00	; 0
    3d4c:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    3d4e:	80 81       	ld	r24, Z
    3d50:	86 60       	ori	r24, 0x06	; 6
    3d52:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    3d54:	88 81       	ld	r24, Y
    3d56:	80 64       	ori	r24, 0x40	; 64
    3d58:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    3d5a:	80 81       	ld	r24, Z
    3d5c:	80 62       	ori	r24, 0x20	; 32
    3d5e:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    3d60:	8c 91       	ld	r24, X
    3d62:	88 7f       	andi	r24, 0xF8	; 248
    3d64:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    3d66:	80 81       	ld	r24, Z
    3d68:	88 60       	ori	r24, 0x08	; 8
    3d6a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    3d6c:	80 81       	ld	r24, Z
    3d6e:	80 68       	ori	r24, 0x80	; 128
    3d70:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    3d72:	80 81       	ld	r24, Z
    3d74:	80 64       	ori	r24, 0x40	; 64
    3d76:	80 83       	st	Z, r24

}
    3d78:	df 91       	pop	r29
    3d7a:	cf 91       	pop	r28
    3d7c:	08 95       	ret

00003d7e <__vector_29>:

ISR(ADC_vect) {
    3d7e:	1f 92       	push	r1
    3d80:	0f 92       	push	r0
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	0f 92       	push	r0
    3d86:	0b b6       	in	r0, 0x3b	; 59
    3d88:	0f 92       	push	r0
    3d8a:	11 24       	eor	r1, r1
    3d8c:	1f 93       	push	r17
    3d8e:	2f 93       	push	r18
    3d90:	3f 93       	push	r19
    3d92:	4f 93       	push	r20
    3d94:	5f 93       	push	r21
    3d96:	6f 93       	push	r22
    3d98:	7f 93       	push	r23
    3d9a:	8f 93       	push	r24
    3d9c:	9f 93       	push	r25
    3d9e:	af 93       	push	r26
    3da0:	bf 93       	push	r27
    3da2:	ef 93       	push	r30
    3da4:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    3da6:	80 91 48 04 	lds	r24, 0x0448
    3daa:	90 91 49 04 	lds	r25, 0x0449
    3dae:	a0 91 4a 04 	lds	r26, 0x044A
    3db2:	b0 91 4b 04 	lds	r27, 0x044B
    3db6:	01 96       	adiw	r24, 0x01	; 1
    3db8:	a1 1d       	adc	r26, r1
    3dba:	b1 1d       	adc	r27, r1
    3dbc:	80 93 48 04 	sts	0x0448, r24
    3dc0:	90 93 49 04 	sts	0x0449, r25
    3dc4:	a0 93 4a 04 	sts	0x044A, r26
    3dc8:	b0 93 4b 04 	sts	0x044B, r27
								// resolution of 104 us based on adc interrupts

	unsigned int value = ADCL;			// get the sample; low byte must be read first!!
    3dcc:	80 91 78 00 	lds	r24, 0x0078
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
	value = (ADCH<<8) | value;
    3dd2:	40 91 79 00 	lds	r20, 0x0079
    3dd6:	34 2f       	mov	r19, r20
    3dd8:	20 e0       	ldi	r18, 0x00	; 0
    3dda:	82 2b       	or	r24, r18
    3ddc:	93 2b       	or	r25, r19
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3dde:	20 91 b9 02 	lds	r18, 0x02B9
    3de2:	22 30       	cpi	r18, 0x02	; 2
    3de4:	09 f4       	brne	.+2      	; 0x3de8 <__vector_29+0x6a>
    3de6:	ec c1       	rjmp	.+984    	; 0x41c0 <__vector_29+0x442>
    3de8:	23 30       	cpi	r18, 0x03	; 3
    3dea:	08 f4       	brcc	.+2      	; 0x3dee <__vector_29+0x70>
    3dec:	4c c0       	rjmp	.+152    	; 0x3e86 <__vector_29+0x108>
    3dee:	24 30       	cpi	r18, 0x04	; 4
    3df0:	09 f4       	brne	.+2      	; 0x3df4 <__vector_29+0x76>
    3df2:	10 c2       	rjmp	.+1056   	; 0x4214 <__vector_29+0x496>
    3df4:	24 30       	cpi	r18, 0x04	; 4
    3df6:	08 f0       	brcs	.+2      	; 0x3dfa <__vector_29+0x7c>
    3df8:	55 c1       	rjmp	.+682    	; 0x40a4 <__vector_29+0x326>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    3dfa:	20 91 e1 02 	lds	r18, 0x02E1
    3dfe:	30 91 e2 02 	lds	r19, 0x02E2
    3e02:	28 0f       	add	r18, r24
    3e04:	39 1f       	adc	r19, r25
			left_current_avg = left_current_avg >> 1;
    3e06:	36 95       	lsr	r19
    3e08:	27 95       	ror	r18
    3e0a:	30 93 e2 02 	sts	0x02E2, r19
    3e0e:	20 93 e1 02 	sts	0x02E1, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    3e12:	80 91 c5 04 	lds	r24, 0x04C5
    3e16:	82 30       	cpi	r24, 0x02	; 2
    3e18:	09 f0       	breq	.+2      	; 0x3e1c <__vector_29+0x9e>
    3e1a:	4b c0       	rjmp	.+150    	; 0x3eb2 <__vector_29+0x134>
		switch(irCommAdcTxState) {
    3e1c:	80 91 04 05 	lds	r24, 0x0504
    3e20:	81 30       	cpi	r24, 0x01	; 1
    3e22:	09 f4       	brne	.+2      	; 0x3e26 <__vector_29+0xa8>
    3e24:	cb c2       	rjmp	.+1430   	; 0x43bc <__vector_29+0x63e>
    3e26:	81 30       	cpi	r24, 0x01	; 1
    3e28:	08 f0       	brcs	.+2      	; 0x3e2c <__vector_29+0xae>
    3e2a:	22 c2       	rjmp	.+1092   	; 0x4270 <__vector_29+0x4f2>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
				break;

			case IRCOMM_TX_ADC_IDLE:
				if(irCommTxByteEnqueued==1) {					
    3e2c:	80 91 06 05 	lds	r24, 0x0506
    3e30:	81 30       	cpi	r24, 0x01	; 1
    3e32:	09 f4       	brne	.+2      	; 0x3e36 <__vector_29+0xb8>
    3e34:	32 c3       	rjmp	.+1636   	; 0x449a <__vector_29+0x71c>
    3e36:	80 91 ba 02 	lds	r24, 0x02BA
	
	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    3e3a:	90 91 23 02 	lds	r25, 0x0223
    3e3e:	98 30       	cpi	r25, 0x08	; 8
    3e40:	08 f0       	brcs	.+2      	; 0x3e44 <__vector_29+0xc6>
    3e42:	76 c1       	rjmp	.+748    	; 0x4130 <__vector_29+0x3b2>
		ADCSRB &= ~(1 << MUX5);
    3e44:	90 91 7b 00 	lds	r25, 0x007B
    3e48:	97 7f       	andi	r25, 0xF7	; 247
    3e4a:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + currentAdChannel;
    3e4e:	90 91 23 02 	lds	r25, 0x0223
    3e52:	90 5c       	subi	r25, 0xC0	; 192
    3e54:	90 93 7c 00 	sts	0x007C, r25
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    3e58:	82 30       	cpi	r24, 0x02	; 2
    3e5a:	09 f4       	brne	.+2      	; 0x3e5e <__vector_29+0xe0>
    3e5c:	76 c1       	rjmp	.+748    	; 0x414a <__vector_29+0x3cc>

	}

	//LED_BLUE_OFF;

}
    3e5e:	ff 91       	pop	r31
    3e60:	ef 91       	pop	r30
    3e62:	bf 91       	pop	r27
    3e64:	af 91       	pop	r26
    3e66:	9f 91       	pop	r25
    3e68:	8f 91       	pop	r24
    3e6a:	7f 91       	pop	r23
    3e6c:	6f 91       	pop	r22
    3e6e:	5f 91       	pop	r21
    3e70:	4f 91       	pop	r20
    3e72:	3f 91       	pop	r19
    3e74:	2f 91       	pop	r18
    3e76:	1f 91       	pop	r17
    3e78:	0f 90       	pop	r0
    3e7a:	0b be       	out	0x3b, r0	; 59
    3e7c:	0f 90       	pop	r0
    3e7e:	0f be       	out	0x3f, r0	; 63
    3e80:	0f 90       	pop	r0
    3e82:	1f 90       	pop	r1
    3e84:	18 95       	reti
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    3e86:	22 23       	and	r18, r18
    3e88:	09 f4       	brne	.+2      	; 0x3e8c <__vector_29+0x10e>
    3e8a:	78 c0       	rjmp	.+240    	; 0x3f7c <__vector_29+0x1fe>
    3e8c:	21 30       	cpi	r18, 0x01	; 1
    3e8e:	61 f4       	brne	.+24     	; 0x3ea8 <__vector_29+0x12a>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    3e90:	20 91 e3 02 	lds	r18, 0x02E3
    3e94:	30 91 e4 02 	lds	r19, 0x02E4
    3e98:	28 0f       	add	r18, r24
    3e9a:	39 1f       	adc	r19, r25
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    3e9c:	36 95       	lsr	r19
    3e9e:	27 95       	ror	r18
    3ea0:	30 93 e4 02 	sts	0x02E4, r19
    3ea4:	20 93 e3 02 	sts	0x02E3, r18
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    3ea8:	80 91 c5 04 	lds	r24, 0x04C5
    3eac:	82 30       	cpi	r24, 0x02	; 2
    3eae:	09 f4       	brne	.+2      	; 0x3eb2 <__vector_29+0x134>
    3eb0:	b5 cf       	rjmp	.-150    	; 0x3e1c <__vector_29+0x9e>
					irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
    3eb2:	81 30       	cpi	r24, 0x01	; 1
    3eb4:	09 f4       	brne	.+2      	; 0x3eb8 <__vector_29+0x13a>
    3eb6:	63 c1       	rjmp	.+710    	; 0x417e <__vector_29+0x400>
			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
    3eb8:	88 23       	and	r24, r24
    3eba:	09 f0       	breq	.+2      	; 0x3ebe <__vector_29+0x140>
    3ebc:	bc cf       	rjmp	.-136    	; 0x3e36 <__vector_29+0xb8>
		switch(adcSamplingState) {
    3ebe:	80 91 ba 02 	lds	r24, 0x02BA
    3ec2:	82 30       	cpi	r24, 0x02	; 2
    3ec4:	09 f4       	brne	.+2      	; 0x3ec8 <__vector_29+0x14a>
    3ec6:	2b c3       	rjmp	.+1622   	; 0x451e <__vector_29+0x7a0>
    3ec8:	83 30       	cpi	r24, 0x03	; 3
    3eca:	08 f0       	brcs	.+2      	; 0x3ece <__vector_29+0x150>
    3ecc:	fe c1       	rjmp	.+1020   	; 0x42ca <__vector_29+0x54c>
    3ece:	88 23       	and	r24, r24
    3ed0:	09 f4       	brne	.+2      	; 0x3ed4 <__vector_29+0x156>
    3ed2:	a4 c2       	rjmp	.+1352   	; 0x441c <__vector_29+0x69e>
    3ed4:	81 30       	cpi	r24, 0x01	; 1
    3ed6:	09 f0       	breq	.+2      	; 0x3eda <__vector_29+0x15c>
    3ed8:	b0 cf       	rjmp	.-160    	; 0x3e3a <__vector_29+0xbc>
				}
				adcSamplingState = 1;
				break;

			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
    3eda:	80 91 25 02 	lds	r24, 0x0225
    3ede:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    3ee2:	80 91 28 02 	lds	r24, 0x0228
    3ee6:	80 93 bc 02 	sts	0x02BC, r24
				adcSaveDataTo = SAVE_TO_PROX;
    3eea:	10 92 b9 02 	sts	0x02B9, r1
				adcSamplingState = 2;
    3eee:	82 e0       	ldi	r24, 0x02	; 2
    3ef0:	80 93 ba 02 	sts	0x02BA, r24
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    3ef4:	10 91 c4 04 	lds	r17, 0x04C4
    3ef8:	11 30       	cpi	r17, 0x01	; 1
    3efa:	09 f4       	brne	.+2      	; 0x3efe <__vector_29+0x180>
    3efc:	37 c4       	rjmp	.+2158   	; 0x476c <__vector_29+0x9ee>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    3efe:	12 30       	cpi	r17, 0x02	; 2
    3f00:	09 f4       	brne	.+2      	; 0x3f04 <__vector_29+0x186>
    3f02:	23 c4       	rjmp	.+2118   	; 0x474a <__vector_29+0x9cc>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
					}
				}
				if(irCommEnabled==IRCOMM_MODE_RECEIVE_ONLY && currentProx==23) {					
    3f04:	13 30       	cpi	r17, 0x03	; 3
    3f06:	29 f5       	brne	.+74     	; 0x3f52 <__vector_29+0x1d4>
    3f08:	80 91 24 02 	lds	r24, 0x0224
    3f0c:	87 31       	cpi	r24, 0x17	; 23
    3f0e:	09 f0       	breq	.+2      	; 0x3f12 <__vector_29+0x194>
    3f10:	92 cf       	rjmp	.-220    	; 0x3e36 <__vector_29+0xb8>
					currentAdChannel = 0;	// prox0					
    3f12:	10 92 23 02 	sts	0x0223, r1
					measBattery = 0;
    3f16:	10 92 bf 02 	sts	0x02BF, r1
					irCommAdcRxState = 0;					
    3f1a:	10 92 e6 04 	sts	0x04E6, r1
					irCommRxWindowSamples = 0;
    3f1e:	10 92 e7 04 	sts	0x04E7, r1
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    3f22:	e0 91 18 0b 	lds	r30, 0x0B18
    3f26:	f0 91 19 0b 	lds	r31, 0x0B19
    3f2a:	80 e1       	ldi	r24, 0x10	; 16
    3f2c:	df 01       	movw	r26, r30
    3f2e:	1d 92       	st	X+, r1
    3f30:	8a 95       	dec	r24
    3f32:	e9 f7       	brne	.-6      	; 0x3f2e <__vector_29+0x1b0>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    3f34:	80 91 a6 05 	lds	r24, 0x05A6
    3f38:	90 91 a7 05 	lds	r25, 0x05A7
    3f3c:	6f ef       	ldi	r22, 0xFF	; 255
    3f3e:	70 e0       	ldi	r23, 0x00	; 0
    3f40:	40 e1       	ldi	r20, 0x10	; 16
    3f42:	50 e0       	ldi	r21, 0x00	; 0
    3f44:	0e 94 80 52 	call	0xa500	; 0xa500 <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;
    3f48:	81 e0       	ldi	r24, 0x01	; 1
    3f4a:	80 93 c5 04 	sts	0x04C5, r24
    3f4e:	10 91 c4 04 	lds	r17, 0x04C4
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT_ONLY && currentProx==23) {
    3f52:	14 30       	cpi	r17, 0x04	; 4
    3f54:	09 f0       	breq	.+2      	; 0x3f58 <__vector_29+0x1da>
    3f56:	6f cf       	rjmp	.-290    	; 0x3e36 <__vector_29+0xb8>
    3f58:	80 91 24 02 	lds	r24, 0x0224
    3f5c:	87 31       	cpi	r24, 0x17	; 23
    3f5e:	09 f0       	breq	.+2      	; 0x3f62 <__vector_29+0x1e4>
    3f60:	6a cf       	rjmp	.-300    	; 0x3e36 <__vector_29+0xb8>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    3f62:	82 e0       	ldi	r24, 0x02	; 2
    3f64:	80 93 c5 04 	sts	0x04C5, r24
					if(irCommTxByteEnqueued==1) {
    3f68:	80 91 06 05 	lds	r24, 0x0506
    3f6c:	81 30       	cpi	r24, 0x01	; 1
    3f6e:	09 f4       	brne	.+2      	; 0x3f72 <__vector_29+0x1f4>
    3f70:	94 c2       	rjmp	.+1320   	; 0x449a <__vector_29+0x71c>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommAdcTxState = IRCOMM_TX_ADC_IDLE;
    3f72:	10 92 04 05 	sts	0x0504, r1
    3f76:	80 91 ba 02 	lds	r24, 0x02BA
    3f7a:	5f cf       	rjmp	.-322    	; 0x3e3a <__vector_29+0xbc>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    3f7c:	60 91 24 02 	lds	r22, 0x0224
    3f80:	6e 30       	cpi	r22, 0x0E	; 14
    3f82:	09 f4       	brne	.+2      	; 0x3f86 <__vector_29+0x208>
    3f84:	f2 c2       	rjmp	.+1508   	; 0x456a <__vector_29+0x7ec>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    3f86:	26 2f       	mov	r18, r22
    3f88:	30 e0       	ldi	r19, 0x00	; 0
    3f8a:	f9 01       	movw	r30, r18
    3f8c:	ee 0f       	add	r30, r30
    3f8e:	ff 1f       	adc	r31, r31
    3f90:	e7 5d       	subi	r30, 0xD7	; 215
    3f92:	fd 4f       	sbci	r31, 0xFD	; 253
    3f94:	91 83       	std	Z+1, r25	; 0x01
    3f96:	80 83       	st	Z, r24
			}

			if(currentProx & 0x01) {
    3f98:	20 ff       	sbrs	r18, 0
    3f9a:	78 c0       	rjmp	.+240    	; 0x408c <__vector_29+0x30e>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    3f9c:	f9 01       	movw	r30, r18
    3f9e:	ee 0f       	add	r30, r30
    3fa0:	ff 1f       	adc	r31, r31
    3fa2:	e9 5d       	subi	r30, 0xD9	; 217
    3fa4:	fd 4f       	sbci	r31, 0xFD	; 253
    3fa6:	80 81       	ld	r24, Z
    3fa8:	91 81       	ldd	r25, Z+1	; 0x01
    3faa:	f9 01       	movw	r30, r18
    3fac:	ee 0f       	add	r30, r30
    3fae:	ff 1f       	adc	r31, r31
    3fb0:	e7 5d       	subi	r30, 0xD7	; 215
    3fb2:	fd 4f       	sbci	r31, 0xFD	; 253
    3fb4:	40 81       	ld	r20, Z
    3fb6:	51 81       	ldd	r21, Z+1	; 0x01
    3fb8:	26 2f       	mov	r18, r22
    3fba:	26 95       	lsr	r18
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	84 1b       	sub	r24, r20
    3fc0:	95 0b       	sbc	r25, r21
    3fc2:	22 0f       	add	r18, r18
    3fc4:	33 1f       	adc	r19, r19
    3fc6:	f9 01       	movw	r30, r18
    3fc8:	ef 58       	subi	r30, 0x8F	; 143
    3fca:	fd 4f       	sbci	r31, 0xFD	; 253
    3fcc:	40 81       	ld	r20, Z
    3fce:	51 81       	ldd	r21, Z+1	; 0x01
    3fd0:	84 1b       	sub	r24, r20
    3fd2:	95 0b       	sbc	r25, r21
    3fd4:	f9 01       	movw	r30, r18
    3fd6:	e7 5a       	subi	r30, 0xA7	; 167
    3fd8:	fd 4f       	sbci	r31, 0xFD	; 253
    3fda:	91 83       	std	Z+1, r25	; 0x01
    3fdc:	80 83       	st	Z, r24
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    3fde:	97 fd       	sbrc	r25, 7
    3fe0:	ee c2       	rjmp	.+1500   	; 0x45be <__vector_29+0x840>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    3fe2:	44 e0       	ldi	r20, 0x04	; 4
    3fe4:	81 30       	cpi	r24, 0x01	; 1
    3fe6:	94 07       	cpc	r25, r20
    3fe8:	24 f0       	brlt	.+8      	; 0x3ff2 <__vector_29+0x274>
					proximityResult[currentProx>>1] = 1024;
    3fea:	80 e0       	ldi	r24, 0x00	; 0
    3fec:	94 e0       	ldi	r25, 0x04	; 4
    3fee:	91 83       	std	Z+1, r25	; 0x01
    3ff0:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    3ff2:	60 31       	cpi	r22, 0x10	; 16
    3ff4:	50 f4       	brcc	.+20     	; 0x400a <__vector_29+0x28c>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    3ff6:	8c 33       	cpi	r24, 0x3C	; 60
    3ff8:	91 05       	cpc	r25, r1
    3ffa:	0c f0       	brlt	.+2      	; 0x3ffe <__vector_29+0x280>
    3ffc:	e5 c2       	rjmp	.+1482   	; 0x45c8 <__vector_29+0x84a>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    3ffe:	2f 53       	subi	r18, 0x3F	; 63
    4000:	3d 4f       	sbci	r19, 0xFD	; 253
    4002:	d9 01       	movw	r26, r18
    4004:	11 96       	adiw	r26, 0x01	; 1
    4006:	9c 93       	st	X, r25
    4008:	8e 93       	st	-X, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    400a:	80 91 6d 04 	lds	r24, 0x046D
    400e:	88 23       	and	r24, r24
    4010:	09 f4       	brne	.+2      	; 0x4014 <__vector_29+0x296>
    4012:	15 c2       	rjmp	.+1066   	; 0x443e <__vector_29+0x6c0>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    4014:	80 91 69 02 	lds	r24, 0x0269
    4018:	90 91 6a 02 	lds	r25, 0x026A
    401c:	f1 e0       	ldi	r31, 0x01	; 1
    401e:	84 3a       	cpi	r24, 0xA4	; 164
    4020:	9f 07       	cpc	r25, r31
    4022:	cc f0       	brlt	.+50     	; 0x4056 <__vector_29+0x2d8>
    4024:	80 91 6b 02 	lds	r24, 0x026B
    4028:	90 91 6c 02 	lds	r25, 0x026C
    402c:	21 e0       	ldi	r18, 0x01	; 1
    402e:	84 3a       	cpi	r24, 0xA4	; 164
    4030:	92 07       	cpc	r25, r18
    4032:	8c f0       	brlt	.+34     	; 0x4056 <__vector_29+0x2d8>
    4034:	80 91 6d 02 	lds	r24, 0x026D
    4038:	90 91 6e 02 	lds	r25, 0x026E
    403c:	41 e0       	ldi	r20, 0x01	; 1
    403e:	84 3a       	cpi	r24, 0xA4	; 164
    4040:	94 07       	cpc	r25, r20
    4042:	4c f0       	brlt	.+18     	; 0x4056 <__vector_29+0x2d8>
    4044:	80 91 6f 02 	lds	r24, 0x026F
    4048:	90 91 70 02 	lds	r25, 0x0270
    404c:	a1 e0       	ldi	r26, 0x01	; 1
    404e:	84 3a       	cpi	r24, 0xA4	; 164
    4050:	9a 07       	cpc	r25, r26
    4052:	0c f0       	brlt	.+2      	; 0x4056 <__vector_29+0x2d8>
    4054:	f4 c1       	rjmp	.+1000   	; 0x443e <__vector_29+0x6c0>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    4056:	81 e0       	ldi	r24, 0x01	; 1
    4058:	80 93 6e 04 	sts	0x046E, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    405c:	10 92 f8 02 	sts	0x02F8, r1
    4060:	10 92 f7 02 	sts	0x02F7, r1
						OCR4A = 0;
    4064:	10 92 a9 00 	sts	0x00A9, r1
    4068:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    406c:	10 92 ab 00 	sts	0x00AB, r1
    4070:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    4074:	10 92 f6 02 	sts	0x02F6, r1
    4078:	10 92 f5 02 	sts	0x02F5, r1
						OCR3A = 0;
    407c:	10 92 99 00 	sts	0x0099, r1
    4080:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    4084:	10 92 9b 00 	sts	0x009B, r1
    4088:	10 92 9a 00 	sts	0x009A, r1
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    408c:	6f 5f       	subi	r22, 0xFF	; 255
    408e:	60 93 24 02 	sts	0x0224, r22
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    4092:	68 31       	cpi	r22, 0x18	; 24
    4094:	08 f4       	brcc	.+2      	; 0x4098 <__vector_29+0x31a>
    4096:	08 cf       	rjmp	.-496    	; 0x3ea8 <__vector_29+0x12a>
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    4098:	10 92 24 02 	sts	0x0224, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    409c:	81 e0       	ldi	r24, 0x01	; 1
    409e:	80 93 c0 02 	sts	0x02C0, r24
    40a2:	02 cf       	rjmp	.-508    	; 0x3ea8 <__vector_29+0x12a>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    40a4:	26 30       	cpi	r18, 0x06	; 6
    40a6:	09 f0       	breq	.+2      	; 0x40aa <__vector_29+0x32c>
    40a8:	ff ce       	rjmp	.-514    	; 0x3ea8 <__vector_29+0x12a>
		case SAVE_TO_PROX_IRCOMM:
			irCommProxValuesAdc[currentProx+irCommRxWindowSamples*8] = value;
    40aa:	20 91 e7 04 	lds	r18, 0x04E7
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	40 91 24 02 	lds	r20, 0x0224
    40b4:	22 0f       	add	r18, r18
    40b6:	33 1f       	adc	r19, r19
    40b8:	22 0f       	add	r18, r18
    40ba:	33 1f       	adc	r19, r19
    40bc:	22 0f       	add	r18, r18
    40be:	33 1f       	adc	r19, r19
    40c0:	24 0f       	add	r18, r20
    40c2:	31 1d       	adc	r19, r1
    40c4:	22 0f       	add	r18, r18
    40c6:	33 1f       	adc	r19, r19
    40c8:	e0 91 4a 08 	lds	r30, 0x084A
    40cc:	f0 91 4b 08 	lds	r31, 0x084B
    40d0:	e2 0f       	add	r30, r18
    40d2:	f3 1f       	adc	r31, r19
    40d4:	91 83       	std	Z+1, r25	; 0x01
    40d6:	80 83       	st	Z, r24
			// get the min and max values in the sampling window for all the sensors
			if(irCommMaxSensorValueAdc[currentProx] < value) {
    40d8:	60 91 24 02 	lds	r22, 0x0224
    40dc:	26 2f       	mov	r18, r22
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	22 0f       	add	r18, r18
    40e2:	33 1f       	adc	r19, r19
    40e4:	e0 91 18 0b 	lds	r30, 0x0B18
    40e8:	f0 91 19 0b 	lds	r31, 0x0B19
    40ec:	e2 0f       	add	r30, r18
    40ee:	f3 1f       	adc	r31, r19
    40f0:	40 81       	ld	r20, Z
    40f2:	51 81       	ldd	r21, Z+1	; 0x01
    40f4:	48 17       	cp	r20, r24
    40f6:	59 07       	cpc	r21, r25
    40f8:	40 f4       	brcc	.+16     	; 0x410a <__vector_29+0x38c>
				irCommMaxSensorValueAdc[currentProx] = value;
    40fa:	91 83       	std	Z+1, r25	; 0x01
    40fc:	80 83       	st	Z, r24
    40fe:	60 91 24 02 	lds	r22, 0x0224
    4102:	26 2f       	mov	r18, r22
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	22 0f       	add	r18, r18
    4108:	33 1f       	adc	r19, r19
			}
			if(irCommMinSensorValueAdc[currentProx] > value) {
    410a:	e0 91 a6 05 	lds	r30, 0x05A6
    410e:	f0 91 a7 05 	lds	r31, 0x05A7
    4112:	e2 0f       	add	r30, r18
    4114:	f3 1f       	adc	r31, r19
    4116:	20 81       	ld	r18, Z
    4118:	31 81       	ldd	r19, Z+1	; 0x01
    411a:	82 17       	cp	r24, r18
    411c:	93 07       	cpc	r25, r19
    411e:	20 f4       	brcc	.+8      	; 0x4128 <__vector_29+0x3aa>
				irCommMinSensorValueAdc[currentProx] = value;
    4120:	91 83       	std	Z+1, r25	; 0x01
    4122:	80 83       	st	Z, r24
    4124:	60 91 24 02 	lds	r22, 0x0224
			}
			currentProx++;
    4128:	6f 5f       	subi	r22, 0xFF	; 255
    412a:	60 93 24 02 	sts	0x0224, r22
			break;
    412e:	bc ce       	rjmp	.-648    	; 0x3ea8 <__vector_29+0x12a>
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    4130:	90 91 7b 00 	lds	r25, 0x007B
    4134:	98 60       	ori	r25, 0x08	; 8
    4136:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = 0x40 + (currentAdChannel-8);
    413a:	90 91 23 02 	lds	r25, 0x0223
    413e:	98 5c       	subi	r25, 0xC8	; 200
    4140:	90 93 7c 00 	sts	0x007C, r25
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    4144:	82 30       	cpi	r24, 0x02	; 2
    4146:	09 f0       	breq	.+2      	; 0x414a <__vector_29+0x3cc>
    4148:	8a ce       	rjmp	.-748    	; 0x3e5e <__vector_29+0xe0>
    414a:	80 91 c5 04 	lds	r24, 0x04C5
    414e:	88 23       	and	r24, r24
    4150:	09 f0       	breq	.+2      	; 0x4154 <__vector_29+0x3d6>
    4152:	85 ce       	rjmp	.-758    	; 0x3e5e <__vector_29+0xe0>

		if(hardwareRevision == HW_REV_3_0) {
    4154:	20 91 4f 04 	lds	r18, 0x044F
    4158:	22 23       	and	r18, r18
    415a:	39 f4       	brne	.+14     	; 0x416a <__vector_29+0x3ec>
			PORTJ &= 0xF0;
    415c:	80 91 05 01 	lds	r24, 0x0105
    4160:	80 7f       	andi	r24, 0xF0	; 240
    4162:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    4166:	12 b8       	out	0x02, r1	; 2
    4168:	7a ce       	rjmp	.-780    	; 0x3e5e <__vector_29+0xe0>
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    416a:	21 30       	cpi	r18, 0x01	; 1
    416c:	19 f0       	breq	.+6      	; 0x4174 <__vector_29+0x3f6>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    416e:	22 30       	cpi	r18, 0x02	; 2
    4170:	09 f0       	breq	.+2      	; 0x4174 <__vector_29+0x3f6>
    4172:	75 ce       	rjmp	.-790    	; 0x3e5e <__vector_29+0xe0>
			PORTJ = 0xFF;
    4174:	8f ef       	ldi	r24, 0xFF	; 255
    4176:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    417a:	12 b8       	out	0x02, r1	; 2
    417c:	70 ce       	rjmp	.-800    	; 0x3e5e <__vector_29+0xe0>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    417e:	90 91 e6 04 	lds	r25, 0x04E6
    4182:	96 30       	cpi	r25, 0x06	; 6
    4184:	09 f4       	brne	.+2      	; 0x4188 <__vector_29+0x40a>
    4186:	33 c2       	rjmp	.+1126   	; 0x45ee <__vector_29+0x870>
    4188:	97 30       	cpi	r25, 0x07	; 7
    418a:	08 f0       	brcs	.+2      	; 0x418e <__vector_29+0x410>
    418c:	ce c0       	rjmp	.+412    	; 0x432a <__vector_29+0x5ac>
    418e:	92 30       	cpi	r25, 0x02	; 2
    4190:	09 f4       	brne	.+2      	; 0x4194 <__vector_29+0x416>
    4192:	3a c2       	rjmp	.+1140   	; 0x4608 <__vector_29+0x88a>
    4194:	93 30       	cpi	r25, 0x03	; 3
    4196:	08 f4       	brcc	.+2      	; 0x419a <__vector_29+0x41c>
    4198:	6c c1       	rjmp	.+728    	; 0x4472 <__vector_29+0x6f4>
    419a:	94 30       	cpi	r25, 0x04	; 4
    419c:	09 f4       	brne	.+2      	; 0x41a0 <__vector_29+0x422>
    419e:	50 c2       	rjmp	.+1184   	; 0x4640 <__vector_29+0x8c2>
    41a0:	95 30       	cpi	r25, 0x05	; 5
    41a2:	08 f4       	brcc	.+2      	; 0x41a6 <__vector_29+0x428>
    41a4:	3f c2       	rjmp	.+1150   	; 0x4624 <__vector_29+0x8a6>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 5;
				break;

			case 5:
				currentAdChannel = currentProx+1;
    41a6:	80 91 24 02 	lds	r24, 0x0224
    41aa:	8f 5f       	subi	r24, 0xFF	; 255
    41ac:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    41b0:	86 e0       	ldi	r24, 0x06	; 6
    41b2:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 6;
    41b6:	80 93 e6 04 	sts	0x04E6, r24
    41ba:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    41be:	3d ce       	rjmp	.-902    	; 0x3e3a <__vector_29+0xbc>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    41c0:	20 91 09 02 	lds	r18, 0x0209
    41c4:	22 23       	and	r18, r18
    41c6:	09 f4       	brne	.+2      	; 0x41ca <__vector_29+0x44c>
    41c8:	6f ce       	rjmp	.-802    	; 0x3ea8 <__vector_29+0x12a>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    41ca:	63 99       	sbic	0x0c, 3	; 12
    41cc:	6d ce       	rjmp	.-806    	; 0x3ea8 <__vector_29+0x12a>
    41ce:	64 99       	sbic	0x0c, 4	; 12
    41d0:	6b ce       	rjmp	.-810    	; 0x3ea8 <__vector_29+0x12a>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    41d2:	42 2f       	mov	r20, r18
    41d4:	4f 5f       	subi	r20, 0xFF	; 255
    41d6:	40 93 09 02 	sts	0x0209, r20
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    41da:	45 30       	cpi	r20, 0x05	; 5
    41dc:	08 f4       	brcc	.+2      	; 0x41e0 <__vector_29+0x462>
    41de:	64 ce       	rjmp	.-824    	; 0x3ea8 <__vector_29+0x12a>
					if(pwm_right != 0) {
    41e0:	20 91 f5 02 	lds	r18, 0x02F5
    41e4:	30 91 f6 02 	lds	r19, 0x02F6
    41e8:	21 15       	cp	r18, r1
    41ea:	31 05       	cpc	r19, r1
    41ec:	51 f0       	breq	.+20     	; 0x4202 <__vector_29+0x484>
						right_vel_sum += value;
    41ee:	20 91 ef 02 	lds	r18, 0x02EF
    41f2:	30 91 f0 02 	lds	r19, 0x02F0
    41f6:	28 0f       	add	r18, r24
    41f8:	39 1f       	adc	r19, r25
    41fa:	30 93 f0 02 	sts	0x02F0, r19
    41fe:	20 93 ef 02 	sts	0x02EF, r18
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    4202:	48 30       	cpi	r20, 0x08	; 8
    4204:	09 f0       	breq	.+2      	; 0x4208 <__vector_29+0x48a>
    4206:	50 ce       	rjmp	.-864    	; 0x3ea8 <__vector_29+0x12a>
						firstSampleRight = 0;
    4208:	10 92 09 02 	sts	0x0209, r1
						compute_right_vel = 1;
    420c:	81 e0       	ldi	r24, 0x01	; 1
    420e:	80 93 08 02 	sts	0x0208, r24
    4212:	4a ce       	rjmp	.-876    	; 0x3ea8 <__vector_29+0x12a>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    4214:	20 91 0a 02 	lds	r18, 0x020A
    4218:	22 23       	and	r18, r18
    421a:	09 f4       	brne	.+2      	; 0x421e <__vector_29+0x4a0>
    421c:	45 ce       	rjmp	.-886    	; 0x3ea8 <__vector_29+0x12a>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    421e:	30 91 00 01 	lds	r19, 0x0100
    4222:	33 fd       	sbrc	r19, 3
    4224:	41 ce       	rjmp	.-894    	; 0x3ea8 <__vector_29+0x12a>
    4226:	30 91 00 01 	lds	r19, 0x0100
    422a:	34 fd       	sbrc	r19, 4
    422c:	3d ce       	rjmp	.-902    	; 0x3ea8 <__vector_29+0x12a>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    422e:	42 2f       	mov	r20, r18
    4230:	4f 5f       	subi	r20, 0xFF	; 255
    4232:	40 93 0a 02 	sts	0x020A, r20
				if(firstSampleLeft > 4) {
    4236:	45 30       	cpi	r20, 0x05	; 5
    4238:	08 f4       	brcc	.+2      	; 0x423c <__vector_29+0x4be>
    423a:	36 ce       	rjmp	.-916    	; 0x3ea8 <__vector_29+0x12a>
					if(pwm_left != 0) {
    423c:	20 91 f7 02 	lds	r18, 0x02F7
    4240:	30 91 f8 02 	lds	r19, 0x02F8
    4244:	21 15       	cp	r18, r1
    4246:	31 05       	cpc	r19, r1
    4248:	51 f0       	breq	.+20     	; 0x425e <__vector_29+0x4e0>
						left_vel_sum += value;
    424a:	20 91 ed 02 	lds	r18, 0x02ED
    424e:	30 91 ee 02 	lds	r19, 0x02EE
    4252:	28 0f       	add	r18, r24
    4254:	39 1f       	adc	r19, r25
    4256:	30 93 ee 02 	sts	0x02EE, r19
    425a:	20 93 ed 02 	sts	0x02ED, r18
					}
					if(firstSampleLeft==8) {
    425e:	48 30       	cpi	r20, 0x08	; 8
    4260:	09 f0       	breq	.+2      	; 0x4264 <__vector_29+0x4e6>
    4262:	22 ce       	rjmp	.-956    	; 0x3ea8 <__vector_29+0x12a>
						firstSampleLeft = 0;
    4264:	10 92 0a 02 	sts	0x020A, r1
						compute_left_vel = 1;
    4268:	81 e0       	ldi	r24, 0x01	; 1
    426a:	80 93 07 02 	sts	0x0207, r24
    426e:	1c ce       	rjmp	.-968    	; 0x3ea8 <__vector_29+0x12a>
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
    4270:	83 30       	cpi	r24, 0x03	; 3
    4272:	09 f4       	brne	.+2      	; 0x4276 <__vector_29+0x4f8>
    4274:	7c c0       	rjmp	.+248    	; 0x436e <__vector_29+0x5f0>
    4276:	84 30       	cpi	r24, 0x04	; 4
    4278:	09 f0       	breq	.+2      	; 0x427c <__vector_29+0x4fe>
    427a:	dd cd       	rjmp	.-1094   	; 0x3e36 <__vector_29+0xb8>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
    427c:	20 91 12 05 	lds	r18, 0x0512
    4280:	2f 5f       	subi	r18, 0xFF	; 255
    4282:	20 93 12 05 	sts	0x0512, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    4286:	30 e0       	ldi	r19, 0x00	; 0
    4288:	80 91 0e 05 	lds	r24, 0x050E
    428c:	90 91 0f 05 	lds	r25, 0x050F
    4290:	28 17       	cp	r18, r24
    4292:	39 07       	cpc	r19, r25
    4294:	09 f4       	brne	.+2      	; 0x4298 <__vector_29+0x51a>
    4296:	2b c1       	rjmp	.+598    	; 0x44ee <__vector_29+0x770>
						}
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}
				currentAdChannel = currentMotLeftChannel;
    4298:	80 91 25 02 	lds	r24, 0x0225
    429c:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    42a0:	80 91 28 02 	lds	r24, 0x0228
    42a4:	80 93 bc 02 	sts	0x02BC, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    42a8:	80 91 bb 02 	lds	r24, 0x02BB
    42ac:	88 23       	and	r24, r24
    42ae:	09 f4       	brne	.+2      	; 0x42b2 <__vector_29+0x534>
    42b0:	cd c0       	rjmp	.+410    	; 0x444c <__vector_29+0x6ce>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    42b2:	81 30       	cpi	r24, 0x01	; 1
    42b4:	09 f4       	brne	.+2      	; 0x42b8 <__vector_29+0x53a>
    42b6:	ab c2       	rjmp	.+1366   	; 0x480e <__vector_29+0xa90>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    42b8:	85 e0       	ldi	r24, 0x05	; 5
    42ba:	80 93 b9 02 	sts	0x02B9, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    42be:	83 e0       	ldi	r24, 0x03	; 3
    42c0:	80 93 04 05 	sts	0x0504, r24
    42c4:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    42c8:	b8 cd       	rjmp	.-1168   	; 0x3e3a <__vector_29+0xbc>
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {
    42ca:	83 30       	cpi	r24, 0x03	; 3
    42cc:	09 f4       	brne	.+2      	; 0x42d0 <__vector_29+0x552>
    42ce:	3a c1       	rjmp	.+628    	; 0x4544 <__vector_29+0x7c6>
    42d0:	84 30       	cpi	r24, 0x04	; 4
    42d2:	09 f0       	breq	.+2      	; 0x42d6 <__vector_29+0x558>
    42d4:	b2 cd       	rjmp	.-1180   	; 0x3e3a <__vector_29+0xbc>
				}
				adcSamplingState = 4;
				break;

			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
    42d6:	90 91 26 02 	lds	r25, 0x0226
    42da:	90 93 23 02 	sts	0x0223, r25
				rightChannelPhase = rightMotorPhase;
    42de:	90 91 27 02 	lds	r25, 0x0227
    42e2:	90 93 bb 02 	sts	0x02BB, r25
				if(leftChannelPhase == ACTIVE_PHASE) {
    42e6:	90 91 bc 02 	lds	r25, 0x02BC
    42ea:	99 23       	and	r25, r25
    42ec:	09 f0       	breq	.+2      	; 0x42f0 <__vector_29+0x572>
    42ee:	4c c1       	rjmp	.+664    	; 0x4588 <__vector_29+0x80a>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    42f0:	83 e0       	ldi	r24, 0x03	; 3
    42f2:	80 93 b9 02 	sts	0x02B9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;
    42f6:	10 92 ba 02 	sts	0x02BA, r1

				if(currentProx==14 && measBattery==1) {
    42fa:	60 91 24 02 	lds	r22, 0x0224
    42fe:	6e 30       	cpi	r22, 0x0E	; 14
    4300:	09 f4       	brne	.+2      	; 0x4304 <__vector_29+0x586>
    4302:	1c c2       	rjmp	.+1080   	; 0x473c <__vector_29+0x9be>
					measBattery=2;
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
				}

				// turn on the IR pulses for the proximities only in their active phases
				if(currentProx & 0x01) {
    4304:	86 2f       	mov	r24, r22
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	60 ff       	sbrs	r22, 0
    430a:	95 cd       	rjmp	.-1238   	; 0x3e36 <__vector_29+0xb8>
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    430c:	60 31       	cpi	r22, 0x10	; 16
    430e:	08 f0       	brcs	.+2      	; 0x4312 <__vector_29+0x594>
    4310:	34 c2       	rjmp	.+1128   	; 0x477a <__vector_29+0x9fc>
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
    4312:	66 95       	lsr	r22
    4314:	81 e0       	ldi	r24, 0x01	; 1
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	02 c0       	rjmp	.+4      	; 0x431e <__vector_29+0x5a0>
    431a:	88 0f       	add	r24, r24
    431c:	99 1f       	adc	r25, r25
    431e:	6a 95       	dec	r22
    4320:	e2 f7       	brpl	.-8      	; 0x431a <__vector_29+0x59c>
    4322:	82 b9       	out	0x02, r24	; 2
    4324:	80 91 ba 02 	lds	r24, 0x02BA
    4328:	88 cd       	rjmp	.-1264   	; 0x3e3a <__vector_29+0xbc>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    432a:	99 30       	cpi	r25, 0x09	; 9
    432c:	09 f4       	brne	.+2      	; 0x4330 <__vector_29+0x5b2>
    432e:	b3 c1       	rjmp	.+870    	; 0x4696 <__vector_29+0x918>
    4330:	9a 30       	cpi	r25, 0x0A	; 10
    4332:	08 f0       	brcs	.+2      	; 0x4336 <__vector_29+0x5b8>
    4334:	8f c0       	rjmp	.+286    	; 0x4454 <__vector_29+0x6d6>
    4336:	97 30       	cpi	r25, 0x07	; 7
    4338:	09 f4       	brne	.+2      	; 0x433c <__vector_29+0x5be>
    433a:	90 c1       	rjmp	.+800    	; 0x465c <__vector_29+0x8de>
    433c:	98 30       	cpi	r25, 0x08	; 8
    433e:	09 f0       	breq	.+2      	; 0x4342 <__vector_29+0x5c4>
    4340:	7a cd       	rjmp	.-1292   	; 0x3e36 <__vector_29+0xb8>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 8;
				break;

			case 8:
				currentAdChannel = currentMotRightChannel;
    4342:	80 91 26 02 	lds	r24, 0x0226
    4346:	80 93 23 02 	sts	0x0223, r24
				rightChannelPhase = rightMotorPhase;
    434a:	80 91 27 02 	lds	r24, 0x0227
    434e:	80 93 bb 02 	sts	0x02BB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    4352:	80 91 bc 02 	lds	r24, 0x02BC
    4356:	88 23       	and	r24, r24
    4358:	09 f0       	breq	.+2      	; 0x435c <__vector_29+0x5de>
    435a:	61 c2       	rjmp	.+1218   	; 0x481e <__vector_29+0xaa0>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    435c:	83 e0       	ldi	r24, 0x03	; 3
    435e:	80 93 b9 02 	sts	0x02B9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 9;
    4362:	89 e0       	ldi	r24, 0x09	; 9
    4364:	80 93 e6 04 	sts	0x04E6, r24
    4368:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    436c:	66 cd       	rjmp	.-1332   	; 0x3e3a <__vector_29+0xbc>

			case IRCOMM_TX_ADC_WAIT_PREPARATION:
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
    436e:	20 91 12 05 	lds	r18, 0x0512
    4372:	2f 5f       	subi	r18, 0xFF	; 255
    4374:	20 93 12 05 	sts	0x0512, r18
				if(irCommTxDurationCycle == irCommTxDuration) {
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	80 91 0e 05 	lds	r24, 0x050E
    437e:	90 91 0f 05 	lds	r25, 0x050F
    4382:	28 17       	cp	r18, r24
    4384:	39 07       	cpc	r19, r25
    4386:	09 f4       	brne	.+2      	; 0x438a <__vector_29+0x60c>
    4388:	8d c0       	rjmp	.+282    	; 0x44a4 <__vector_29+0x726>
						}						
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}	
				currentAdChannel = currentMotRightChannel;
    438a:	80 91 26 02 	lds	r24, 0x0226
    438e:	80 93 23 02 	sts	0x0223, r24
				rightChannelPhase = rightMotorPhase;
    4392:	80 91 27 02 	lds	r24, 0x0227
    4396:	80 93 bb 02 	sts	0x02BB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    439a:	80 91 bc 02 	lds	r24, 0x02BC
    439e:	88 23       	and	r24, r24
    43a0:	09 f4       	brne	.+2      	; 0x43a4 <__vector_29+0x626>
    43a2:	50 c0       	rjmp	.+160    	; 0x4444 <__vector_29+0x6c6>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    43a4:	81 30       	cpi	r24, 0x01	; 1
    43a6:	09 f4       	brne	.+2      	; 0x43aa <__vector_29+0x62c>
    43a8:	36 c2       	rjmp	.+1132   	; 0x4816 <__vector_29+0xa98>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    43aa:	85 e0       	ldi	r24, 0x05	; 5
    43ac:	80 93 b9 02 	sts	0x02B9, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
    43b0:	84 e0       	ldi	r24, 0x04	; 4
    43b2:	80 93 04 05 	sts	0x0504, r24
    43b6:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    43ba:	3f cd       	rjmp	.-1410   	; 0x3e3a <__vector_29+0xbc>
	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
    43bc:	20 91 4f 04 	lds	r18, 0x044F
    43c0:	22 23       	and	r18, r18
    43c2:	19 f5       	brne	.+70     	; 0x440a <__vector_29+0x68c>
					PORTJ &= 0xF0;	// ground
    43c4:	80 91 05 01 	lds	r24, 0x0105
    43c8:	80 7f       	andi	r24, 0xF0	; 240
    43ca:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximity
    43ce:	12 b8       	out	0x02, r1	; 2

				if(hardwareRevision == HW_REV_3_1) {
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximtiy
				}
				currentAdChannel = currentMotLeftChannel;
    43d0:	80 91 25 02 	lds	r24, 0x0225
    43d4:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    43d8:	80 91 28 02 	lds	r24, 0x0228
    43dc:	80 93 bc 02 	sts	0x02BC, r24
				adcSaveDataTo = SKIP_SAMPLE;				
    43e0:	85 e0       	ldi	r24, 0x05	; 5
    43e2:	80 93 b9 02 	sts	0x02B9, r24
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
    43e6:	80 93 c6 04 	sts	0x04C6, r24
				irCommTxWaitStartTime = getTime100MicroSec();
    43ea:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    43ee:	60 93 07 05 	sts	0x0507, r22
    43f2:	70 93 08 05 	sts	0x0508, r23
    43f6:	80 93 09 05 	sts	0x0509, r24
    43fa:	90 93 0a 05 	sts	0x050A, r25
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    43fe:	82 e0       	ldi	r24, 0x02	; 2
    4400:	80 93 04 05 	sts	0x0504, r24
    4404:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4408:	18 cd       	rjmp	.-1488   	; 0x3e3a <__vector_29+0xbc>
				if(hardwareRevision == HW_REV_3_0) {
					PORTJ &= 0xF0;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_0_1) {
    440a:	21 30       	cpi	r18, 0x01	; 1
    440c:	11 f0       	breq	.+4      	; 0x4412 <__vector_29+0x694>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
    440e:	22 30       	cpi	r18, 0x02	; 2
    4410:	f9 f6       	brne	.-66     	; 0x43d0 <__vector_29+0x652>
					PORTJ = 0xFF;	// ground
    4412:	8f ef       	ldi	r24, 0xFF	; 255
    4414:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximtiy
    4418:	12 b8       	out	0x02, r1	; 2
    441a:	da cf       	rjmp	.-76     	; 0x43d0 <__vector_29+0x652>
		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {

			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    441c:	80 91 24 02 	lds	r24, 0x0224
    4420:	86 95       	lsr	r24
    4422:	80 93 23 02 	sts	0x0223, r24
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    4426:	80 91 bb 02 	lds	r24, 0x02BB
    442a:	88 23       	and	r24, r24
    442c:	09 f0       	breq	.+2      	; 0x4430 <__vector_29+0x6b2>
    442e:	b2 c0       	rjmp	.+356    	; 0x4594 <__vector_29+0x816>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    4430:	81 e0       	ldi	r24, 0x01	; 1
    4432:	80 93 b9 02 	sts	0x02B9, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 1;
    4436:	81 e0       	ldi	r24, 0x01	; 1
    4438:	80 93 ba 02 	sts	0x02BA, r24
				break;
    443c:	fe cc       	rjmp	.-1540   	; 0x3e3a <__vector_29+0xbc>
					} else {
						cliffDetectedFlag = 0;
						//LED_RED_OFF;
					}
				} else {
					cliffDetectedFlag = 0;
    443e:	10 92 6e 04 	sts	0x046E, r1
    4442:	24 ce       	rjmp	.-952    	; 0x408c <__vector_29+0x30e>
					}
				}	
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4444:	83 e0       	ldi	r24, 0x03	; 3
    4446:	80 93 b9 02 	sts	0x02B9, r24
    444a:	b2 cf       	rjmp	.-156    	; 0x43b0 <__vector_29+0x632>
					}
				}
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    444c:	81 e0       	ldi	r24, 0x01	; 1
    444e:	80 93 b9 02 	sts	0x02B9, r24
    4452:	35 cf       	rjmp	.-406    	; 0x42be <__vector_29+0x540>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    4454:	9b 30       	cpi	r25, 0x0B	; 11
    4456:	09 f4       	brne	.+2      	; 0x445a <__vector_29+0x6dc>
    4458:	60 c1       	rjmp	.+704    	; 0x471a <__vector_29+0x99c>
    445a:	9b 30       	cpi	r25, 0x0B	; 11
    445c:	08 f4       	brcc	.+2      	; 0x4460 <__vector_29+0x6e2>
    445e:	33 c1       	rjmp	.+614    	; 0x46c6 <__vector_29+0x948>
    4460:	9c 30       	cpi	r25, 0x0C	; 12
    4462:	09 f0       	breq	.+2      	; 0x4466 <__vector_29+0x6e8>
    4464:	e8 cc       	rjmp	.-1584   	; 0x3e36 <__vector_29+0xb8>
				}
				irCommAdcRxState = 0;
				break;

			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
    4466:	85 e0       	ldi	r24, 0x05	; 5
    4468:	80 93 b9 02 	sts	0x02B9, r24
    446c:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4470:	e4 cc       	rjmp	.-1592   	; 0x3e3a <__vector_29+0xbc>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    4472:	99 23       	and	r25, r25
    4474:	09 f4       	brne	.+2      	; 0x4478 <__vector_29+0x6fa>
    4476:	03 c1       	rjmp	.+518    	; 0x467e <__vector_29+0x900>
    4478:	91 30       	cpi	r25, 0x01	; 1
    447a:	09 f0       	breq	.+2      	; 0x447e <__vector_29+0x700>
    447c:	dc cc       	rjmp	.-1608   	; 0x3e36 <__vector_29+0xb8>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 1;
				break;

			case 1:
				currentAdChannel = currentProx+1;
    447e:	80 91 24 02 	lds	r24, 0x0224
    4482:	8f 5f       	subi	r24, 0xFF	; 255
    4484:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4488:	86 e0       	ldi	r24, 0x06	; 6
    448a:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 2;
    448e:	82 e0       	ldi	r24, 0x02	; 2
    4490:	80 93 e6 04 	sts	0x04E6, r24
    4494:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4498:	d0 cc       	rjmp	.-1632   	; 0x3e3a <__vector_29+0xbc>
					irCommMode = IRCOMM_MODE_RECEIVE;
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT_ONLY && currentProx==23) {
					irCommMode = IRCOMM_MODE_TRANSMIT;
					if(irCommTxByteEnqueued==1) {
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
    449a:	80 93 04 05 	sts	0x0504, r24
    449e:	80 91 ba 02 	lds	r24, 0x02BA
    44a2:	cb cc       	rjmp	.-1642   	; 0x3e3a <__vector_29+0xbc>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    44a4:	10 92 12 05 	sts	0x0512, r1
					if(irCommTxPulseState == 0) {
    44a8:	80 91 0d 05 	lds	r24, 0x050D
    44ac:	88 23       	and	r24, r24
    44ae:	09 f0       	breq	.+2      	; 0x44b2 <__vector_29+0x734>
    44b0:	a6 c1       	rjmp	.+844    	; 0x47fe <__vector_29+0xa80>
						irCommTxPulseState = 1;
    44b2:	81 e0       	ldi	r24, 0x01	; 1
    44b4:	80 93 0d 05 	sts	0x050D, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						PORTA = irCommTxSensorMask;
    44b8:	80 91 13 05 	lds	r24, 0x0513
    44bc:	82 b9       	out	0x02, r24	; 2
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    44be:	80 91 11 05 	lds	r24, 0x0511
    44c2:	8f 5f       	subi	r24, 0xFF	; 255
    44c4:	80 93 11 05 	sts	0x0511, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    44c8:	90 91 10 05 	lds	r25, 0x0510
    44cc:	89 17       	cp	r24, r25
    44ce:	09 f0       	breq	.+2      	; 0x44d2 <__vector_29+0x754>
    44d0:	5c cf       	rjmp	.-328    	; 0x438a <__vector_29+0x60c>
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
    44d2:	80 91 0c 05 	lds	r24, 0x050C
    44d6:	8f 5f       	subi	r24, 0xFF	; 255
    44d8:	80 93 0c 05 	sts	0x050C, r24
						if(irCommTxBitCount==12) {
    44dc:	8c 30       	cpi	r24, 0x0C	; 12
    44de:	09 f4       	brne	.+2      	; 0x44e2 <__vector_29+0x764>
    44e0:	d8 c1       	rjmp	.+944    	; 0x4892 <__vector_29+0xb14>
								adcSamplingState = 0;
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							}
							PORTA = 0x00;
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
    44e2:	82 e0       	ldi	r24, 0x02	; 2
    44e4:	80 93 c6 04 	sts	0x04C6, r24
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    44e8:	80 93 04 05 	sts	0x0504, r24
    44ec:	bc cf       	rjmp	.-136    	; 0x4466 <__vector_29+0x6e8>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    44ee:	10 92 12 05 	sts	0x0512, r1
					if(irCommTxPulseState == 0) {
    44f2:	80 91 0d 05 	lds	r24, 0x050D
    44f6:	88 23       	and	r24, r24
    44f8:	09 f0       	breq	.+2      	; 0x44fc <__vector_29+0x77e>
    44fa:	85 c1       	rjmp	.+778    	; 0x4806 <__vector_29+0xa88>
						irCommTxPulseState = 1;
    44fc:	81 e0       	ldi	r24, 0x01	; 1
    44fe:	80 93 0d 05 	sts	0x050D, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						PORTA = irCommTxSensorMask;
    4502:	80 91 13 05 	lds	r24, 0x0513
    4506:	82 b9       	out	0x02, r24	; 2
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    4508:	80 91 11 05 	lds	r24, 0x0511
    450c:	8f 5f       	subi	r24, 0xFF	; 255
    450e:	80 93 11 05 	sts	0x0511, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    4512:	90 91 10 05 	lds	r25, 0x0510
    4516:	89 17       	cp	r24, r25
    4518:	09 f0       	breq	.+2      	; 0x451c <__vector_29+0x79e>
    451a:	be ce       	rjmp	.-644    	; 0x4298 <__vector_29+0x51a>
    451c:	da cf       	rjmp	.-76     	; 0x44d2 <__vector_29+0x754>
					}					
				}
				break;

			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
    451e:	80 91 26 02 	lds	r24, 0x0226
    4522:	80 93 23 02 	sts	0x0223, r24
				rightChannelPhase = rightMotorPhase;
    4526:	80 91 27 02 	lds	r24, 0x0227
    452a:	80 93 bb 02 	sts	0x02BB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    452e:	80 91 bc 02 	lds	r24, 0x02BC
    4532:	88 23       	and	r24, r24
    4534:	b1 f5       	brne	.+108    	; 0x45a2 <__vector_29+0x824>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4536:	83 e0       	ldi	r24, 0x03	; 3
    4538:	80 93 b9 02 	sts	0x02B9, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 3;
    453c:	83 e0       	ldi	r24, 0x03	; 3
    453e:	80 93 ba 02 	sts	0x02BA, r24
				break;
    4542:	7b cc       	rjmp	.-1802   	; 0x3e3a <__vector_29+0xbc>

			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
    4544:	80 91 25 02 	lds	r24, 0x0225
    4548:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    454c:	80 91 28 02 	lds	r24, 0x0228
    4550:	80 93 bc 02 	sts	0x02BC, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    4554:	80 91 bb 02 	lds	r24, 0x02BB
    4558:	88 23       	and	r24, r24
    455a:	51 f5       	brne	.+84     	; 0x45b0 <__vector_29+0x832>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	80 93 b9 02 	sts	0x02B9, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 4;
    4562:	84 e0       	ldi	r24, 0x04	; 4
    4564:	80 93 ba 02 	sts	0x02BA, r24
				break;
    4568:	68 cc       	rjmp	.-1840   	; 0x3e3a <__vector_29+0xbc>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    456a:	20 91 bf 02 	lds	r18, 0x02BF
    456e:	22 30       	cpi	r18, 0x02	; 2
    4570:	09 f0       	breq	.+2      	; 0x4574 <__vector_29+0x7f6>
    4572:	09 cd       	rjmp	.-1518   	; 0x3f86 <__vector_29+0x208>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    4574:	90 93 be 02 	sts	0x02BE, r25
    4578:	80 93 bd 02 	sts	0x02BD, r24
				measBattery = 0;
    457c:	10 92 bf 02 	sts	0x02BF, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    4580:	46 98       	cbi	0x08, 6	; 8
    4582:	2e e0       	ldi	r18, 0x0E	; 14
    4584:	30 e0       	ldi	r19, 0x00	; 0
    4586:	08 cd       	rjmp	.-1520   	; 0x3f98 <__vector_29+0x21a>
			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    4588:	91 30       	cpi	r25, 0x01	; 1
    458a:	09 f0       	breq	.+2      	; 0x458e <__vector_29+0x810>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    458c:	85 e0       	ldi	r24, 0x05	; 5
    458e:	80 93 b9 02 	sts	0x02B9, r24
    4592:	b1 ce       	rjmp	.-670    	; 0x42f6 <__vector_29+0x578>
			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4594:	81 30       	cpi	r24, 0x01	; 1
    4596:	09 f4       	brne	.+2      	; 0x459a <__vector_29+0x81c>
    4598:	50 c1       	rjmp	.+672    	; 0x483a <__vector_29+0xabc>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    459a:	85 e0       	ldi	r24, 0x05	; 5
    459c:	80 93 b9 02 	sts	0x02B9, r24
    45a0:	4a cf       	rjmp	.-364    	; 0x4436 <__vector_29+0x6b8>
			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    45a2:	81 30       	cpi	r24, 0x01	; 1
    45a4:	09 f4       	brne	.+2      	; 0x45a8 <__vector_29+0x82a>
    45a6:	4d c1       	rjmp	.+666    	; 0x4842 <__vector_29+0xac4>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    45a8:	85 e0       	ldi	r24, 0x05	; 5
    45aa:	80 93 b9 02 	sts	0x02B9, r24
    45ae:	c6 cf       	rjmp	.-116    	; 0x453c <__vector_29+0x7be>
			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    45b0:	81 30       	cpi	r24, 0x01	; 1
    45b2:	09 f4       	brne	.+2      	; 0x45b6 <__vector_29+0x838>
    45b4:	4a c1       	rjmp	.+660    	; 0x484a <__vector_29+0xacc>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    45b6:	85 e0       	ldi	r24, 0x05	; 5
    45b8:	80 93 b9 02 	sts	0x02B9, r24
    45bc:	d2 cf       	rjmp	.-92     	; 0x4562 <__vector_29+0x7e4>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    45be:	11 82       	std	Z+1, r1	; 0x01
    45c0:	10 82       	st	Z, r1
    45c2:	80 e0       	ldi	r24, 0x00	; 0
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	15 cd       	rjmp	.-1494   	; 0x3ff2 <__vector_29+0x274>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    45c8:	ac 01       	movw	r20, r24
    45ca:	44 5c       	subi	r20, 0xC4	; 196
    45cc:	5f 4f       	sbci	r21, 0xFF	; 255
    45ce:	55 95       	asr	r21
    45d0:	47 95       	ror	r20
    45d2:	48 37       	cpi	r20, 0x78	; 120
    45d4:	51 05       	cpc	r21, r1
    45d6:	0c f0       	brlt	.+2      	; 0x45da <__vector_29+0x85c>
    45d8:	f9 c0       	rjmp	.+498    	; 0x47cc <__vector_29+0xa4e>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    45da:	2f 53       	subi	r18, 0x3F	; 63
    45dc:	3d 4f       	sbci	r19, 0xFD	; 253
    45de:	cc 97       	sbiw	r24, 0x3c	; 60
    45e0:	95 95       	asr	r25
    45e2:	87 95       	ror	r24
    45e4:	cc 96       	adiw	r24, 0x3c	; 60
    45e6:	f9 01       	movw	r30, r18
    45e8:	91 83       	std	Z+1, r25	; 0x01
    45ea:	80 83       	st	Z, r24
    45ec:	0e cd       	rjmp	.-1508   	; 0x400a <__vector_29+0x28c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 6;
				break;

			case 6:
				currentAdChannel = currentProx+1;
    45ee:	80 91 24 02 	lds	r24, 0x0224
    45f2:	8f 5f       	subi	r24, 0xFF	; 255
    45f4:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    45f8:	90 93 b9 02 	sts	0x02B9, r25
				irCommAdcRxState = 7;
    45fc:	87 e0       	ldi	r24, 0x07	; 7
    45fe:	80 93 e6 04 	sts	0x04E6, r24
    4602:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4606:	19 cc       	rjmp	.-1998   	; 0x3e3a <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 2;
				break;

			case 2:
				currentAdChannel = currentProx+1;
    4608:	80 91 24 02 	lds	r24, 0x0224
    460c:	8f 5f       	subi	r24, 0xFF	; 255
    460e:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4612:	86 e0       	ldi	r24, 0x06	; 6
    4614:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 3;
    4618:	83 e0       	ldi	r24, 0x03	; 3
    461a:	80 93 e6 04 	sts	0x04E6, r24
    461e:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4622:	0b cc       	rjmp	.-2026   	; 0x3e3a <__vector_29+0xbc>

			case 3:
				currentAdChannel = currentProx+1;
    4624:	80 91 24 02 	lds	r24, 0x0224
    4628:	8f 5f       	subi	r24, 0xFF	; 255
    462a:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    462e:	86 e0       	ldi	r24, 0x06	; 6
    4630:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 4;
    4634:	84 e0       	ldi	r24, 0x04	; 4
    4636:	80 93 e6 04 	sts	0x04E6, r24
    463a:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    463e:	fd cb       	rjmp	.-2054   	; 0x3e3a <__vector_29+0xbc>

			case 4:
				currentAdChannel = currentProx+1;
    4640:	80 91 24 02 	lds	r24, 0x0224
    4644:	8f 5f       	subi	r24, 0xFF	; 255
    4646:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    464a:	86 e0       	ldi	r24, 0x06	; 6
    464c:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 5;
    4650:	85 e0       	ldi	r24, 0x05	; 5
    4652:	80 93 e6 04 	sts	0x04E6, r24
    4656:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    465a:	ef cb       	rjmp	.-2082   	; 0x3e3a <__vector_29+0xbc>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 7;
				break;

			case 7:
				currentAdChannel = currentMotLeftChannel;
    465c:	80 91 25 02 	lds	r24, 0x0225
    4660:	80 93 23 02 	sts	0x0223, r24
				leftChannelPhase = leftMotorPhase;
    4664:	80 91 28 02 	lds	r24, 0x0228
    4668:	80 93 bc 02 	sts	0x02BC, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    466c:	86 e0       	ldi	r24, 0x06	; 6
    466e:	80 93 b9 02 	sts	0x02B9, r24
				irCommAdcRxState = 8;
    4672:	88 e0       	ldi	r24, 0x08	; 8
    4674:	80 93 e6 04 	sts	0x04E6, r24
    4678:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    467c:	de cb       	rjmp	.-2116   	; 0x3e3a <__vector_29+0xbc>

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
			case 0:				
				currentProx = 0;
    467e:	10 92 24 02 	sts	0x0224, r1
				currentAdChannel = currentProx+1;				
    4682:	80 93 23 02 	sts	0x0223, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    4686:	96 e0       	ldi	r25, 0x06	; 6
    4688:	90 93 b9 02 	sts	0x02B9, r25
				irCommAdcRxState = 1;
    468c:	80 93 e6 04 	sts	0x04E6, r24
    4690:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4694:	d2 cb       	rjmp	.-2140   	; 0x3e3a <__vector_29+0xbc>
				}
				irCommAdcRxState = 9;
				break;

			case 9:
				currentAdChannel = currentMotLeftChannel;
    4696:	90 91 25 02 	lds	r25, 0x0225
    469a:	90 93 23 02 	sts	0x0223, r25
				leftChannelPhase = leftMotorPhase;
    469e:	90 91 28 02 	lds	r25, 0x0228
    46a2:	90 93 bc 02 	sts	0x02BC, r25
				if(rightChannelPhase == ACTIVE_PHASE) {
    46a6:	90 91 bb 02 	lds	r25, 0x02BB
    46aa:	99 23       	and	r25, r25
    46ac:	21 f0       	breq	.+8      	; 0x46b6 <__vector_29+0x938>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    46ae:	91 30       	cpi	r25, 0x01	; 1
    46b0:	09 f4       	brne	.+2      	; 0x46b4 <__vector_29+0x936>
    46b2:	5f c1       	rjmp	.+702    	; 0x4972 <__vector_29+0xbf4>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    46b4:	85 e0       	ldi	r24, 0x05	; 5
    46b6:	80 93 b9 02 	sts	0x02B9, r24
				}
				irCommAdcRxState = 10;
    46ba:	8a e0       	ldi	r24, 0x0A	; 10
    46bc:	80 93 e6 04 	sts	0x04E6, r24
    46c0:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    46c4:	ba cb       	rjmp	.-2188   	; 0x3e3a <__vector_29+0xbc>

			case 10:
				currentAdChannel = currentMotRightChannel;
    46c6:	80 91 26 02 	lds	r24, 0x0226
    46ca:	80 93 23 02 	sts	0x0223, r24
				rightChannelPhase = rightMotorPhase;
    46ce:	80 91 27 02 	lds	r24, 0x0227
    46d2:	80 93 bb 02 	sts	0x02BB, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    46d6:	80 91 bc 02 	lds	r24, 0x02BC
    46da:	88 23       	and	r24, r24
    46dc:	09 f0       	breq	.+2      	; 0x46e0 <__vector_29+0x962>
    46de:	a6 c0       	rjmp	.+332    	; 0x482c <__vector_29+0xaae>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    46e0:	83 e0       	ldi	r24, 0x03	; 3
    46e2:	80 93 b9 02 	sts	0x02B9, r24
					}
				} else {
					irCommRxWindowSamples++;
				}
				*/
				if(irCommRxBitSkipped < 254) {	// safety check
    46e6:	90 91 00 05 	lds	r25, 0x0500
    46ea:	9e 3f       	cpi	r25, 0xFE	; 254
    46ec:	18 f4       	brcc	.+6      	; 0x46f4 <__vector_29+0x976>
					irCommRxBitSkipped++;
    46ee:	9f 5f       	subi	r25, 0xFF	; 255
    46f0:	90 93 00 05 	sts	0x0500, r25
				}
				irCommRxWindowSamples++;
    46f4:	80 91 e7 04 	lds	r24, 0x04E7
    46f8:	8f 5f       	subi	r24, 0xFF	; 255
    46fa:	80 93 e7 04 	sts	0x04E7, r24
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
    46fe:	20 91 c6 04 	lds	r18, 0x04C6
    4702:	24 30       	cpi	r18, 0x04	; 4
    4704:	09 f4       	brne	.+2      	; 0x4708 <__vector_29+0x98a>
    4706:	b5 c0       	rjmp	.+362    	; 0x4872 <__vector_29+0xaf4>
					if(irCommRxBitSkipped >= irCommShiftCount) {
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
    4708:	84 31       	cpi	r24, 0x14	; 20
    470a:	09 f4       	brne	.+2      	; 0x470e <__vector_29+0x990>
    470c:	de c0       	rjmp	.+444    	; 0x48ca <__vector_29+0xb4c>
				} else {
					irCommTickCounter = 0;
					updateBlueLed(0);
				}
				*/
				irCommAdcRxState = 11;
    470e:	8b e0       	ldi	r24, 0x0B	; 11
    4710:	80 93 e6 04 	sts	0x04E6, r24
    4714:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    4718:	90 cb       	rjmp	.-2272   	; 0x3e3a <__vector_29+0xbc>

			case 11:
				currentAdChannel = 0;	// prox0
    471a:	10 92 23 02 	sts	0x0223, r1
				if(rightChannelPhase == ACTIVE_PHASE) {
    471e:	90 91 bb 02 	lds	r25, 0x02BB
    4722:	99 23       	and	r25, r25
    4724:	21 f0       	breq	.+8      	; 0x472e <__vector_29+0x9b0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4726:	91 30       	cpi	r25, 0x01	; 1
    4728:	09 f4       	brne	.+2      	; 0x472c <__vector_29+0x9ae>
    472a:	c7 c0       	rjmp	.+398    	; 0x48ba <__vector_29+0xb3c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    472c:	85 e0       	ldi	r24, 0x05	; 5
    472e:	80 93 b9 02 	sts	0x02B9, r24
				}
				irCommAdcRxState = 0;
    4732:	10 92 e6 04 	sts	0x04E6, r1
    4736:	80 91 ba 02 	lds	r24, 0x02BA
				break;
    473a:	7f cb       	rjmp	.-2306   	; 0x3e3a <__vector_29+0xbc>
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
    473c:	80 91 bf 02 	lds	r24, 0x02BF
    4740:	81 30       	cpi	r24, 0x01	; 1
    4742:	09 f4       	brne	.+2      	; 0x4746 <__vector_29+0x9c8>
    4744:	a1 c0       	rjmp	.+322    	; 0x4888 <__vector_29+0xb0a>
    4746:	80 e0       	ldi	r24, 0x00	; 0
    4748:	78 cb       	rjmp	.-2320   	; 0x3e3a <__vector_29+0xbc>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    474a:	80 91 24 02 	lds	r24, 0x0224
    474e:	87 31       	cpi	r24, 0x17	; 23
    4750:	09 f0       	breq	.+2      	; 0x4754 <__vector_29+0x9d6>
    4752:	71 cb       	rjmp	.-2334   	; 0x3e36 <__vector_29+0xb8>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    4754:	10 93 c5 04 	sts	0x04C5, r17
					if(irCommTxByteEnqueued==1) {
    4758:	80 91 06 05 	lds	r24, 0x0506
    475c:	81 30       	cpi	r24, 0x01	; 1
    475e:	09 f4       	brne	.+2      	; 0x4762 <__vector_29+0x9e4>
    4760:	9c ce       	rjmp	.-712    	; 0x449a <__vector_29+0x71c>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
    4762:	10 92 c5 04 	sts	0x04C5, r1
    4766:	80 91 ba 02 	lds	r24, 0x02BA
    476a:	67 cb       	rjmp	.-2354   	; 0x3e3a <__vector_29+0xbc>
			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    476c:	80 91 24 02 	lds	r24, 0x0224
    4770:	87 31       	cpi	r24, 0x17	; 23
    4772:	09 f4       	brne	.+2      	; 0x4776 <__vector_29+0x9f8>
    4774:	06 c1       	rjmp	.+524    	; 0x4982 <__vector_29+0xc04>
    4776:	82 e0       	ldi	r24, 0x02	; 2
    4778:	60 cb       	rjmp	.-2368   	; 0x3e3a <__vector_29+0xbc>
				if(currentProx & 0x01) {
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
					} else {
						if(hardwareRevision == HW_REV_3_0) {
    477a:	20 91 4f 04 	lds	r18, 0x044F
    477e:	22 23       	and	r18, r18
    4780:	79 f4       	brne	.+30     	; 0x47a0 <__vector_29+0xa22>
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    4782:	40 97       	sbiw	r24, 0x10	; 16
    4784:	95 95       	asr	r25
    4786:	87 95       	ror	r24
    4788:	21 e0       	ldi	r18, 0x01	; 1
    478a:	30 e0       	ldi	r19, 0x00	; 0
    478c:	02 c0       	rjmp	.+4      	; 0x4792 <__vector_29+0xa14>
    478e:	22 0f       	add	r18, r18
    4790:	33 1f       	adc	r19, r19
    4792:	8a 95       	dec	r24
    4794:	e2 f7       	brpl	.-8      	; 0x478e <__vector_29+0xa10>
    4796:	20 93 05 01 	sts	0x0105, r18
    479a:	80 91 ba 02 	lds	r24, 0x02BA
    479e:	4d cb       	rjmp	.-2406   	; 0x3e3a <__vector_29+0xbc>
						}

						if(hardwareRevision == HW_REV_3_0_1) {
    47a0:	21 30       	cpi	r18, 0x01	; 1
    47a2:	19 f0       	breq	.+6      	; 0x47aa <__vector_29+0xa2c>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
						}

						if(hardwareRevision == HW_REV_3_1) {
    47a4:	22 30       	cpi	r18, 0x02	; 2
    47a6:	09 f0       	breq	.+2      	; 0x47aa <__vector_29+0xa2c>
    47a8:	46 cb       	rjmp	.-2420   	; 0x3e36 <__vector_29+0xb8>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    47aa:	40 91 05 01 	lds	r20, 0x0105
    47ae:	40 97       	sbiw	r24, 0x10	; 16
    47b0:	95 95       	asr	r25
    47b2:	87 95       	ror	r24
    47b4:	21 e0       	ldi	r18, 0x01	; 1
    47b6:	30 e0       	ldi	r19, 0x00	; 0
    47b8:	02 c0       	rjmp	.+4      	; 0x47be <__vector_29+0xa40>
    47ba:	22 0f       	add	r18, r18
    47bc:	33 1f       	adc	r19, r19
    47be:	8a 95       	dec	r24
    47c0:	e2 f7       	brpl	.-8      	; 0x47ba <__vector_29+0xa3c>
    47c2:	20 95       	com	r18
    47c4:	24 23       	and	r18, r20
    47c6:	20 93 05 01 	sts	0x0105, r18
    47ca:	35 cb       	rjmp	.-2454   	; 0x3e36 <__vector_29+0xb8>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    47cc:	ac 01       	movw	r20, r24
    47ce:	44 5d       	subi	r20, 0xD4	; 212
    47d0:	5e 4f       	sbci	r21, 0xFE	; 254
    47d2:	55 95       	asr	r21
    47d4:	47 95       	ror	r20
    47d6:	55 95       	asr	r21
    47d8:	47 95       	ror	r20
    47da:	44 3b       	cpi	r20, 0xB4	; 180
    47dc:	51 05       	cpc	r21, r1
    47de:	cc f5       	brge	.+114    	; 0x4852 <__vector_29+0xad4>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    47e0:	2f 53       	subi	r18, 0x3F	; 63
    47e2:	3d 4f       	sbci	r19, 0xFD	; 253
    47e4:	84 5b       	subi	r24, 0xB4	; 180
    47e6:	90 40       	sbci	r25, 0x00	; 0
    47e8:	95 95       	asr	r25
    47ea:	87 95       	ror	r24
    47ec:	95 95       	asr	r25
    47ee:	87 95       	ror	r24
    47f0:	88 58       	subi	r24, 0x88	; 136
    47f2:	9f 4f       	sbci	r25, 0xFF	; 255
    47f4:	d9 01       	movw	r26, r18
    47f6:	11 96       	adiw	r26, 0x01	; 1
    47f8:	9c 93       	st	X, r25
    47fa:	8e 93       	st	-X, r24
    47fc:	06 cc       	rjmp	.-2036   	; 0x400a <__vector_29+0x28c>
						irCommTxPulseState = 1;
						//PORTA = 0xFF;
						//PORTA = 0x01;
						PORTA = irCommTxSensorMask;
					} else {
						irCommTxPulseState = 0;
    47fe:	10 92 0d 05 	sts	0x050D, r1
						PORTA = 0x00;
    4802:	12 b8       	out	0x02, r1	; 2
    4804:	5c ce       	rjmp	.-840    	; 0x44be <__vector_29+0x740>
						irCommTxPulseState = 1;
						//PORTA = 0xFF;
						//PORTA = 0x01;
						PORTA = irCommTxSensorMask;
					} else {
						irCommTxPulseState = 0;
    4806:	10 92 0d 05 	sts	0x050D, r1
						PORTA = 0x00;
    480a:	12 b8       	out	0x02, r1	; 2
    480c:	7d ce       	rjmp	.-774    	; 0x4508 <__vector_29+0x78a>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    480e:	82 e0       	ldi	r24, 0x02	; 2
    4810:	80 93 b9 02 	sts	0x02B9, r24
    4814:	54 cd       	rjmp	.-1368   	; 0x42be <__vector_29+0x540>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4816:	84 e0       	ldi	r24, 0x04	; 4
    4818:	80 93 b9 02 	sts	0x02B9, r24
    481c:	c9 cd       	rjmp	.-1134   	; 0x43b0 <__vector_29+0x632>
			case 8:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    481e:	81 30       	cpi	r24, 0x01	; 1
    4820:	09 f4       	brne	.+2      	; 0x4824 <__vector_29+0xaa6>
    4822:	ab c0       	rjmp	.+342    	; 0x497a <__vector_29+0xbfc>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4824:	85 e0       	ldi	r24, 0x05	; 5
    4826:	80 93 b9 02 	sts	0x02B9, r24
    482a:	9b cd       	rjmp	.-1226   	; 0x4362 <__vector_29+0x5e4>
			case 10:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    482c:	81 30       	cpi	r24, 0x01	; 1
    482e:	09 f4       	brne	.+2      	; 0x4832 <__vector_29+0xab4>
    4830:	48 c0       	rjmp	.+144    	; 0x48c2 <__vector_29+0xb44>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4832:	85 e0       	ldi	r24, 0x05	; 5
    4834:	80 93 b9 02 	sts	0x02B9, r24
    4838:	56 cf       	rjmp	.-340    	; 0x46e6 <__vector_29+0x968>
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    483a:	82 e0       	ldi	r24, 0x02	; 2
    483c:	80 93 b9 02 	sts	0x02B9, r24
    4840:	fa cd       	rjmp	.-1036   	; 0x4436 <__vector_29+0x6b8>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    4842:	84 e0       	ldi	r24, 0x04	; 4
    4844:	80 93 b9 02 	sts	0x02B9, r24
    4848:	79 ce       	rjmp	.-782    	; 0x453c <__vector_29+0x7be>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    484a:	82 e0       	ldi	r24, 0x02	; 2
    484c:	80 93 b9 02 	sts	0x02B9, r24
    4850:	88 ce       	rjmp	.-752    	; 0x4562 <__vector_29+0x7e4>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    4852:	2f 53       	subi	r18, 0x3F	; 63
    4854:	3d 4f       	sbci	r19, 0xFD	; 253
    4856:	84 5a       	subi	r24, 0xA4	; 164
    4858:	91 40       	sbci	r25, 0x01	; 1
    485a:	95 95       	asr	r25
    485c:	87 95       	ror	r24
    485e:	95 95       	asr	r25
    4860:	87 95       	ror	r24
    4862:	95 95       	asr	r25
    4864:	87 95       	ror	r24
    4866:	8c 54       	subi	r24, 0x4C	; 76
    4868:	9f 4f       	sbci	r25, 0xFF	; 255
    486a:	f9 01       	movw	r30, r18
    486c:	91 83       	std	Z+1, r25	; 0x01
    486e:	80 83       	st	Z, r24
    4870:	cc cb       	rjmp	.-2152   	; 0x400a <__vector_29+0x28c>
				if(irCommRxBitSkipped < 254) {	// safety check
					irCommRxBitSkipped++;
				}
				irCommRxWindowSamples++;
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
					irCommRxWindowSamples = 0;
    4872:	10 92 e7 04 	sts	0x04E7, r1
					if(irCommRxBitSkipped >= irCommShiftCount) {
    4876:	80 91 f1 04 	lds	r24, 0x04F1
    487a:	98 17       	cp	r25, r24
    487c:	08 f4       	brcc	.+2      	; 0x4880 <__vector_29+0xb02>
    487e:	47 cf       	rjmp	.-370    	; 0x470e <__vector_29+0x990>
						irCommState = IRCOMM_RX_WAITING_BIT;
    4880:	85 e0       	ldi	r24, 0x05	; 5
    4882:	80 93 c6 04 	sts	0x04C6, r24
    4886:	43 cf       	rjmp	.-378    	; 0x470e <__vector_29+0x990>
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
					measBattery=2;
    4888:	82 e0       	ldi	r24, 0x02	; 2
    488a:	80 93 bf 02 	sts	0x02BF, r24
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    488e:	46 9a       	sbi	0x08, 6	; 8
    4890:	39 cd       	rjmp	.-1422   	; 0x4304 <__vector_29+0x586>
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
    4892:	81 e0       	ldi	r24, 0x01	; 1
    4894:	80 93 c6 04 	sts	0x04C6, r24
							irCommTxByteEnqueued = 0;
    4898:	10 92 06 05 	sts	0x0506, r1
							if(irCommEnabled == IRCOMM_MODE_TRANSMIT) {
    489c:	80 91 c4 04 	lds	r24, 0x04C4
    48a0:	82 30       	cpi	r24, 0x02	; 2
    48a2:	09 f4       	brne	.+2      	; 0x48a6 <__vector_29+0xb28>
    48a4:	94 c0       	rjmp	.+296    	; 0x49ce <__vector_29+0xc50>
								adcSamplingState = 0;
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							}
							PORTA = 0x00;
    48a6:	12 b8       	out	0x02, r1	; 2
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    48a8:	92 e0       	ldi	r25, 0x02	; 2
    48aa:	90 93 04 05 	sts	0x0504, r25
						if((irCommTxBitCount==12) && (irCommEnabled==IRCOMM_MODE_TRANSMIT_ONLY)) {
    48ae:	84 30       	cpi	r24, 0x04	; 4
    48b0:	09 f0       	breq	.+2      	; 0x48b4 <__vector_29+0xb36>
    48b2:	d9 cd       	rjmp	.-1102   	; 0x4466 <__vector_29+0x6e8>
							irCommAdcTxState = IRCOMM_TX_ADC_IDLE;
    48b4:	10 92 04 05 	sts	0x0504, r1
    48b8:	d6 cd       	rjmp	.-1108   	; 0x4466 <__vector_29+0x6e8>
			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    48ba:	82 e0       	ldi	r24, 0x02	; 2
    48bc:	80 93 b9 02 	sts	0x02B9, r24
    48c0:	38 cf       	rjmp	.-400    	; 0x4732 <__vector_29+0x9b4>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    48c2:	84 e0       	ldi	r24, 0x04	; 4
    48c4:	80 93 b9 02 	sts	0x02B9, r24
    48c8:	0e cf       	rjmp	.-484    	; 0x46e6 <__vector_29+0x968>
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
					irCommRxWindowSamples = 0;
    48ca:	10 92 e7 04 	sts	0x04E7, r1
					irCommTempPointer = irCommProxValuesCurr;
    48ce:	80 91 2c 08 	lds	r24, 0x082C
    48d2:	90 91 2d 08 	lds	r25, 0x082D
					irCommProxValuesCurr = irCommProxValuesAdc;
    48d6:	20 91 4a 08 	lds	r18, 0x084A
    48da:	30 91 4b 08 	lds	r19, 0x084B
    48de:	30 93 2d 08 	sts	0x082D, r19
    48e2:	20 93 2c 08 	sts	0x082C, r18
					irCommProxValuesAdc = irCommTempPointer;
    48e6:	90 93 4b 08 	sts	0x084B, r25
    48ea:	80 93 4a 08 	sts	0x084A, r24
					irCommTempPointer = irCommMaxSensorValueCurr;
    48ee:	50 91 29 05 	lds	r21, 0x0529
    48f2:	40 91 2a 05 	lds	r20, 0x052A
					irCommMaxSensorValueCurr = irCommMaxSensorValueAdc;
    48f6:	80 91 18 0b 	lds	r24, 0x0B18
    48fa:	90 91 19 0b 	lds	r25, 0x0B19
    48fe:	90 93 2a 05 	sts	0x052A, r25
    4902:	80 93 29 05 	sts	0x0529, r24
					irCommMaxSensorValueAdc = irCommTempPointer;
    4906:	50 93 18 0b 	sts	0x0B18, r21
    490a:	40 93 19 0b 	sts	0x0B19, r20
					irCommTempPointer = irCommMinSensorValueCurr;
    490e:	80 91 15 05 	lds	r24, 0x0515
    4912:	90 91 16 05 	lds	r25, 0x0516
    4916:	90 93 5a 0b 	sts	0x0B5A, r25
    491a:	80 93 59 0b 	sts	0x0B59, r24
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
    491e:	20 91 a6 05 	lds	r18, 0x05A6
    4922:	30 91 a7 05 	lds	r19, 0x05A7
    4926:	30 93 16 05 	sts	0x0516, r19
    492a:	20 93 15 05 	sts	0x0515, r18
					irCommMinSensorValueAdc = irCommTempPointer;
    492e:	90 93 a7 05 	sts	0x05A7, r25
    4932:	80 93 a6 05 	sts	0x05A6, r24
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    4936:	e5 2f       	mov	r30, r21
    4938:	f4 2f       	mov	r31, r20
    493a:	80 e1       	ldi	r24, 0x10	; 16
    493c:	df 01       	movw	r26, r30
    493e:	1d 92       	st	X+, r1
    4940:	8a 95       	dec	r24
    4942:	e9 f7       	brne	.-6      	; 0x493e <__vector_29+0xbc0>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    4944:	80 91 a6 05 	lds	r24, 0x05A6
    4948:	90 91 a7 05 	lds	r25, 0x05A7
    494c:	6f ef       	ldi	r22, 0xFF	; 255
    494e:	70 e0       	ldi	r23, 0x00	; 0
    4950:	40 e1       	ldi	r20, 0x10	; 16
    4952:	50 e0       	ldi	r21, 0x00	; 0
    4954:	0e 94 80 52 	call	0xa500	; 0xa500 <memset>
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
    4958:	80 91 c6 04 	lds	r24, 0x04C6
    495c:	81 30       	cpi	r24, 0x01	; 1
    495e:	89 f1       	breq	.+98     	; 0x49c2 <__vector_29+0xc44>
						irCommRxBitSkipped = 0;
					}
					//if(irCommState == IRCOMM_RX_SYNC_SIGNAL) {
					//	irCommSecondBitSkipped = 1;	// the second start bit is just sampled, skip it and sync with the received signal						
					//}
					if(irCommState == IRCOMM_RX_WAITING_BIT) {
    4960:	80 91 c6 04 	lds	r24, 0x04C6
    4964:	85 30       	cpi	r24, 0x05	; 5
    4966:	09 f0       	breq	.+2      	; 0x496a <__vector_29+0xbec>
    4968:	d2 ce       	rjmp	.-604    	; 0x470e <__vector_29+0x990>
						irCommState = IRCOMM_RX_READ_BIT;
    496a:	86 e0       	ldi	r24, 0x06	; 6
    496c:	80 93 c6 04 	sts	0x04C6, r24
    4970:	ce ce       	rjmp	.-612    	; 0x470e <__vector_29+0x990>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    4972:	82 e0       	ldi	r24, 0x02	; 2
    4974:	80 93 b9 02 	sts	0x02B9, r24
    4978:	a0 ce       	rjmp	.-704    	; 0x46ba <__vector_29+0x93c>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    497a:	84 e0       	ldi	r24, 0x04	; 4
    497c:	80 93 b9 02 	sts	0x02B9, r24
    4980:	f0 cc       	rjmp	.-1568   	; 0x4362 <__vector_29+0x5e4>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
					currentAdChannel = 0;	// prox0					
    4982:	10 92 23 02 	sts	0x0223, r1
					measBattery = 0;
    4986:	10 92 bf 02 	sts	0x02BF, r1
					irCommAdcRxState = 0;					
    498a:	10 92 e6 04 	sts	0x04E6, r1
					irCommRxWindowSamples = 0;
    498e:	10 92 e7 04 	sts	0x04E7, r1
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    4992:	e0 91 18 0b 	lds	r30, 0x0B18
    4996:	f0 91 19 0b 	lds	r31, 0x0B19
    499a:	80 e1       	ldi	r24, 0x10	; 16
    499c:	df 01       	movw	r26, r30
    499e:	1d 92       	st	X+, r1
    49a0:	8a 95       	dec	r24
    49a2:	e9 f7       	brne	.-6      	; 0x499e <__vector_29+0xc20>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    49a4:	80 91 a6 05 	lds	r24, 0x05A6
    49a8:	90 91 a7 05 	lds	r25, 0x05A7
    49ac:	6f ef       	ldi	r22, 0xFF	; 255
    49ae:	70 e0       	ldi	r23, 0x00	; 0
    49b0:	40 e1       	ldi	r20, 0x10	; 16
    49b2:	50 e0       	ldi	r21, 0x00	; 0
    49b4:	0e 94 80 52 	call	0xa500	; 0xa500 <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;
    49b8:	10 93 c5 04 	sts	0x04C5, r17
    49bc:	10 91 c4 04 	lds	r17, 0x04C4
    49c0:	9e ca       	rjmp	.-2756   	; 0x3efe <__vector_29+0x180>
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
					irCommMinSensorValueAdc = irCommTempPointer;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
    49c2:	82 e0       	ldi	r24, 0x02	; 2
    49c4:	80 93 c6 04 	sts	0x04C6, r24
						irCommRxBitSkipped = 0;
    49c8:	10 92 00 05 	sts	0x0500, r1
    49cc:	c9 cf       	rjmp	.-110    	; 0x4960 <__vector_29+0xbe2>
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
							irCommTxByteEnqueued = 0;
							if(irCommEnabled == IRCOMM_MODE_TRANSMIT) {
								adcSamplingState = 0;
    49ce:	10 92 ba 02 	sts	0x02BA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    49d2:	10 92 c5 04 	sts	0x04C5, r1
    49d6:	67 cf       	rjmp	.-306    	; 0x48a6 <__vector_29+0xb28>

000049d8 <initMotors>:

#include "motors.h"

void initMotors() {
    49d8:	0f 93       	push	r16
    49da:	1f 93       	push	r17
    49dc:	cf 93       	push	r28
    49de:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    49e0:	e0 e9       	ldi	r30, 0x90	; 144
    49e2:	f0 e0       	ldi	r31, 0x00	; 0
    49e4:	10 82       	st	Z, r1
	TCCR3B = 0;
    49e6:	41 e9       	ldi	r20, 0x91	; 145
    49e8:	50 e0       	ldi	r21, 0x00	; 0
    49ea:	da 01       	movw	r26, r20
    49ec:	1c 92       	st	X, r1
	TIMSK3 = 0;
    49ee:	21 e7       	ldi	r18, 0x71	; 113
    49f0:	30 e0       	ldi	r19, 0x00	; 0
    49f2:	e9 01       	movw	r28, r18
    49f4:	18 82       	st	Y, r1
	TCCR4A = 0;
    49f6:	a0 ea       	ldi	r26, 0xA0	; 160
    49f8:	b0 e0       	ldi	r27, 0x00	; 0
    49fa:	1c 92       	st	X, r1
	TCCR4B = 0;
    49fc:	81 ea       	ldi	r24, 0xA1	; 161
    49fe:	90 e0       	ldi	r25, 0x00	; 0
    4a00:	ec 01       	movw	r28, r24
    4a02:	18 82       	st	Y, r1
	TIMSK4 = 0;
    4a04:	02 e7       	ldi	r16, 0x72	; 114
    4a06:	10 e0       	ldi	r17, 0x00	; 0
    4a08:	e8 01       	movw	r28, r16
    4a0a:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    4a0c:	60 81       	ld	r22, Z
    4a0e:	63 68       	ori	r22, 0x83	; 131
    4a10:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    4a12:	60 81       	ld	r22, Z
    4a14:	63 60       	ori	r22, 0x03	; 3
    4a16:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    4a18:	ea 01       	movw	r28, r20
    4a1a:	68 81       	ld	r22, Y
    4a1c:	6b 60       	ori	r22, 0x0B	; 11
    4a1e:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    4a20:	40 91 f5 02 	lds	r20, 0x02F5
    4a24:	50 91 f6 02 	lds	r21, 0x02F6
    4a28:	50 93 99 00 	sts	0x0099, r21
    4a2c:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    4a30:	10 92 9b 00 	sts	0x009B, r1
    4a34:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    4a38:	e9 01       	movw	r28, r18
    4a3a:	48 81       	ld	r20, Y
    4a3c:	41 60       	ori	r20, 0x01	; 1
    4a3e:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    4a40:	20 81       	ld	r18, Z
    4a42:	2f 75       	andi	r18, 0x5F	; 95
    4a44:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4a46:	2e b1       	in	r18, 0x0e	; 14
    4a48:	27 7e       	andi	r18, 0xE7	; 231
    4a4a:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    4a4c:	2c 91       	ld	r18, X
    4a4e:	23 68       	ori	r18, 0x83	; 131
    4a50:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    4a52:	fc 01       	movw	r30, r24
    4a54:	20 81       	ld	r18, Z
    4a56:	2b 60       	ori	r18, 0x0B	; 11
    4a58:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    4a5a:	80 91 f7 02 	lds	r24, 0x02F7
    4a5e:	90 91 f8 02 	lds	r25, 0x02F8
    4a62:	90 93 a9 00 	sts	0x00A9, r25
    4a66:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    4a6a:	10 92 ab 00 	sts	0x00AB, r1
    4a6e:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    4a72:	e8 01       	movw	r28, r16
    4a74:	88 81       	ld	r24, Y
    4a76:	81 60       	ori	r24, 0x01	; 1
    4a78:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    4a7a:	8c 91       	ld	r24, X
    4a7c:	8f 75       	andi	r24, 0x5F	; 95
    4a7e:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    4a80:	e2 e0       	ldi	r30, 0x02	; 2
    4a82:	f1 e0       	ldi	r31, 0x01	; 1
    4a84:	80 81       	ld	r24, Z
    4a86:	87 7e       	andi	r24, 0xE7	; 231
    4a88:	80 83       	st	Z, r24


}
    4a8a:	df 91       	pop	r29
    4a8c:	cf 91       	pop	r28
    4a8e:	1f 91       	pop	r17
    4a90:	0f 91       	pop	r16
    4a92:	08 95       	ret

00004a94 <cast_speed>:

signed int cast_speed(signed int vel) {
    4a94:	28 2f       	mov	r18, r24
    4a96:	39 2f       	mov	r19, r25
    4a98:	8e ef       	ldi	r24, 0xFE	; 254
    4a9a:	20 30       	cpi	r18, 0x00	; 0
    4a9c:	38 07       	cpc	r19, r24
    4a9e:	14 f4       	brge	.+4      	; 0x4aa4 <cast_speed+0x10>
    4aa0:	20 e0       	ldi	r18, 0x00	; 0
    4aa2:	3e ef       	ldi	r19, 0xFE	; 254
    4aa4:	82 e0       	ldi	r24, 0x02	; 2
    4aa6:	21 30       	cpi	r18, 0x01	; 1
    4aa8:	38 07       	cpc	r19, r24
    4aaa:	14 f0       	brlt	.+4      	; 0x4ab0 <cast_speed+0x1c>
    4aac:	20 e0       	ldi	r18, 0x00	; 0
    4aae:	32 e0       	ldi	r19, 0x02	; 2
        vel = MAX_MOTORS_PWM/2;
    } else if(vel < -(MAX_MOTORS_PWM/2)) {
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}
    4ab0:	c9 01       	movw	r24, r18
    4ab2:	08 95       	ret

00004ab4 <handleMotorsWithNoController>:

void handleMotorsWithNoController() {

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    4ab4:	80 91 07 02 	lds	r24, 0x0207
    4ab8:	88 23       	and	r24, r24
    4aba:	c1 f1       	breq	.+112    	; 0x4b2c <handleMotorsWithNoController+0x78>
		last_left_vel = left_vel_sum>>2;
    4abc:	60 91 ed 02 	lds	r22, 0x02ED
    4ac0:	70 91 ee 02 	lds	r23, 0x02EE
    4ac4:	76 95       	lsr	r23
    4ac6:	67 95       	ror	r22
    4ac8:	76 95       	lsr	r23
    4aca:	67 95       	ror	r22
    4acc:	70 93 f2 02 	sts	0x02F2, r23
    4ad0:	60 93 f1 02 	sts	0x02F1, r22
		compute_left_vel = 0;
    4ad4:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    4ad8:	10 92 ee 02 	sts	0x02EE, r1
    4adc:	10 92 ed 02 	sts	0x02ED, r1

		if(pwm_left_desired >= 0) {
    4ae0:	80 91 fb 02 	lds	r24, 0x02FB
    4ae4:	90 91 fc 02 	lds	r25, 0x02FC
    4ae8:	97 fd       	sbrc	r25, 7
    4aea:	e3 c0       	rjmp	.+454    	; 0x4cb2 <handleMotorsWithNoController+0x1fe>
			leftMotSteps += (last_left_vel>>3);
    4aec:	75 95       	asr	r23
    4aee:	67 95       	ror	r22
    4af0:	75 95       	asr	r23
    4af2:	67 95       	ror	r22
    4af4:	75 95       	asr	r23
    4af6:	67 95       	ror	r22
    4af8:	88 27       	eor	r24, r24
    4afa:	77 fd       	sbrc	r23, 7
    4afc:	80 95       	com	r24
    4afe:	98 2f       	mov	r25, r24
    4b00:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    4b04:	9b 01       	movw	r18, r22
    4b06:	ac 01       	movw	r20, r24
    4b08:	60 91 d5 02 	lds	r22, 0x02D5
    4b0c:	70 91 d6 02 	lds	r23, 0x02D6
    4b10:	80 91 d7 02 	lds	r24, 0x02D7
    4b14:	90 91 d8 02 	lds	r25, 0x02D8
    4b18:	0e 94 97 4e 	call	0x9d2e	; 0x9d2e <__addsf3>
    4b1c:	60 93 d5 02 	sts	0x02D5, r22
    4b20:	70 93 d6 02 	sts	0x02D6, r23
    4b24:	80 93 d7 02 	sts	0x02D7, r24
    4b28:	90 93 d8 02 	sts	0x02D8, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    4b2c:	80 91 08 02 	lds	r24, 0x0208
    4b30:	88 23       	and	r24, r24
    4b32:	c1 f1       	breq	.+112    	; 0x4ba4 <handleMotorsWithNoController+0xf0>
		last_right_vel = right_vel_sum>>2;
    4b34:	60 91 ef 02 	lds	r22, 0x02EF
    4b38:	70 91 f0 02 	lds	r23, 0x02F0
    4b3c:	76 95       	lsr	r23
    4b3e:	67 95       	ror	r22
    4b40:	76 95       	lsr	r23
    4b42:	67 95       	ror	r22
    4b44:	70 93 f4 02 	sts	0x02F4, r23
    4b48:	60 93 f3 02 	sts	0x02F3, r22
		compute_right_vel = 0;
    4b4c:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    4b50:	10 92 f0 02 	sts	0x02F0, r1
    4b54:	10 92 ef 02 	sts	0x02EF, r1

		if(pwm_right_desired >= 0) {
    4b58:	80 91 f9 02 	lds	r24, 0x02F9
    4b5c:	90 91 fa 02 	lds	r25, 0x02FA
    4b60:	97 fd       	sbrc	r25, 7
    4b62:	86 c0       	rjmp	.+268    	; 0x4c70 <handleMotorsWithNoController+0x1bc>
			rightMotSteps += (last_right_vel>>3);
    4b64:	75 95       	asr	r23
    4b66:	67 95       	ror	r22
    4b68:	75 95       	asr	r23
    4b6a:	67 95       	ror	r22
    4b6c:	75 95       	asr	r23
    4b6e:	67 95       	ror	r22
    4b70:	88 27       	eor	r24, r24
    4b72:	77 fd       	sbrc	r23, 7
    4b74:	80 95       	com	r24
    4b76:	98 2f       	mov	r25, r24
    4b78:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    4b7c:	9b 01       	movw	r18, r22
    4b7e:	ac 01       	movw	r20, r24
    4b80:	60 91 d1 02 	lds	r22, 0x02D1
    4b84:	70 91 d2 02 	lds	r23, 0x02D2
    4b88:	80 91 d3 02 	lds	r24, 0x02D3
    4b8c:	90 91 d4 02 	lds	r25, 0x02D4
    4b90:	0e 94 97 4e 	call	0x9d2e	; 0x9d2e <__addsf3>
    4b94:	60 93 d1 02 	sts	0x02D1, r22
    4b98:	70 93 d2 02 	sts	0x02D2, r23
    4b9c:	80 93 d3 02 	sts	0x02D3, r24
    4ba0:	90 93 d4 02 	sts	0x02D4, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    4ba4:	20 91 fd 02 	lds	r18, 0x02FD
    4ba8:	30 91 fe 02 	lds	r19, 0x02FE
    4bac:	c9 01       	movw	r24, r18
    4bae:	88 0f       	add	r24, r24
    4bb0:	99 1f       	adc	r25, r25
    4bb2:	88 0f       	add	r24, r24
    4bb4:	99 1f       	adc	r25, r25
    4bb6:	82 0f       	add	r24, r18
    4bb8:	93 1f       	adc	r25, r19
    4bba:	90 93 0e 03 	sts	0x030E, r25
    4bbe:	80 93 0d 03 	sts	0x030D, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    4bc2:	40 91 ff 02 	lds	r20, 0x02FF
    4bc6:	50 91 00 03 	lds	r21, 0x0300
    4bca:	9a 01       	movw	r18, r20
    4bcc:	22 0f       	add	r18, r18
    4bce:	33 1f       	adc	r19, r19
    4bd0:	22 0f       	add	r18, r18
    4bd2:	33 1f       	adc	r19, r19
    4bd4:	24 0f       	add	r18, r20
    4bd6:	35 1f       	adc	r19, r21
    4bd8:	52 2f       	mov	r21, r18
    4bda:	43 2f       	mov	r20, r19
    4bdc:	20 93 0f 03 	sts	0x030F, r18
    4be0:	30 93 10 03 	sts	0x0310, r19
	if(obstacleAvoidanceEnabled) {
    4be4:	20 91 6c 04 	lds	r18, 0x046C
    4be8:	22 23       	and	r18, r18
    4bea:	39 f5       	brne	.+78     	; 0x4c3a <handleMotorsWithNoController+0x186>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    4bec:	50 93 f7 02 	sts	0x02F7, r21
    4bf0:	40 93 f8 02 	sts	0x02F8, r20
	pwm_right = pwm_right_working;
    4bf4:	90 93 f6 02 	sts	0x02F6, r25
    4bf8:	80 93 f5 02 	sts	0x02F5, r24

	if(pwm_right > 0) {
    4bfc:	18 16       	cp	r1, r24
    4bfe:	19 06       	cpc	r1, r25
    4c00:	5c f5       	brge	.+86     	; 0x4c58 <handleMotorsWithNoController+0x1a4>
		OCR3A = (unsigned int)pwm_right;
    4c02:	90 93 99 00 	sts	0x0099, r25
    4c06:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    4c0a:	80 91 f7 02 	lds	r24, 0x02F7
    4c0e:	90 91 f8 02 	lds	r25, 0x02F8
    4c12:	18 16       	cp	r1, r24
    4c14:	19 06       	cpc	r1, r25
    4c16:	2c f4       	brge	.+10     	; 0x4c22 <handleMotorsWithNoController+0x16e>
		OCR4A = (unsigned int)pwm_left;
    4c18:	90 93 a9 00 	sts	0x00A9, r25
    4c1c:	80 93 a8 00 	sts	0x00A8, r24
    4c20:	08 95       	ret
	} else if(pwm_left < 0) {
    4c22:	00 97       	sbiw	r24, 0x00	; 0
    4c24:	09 f0       	breq	.+2      	; 0x4c28 <handleMotorsWithNoController+0x174>
    4c26:	6e c0       	rjmp	.+220    	; 0x4d04 <handleMotorsWithNoController+0x250>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    4c28:	10 92 a9 00 	sts	0x00A9, r1
    4c2c:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    4c30:	10 92 ab 00 	sts	0x00AB, r1
    4c34:	10 92 aa 00 	sts	0x00AA, r1
    4c38:	08 95       	ret
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    4c3a:	8f e0       	ldi	r24, 0x0F	; 15
    4c3c:	93 e0       	ldi	r25, 0x03	; 3
    4c3e:	6d e0       	ldi	r22, 0x0D	; 13
    4c40:	73 e0       	ldi	r23, 0x03	; 3
    4c42:	0e 94 39 38 	call	0x7072	; 0x7072 <obstacleAvoidance>
    4c46:	50 91 0f 03 	lds	r21, 0x030F
    4c4a:	40 91 10 03 	lds	r20, 0x0310
    4c4e:	80 91 0d 03 	lds	r24, 0x030D
    4c52:	90 91 0e 03 	lds	r25, 0x030E
    4c56:	ca cf       	rjmp	.-108    	; 0x4bec <handleMotorsWithNoController+0x138>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    4c58:	00 97       	sbiw	r24, 0x00	; 0
    4c5a:	09 f0       	breq	.+2      	; 0x4c5e <handleMotorsWithNoController+0x1aa>
    4c5c:	4b c0       	rjmp	.+150    	; 0x4cf4 <handleMotorsWithNoController+0x240>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    4c5e:	10 92 99 00 	sts	0x0099, r1
    4c62:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    4c66:	10 92 9b 00 	sts	0x009B, r1
    4c6a:	10 92 9a 00 	sts	0x009A, r1
    4c6e:	cd cf       	rjmp	.-102    	; 0x4c0a <handleMotorsWithNoController+0x156>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    4c70:	75 95       	asr	r23
    4c72:	67 95       	ror	r22
    4c74:	75 95       	asr	r23
    4c76:	67 95       	ror	r22
    4c78:	75 95       	asr	r23
    4c7a:	67 95       	ror	r22
    4c7c:	88 27       	eor	r24, r24
    4c7e:	77 fd       	sbrc	r23, 7
    4c80:	80 95       	com	r24
    4c82:	98 2f       	mov	r25, r24
    4c84:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    4c88:	9b 01       	movw	r18, r22
    4c8a:	ac 01       	movw	r20, r24
    4c8c:	60 91 d1 02 	lds	r22, 0x02D1
    4c90:	70 91 d2 02 	lds	r23, 0x02D2
    4c94:	80 91 d3 02 	lds	r24, 0x02D3
    4c98:	90 91 d4 02 	lds	r25, 0x02D4
    4c9c:	0e 94 96 4e 	call	0x9d2c	; 0x9d2c <__subsf3>
    4ca0:	60 93 d1 02 	sts	0x02D1, r22
    4ca4:	70 93 d2 02 	sts	0x02D2, r23
    4ca8:	80 93 d3 02 	sts	0x02D3, r24
    4cac:	90 93 d4 02 	sts	0x02D4, r25
    4cb0:	79 cf       	rjmp	.-270    	; 0x4ba4 <handleMotorsWithNoController+0xf0>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    4cb2:	75 95       	asr	r23
    4cb4:	67 95       	ror	r22
    4cb6:	75 95       	asr	r23
    4cb8:	67 95       	ror	r22
    4cba:	75 95       	asr	r23
    4cbc:	67 95       	ror	r22
    4cbe:	88 27       	eor	r24, r24
    4cc0:	77 fd       	sbrc	r23, 7
    4cc2:	80 95       	com	r24
    4cc4:	98 2f       	mov	r25, r24
    4cc6:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    4cca:	9b 01       	movw	r18, r22
    4ccc:	ac 01       	movw	r20, r24
    4cce:	60 91 d5 02 	lds	r22, 0x02D5
    4cd2:	70 91 d6 02 	lds	r23, 0x02D6
    4cd6:	80 91 d7 02 	lds	r24, 0x02D7
    4cda:	90 91 d8 02 	lds	r25, 0x02D8
    4cde:	0e 94 96 4e 	call	0x9d2c	; 0x9d2c <__subsf3>
    4ce2:	60 93 d5 02 	sts	0x02D5, r22
    4ce6:	70 93 d6 02 	sts	0x02D6, r23
    4cea:	80 93 d7 02 	sts	0x02D7, r24
    4cee:	90 93 d8 02 	sts	0x02D8, r25
    4cf2:	1c cf       	rjmp	.-456    	; 0x4b2c <handleMotorsWithNoController+0x78>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    4cf4:	90 95       	com	r25
    4cf6:	81 95       	neg	r24
    4cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    4cfa:	90 93 9b 00 	sts	0x009B, r25
    4cfe:	80 93 9a 00 	sts	0x009A, r24
    4d02:	83 cf       	rjmp	.-250    	; 0x4c0a <handleMotorsWithNoController+0x156>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    4d04:	90 95       	com	r25
    4d06:	81 95       	neg	r24
    4d08:	9f 4f       	sbci	r25, 0xFF	; 255
    4d0a:	90 93 ab 00 	sts	0x00AB, r25
    4d0e:	80 93 aa 00 	sts	0x00AA, r24
    4d12:	08 95       	ret

00004d14 <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4d14:	28 2f       	mov	r18, r24
    4d16:	33 27       	eor	r19, r19
    4d18:	27 fd       	sbrc	r18, 7
    4d1a:	30 95       	com	r19
    4d1c:	37 fd       	sbrc	r19, 7
    4d1e:	13 c0       	rjmp	.+38     	; 0x4d46 <setLeftSpeed+0x32>
    4d20:	30 93 12 03 	sts	0x0312, r19
    4d24:	20 93 11 03 	sts	0x0311, r18

    if(vel >= 0) {
    4d28:	87 fd       	sbrc	r24, 7
    4d2a:	05 c0       	rjmp	.+10     	; 0x4d36 <setLeftSpeed+0x22>
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    4d2c:	30 93 fc 02 	sts	0x02FC, r19
    4d30:	20 93 fb 02 	sts	0x02FB, r18
    4d34:	08 95       	ret
    4d36:	30 95       	com	r19
    4d38:	21 95       	neg	r18
    4d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d3c:	30 93 fc 02 	sts	0x02FC, r19
    4d40:	20 93 fb 02 	sts	0x02FB, r18
    4d44:	08 95       	ret
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    4d46:	30 95       	com	r19
    4d48:	21 95       	neg	r18
    4d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d4c:	e9 cf       	rjmp	.-46     	; 0x4d20 <setLeftSpeed+0xc>

00004d4e <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    4d4e:	28 2f       	mov	r18, r24
    4d50:	33 27       	eor	r19, r19
    4d52:	27 fd       	sbrc	r18, 7
    4d54:	30 95       	com	r19
    4d56:	37 fd       	sbrc	r19, 7
    4d58:	13 c0       	rjmp	.+38     	; 0x4d80 <setRightSpeed+0x32>
    4d5a:	30 93 14 03 	sts	0x0314, r19
    4d5e:	20 93 13 03 	sts	0x0313, r18

    if(vel >= 0) {
    4d62:	87 fd       	sbrc	r24, 7
    4d64:	05 c0       	rjmp	.+10     	; 0x4d70 <setRightSpeed+0x22>
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    4d66:	30 93 fa 02 	sts	0x02FA, r19
    4d6a:	20 93 f9 02 	sts	0x02F9, r18
    4d6e:	08 95       	ret
    4d70:	30 95       	com	r19
    4d72:	21 95       	neg	r18
    4d74:	3f 4f       	sbci	r19, 0xFF	; 255
    4d76:	30 93 fa 02 	sts	0x02FA, r19
    4d7a:	20 93 f9 02 	sts	0x02F9, r18
    4d7e:	08 95       	ret

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    4d80:	30 95       	com	r19
    4d82:	21 95       	neg	r18
    4d84:	3f 4f       	sbci	r19, 0xFF	; 255
    4d86:	e9 cf       	rjmp	.-46     	; 0x4d5a <setRightSpeed+0xc>

00004d88 <updateOdomData>:
}


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
    4d88:	80 91 32 05 	lds	r24, 0x0532
    4d8c:	88 23       	and	r24, r24
    4d8e:	89 f5       	brne	.+98     	; 0x4df2 <updateOdomData+0x6a>
        if(calibVelIndex>1) {
    4d90:	e0 91 9c 08 	lds	r30, 0x089C
    4d94:	e2 30       	cpi	r30, 0x02	; 2
    4d96:	08 f4       	brcc	.+2      	; 0x4d9a <updateOdomData+0x12>
    4d98:	96 c0       	rjmp	.+300    	; 0x4ec6 <updateOdomData+0x13e>
            if(calibration[calibVelIndex-2][1] >= tempVel) {  // check that we have always increasing values of speed, otherwise there
    4d9a:	f0 e0       	ldi	r31, 0x00	; 0
    4d9c:	df 01       	movw	r26, r30
    4d9e:	a2 95       	swap	r26
    4da0:	b2 95       	swap	r27
    4da2:	b0 7f       	andi	r27, 0xF0	; 240
    4da4:	ba 27       	eor	r27, r26
    4da6:	a0 7f       	andi	r26, 0xF0	; 240
    4da8:	ba 27       	eor	r27, r26
    4daa:	ad 55       	subi	r26, 0x5D	; 93
    4dac:	b7 4f       	sbci	r27, 0xF7	; 247
    4dae:	12 96       	adiw	r26, 0x02	; 2
    4db0:	2d 91       	ld	r18, X+
    4db2:	3c 91       	ld	r19, X
    4db4:	13 97       	sbiw	r26, 0x03	; 3
    4db6:	80 91 57 0b 	lds	r24, 0x0B57
    4dba:	90 91 58 0b 	lds	r25, 0x0B58
    4dbe:	28 17       	cp	r18, r24
    4dc0:	39 07       	cpc	r19, r25
    4dc2:	34 f0       	brlt	.+12     	; 0x4dd0 <updateOdomData+0x48>
                tempVel = calibration[calibVelIndex-2][1]+1; // will be problems when getting data from the lookup table
    4dc4:	c9 01       	movw	r24, r18
    4dc6:	01 96       	adiw	r24, 0x01	; 1
    4dc8:	90 93 58 0b 	sts	0x0B58, r25
    4dcc:	80 93 57 0b 	sts	0x0B57, r24
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
    4dd0:	e2 95       	swap	r30
    4dd2:	f2 95       	swap	r31
    4dd4:	f0 7f       	andi	r31, 0xF0	; 240
    4dd6:	fe 27       	eor	r31, r30
    4dd8:	e0 7f       	andi	r30, 0xF0	; 240
    4dda:	fe 27       	eor	r31, r30
    4ddc:	ed 54       	subi	r30, 0x4D	; 77
    4dde:	f7 4f       	sbci	r31, 0xF7	; 247
    4de0:	20 91 b4 04 	lds	r18, 0x04B4
    4de4:	30 91 b5 04 	lds	r19, 0x04B5
    4de8:	31 83       	std	Z+1, r19	; 0x01
    4dea:	20 83       	st	Z, r18
        calibration[calibVelIndex-1][1] = tempVel;
    4dec:	93 83       	std	Z+3, r25	; 0x03
    4dee:	82 83       	std	Z+2, r24	; 0x02
    4df0:	08 95       	ret
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    4df2:	81 30       	cpi	r24, 0x01	; 1
    4df4:	31 f0       	breq	.+12     	; 0x4e02 <updateOdomData+0x7a>
                tempVel = calibration[calibVelIndex-2][3]+1;
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
    4df6:	82 30       	cpi	r24, 0x02	; 2
    4df8:	09 f4       	brne	.+2      	; 0x4dfc <updateOdomData+0x74>
    4dfa:	6b c0       	rjmp	.+214    	; 0x4ed2 <updateOdomData+0x14a>
                tempVel = calibration[calibVelIndex-2][5]+1;
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    4dfc:	83 30       	cpi	r24, 0x03	; 3
    4dfe:	91 f1       	breq	.+100    	; 0x4e64 <updateOdomData+0xdc>
    4e00:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4e02:	e0 91 9c 08 	lds	r30, 0x089C
    4e06:	e2 30       	cpi	r30, 0x02	; 2
    4e08:	08 f4       	brcc	.+2      	; 0x4e0c <updateOdomData+0x84>
    4e0a:	93 c0       	rjmp	.+294    	; 0x4f32 <updateOdomData+0x1aa>
            if(calibration[calibVelIndex-2][3] >= tempVel) {
    4e0c:	f0 e0       	ldi	r31, 0x00	; 0
    4e0e:	df 01       	movw	r26, r30
    4e10:	a2 95       	swap	r26
    4e12:	b2 95       	swap	r27
    4e14:	b0 7f       	andi	r27, 0xF0	; 240
    4e16:	ba 27       	eor	r27, r26
    4e18:	a0 7f       	andi	r26, 0xF0	; 240
    4e1a:	ba 27       	eor	r27, r26
    4e1c:	ad 55       	subi	r26, 0x5D	; 93
    4e1e:	b7 4f       	sbci	r27, 0xF7	; 247
    4e20:	16 96       	adiw	r26, 0x06	; 6
    4e22:	2d 91       	ld	r18, X+
    4e24:	3c 91       	ld	r19, X
    4e26:	17 97       	sbiw	r26, 0x07	; 7
    4e28:	80 91 57 0b 	lds	r24, 0x0B57
    4e2c:	90 91 58 0b 	lds	r25, 0x0B58
    4e30:	28 17       	cp	r18, r24
    4e32:	39 07       	cpc	r19, r25
    4e34:	34 f0       	brlt	.+12     	; 0x4e42 <updateOdomData+0xba>
                tempVel = calibration[calibVelIndex-2][3]+1;
    4e36:	c9 01       	movw	r24, r18
    4e38:	01 96       	adiw	r24, 0x01	; 1
    4e3a:	90 93 58 0b 	sts	0x0B58, r25
    4e3e:	80 93 57 0b 	sts	0x0B57, r24
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
    4e42:	e2 95       	swap	r30
    4e44:	f2 95       	swap	r31
    4e46:	f0 7f       	andi	r31, 0xF0	; 240
    4e48:	fe 27       	eor	r31, r30
    4e4a:	e0 7f       	andi	r30, 0xF0	; 240
    4e4c:	fe 27       	eor	r31, r30
    4e4e:	ed 54       	subi	r30, 0x4D	; 77
    4e50:	f7 4f       	sbci	r31, 0xF7	; 247
    4e52:	20 91 b6 04 	lds	r18, 0x04B6
    4e56:	30 91 b7 04 	lds	r19, 0x04B7
    4e5a:	35 83       	std	Z+5, r19	; 0x05
    4e5c:	24 83       	std	Z+4, r18	; 0x04
        calibration[calibVelIndex-1][3] = tempVel;
    4e5e:	97 83       	std	Z+7, r25	; 0x07
    4e60:	86 83       	std	Z+6, r24	; 0x06
    4e62:	08 95       	ret
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4e64:	e0 91 9c 08 	lds	r30, 0x089C
    4e68:	e2 30       	cpi	r30, 0x02	; 2
    4e6a:	08 f4       	brcc	.+2      	; 0x4e6e <updateOdomData+0xe6>
    4e6c:	68 c0       	rjmp	.+208    	; 0x4f3e <updateOdomData+0x1b6>
            if(calibration[calibVelIndex-2][7] >= tempVel) {
    4e6e:	f0 e0       	ldi	r31, 0x00	; 0
    4e70:	df 01       	movw	r26, r30
    4e72:	a2 95       	swap	r26
    4e74:	b2 95       	swap	r27
    4e76:	b0 7f       	andi	r27, 0xF0	; 240
    4e78:	ba 27       	eor	r27, r26
    4e7a:	a0 7f       	andi	r26, 0xF0	; 240
    4e7c:	ba 27       	eor	r27, r26
    4e7e:	ad 55       	subi	r26, 0x5D	; 93
    4e80:	b7 4f       	sbci	r27, 0xF7	; 247
    4e82:	1e 96       	adiw	r26, 0x0e	; 14
    4e84:	2d 91       	ld	r18, X+
    4e86:	3c 91       	ld	r19, X
    4e88:	1f 97       	sbiw	r26, 0x0f	; 15
    4e8a:	80 91 57 0b 	lds	r24, 0x0B57
    4e8e:	90 91 58 0b 	lds	r25, 0x0B58
    4e92:	28 17       	cp	r18, r24
    4e94:	39 07       	cpc	r19, r25
    4e96:	34 f0       	brlt	.+12     	; 0x4ea4 <updateOdomData+0x11c>
                tempVel = calibration[calibVelIndex-2][7]+1;
    4e98:	c9 01       	movw	r24, r18
    4e9a:	01 96       	adiw	r24, 0x01	; 1
    4e9c:	90 93 58 0b 	sts	0x0B58, r25
    4ea0:	80 93 57 0b 	sts	0x0B57, r24
            }
        }
		calibration[calibVelIndex-1][6] = avgRightSpeed;
    4ea4:	e2 95       	swap	r30
    4ea6:	f2 95       	swap	r31
    4ea8:	f0 7f       	andi	r31, 0xF0	; 240
    4eaa:	fe 27       	eor	r31, r30
    4eac:	e0 7f       	andi	r30, 0xF0	; 240
    4eae:	fe 27       	eor	r31, r30
    4eb0:	ed 54       	subi	r30, 0x4D	; 77
    4eb2:	f7 4f       	sbci	r31, 0xF7	; 247
    4eb4:	20 91 b6 04 	lds	r18, 0x04B6
    4eb8:	30 91 b7 04 	lds	r19, 0x04B7
    4ebc:	35 87       	std	Z+13, r19	; 0x0d
    4ebe:	24 87       	std	Z+12, r18	; 0x0c
        calibration[calibVelIndex-1][7] = tempVel;
    4ec0:	97 87       	std	Z+15, r25	; 0x0f
    4ec2:	86 87       	std	Z+14, r24	; 0x0e
    4ec4:	08 95       	ret


void updateOdomData() {

    if(calibWheel == LEFT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4ec6:	f0 e0       	ldi	r31, 0x00	; 0
    4ec8:	80 91 57 0b 	lds	r24, 0x0B57
    4ecc:	90 91 58 0b 	lds	r25, 0x0B58
    4ed0:	7f cf       	rjmp	.-258    	; 0x4dd0 <updateOdomData+0x48>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4ed2:	e0 91 9c 08 	lds	r30, 0x089C
    4ed6:	e2 30       	cpi	r30, 0x02	; 2
    4ed8:	c0 f1       	brcs	.+112    	; 0x4f4a <updateOdomData+0x1c2>
            if(calibration[calibVelIndex-2][5] >= tempVel) {
    4eda:	f0 e0       	ldi	r31, 0x00	; 0
    4edc:	df 01       	movw	r26, r30
    4ede:	a2 95       	swap	r26
    4ee0:	b2 95       	swap	r27
    4ee2:	b0 7f       	andi	r27, 0xF0	; 240
    4ee4:	ba 27       	eor	r27, r26
    4ee6:	a0 7f       	andi	r26, 0xF0	; 240
    4ee8:	ba 27       	eor	r27, r26
    4eea:	ad 55       	subi	r26, 0x5D	; 93
    4eec:	b7 4f       	sbci	r27, 0xF7	; 247
    4eee:	1a 96       	adiw	r26, 0x0a	; 10
    4ef0:	2d 91       	ld	r18, X+
    4ef2:	3c 91       	ld	r19, X
    4ef4:	1b 97       	sbiw	r26, 0x0b	; 11
    4ef6:	80 91 57 0b 	lds	r24, 0x0B57
    4efa:	90 91 58 0b 	lds	r25, 0x0B58
    4efe:	28 17       	cp	r18, r24
    4f00:	39 07       	cpc	r19, r25
    4f02:	34 f0       	brlt	.+12     	; 0x4f10 <updateOdomData+0x188>
                tempVel = calibration[calibVelIndex-2][5]+1;
    4f04:	c9 01       	movw	r24, r18
    4f06:	01 96       	adiw	r24, 0x01	; 1
    4f08:	90 93 58 0b 	sts	0x0B58, r25
    4f0c:	80 93 57 0b 	sts	0x0B57, r24
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
    4f10:	e2 95       	swap	r30
    4f12:	f2 95       	swap	r31
    4f14:	f0 7f       	andi	r31, 0xF0	; 240
    4f16:	fe 27       	eor	r31, r30
    4f18:	e0 7f       	andi	r30, 0xF0	; 240
    4f1a:	fe 27       	eor	r31, r30
    4f1c:	ed 54       	subi	r30, 0x4D	; 77
    4f1e:	f7 4f       	sbci	r31, 0xF7	; 247
    4f20:	20 91 b4 04 	lds	r18, 0x04B4
    4f24:	30 91 b5 04 	lds	r19, 0x04B5
    4f28:	31 87       	std	Z+9, r19	; 0x09
    4f2a:	20 87       	std	Z+8, r18	; 0x08
        calibration[calibVelIndex-1][5] = tempVel;
    4f2c:	93 87       	std	Z+11, r25	; 0x0b
    4f2e:	82 87       	std	Z+10, r24	; 0x0a
    4f30:	08 95       	ret
            }
        }
        calibration[calibVelIndex-1][0] = avgLeftSpeed;
        calibration[calibVelIndex-1][1] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_FW_SC) {
        if(calibVelIndex>1) {
    4f32:	f0 e0       	ldi	r31, 0x00	; 0
    4f34:	80 91 57 0b 	lds	r24, 0x0B57
    4f38:	90 91 58 0b 	lds	r25, 0x0B58
    4f3c:	82 cf       	rjmp	.-252    	; 0x4e42 <updateOdomData+0xba>
            }
        }
		calibration[calibVelIndex-1][4] = avgLeftSpeed;
        calibration[calibVelIndex-1][5] = tempVel;
    } else if(calibWheel == RIGHT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4f3e:	f0 e0       	ldi	r31, 0x00	; 0
    4f40:	80 91 57 0b 	lds	r24, 0x0B57
    4f44:	90 91 58 0b 	lds	r25, 0x0B58
    4f48:	ad cf       	rjmp	.-166    	; 0x4ea4 <updateOdomData+0x11c>
            }
        }
		calibration[calibVelIndex-1][2] = avgRightSpeed;
        calibration[calibVelIndex-1][3] = tempVel;
    } else if(calibWheel == LEFT_WHEEL_BW_SC) {
        if(calibVelIndex>1) {
    4f4a:	f0 e0       	ldi	r31, 0x00	; 0
    4f4c:	80 91 57 0b 	lds	r24, 0x0B57
    4f50:	90 91 58 0b 	lds	r25, 0x0B58
    4f54:	dd cf       	rjmp	.-70     	; 0x4f10 <updateOdomData+0x188>

00004f56 <handleCalibration>:

}

void handleCalibration() {

	switch(calibState) {
    4f56:	80 91 42 0b 	lds	r24, 0x0B42
    4f5a:	82 30       	cpi	r24, 0x02	; 2
    4f5c:	09 f4       	brne	.+2      	; 0x4f60 <handleCalibration+0xa>
    4f5e:	d0 c0       	rjmp	.+416    	; 0x5100 <handleCalibration+0x1aa>
    4f60:	83 30       	cpi	r24, 0x03	; 3
    4f62:	08 f4       	brcc	.+2      	; 0x4f66 <handleCalibration+0x10>
    4f64:	3f c0       	rjmp	.+126    	; 0x4fe4 <handleCalibration+0x8e>
    4f66:	84 30       	cpi	r24, 0x04	; 4
    4f68:	09 f4       	brne	.+2      	; 0x4f6c <handleCalibration+0x16>
    4f6a:	91 c0       	rjmp	.+290    	; 0x508e <handleCalibration+0x138>
    4f6c:	84 30       	cpi	r24, 0x04	; 4
    4f6e:	08 f0       	brcs	.+2      	; 0x4f72 <handleCalibration+0x1c>
    4f70:	63 c0       	rjmp	.+198    	; 0x5038 <handleCalibration+0xe2>
                calibState = 5;
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    4f72:	80 91 32 05 	lds	r24, 0x0532
    4f76:	88 23       	and	r24, r24
    4f78:	09 f4       	brne	.+2      	; 0x4f7c <handleCalibration+0x26>
    4f7a:	e1 c0       	rjmp	.+450    	; 0x513e <handleCalibration+0x1e8>
    4f7c:	82 30       	cpi	r24, 0x02	; 2
    4f7e:	09 f4       	brne	.+2      	; 0x4f82 <handleCalibration+0x2c>
    4f80:	de c0       	rjmp	.+444    	; 0x513e <handleCalibration+0x1e8>
                    updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    4f82:	80 91 6f 02 	lds	r24, 0x026F
    4f86:	90 91 70 02 	lds	r25, 0x0270
    4f8a:	21 e0       	ldi	r18, 0x01	; 1
    4f8c:	8a 36       	cpi	r24, 0x6A	; 106
    4f8e:	92 07       	cpc	r25, r18
    4f90:	0c f4       	brge	.+2      	; 0x4f94 <handleCalibration+0x3e>
    4f92:	8a c1       	rjmp	.+788    	; 0x52a8 <handleCalibration+0x352>
					updateOdomData();
                    calibState = 4;
                    timeoutOdometry = getTime100MicroSec();;
				}
			}
			if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velcoity
    4f94:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    4f98:	20 91 12 0b 	lds	r18, 0x0B12
    4f9c:	30 91 13 0b 	lds	r19, 0x0B13
    4fa0:	40 91 14 0b 	lds	r20, 0x0B14
    4fa4:	50 91 15 0b 	lds	r21, 0x0B15
    4fa8:	62 1b       	sub	r22, r18
    4faa:	73 0b       	sbc	r23, r19
    4fac:	84 0b       	sbc	r24, r20
    4fae:	95 0b       	sbc	r25, r21
    4fb0:	6c 39       	cpi	r22, 0x9C	; 156
    4fb2:	2d ec       	ldi	r18, 0xCD	; 205
    4fb4:	72 07       	cpc	r23, r18
    4fb6:	28 e0       	ldi	r18, 0x08	; 8
    4fb8:	82 07       	cpc	r24, r18
    4fba:	20 e0       	ldi	r18, 0x00	; 0
    4fbc:	92 07       	cpc	r25, r18
    4fbe:	d8 f1       	brcs	.+118    	; 0x5036 <handleCalibration+0xe0>
            	tempVel = 0;
    4fc0:	10 92 58 0b 	sts	0x0B58, r1
    4fc4:	10 92 57 0b 	sts	0x0B57, r1
				avgLeftSpeed = 0;
    4fc8:	10 92 b5 04 	sts	0x04B5, r1
    4fcc:	10 92 b4 04 	sts	0x04B4, r1
				avgRightSpeed = 0;
    4fd0:	10 92 b7 04 	sts	0x04B7, r1
    4fd4:	10 92 b6 04 	sts	0x04B6, r1
                updateOdomData();
    4fd8:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <updateOdomData>
                calibState = 5;
    4fdc:	85 e0       	ldi	r24, 0x05	; 5
    4fde:	80 93 42 0b 	sts	0x0B42, r24
    4fe2:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    4fe4:	88 23       	and	r24, r24
    4fe6:	29 f5       	brne	.+74     	; 0x5032 <handleCalibration+0xdc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
    4fe8:	80 91 32 05 	lds	r24, 0x0532
    4fec:	88 23       	and	r24, r24
    4fee:	09 f0       	breq	.+2      	; 0x4ff2 <handleCalibration+0x9c>
    4ff0:	3c c1       	rjmp	.+632    	; 0x526a <handleCalibration+0x314>
				pwm_intermediate_right_desired = 0;
    4ff2:	10 92 fe 02 	sts	0x02FE, r1
    4ff6:	10 92 fd 02 	sts	0x02FD, r1
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
    4ffa:	90 91 9c 08 	lds	r25, 0x089C
    4ffe:	85 e0       	ldi	r24, 0x05	; 5
    5000:	98 9f       	mul	r25, r24
    5002:	c0 01       	movw	r24, r0
    5004:	11 24       	eor	r1, r1
    5006:	88 0f       	add	r24, r24
    5008:	99 1f       	adc	r25, r25
    500a:	88 0f       	add	r24, r24
    500c:	99 1f       	adc	r25, r25
    500e:	90 93 00 03 	sts	0x0300, r25
    5012:	80 93 ff 02 	sts	0x02FF, r24
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
				pwm_intermediate_left_desired = 0;
			}               
            calibState = 1;
    5016:	81 e0       	ldi	r24, 0x01	; 1
    5018:	80 93 42 0b 	sts	0x0B42, r24
            timeoutOdometry = getTime100MicroSec();
    501c:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    5020:	60 93 12 0b 	sts	0x0B12, r22
    5024:	70 93 13 0b 	sts	0x0B13, r23
    5028:	80 93 14 0b 	sts	0x0B14, r24
    502c:	90 93 15 0b 	sts	0x0B15, r25
            break;
    5030:	08 95       	ret

}

void handleCalibration() {

	switch(calibState) {
    5032:	81 30       	cpi	r24, 0x01	; 1
    5034:	71 f0       	breq	.+28     	; 0x5052 <handleCalibration+0xfc>
    5036:	08 95       	ret
    5038:	85 30       	cpi	r24, 0x05	; 5
    503a:	e9 f7       	brne	.-6      	; 0x5036 <handleCalibration+0xe0>
                calibState = 5;
			}
            break;

		case 5:
        	calibVelIndex++;
    503c:	80 91 9c 08 	lds	r24, 0x089C
    5040:	8f 5f       	subi	r24, 0xFF	; 255
    5042:	80 93 9c 08 	sts	0x089C, r24
            if(calibVelIndex == 10) {
    5046:	8a 30       	cpi	r24, 0x0A	; 10
    5048:	09 f4       	brne	.+2      	; 0x504c <handleCalibration+0xf6>
    504a:	8b c1       	rjmp	.+790    	; 0x5362 <handleCalibration+0x40c>
					// red off
					writeCalibrationToFlash();
					calibrateOdomFlag = 0;
				}
			}
			calibState = 0;
    504c:	10 92 42 0b 	sts	0x0B42, r1
    5050:	08 95       	ret
            calibState = 1;
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5052:	80 91 32 05 	lds	r24, 0x0532
    5056:	88 23       	and	r24, r24
    5058:	09 f4       	brne	.+2      	; 0x505c <handleCalibration+0x106>
    505a:	d0 c0       	rjmp	.+416    	; 0x51fc <handleCalibration+0x2a6>
    505c:	82 30       	cpi	r24, 0x02	; 2
    505e:	09 f4       	brne	.+2      	; 0x5062 <handleCalibration+0x10c>
    5060:	cd c0       	rjmp	.+410    	; 0x51fc <handleCalibration+0x2a6>
                    timeOdometry = getTime100MicroSec();;
                    calibState = 2;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
    5062:	80 91 6f 02 	lds	r24, 0x026F
    5066:	90 91 70 02 	lds	r25, 0x0270
    506a:	21 e0       	ldi	r18, 0x01	; 1
    506c:	8a 36       	cpi	r24, 0x6A	; 106
    506e:	92 07       	cpc	r25, r18
    5070:	0c f0       	brlt	.+2      	; 0x5074 <handleCalibration+0x11e>
    5072:	90 cf       	rjmp	.-224    	; 0x4f94 <handleCalibration+0x3e>
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
    5074:	10 92 b3 04 	sts	0x04B3, r1
    5078:	10 92 b2 04 	sts	0x04B2, r1
					rightSpeedSumOdom = 0;
    507c:	10 92 ac 04 	sts	0x04AC, r1
    5080:	10 92 ad 04 	sts	0x04AD, r1
    5084:	10 92 ae 04 	sts	0x04AE, r1
    5088:	10 92 af 04 	sts	0x04AF, r1
    508c:	cc c0       	rjmp	.+408    	; 0x5226 <handleCalibration+0x2d0>
                calibState = 5;
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    508e:	80 91 32 05 	lds	r24, 0x0532
    5092:	88 23       	and	r24, r24
    5094:	49 f1       	breq	.+82     	; 0x50e8 <handleCalibration+0x192>
    5096:	82 30       	cpi	r24, 0x02	; 2
    5098:	39 f1       	breq	.+78     	; 0x50e8 <handleCalibration+0x192>
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    509a:	80 91 6f 02 	lds	r24, 0x026F
    509e:	90 91 70 02 	lds	r25, 0x0270
    50a2:	21 e0       	ldi	r18, 0x01	; 1
    50a4:	86 3b       	cpi	r24, 0xB6	; 182
    50a6:	92 07       	cpc	r25, r18
    50a8:	3c f5       	brge	.+78     	; 0x50f8 <handleCalibration+0x1a2>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
				}
			}
            if((getTime100MicroSec() - timeoutOdometry)>PAUSE_60_SEC) {    // the robot seems to be still, go to next velocity
    50aa:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    50ae:	20 91 12 0b 	lds	r18, 0x0B12
    50b2:	30 91 13 0b 	lds	r19, 0x0B13
    50b6:	40 91 14 0b 	lds	r20, 0x0B14
    50ba:	50 91 15 0b 	lds	r21, 0x0B15
    50be:	62 1b       	sub	r22, r18
    50c0:	73 0b       	sbc	r23, r19
    50c2:	84 0b       	sbc	r24, r20
    50c4:	95 0b       	sbc	r25, r21
    50c6:	6c 39       	cpi	r22, 0x9C	; 156
    50c8:	2d ec       	ldi	r18, 0xCD	; 205
    50ca:	72 07       	cpc	r23, r18
    50cc:	28 e0       	ldi	r18, 0x08	; 8
    50ce:	82 07       	cpc	r24, r18
    50d0:	20 e0       	ldi	r18, 0x00	; 0
    50d2:	92 07       	cpc	r25, r18
    50d4:	08 f4       	brcc	.+2      	; 0x50d8 <handleCalibration+0x182>
    50d6:	af cf       	rjmp	.-162    	; 0x5036 <handleCalibration+0xe0>
            	tempVel = 0;
    50d8:	10 92 58 0b 	sts	0x0B58, r1
    50dc:	10 92 57 0b 	sts	0x0B57, r1
                //updateOdomData();
                calibState = 5;
    50e0:	85 e0       	ldi	r24, 0x05	; 5
    50e2:	80 93 42 0b 	sts	0x0B42, r24
    50e6:	08 95       	ret
			}
            break;

		case 4: // exit from black line again
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    50e8:	80 91 69 02 	lds	r24, 0x0269
    50ec:	90 91 6a 02 	lds	r25, 0x026A
    50f0:	21 e0       	ldi	r18, 0x01	; 1
    50f2:	86 3b       	cpi	r24, 0xB6	; 182
    50f4:	92 07       	cpc	r25, r18
    50f6:	cc f2       	brlt	.-78     	; 0x50aa <handleCalibration+0x154>
                	calibState = 5;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
					calibState = 5;
    50f8:	85 e0       	ldi	r24, 0x05	; 5
    50fa:	80 93 42 0b 	sts	0x0B42, r24
    50fe:	d5 cf       	rjmp	.-86     	; 0x50aa <handleCalibration+0x154>
                calibState = 5;
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
    5100:	80 91 32 05 	lds	r24, 0x0532
    5104:	88 23       	and	r24, r24
    5106:	09 f4       	brne	.+2      	; 0x510a <handleCalibration+0x1b4>
    5108:	a6 c0       	rjmp	.+332    	; 0x5256 <handleCalibration+0x300>
    510a:	82 30       	cpi	r24, 0x02	; 2
    510c:	09 f4       	brne	.+2      	; 0x5110 <handleCalibration+0x1ba>
    510e:	a3 c0       	rjmp	.+326    	; 0x5256 <handleCalibration+0x300>
				//if((proximityResult[8])>(proximityOffset[8]>>1)) {	
                	calibState = 3;
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]>(512-HYSTERESIS_THR)) {
    5110:	80 91 6f 02 	lds	r24, 0x026F
    5114:	90 91 70 02 	lds	r25, 0x0270
    5118:	21 e0       	ldi	r18, 0x01	; 1
    511a:	86 3b       	cpi	r24, 0xB6	; 182
    511c:	92 07       	cpc	r25, r18
    511e:	0c f4       	brge	.+2      	; 0x5122 <handleCalibration+0x1cc>
    5120:	39 cf       	rjmp	.-398    	; 0x4f94 <handleCalibration+0x3e>
				//if((proximityResult[11])>(proximityOffset[11]>>1)) {	
                	calibState = 3;
    5122:	83 e0       	ldi	r24, 0x03	; 3
    5124:	80 93 42 0b 	sts	0x0B42, r24
                    timeoutOdometry = getTime100MicroSec();;
    5128:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    512c:	60 93 12 0b 	sts	0x0B12, r22
    5130:	70 93 13 0b 	sts	0x0B13, r23
    5134:	80 93 14 0b 	sts	0x0B14, r24
    5138:	90 93 15 0b 	sts	0x0B15, r25
    513c:	2b cf       	rjmp	.-426    	; 0x4f94 <handleCalibration+0x3e>
			}
            break;

		case 3: // look for black line again, stop time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    513e:	80 91 69 02 	lds	r24, 0x0269
    5142:	90 91 6a 02 	lds	r25, 0x026A
    5146:	21 e0       	ldi	r18, 0x01	; 1
    5148:	8a 36       	cpi	r24, 0x6A	; 106
    514a:	92 07       	cpc	r25, r18
    514c:	0c f0       	brlt	.+2      	; 0x5150 <handleCalibration+0x1fa>
    514e:	22 cf       	rjmp	.-444    	; 0x4f94 <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    5150:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    5154:	20 91 2b 05 	lds	r18, 0x052B
    5158:	30 91 2c 05 	lds	r19, 0x052C
    515c:	40 91 2d 05 	lds	r20, 0x052D
    5160:	50 91 2e 05 	lds	r21, 0x052E
    5164:	62 1b       	sub	r22, r18
    5166:	73 0b       	sbc	r23, r19
    5168:	84 0b       	sbc	r24, r20
    516a:	95 0b       	sbc	r25, r21
    516c:	60 93 2b 05 	sts	0x052B, r22
    5170:	70 93 2c 05 	sts	0x052C, r23
    5174:	80 93 2d 05 	sts	0x052D, r24
    5178:	90 93 2e 05 	sts	0x052E, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    517c:	0e 94 fd 4f 	call	0x9ffa	; 0x9ffa <__floatunsisf>
    5180:	20 e0       	ldi	r18, 0x00	; 0
    5182:	30 e0       	ldi	r19, 0x00	; 0
    5184:	40 ed       	ldi	r20, 0xD0	; 208
    5186:	52 e4       	ldi	r21, 0x42	; 66
    5188:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    518c:	20 e0       	ldi	r18, 0x00	; 0
    518e:	34 e2       	ldi	r19, 0x24	; 36
    5190:	44 e7       	ldi	r20, 0x74	; 116
    5192:	59 e4       	ldi	r21, 0x49	; 73
    5194:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    5198:	9b 01       	movw	r18, r22
    519a:	ac 01       	movw	r20, r24
    519c:	64 e1       	ldi	r22, 0x14	; 20
    519e:	7e e2       	ldi	r23, 0x2E	; 46
    51a0:	88 e7       	ldi	r24, 0x78	; 120
    51a2:	93 e4       	ldi	r25, 0x43	; 67
    51a4:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    51a8:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <__fixunssfsi>
    51ac:	70 93 58 0b 	sts	0x0B58, r23
    51b0:	60 93 57 0b 	sts	0x0B57, r22
					avgLeftSpeed = leftSpeedSumOdom/leftSumCount;
    51b4:	20 91 b0 04 	lds	r18, 0x04B0
    51b8:	30 91 b1 04 	lds	r19, 0x04B1
    51bc:	40 e0       	ldi	r20, 0x00	; 0
    51be:	50 e0       	ldi	r21, 0x00	; 0
    51c0:	60 91 a8 04 	lds	r22, 0x04A8
    51c4:	70 91 a9 04 	lds	r23, 0x04A9
    51c8:	80 91 aa 04 	lds	r24, 0x04AA
    51cc:	90 91 ab 04 	lds	r25, 0x04AB
    51d0:	0e 94 e5 51 	call	0xa3ca	; 0xa3ca <__divmodsi4>
    51d4:	30 93 b5 04 	sts	0x04B5, r19
    51d8:	20 93 b4 04 	sts	0x04B4, r18
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
					updateOdomData();
    51dc:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <updateOdomData>
                    calibState = 4;
    51e0:	84 e0       	ldi	r24, 0x04	; 4
    51e2:	80 93 42 0b 	sts	0x0B42, r24
                    timeoutOdometry = getTime100MicroSec();;
    51e6:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    51ea:	60 93 12 0b 	sts	0x0B12, r22
    51ee:	70 93 13 0b 	sts	0x0B13, r23
    51f2:	80 93 14 0b 	sts	0x0B14, r24
    51f6:	90 93 15 0b 	sts	0x0B15, r25
    51fa:	cc ce       	rjmp	.-616    	; 0x4f94 <handleCalibration+0x3e>
            timeoutOdometry = getTime100MicroSec();
            break;

		case 1: // look for black line, start time measure
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]<(512-2*HYSTERESIS_THR)) {
    51fc:	80 91 69 02 	lds	r24, 0x0269
    5200:	90 91 6a 02 	lds	r25, 0x026A
    5204:	21 e0       	ldi	r18, 0x01	; 1
    5206:	8a 36       	cpi	r24, 0x6A	; 106
    5208:	92 07       	cpc	r25, r18
    520a:	0c f0       	brlt	.+2      	; 0x520e <handleCalibration+0x2b8>
    520c:	c3 ce       	rjmp	.-634    	; 0x4f94 <handleCalibration+0x3e>
				//if((proximityResult[8])<(proximityOffset[8]>>1)) {				
                	leftSumCount = 0;
    520e:	10 92 b1 04 	sts	0x04B1, r1
    5212:	10 92 b0 04 	sts	0x04B0, r1
                    leftSpeedSumOdom = 0;
    5216:	10 92 a8 04 	sts	0x04A8, r1
    521a:	10 92 a9 04 	sts	0x04A9, r1
    521e:	10 92 aa 04 	sts	0x04AA, r1
    5222:	10 92 ab 04 	sts	0x04AB, r1
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
					rightSumCount = 0;
					rightSpeedSumOdom = 0;
                    timeOdometry = getTime100MicroSec();;
    5226:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    522a:	60 93 2b 05 	sts	0x052B, r22
    522e:	70 93 2c 05 	sts	0x052C, r23
    5232:	80 93 2d 05 	sts	0x052D, r24
    5236:	90 93 2e 05 	sts	0x052E, r25
                    calibState = 2;
    523a:	82 e0       	ldi	r24, 0x02	; 2
    523c:	80 93 42 0b 	sts	0x0B42, r24
                    timeoutOdometry = getTime100MicroSec();;
    5240:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    5244:	60 93 12 0b 	sts	0x0B12, r22
    5248:	70 93 13 0b 	sts	0x0B13, r23
    524c:	80 93 14 0b 	sts	0x0B14, r24
    5250:	90 93 15 0b 	sts	0x0B15, r25
    5254:	9f ce       	rjmp	.-706    	; 0x4f94 <handleCalibration+0x3e>
			}
			break;

		case 2: // exit from black line
        	if(calibWheel==LEFT_WHEEL_FW_SC || calibWheel==LEFT_WHEEL_BW_SC) {
            	if(proximityResult[8]>(512-HYSTERESIS_THR)) {
    5256:	80 91 69 02 	lds	r24, 0x0269
    525a:	90 91 6a 02 	lds	r25, 0x026A
    525e:	21 e0       	ldi	r18, 0x01	; 1
    5260:	86 3b       	cpi	r24, 0xB6	; 182
    5262:	92 07       	cpc	r25, r18
    5264:	0c f4       	brge	.+2      	; 0x5268 <handleCalibration+0x312>
    5266:	96 ce       	rjmp	.-724    	; 0x4f94 <handleCalibration+0x3e>
    5268:	5c cf       	rjmp	.-328    	; 0x5122 <handleCalibration+0x1cc>

    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    526a:	81 30       	cpi	r24, 0x01	; 1
    526c:	09 f4       	brne	.+2      	; 0x5270 <handleCalibration+0x31a>
    526e:	84 c0       	rjmp	.+264    	; 0x5378 <handleCalibration+0x422>
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    5270:	82 30       	cpi	r24, 0x02	; 2
    5272:	09 f4       	brne	.+2      	; 0x5276 <handleCalibration+0x320>
    5274:	60 c0       	rjmp	.+192    	; 0x5336 <handleCalibration+0x3e0>
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
        	} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    5276:	83 30       	cpi	r24, 0x03	; 3
    5278:	09 f0       	breq	.+2      	; 0x527c <handleCalibration+0x326>
    527a:	cd ce       	rjmp	.-614    	; 0x5016 <handleCalibration+0xc0>
				pwm_intermediate_right_desired = -((INDEX_STEP*calibVelIndex)<<2);
    527c:	90 91 9c 08 	lds	r25, 0x089C
    5280:	85 e0       	ldi	r24, 0x05	; 5
    5282:	98 9f       	mul	r25, r24
    5284:	c0 01       	movw	r24, r0
    5286:	11 24       	eor	r1, r1
    5288:	88 0f       	add	r24, r24
    528a:	99 1f       	adc	r25, r25
    528c:	88 0f       	add	r24, r24
    528e:	99 1f       	adc	r25, r25
    5290:	90 95       	com	r25
    5292:	81 95       	neg	r24
    5294:	9f 4f       	sbci	r25, 0xFF	; 255
    5296:	90 93 fe 02 	sts	0x02FE, r25
    529a:	80 93 fd 02 	sts	0x02FD, r24
				pwm_intermediate_left_desired = 0;
    529e:	10 92 00 03 	sts	0x0300, r1
    52a2:	10 92 ff 02 	sts	0x02FF, r1
    52a6:	b7 ce       	rjmp	.-658    	; 0x5016 <handleCalibration+0xc0>
                    timeoutOdometry = getTime100MicroSec();;
				}
			} else {
            	if(proximityResult[11]<(512-2*HYSTERESIS_THR)) {
				//if((proximityResult[11])<(proximityOffset[11]>>1)) {	
                	timeOdometry = getTime100MicroSec() - timeOdometry;
    52a8:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    52ac:	20 91 2b 05 	lds	r18, 0x052B
    52b0:	30 91 2c 05 	lds	r19, 0x052C
    52b4:	40 91 2d 05 	lds	r20, 0x052D
    52b8:	50 91 2e 05 	lds	r21, 0x052E
    52bc:	62 1b       	sub	r22, r18
    52be:	73 0b       	sbc	r23, r19
    52c0:	84 0b       	sbc	r24, r20
    52c2:	95 0b       	sbc	r25, r21
    52c4:	60 93 2b 05 	sts	0x052B, r22
    52c8:	70 93 2c 05 	sts	0x052C, r23
    52cc:	80 93 2d 05 	sts	0x052D, r24
    52d0:	90 93 2e 05 	sts	0x052E, r25
                    tempVel = (unsigned int)(DISTANCE_MM/((float)timeOdometry*104.0/1000000.0));
    52d4:	0e 94 fd 4f 	call	0x9ffa	; 0x9ffa <__floatunsisf>
    52d8:	20 e0       	ldi	r18, 0x00	; 0
    52da:	30 e0       	ldi	r19, 0x00	; 0
    52dc:	40 ed       	ldi	r20, 0xD0	; 208
    52de:	52 e4       	ldi	r21, 0x42	; 66
    52e0:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    52e4:	20 e0       	ldi	r18, 0x00	; 0
    52e6:	34 e2       	ldi	r19, 0x24	; 36
    52e8:	44 e7       	ldi	r20, 0x74	; 116
    52ea:	59 e4       	ldi	r21, 0x49	; 73
    52ec:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    52f0:	9b 01       	movw	r18, r22
    52f2:	ac 01       	movw	r20, r24
    52f4:	64 e1       	ldi	r22, 0x14	; 20
    52f6:	7e e2       	ldi	r23, 0x2E	; 46
    52f8:	88 e7       	ldi	r24, 0x78	; 120
    52fa:	93 e4       	ldi	r25, 0x43	; 67
    52fc:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    5300:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <__fixunssfsi>
    5304:	70 93 58 0b 	sts	0x0B58, r23
    5308:	60 93 57 0b 	sts	0x0B57, r22
                    avgRightSpeed = rightSpeedSumOdom/rightSumCount;
    530c:	20 91 b2 04 	lds	r18, 0x04B2
    5310:	30 91 b3 04 	lds	r19, 0x04B3
    5314:	40 e0       	ldi	r20, 0x00	; 0
    5316:	50 e0       	ldi	r21, 0x00	; 0
    5318:	60 91 ac 04 	lds	r22, 0x04AC
    531c:	70 91 ad 04 	lds	r23, 0x04AD
    5320:	80 91 ae 04 	lds	r24, 0x04AE
    5324:	90 91 af 04 	lds	r25, 0x04AF
    5328:	0e 94 e5 51 	call	0xa3ca	; 0xa3ca <__divmodsi4>
    532c:	30 93 b7 04 	sts	0x04B7, r19
    5330:	20 93 b6 04 	sts	0x04B6, r18
    5334:	53 cf       	rjmp	.-346    	; 0x51dc <handleCalibration+0x286>
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
				pwm_intermediate_left_desired = 0;
			} else if(calibWheel == LEFT_WHEEL_BW_SC) {
				pwm_intermediate_right_desired = 0;
    5336:	10 92 fe 02 	sts	0x02FE, r1
    533a:	10 92 fd 02 	sts	0x02FD, r1
				pwm_intermediate_left_desired = -((INDEX_STEP*calibVelIndex)<<2);
    533e:	90 91 9c 08 	lds	r25, 0x089C
    5342:	85 e0       	ldi	r24, 0x05	; 5
    5344:	98 9f       	mul	r25, r24
    5346:	c0 01       	movw	r24, r0
    5348:	11 24       	eor	r1, r1
    534a:	88 0f       	add	r24, r24
    534c:	99 1f       	adc	r25, r25
    534e:	88 0f       	add	r24, r24
    5350:	99 1f       	adc	r25, r25
    5352:	90 95       	com	r25
    5354:	81 95       	neg	r24
    5356:	9f 4f       	sbci	r25, 0xFF	; 255
    5358:	90 93 00 03 	sts	0x0300, r25
    535c:	80 93 ff 02 	sts	0x02FF, r24
    5360:	5a ce       	rjmp	.-844    	; 0x5016 <handleCalibration+0xc0>
            break;

		case 5:
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
    5362:	91 e0       	ldi	r25, 0x01	; 1
    5364:	90 93 9c 08 	sts	0x089C, r25
                if(calibWheel == LEFT_WHEEL_FW_SC) {
    5368:	80 91 32 05 	lds	r24, 0x0532
    536c:	88 23       	and	r24, r24
    536e:	b9 f4       	brne	.+46     	; 0x539e <handleCalibration+0x448>
                	calibWheel = LEFT_WHEEL_BW_SC;
    5370:	82 e0       	ldi	r24, 0x02	; 2
    5372:	80 93 32 05 	sts	0x0532, r24
    5376:	6a ce       	rjmp	.-812    	; 0x504c <handleCalibration+0xf6>
    	case 0: // set speed
        	if(calibWheel == LEFT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = 0;
				pwm_intermediate_left_desired = (INDEX_STEP*calibVelIndex)<<2;
        	} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
				pwm_intermediate_right_desired = (INDEX_STEP*calibVelIndex)<<2;
    5378:	90 91 9c 08 	lds	r25, 0x089C
    537c:	85 e0       	ldi	r24, 0x05	; 5
    537e:	98 9f       	mul	r25, r24
    5380:	c0 01       	movw	r24, r0
    5382:	11 24       	eor	r1, r1
    5384:	88 0f       	add	r24, r24
    5386:	99 1f       	adc	r25, r25
    5388:	88 0f       	add	r24, r24
    538a:	99 1f       	adc	r25, r25
    538c:	90 93 fe 02 	sts	0x02FE, r25
    5390:	80 93 fd 02 	sts	0x02FD, r24
				pwm_intermediate_left_desired = 0;
    5394:	10 92 00 03 	sts	0x0300, r1
    5398:	10 92 ff 02 	sts	0x02FF, r1
    539c:	3c ce       	rjmp	.-904    	; 0x5016 <handleCalibration+0xc0>
        	calibVelIndex++;
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
    539e:	81 30       	cpi	r24, 0x01	; 1
    53a0:	61 f0       	breq	.+24     	; 0x53ba <handleCalibration+0x464>
                	calibWheel = RIGHT_WHEEL_BW_SC;
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
    53a2:	82 30       	cpi	r24, 0x02	; 2
    53a4:	71 f0       	breq	.+28     	; 0x53c2 <handleCalibration+0x46c>
                	calibWheel = RIGHT_WHEEL_FW_SC;
					calibrateOdomFlag = 0;
					// red on
				} else if(calibWheel == RIGHT_WHEEL_BW_SC) {
    53a6:	83 30       	cpi	r24, 0x03	; 3
    53a8:	09 f0       	breq	.+2      	; 0x53ac <handleCalibration+0x456>
    53aa:	50 ce       	rjmp	.-864    	; 0x504c <handleCalibration+0xf6>
                	calibWheel = LEFT_WHEEL_FW_SC;					
    53ac:	10 92 32 05 	sts	0x0532, r1
					// red off
					writeCalibrationToFlash();
    53b0:	0e 94 ae 42 	call	0x855c	; 0x855c <writeCalibrationToFlash>
					calibrateOdomFlag = 0;
    53b4:	10 92 4d 05 	sts	0x054D, r1
    53b8:	49 ce       	rjmp	.-878    	; 0x504c <handleCalibration+0xf6>
            if(calibVelIndex == 10) {
            	calibVelIndex = 1;
                if(calibWheel == LEFT_WHEEL_FW_SC) {
                	calibWheel = LEFT_WHEEL_BW_SC;
				} else if(calibWheel == RIGHT_WHEEL_FW_SC) {
                	calibWheel = RIGHT_WHEEL_BW_SC;
    53ba:	83 e0       	ldi	r24, 0x03	; 3
    53bc:	80 93 32 05 	sts	0x0532, r24
    53c0:	45 ce       	rjmp	.-886    	; 0x504c <handleCalibration+0xf6>
				} else if(calibWheel == LEFT_WHEEL_BW_SC) {
                	calibWheel = RIGHT_WHEEL_FW_SC;
    53c2:	90 93 32 05 	sts	0x0532, r25
					calibrateOdomFlag = 0;
    53c6:	10 92 4d 05 	sts	0x054D, r1
    53ca:	40 ce       	rjmp	.-896    	; 0x504c <handleCalibration+0xf6>

000053cc <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    53cc:	af 92       	push	r10
    53ce:	bf 92       	push	r11
    53d0:	cf 92       	push	r12
    53d2:	df 92       	push	r13
    53d4:	ef 92       	push	r14
    53d6:	ff 92       	push	r15
    53d8:	0f 93       	push	r16
    53da:	1f 93       	push	r17
    53dc:	cf 93       	push	r28
    53de:	df 93       	push	r29
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    53e0:	9c 01       	movw	r18, r24
    53e2:	22 0f       	add	r18, r18
    53e4:	33 1f       	adc	r19, r19
    53e6:	22 0f       	add	r18, r18
    53e8:	33 1f       	adc	r19, r19
    53ea:	28 0f       	add	r18, r24
    53ec:	39 1f       	adc	r19, r25
    signed int temp = 0;

    if(currVel == 0) {
    53ee:	21 15       	cp	r18, r1
    53f0:	31 05       	cpc	r19, r1
    53f2:	09 f4       	brne	.+2      	; 0x53f6 <getInputFromSpeed+0x2a>
    53f4:	7b c0       	rjmp	.+246    	; 0x54ec <getInputFromSpeed+0x120>
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
    53f6:	86 2f       	mov	r24, r22
    53f8:	82 50       	subi	r24, 0x02	; 2
    53fa:	82 30       	cpi	r24, 0x02	; 2
    53fc:	08 f4       	brcc	.+2      	; 0x5400 <getInputFromSpeed+0x34>
    53fe:	84 c0       	rjmp	.+264    	; 0x5508 <getInputFromSpeed+0x13c>
        currVel = -currVel; // consider only positive values
    5400:	66 23       	and	r22, r22
    5402:	09 f0       	breq	.+2      	; 0x5406 <getInputFromSpeed+0x3a>
    5404:	84 c0       	rjmp	.+264    	; 0x550e <getInputFromSpeed+0x142>
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    5406:	80 91 c5 08 	lds	r24, 0x08C5
    540a:	90 91 c6 08 	lds	r25, 0x08C6
    540e:	82 17       	cp	r24, r18
    5410:	93 07       	cpc	r25, r19
    5412:	0c f0       	brlt	.+2      	; 0x5416 <getInputFromSpeed+0x4a>
    5414:	1b c2       	rjmp	.+1078   	; 0x584c <getInputFromSpeed+0x480>
    5416:	80 91 d5 08 	lds	r24, 0x08D5
    541a:	90 91 d6 08 	lds	r25, 0x08D6
    541e:	82 17       	cp	r24, r18
    5420:	93 07       	cpc	r25, r19
    5422:	0c f0       	brlt	.+2      	; 0x5426 <getInputFromSpeed+0x5a>
    5424:	1c c2       	rjmp	.+1080   	; 0x585e <getInputFromSpeed+0x492>
    5426:	80 91 e5 08 	lds	r24, 0x08E5
    542a:	90 91 e6 08 	lds	r25, 0x08E6
    542e:	82 17       	cp	r24, r18
    5430:	93 07       	cpc	r25, r19
    5432:	0c f0       	brlt	.+2      	; 0x5436 <getInputFromSpeed+0x6a>
    5434:	17 c2       	rjmp	.+1070   	; 0x5864 <getInputFromSpeed+0x498>
    5436:	80 91 f5 08 	lds	r24, 0x08F5
    543a:	90 91 f6 08 	lds	r25, 0x08F6
    543e:	82 17       	cp	r24, r18
    5440:	93 07       	cpc	r25, r19
    5442:	0c f0       	brlt	.+2      	; 0x5446 <getInputFromSpeed+0x7a>
    5444:	12 c2       	rjmp	.+1060   	; 0x586a <getInputFromSpeed+0x49e>
    5446:	80 91 05 09 	lds	r24, 0x0905
    544a:	90 91 06 09 	lds	r25, 0x0906
    544e:	82 17       	cp	r24, r18
    5450:	93 07       	cpc	r25, r19
    5452:	0c f0       	brlt	.+2      	; 0x5456 <getInputFromSpeed+0x8a>
    5454:	fe c1       	rjmp	.+1020   	; 0x5852 <getInputFromSpeed+0x486>
    5456:	80 91 15 09 	lds	r24, 0x0915
    545a:	90 91 16 09 	lds	r25, 0x0916
    545e:	82 17       	cp	r24, r18
    5460:	93 07       	cpc	r25, r19
    5462:	0c f0       	brlt	.+2      	; 0x5466 <getInputFromSpeed+0x9a>
    5464:	f9 c1       	rjmp	.+1010   	; 0x5858 <getInputFromSpeed+0x48c>
    5466:	80 91 25 09 	lds	r24, 0x0925
    546a:	90 91 26 09 	lds	r25, 0x0926
    546e:	82 17       	cp	r24, r18
    5470:	93 07       	cpc	r25, r19
    5472:	0c f0       	brlt	.+2      	; 0x5476 <getInputFromSpeed+0xaa>
    5474:	02 c2       	rjmp	.+1028   	; 0x587a <getInputFromSpeed+0x4ae>
    5476:	80 91 35 09 	lds	r24, 0x0935
    547a:	90 91 36 09 	lds	r25, 0x0936
    547e:	82 17       	cp	r24, r18
    5480:	93 07       	cpc	r25, r19
    5482:	0c f0       	brlt	.+2      	; 0x5486 <getInputFromSpeed+0xba>
    5484:	fd c1       	rjmp	.+1018   	; 0x5880 <getInputFromSpeed+0x4b4>
    5486:	c0 91 45 09 	lds	r28, 0x0945
    548a:	d0 91 46 09 	lds	r29, 0x0946
    548e:	c2 17       	cp	r28, r18
    5490:	d3 07       	cpc	r29, r19
    5492:	0c f0       	brlt	.+2      	; 0x5496 <getInputFromSpeed+0xca>
    5494:	7a c1       	rjmp	.+756    	; 0x578a <getInputFromSpeed+0x3be>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    5496:	b9 01       	movw	r22, r18
    5498:	88 27       	eor	r24, r24
    549a:	77 fd       	sbrc	r23, 7
    549c:	80 95       	com	r24
    549e:	98 2f       	mov	r25, r24
    54a0:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    54a4:	7b 01       	movw	r14, r22
    54a6:	8c 01       	movw	r16, r24
    54a8:	60 91 43 09 	lds	r22, 0x0943
    54ac:	70 91 44 09 	lds	r23, 0x0944
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    54b0:	88 27       	eor	r24, r24
    54b2:	77 fd       	sbrc	r23, 7
    54b4:	80 95       	com	r24
    54b6:	98 2f       	mov	r25, r24
    54b8:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    54bc:	9b 01       	movw	r18, r22
    54be:	ac 01       	movw	r20, r24
    54c0:	c8 01       	movw	r24, r16
    54c2:	b7 01       	movw	r22, r14
    54c4:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    54c8:	7b 01       	movw	r14, r22
    54ca:	8c 01       	movw	r16, r24
    54cc:	be 01       	movw	r22, r28
    54ce:	88 27       	eor	r24, r24
    54d0:	77 fd       	sbrc	r23, 7
    54d2:	80 95       	com	r24
    54d4:	98 2f       	mov	r25, r24
    54d6:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    54da:	9b 01       	movw	r18, r22
    54dc:	ac 01       	movw	r20, r24
    54de:	c8 01       	movw	r24, r16
    54e0:	b7 01       	movw	r22, r14
    54e2:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    54e6:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    54ea:	02 c0       	rjmp	.+4      	; 0x54f0 <getInputFromSpeed+0x124>
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    signed int temp = 0;
    54ec:	60 e0       	ldi	r22, 0x00	; 0
    54ee:	70 e0       	ldi	r23, 0x00	; 0
            temp = -temp;
        }        
    }
    
    return temp;
}
    54f0:	cb 01       	movw	r24, r22
    54f2:	df 91       	pop	r29
    54f4:	cf 91       	pop	r28
    54f6:	1f 91       	pop	r17
    54f8:	0f 91       	pop	r16
    54fa:	ff 90       	pop	r15
    54fc:	ef 90       	pop	r14
    54fe:	df 90       	pop	r13
    5500:	cf 90       	pop	r12
    5502:	bf 90       	pop	r11
    5504:	af 90       	pop	r10
    5506:	08 95       	ret
    if(currVel == 0) {
        return 0;
    }

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    5508:	30 95       	com	r19
    550a:	21 95       	neg	r18
    550c:	3f 4f       	sbci	r19, 0xFF	; 255
    550e:	63 30       	cpi	r22, 0x03	; 3
    5510:	09 f4       	brne	.+2      	; 0x5514 <getInputFromSpeed+0x148>
    5512:	f3 c0       	rjmp	.+486    	; 0x56fa <getInputFromSpeed+0x32e>
    5514:	62 30       	cpi	r22, 0x02	; 2
    5516:	01 f1       	breq	.+64     	; 0x5558 <getInputFromSpeed+0x18c>
    5518:	61 30       	cpi	r22, 0x01	; 1
    551a:	09 f4       	brne	.+2      	; 0x551e <getInputFromSpeed+0x152>
    551c:	98 c0       	rjmp	.+304    	; 0x564e <getInputFromSpeed+0x282>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
    551e:	66 23       	and	r22, r22
    5520:	09 f4       	brne	.+2      	; 0x5524 <getInputFromSpeed+0x158>
    5522:	90 c0       	rjmp	.+288    	; 0x5644 <getInputFromSpeed+0x278>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
    5524:	61 30       	cpi	r22, 0x01	; 1
    5526:	09 f4       	brne	.+2      	; 0x552a <getInputFromSpeed+0x15e>
    5528:	8c c1       	rjmp	.+792    	; 0x5842 <getInputFromSpeed+0x476>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
    552a:	62 30       	cpi	r22, 0x02	; 2
    552c:	09 f4       	brne	.+2      	; 0x5530 <getInputFromSpeed+0x164>
    552e:	a0 c1       	rjmp	.+832    	; 0x5870 <getInputFromSpeed+0x4a4>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    5530:	63 30       	cpi	r22, 0x03	; 3
    5532:	e1 f6       	brne	.-72     	; 0x54ec <getInputFromSpeed+0x120>
    5534:	c0 91 51 09 	lds	r28, 0x0951
    5538:	d0 91 52 09 	lds	r29, 0x0952
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    553c:	b9 01       	movw	r22, r18
    553e:	88 27       	eor	r24, r24
    5540:	77 fd       	sbrc	r23, 7
    5542:	80 95       	com	r24
    5544:	98 2f       	mov	r25, r24
    5546:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    554a:	7b 01       	movw	r14, r22
    554c:	8c 01       	movw	r16, r24
    554e:	60 91 4f 09 	lds	r22, 0x094F
    5552:	70 91 50 09 	lds	r23, 0x0950
    5556:	55 c0       	rjmp	.+170    	; 0x5602 <getInputFromSpeed+0x236>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    5558:	80 91 cd 08 	lds	r24, 0x08CD
    555c:	90 91 ce 08 	lds	r25, 0x08CE
    5560:	82 17       	cp	r24, r18
    5562:	93 07       	cpc	r25, r19
    5564:	0c f0       	brlt	.+2      	; 0x5568 <getInputFromSpeed+0x19c>
    5566:	72 c1       	rjmp	.+740    	; 0x584c <getInputFromSpeed+0x480>
    5568:	80 91 dd 08 	lds	r24, 0x08DD
    556c:	90 91 de 08 	lds	r25, 0x08DE
    5570:	82 17       	cp	r24, r18
    5572:	93 07       	cpc	r25, r19
    5574:	0c f0       	brlt	.+2      	; 0x5578 <getInputFromSpeed+0x1ac>
    5576:	73 c1       	rjmp	.+742    	; 0x585e <getInputFromSpeed+0x492>
    5578:	80 91 ed 08 	lds	r24, 0x08ED
    557c:	90 91 ee 08 	lds	r25, 0x08EE
    5580:	82 17       	cp	r24, r18
    5582:	93 07       	cpc	r25, r19
    5584:	0c f0       	brlt	.+2      	; 0x5588 <getInputFromSpeed+0x1bc>
    5586:	6e c1       	rjmp	.+732    	; 0x5864 <getInputFromSpeed+0x498>
    5588:	80 91 fd 08 	lds	r24, 0x08FD
    558c:	90 91 fe 08 	lds	r25, 0x08FE
    5590:	82 17       	cp	r24, r18
    5592:	93 07       	cpc	r25, r19
    5594:	0c f0       	brlt	.+2      	; 0x5598 <getInputFromSpeed+0x1cc>
    5596:	69 c1       	rjmp	.+722    	; 0x586a <getInputFromSpeed+0x49e>
    5598:	80 91 0d 09 	lds	r24, 0x090D
    559c:	90 91 0e 09 	lds	r25, 0x090E
    55a0:	82 17       	cp	r24, r18
    55a2:	93 07       	cpc	r25, r19
    55a4:	0c f0       	brlt	.+2      	; 0x55a8 <getInputFromSpeed+0x1dc>
    55a6:	55 c1       	rjmp	.+682    	; 0x5852 <getInputFromSpeed+0x486>
    55a8:	80 91 1d 09 	lds	r24, 0x091D
    55ac:	90 91 1e 09 	lds	r25, 0x091E
    55b0:	82 17       	cp	r24, r18
    55b2:	93 07       	cpc	r25, r19
    55b4:	0c f0       	brlt	.+2      	; 0x55b8 <getInputFromSpeed+0x1ec>
    55b6:	50 c1       	rjmp	.+672    	; 0x5858 <getInputFromSpeed+0x48c>
    55b8:	80 91 2d 09 	lds	r24, 0x092D
    55bc:	90 91 2e 09 	lds	r25, 0x092E
    55c0:	82 17       	cp	r24, r18
    55c2:	93 07       	cpc	r25, r19
    55c4:	0c f0       	brlt	.+2      	; 0x55c8 <getInputFromSpeed+0x1fc>
    55c6:	59 c1       	rjmp	.+690    	; 0x587a <getInputFromSpeed+0x4ae>
    55c8:	80 91 3d 09 	lds	r24, 0x093D
    55cc:	90 91 3e 09 	lds	r25, 0x093E
    55d0:	82 17       	cp	r24, r18
    55d2:	93 07       	cpc	r25, r19
    55d4:	0c f0       	brlt	.+2      	; 0x55d8 <getInputFromSpeed+0x20c>
    55d6:	54 c1       	rjmp	.+680    	; 0x5880 <getInputFromSpeed+0x4b4>
    55d8:	c0 91 4d 09 	lds	r28, 0x094D
    55dc:	d0 91 4e 09 	lds	r29, 0x094E
    55e0:	c2 17       	cp	r28, r18
    55e2:	d3 07       	cpc	r29, r19
    55e4:	0c f0       	brlt	.+2      	; 0x55e8 <getInputFromSpeed+0x21c>
    55e6:	d1 c0       	rjmp	.+418    	; 0x578a <getInputFromSpeed+0x3be>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    55e8:	b9 01       	movw	r22, r18
    55ea:	88 27       	eor	r24, r24
    55ec:	77 fd       	sbrc	r23, 7
    55ee:	80 95       	com	r24
    55f0:	98 2f       	mov	r25, r24
    55f2:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    55f6:	7b 01       	movw	r14, r22
    55f8:	8c 01       	movw	r16, r24
    55fa:	60 91 4b 09 	lds	r22, 0x094B
    55fe:	70 91 4c 09 	lds	r23, 0x094C
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    5602:	88 27       	eor	r24, r24
    5604:	77 fd       	sbrc	r23, 7
    5606:	80 95       	com	r24
    5608:	98 2f       	mov	r25, r24
    560a:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    560e:	9b 01       	movw	r18, r22
    5610:	ac 01       	movw	r20, r24
    5612:	c8 01       	movw	r24, r16
    5614:	b7 01       	movw	r22, r14
    5616:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    561a:	7b 01       	movw	r14, r22
    561c:	8c 01       	movw	r16, r24
    561e:	be 01       	movw	r22, r28
    5620:	88 27       	eor	r24, r24
    5622:	77 fd       	sbrc	r23, 7
    5624:	80 95       	com	r24
    5626:	98 2f       	mov	r25, r24
    5628:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    562c:	9b 01       	movw	r18, r22
    562e:	ac 01       	movw	r20, r24
    5630:	c8 01       	movw	r24, r16
    5632:	b7 01       	movw	r22, r14
    5634:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    5638:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
            temp = -temp;
    563c:	70 95       	com	r23
    563e:	61 95       	neg	r22
    5640:	7f 4f       	sbci	r23, 0xFF	; 255
    5642:	56 cf       	rjmp	.-340    	; 0x54f0 <getInputFromSpeed+0x124>
    5644:	c0 91 45 09 	lds	r28, 0x0945
    5648:	d0 91 46 09 	lds	r29, 0x0946
    564c:	24 cf       	rjmp	.-440    	; 0x5496 <getInputFromSpeed+0xca>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    564e:	80 91 c9 08 	lds	r24, 0x08C9
    5652:	90 91 ca 08 	lds	r25, 0x08CA
    5656:	82 17       	cp	r24, r18
    5658:	93 07       	cpc	r25, r19
    565a:	0c f0       	brlt	.+2      	; 0x565e <getInputFromSpeed+0x292>
    565c:	f7 c0       	rjmp	.+494    	; 0x584c <getInputFromSpeed+0x480>
    565e:	80 91 d9 08 	lds	r24, 0x08D9
    5662:	90 91 da 08 	lds	r25, 0x08DA
    5666:	82 17       	cp	r24, r18
    5668:	93 07       	cpc	r25, r19
    566a:	0c f0       	brlt	.+2      	; 0x566e <getInputFromSpeed+0x2a2>
    566c:	f8 c0       	rjmp	.+496    	; 0x585e <getInputFromSpeed+0x492>
    566e:	80 91 e9 08 	lds	r24, 0x08E9
    5672:	90 91 ea 08 	lds	r25, 0x08EA
    5676:	82 17       	cp	r24, r18
    5678:	93 07       	cpc	r25, r19
    567a:	0c f0       	brlt	.+2      	; 0x567e <getInputFromSpeed+0x2b2>
    567c:	f3 c0       	rjmp	.+486    	; 0x5864 <getInputFromSpeed+0x498>
    567e:	80 91 f9 08 	lds	r24, 0x08F9
    5682:	90 91 fa 08 	lds	r25, 0x08FA
    5686:	82 17       	cp	r24, r18
    5688:	93 07       	cpc	r25, r19
    568a:	0c f0       	brlt	.+2      	; 0x568e <getInputFromSpeed+0x2c2>
    568c:	ee c0       	rjmp	.+476    	; 0x586a <getInputFromSpeed+0x49e>
    568e:	80 91 09 09 	lds	r24, 0x0909
    5692:	90 91 0a 09 	lds	r25, 0x090A
    5696:	82 17       	cp	r24, r18
    5698:	93 07       	cpc	r25, r19
    569a:	0c f0       	brlt	.+2      	; 0x569e <getInputFromSpeed+0x2d2>
    569c:	da c0       	rjmp	.+436    	; 0x5852 <getInputFromSpeed+0x486>
    569e:	80 91 19 09 	lds	r24, 0x0919
    56a2:	90 91 1a 09 	lds	r25, 0x091A
    56a6:	82 17       	cp	r24, r18
    56a8:	93 07       	cpc	r25, r19
    56aa:	0c f0       	brlt	.+2      	; 0x56ae <getInputFromSpeed+0x2e2>
    56ac:	d5 c0       	rjmp	.+426    	; 0x5858 <getInputFromSpeed+0x48c>
    56ae:	80 91 29 09 	lds	r24, 0x0929
    56b2:	90 91 2a 09 	lds	r25, 0x092A
    56b6:	82 17       	cp	r24, r18
    56b8:	93 07       	cpc	r25, r19
    56ba:	0c f0       	brlt	.+2      	; 0x56be <getInputFromSpeed+0x2f2>
    56bc:	de c0       	rjmp	.+444    	; 0x587a <getInputFromSpeed+0x4ae>
    56be:	80 91 39 09 	lds	r24, 0x0939
    56c2:	90 91 3a 09 	lds	r25, 0x093A
    56c6:	82 17       	cp	r24, r18
    56c8:	93 07       	cpc	r25, r19
    56ca:	0c f0       	brlt	.+2      	; 0x56ce <getInputFromSpeed+0x302>
    56cc:	d9 c0       	rjmp	.+434    	; 0x5880 <getInputFromSpeed+0x4b4>
    56ce:	c0 91 49 09 	lds	r28, 0x0949
    56d2:	d0 91 4a 09 	lds	r29, 0x094A
    56d6:	c2 17       	cp	r28, r18
    56d8:	d3 07       	cpc	r29, r19
    56da:	0c f0       	brlt	.+2      	; 0x56de <getInputFromSpeed+0x312>
    56dc:	56 c0       	rjmp	.+172    	; 0x578a <getInputFromSpeed+0x3be>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    56de:	b9 01       	movw	r22, r18
    56e0:	88 27       	eor	r24, r24
    56e2:	77 fd       	sbrc	r23, 7
    56e4:	80 95       	com	r24
    56e6:	98 2f       	mov	r25, r24
    56e8:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    56ec:	7b 01       	movw	r14, r22
    56ee:	8c 01       	movw	r16, r24
    56f0:	60 91 47 09 	lds	r22, 0x0947
    56f4:	70 91 48 09 	lds	r23, 0x0948
    56f8:	db ce       	rjmp	.-586    	; 0x54b0 <getInputFromSpeed+0xe4>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    56fa:	80 91 d1 08 	lds	r24, 0x08D1
    56fe:	90 91 d2 08 	lds	r25, 0x08D2
    5702:	82 17       	cp	r24, r18
    5704:	93 07       	cpc	r25, r19
    5706:	0c f0       	brlt	.+2      	; 0x570a <getInputFromSpeed+0x33e>
    5708:	a1 c0       	rjmp	.+322    	; 0x584c <getInputFromSpeed+0x480>
    570a:	80 91 e1 08 	lds	r24, 0x08E1
    570e:	90 91 e2 08 	lds	r25, 0x08E2
    5712:	82 17       	cp	r24, r18
    5714:	93 07       	cpc	r25, r19
    5716:	0c f0       	brlt	.+2      	; 0x571a <getInputFromSpeed+0x34e>
    5718:	a2 c0       	rjmp	.+324    	; 0x585e <getInputFromSpeed+0x492>
    571a:	80 91 f1 08 	lds	r24, 0x08F1
    571e:	90 91 f2 08 	lds	r25, 0x08F2
    5722:	82 17       	cp	r24, r18
    5724:	93 07       	cpc	r25, r19
    5726:	0c f0       	brlt	.+2      	; 0x572a <getInputFromSpeed+0x35e>
    5728:	9d c0       	rjmp	.+314    	; 0x5864 <getInputFromSpeed+0x498>
    572a:	80 91 01 09 	lds	r24, 0x0901
    572e:	90 91 02 09 	lds	r25, 0x0902
    5732:	82 17       	cp	r24, r18
    5734:	93 07       	cpc	r25, r19
    5736:	0c f0       	brlt	.+2      	; 0x573a <getInputFromSpeed+0x36e>
    5738:	98 c0       	rjmp	.+304    	; 0x586a <getInputFromSpeed+0x49e>
    573a:	80 91 11 09 	lds	r24, 0x0911
    573e:	90 91 12 09 	lds	r25, 0x0912
    5742:	82 17       	cp	r24, r18
    5744:	93 07       	cpc	r25, r19
    5746:	0c f0       	brlt	.+2      	; 0x574a <getInputFromSpeed+0x37e>
    5748:	84 c0       	rjmp	.+264    	; 0x5852 <getInputFromSpeed+0x486>
    574a:	80 91 21 09 	lds	r24, 0x0921
    574e:	90 91 22 09 	lds	r25, 0x0922
    5752:	82 17       	cp	r24, r18
    5754:	93 07       	cpc	r25, r19
    5756:	0c f0       	brlt	.+2      	; 0x575a <getInputFromSpeed+0x38e>
    5758:	7f c0       	rjmp	.+254    	; 0x5858 <getInputFromSpeed+0x48c>
    575a:	80 91 31 09 	lds	r24, 0x0931
    575e:	90 91 32 09 	lds	r25, 0x0932
    5762:	82 17       	cp	r24, r18
    5764:	93 07       	cpc	r25, r19
    5766:	0c f0       	brlt	.+2      	; 0x576a <getInputFromSpeed+0x39e>
    5768:	88 c0       	rjmp	.+272    	; 0x587a <getInputFromSpeed+0x4ae>
    576a:	80 91 41 09 	lds	r24, 0x0941
    576e:	90 91 42 09 	lds	r25, 0x0942
    5772:	82 17       	cp	r24, r18
    5774:	93 07       	cpc	r25, r19
    5776:	0c f0       	brlt	.+2      	; 0x577a <getInputFromSpeed+0x3ae>
    5778:	83 c0       	rjmp	.+262    	; 0x5880 <getInputFromSpeed+0x4b4>
    577a:	c0 91 51 09 	lds	r28, 0x0951
    577e:	d0 91 52 09 	lds	r29, 0x0952
    5782:	c2 17       	cp	r28, r18
    5784:	d3 07       	cpc	r29, r19
    5786:	0c f4       	brge	.+2      	; 0x578a <getInputFromSpeed+0x3be>
    5788:	d9 ce       	rjmp	.-590    	; 0x553c <getInputFromSpeed+0x170>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    578a:	c8 e0       	ldi	r28, 0x08	; 8
    578c:	d0 e0       	ldi	r29, 0x00	; 0
                break;
            }
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
    578e:	20 97       	sbiw	r28, 0x00	; 0
    5790:	09 f0       	breq	.+2      	; 0x5794 <getInputFromSpeed+0x3c8>
    5792:	79 c0       	rjmp	.+242    	; 0x5886 <getInputFromSpeed+0x4ba>
        if(mode==LEFT_WHEEL_FW_SC) {
    5794:	66 23       	and	r22, r22
    5796:	91 f4       	brne	.+36     	; 0x57bc <getInputFromSpeed+0x3f0>
            temp = (currVel*calibration[0][0])/calibration[0][1];
    5798:	40 91 c3 08 	lds	r20, 0x08C3
    579c:	50 91 c4 08 	lds	r21, 0x08C4
    57a0:	24 9f       	mul	r18, r20
    57a2:	c0 01       	movw	r24, r0
    57a4:	25 9f       	mul	r18, r21
    57a6:	90 0d       	add	r25, r0
    57a8:	34 9f       	mul	r19, r20
    57aa:	90 0d       	add	r25, r0
    57ac:	11 24       	eor	r1, r1
    57ae:	60 91 c5 08 	lds	r22, 0x08C5
    57b2:	70 91 c6 08 	lds	r23, 0x08C6
    57b6:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
    57ba:	9a ce       	rjmp	.-716    	; 0x54f0 <getInputFromSpeed+0x124>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    57bc:	61 30       	cpi	r22, 0x01	; 1
    57be:	d1 f0       	breq	.+52     	; 0x57f4 <getInputFromSpeed+0x428>
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
    57c0:	62 30       	cpi	r22, 0x02	; 2
    57c2:	51 f1       	breq	.+84     	; 0x5818 <getInputFromSpeed+0x44c>
            temp = currVel*calibration[0][4]/calibration[0][5];
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    57c4:	63 30       	cpi	r22, 0x03	; 3
    57c6:	09 f0       	breq	.+2      	; 0x57ca <getInputFromSpeed+0x3fe>
    57c8:	91 ce       	rjmp	.-734    	; 0x54ec <getInputFromSpeed+0x120>
            temp = currVel*calibration[0][6]/calibration[0][7];
    57ca:	40 91 cf 08 	lds	r20, 0x08CF
    57ce:	50 91 d0 08 	lds	r21, 0x08D0
    57d2:	24 9f       	mul	r18, r20
    57d4:	c0 01       	movw	r24, r0
    57d6:	25 9f       	mul	r18, r21
    57d8:	90 0d       	add	r25, r0
    57da:	34 9f       	mul	r19, r20
    57dc:	90 0d       	add	r25, r0
    57de:	11 24       	eor	r1, r1
    57e0:	60 91 d1 08 	lds	r22, 0x08D1
    57e4:	70 91 d2 08 	lds	r23, 0x08D2
    57e8:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
            temp = -temp;
    57ec:	70 95       	com	r23
    57ee:	61 95       	neg	r22
    57f0:	7f 4f       	sbci	r23, 0xFF	; 255
    57f2:	7e ce       	rjmp	.-772    	; 0x54f0 <getInputFromSpeed+0x124>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    57f4:	40 91 c7 08 	lds	r20, 0x08C7
    57f8:	50 91 c8 08 	lds	r21, 0x08C8
    57fc:	24 9f       	mul	r18, r20
    57fe:	c0 01       	movw	r24, r0
    5800:	25 9f       	mul	r18, r21
    5802:	90 0d       	add	r25, r0
    5804:	34 9f       	mul	r19, r20
    5806:	90 0d       	add	r25, r0
    5808:	11 24       	eor	r1, r1
    580a:	60 91 c9 08 	lds	r22, 0x08C9
    580e:	70 91 ca 08 	lds	r23, 0x08CA
    5812:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
    5816:	6c ce       	rjmp	.-808    	; 0x54f0 <getInputFromSpeed+0x124>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    5818:	40 91 cb 08 	lds	r20, 0x08CB
    581c:	50 91 cc 08 	lds	r21, 0x08CC
    5820:	24 9f       	mul	r18, r20
    5822:	c0 01       	movw	r24, r0
    5824:	25 9f       	mul	r18, r21
    5826:	90 0d       	add	r25, r0
    5828:	34 9f       	mul	r19, r20
    582a:	90 0d       	add	r25, r0
    582c:	11 24       	eor	r1, r1
    582e:	60 91 cd 08 	lds	r22, 0x08CD
    5832:	70 91 ce 08 	lds	r23, 0x08CE
    5836:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
            temp = -temp;
    583a:	70 95       	com	r23
    583c:	61 95       	neg	r22
    583e:	7f 4f       	sbci	r23, 0xFF	; 255
    5840:	57 ce       	rjmp	.-850    	; 0x54f0 <getInputFromSpeed+0x124>
    5842:	c0 91 49 09 	lds	r28, 0x0949
    5846:	d0 91 4a 09 	lds	r29, 0x094A
    584a:	49 cf       	rjmp	.-366    	; 0x56de <getInputFromSpeed+0x312>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    584c:	c0 e0       	ldi	r28, 0x00	; 0
    584e:	d0 e0       	ldi	r29, 0x00	; 0
    5850:	9e cf       	rjmp	.-196    	; 0x578e <getInputFromSpeed+0x3c2>
    5852:	c4 e0       	ldi	r28, 0x04	; 4
    5854:	d0 e0       	ldi	r29, 0x00	; 0
    5856:	9b cf       	rjmp	.-202    	; 0x578e <getInputFromSpeed+0x3c2>
    5858:	c5 e0       	ldi	r28, 0x05	; 5
    585a:	d0 e0       	ldi	r29, 0x00	; 0
    585c:	98 cf       	rjmp	.-208    	; 0x578e <getInputFromSpeed+0x3c2>
    585e:	c1 e0       	ldi	r28, 0x01	; 1
    5860:	d0 e0       	ldi	r29, 0x00	; 0
    5862:	95 cf       	rjmp	.-214    	; 0x578e <getInputFromSpeed+0x3c2>
    5864:	c2 e0       	ldi	r28, 0x02	; 2
    5866:	d0 e0       	ldi	r29, 0x00	; 0
    5868:	92 cf       	rjmp	.-220    	; 0x578e <getInputFromSpeed+0x3c2>
    586a:	c3 e0       	ldi	r28, 0x03	; 3
    586c:	d0 e0       	ldi	r29, 0x00	; 0
    586e:	8f cf       	rjmp	.-226    	; 0x578e <getInputFromSpeed+0x3c2>
    5870:	c0 91 4d 09 	lds	r28, 0x094D
    5874:	d0 91 4e 09 	lds	r29, 0x094E
    5878:	b7 ce       	rjmp	.-658    	; 0x55e8 <getInputFromSpeed+0x21c>
    587a:	c6 e0       	ldi	r28, 0x06	; 6
    587c:	d0 e0       	ldi	r29, 0x00	; 0
    587e:	87 cf       	rjmp	.-242    	; 0x578e <getInputFromSpeed+0x3c2>
    5880:	c7 e0       	ldi	r28, 0x07	; 7
    5882:	d0 e0       	ldi	r29, 0x00	; 0
    5884:	84 cf       	rjmp	.-248    	; 0x578e <getInputFromSpeed+0x3c2>
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5886:	c9 30       	cpi	r28, 0x09	; 9
    5888:	d1 05       	cpc	r29, r1
    588a:	09 f4       	brne	.+2      	; 0x588e <getInputFromSpeed+0x4c2>
    588c:	48 ce       	rjmp	.-880    	; 0x551e <getInputFromSpeed+0x152>
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
    588e:	66 23       	and	r22, r22
    5890:	09 f0       	breq	.+2      	; 0x5894 <getInputFromSpeed+0x4c8>
    5892:	47 c0       	rjmp	.+142    	; 0x5922 <getInputFromSpeed+0x556>
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    5894:	fe 01       	movw	r30, r28
    5896:	e2 95       	swap	r30
    5898:	f2 95       	swap	r31
    589a:	f0 7f       	andi	r31, 0xF0	; 240
    589c:	fe 27       	eor	r31, r30
    589e:	e0 7f       	andi	r30, 0xF0	; 240
    58a0:	fe 27       	eor	r31, r30
    58a2:	ed 54       	subi	r30, 0x4D	; 77
    58a4:	f7 4f       	sbci	r31, 0xF7	; 247
    58a6:	c2 80       	ldd	r12, Z+2	; 0x02
    58a8:	d3 80       	ldd	r13, Z+3	; 0x03
    58aa:	a0 80       	ld	r10, Z
    58ac:	b1 80       	ldd	r11, Z+1	; 0x01
    58ae:	2c 19       	sub	r18, r12
    58b0:	3d 09       	sbc	r19, r13
    58b2:	b9 01       	movw	r22, r18
    58b4:	88 27       	eor	r24, r24
    58b6:	77 fd       	sbrc	r23, 7
    58b8:	80 95       	com	r24
    58ba:	98 2f       	mov	r25, r24
    58bc:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    58c0:	7b 01       	movw	r14, r22
    58c2:	8c 01       	movw	r16, r24
    58c4:	c2 95       	swap	r28
    58c6:	d2 95       	swap	r29
    58c8:	d0 7f       	andi	r29, 0xF0	; 240
    58ca:	dc 27       	eor	r29, r28
    58cc:	c0 7f       	andi	r28, 0xF0	; 240
    58ce:	dc 27       	eor	r29, r28
    58d0:	cd 53       	subi	r28, 0x3D	; 61
    58d2:	d7 4f       	sbci	r29, 0xF7	; 247
    58d4:	68 81       	ld	r22, Y
    58d6:	79 81       	ldd	r23, Y+1	; 0x01
    58d8:	6a 19       	sub	r22, r10
    58da:	7b 09       	sbc	r23, r11
    58dc:	88 27       	eor	r24, r24
    58de:	77 fd       	sbrc	r23, 7
    58e0:	80 95       	com	r24
    58e2:	98 2f       	mov	r25, r24
    58e4:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    58e8:	9b 01       	movw	r18, r22
    58ea:	ac 01       	movw	r20, r24
    58ec:	c8 01       	movw	r24, r16
    58ee:	b7 01       	movw	r22, r14
    58f0:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    58f4:	7b 01       	movw	r14, r22
    58f6:	8c 01       	movw	r16, r24
    58f8:	6a 81       	ldd	r22, Y+2	; 0x02
    58fa:	7b 81       	ldd	r23, Y+3	; 0x03
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    58fc:	6c 19       	sub	r22, r12
    58fe:	7d 09       	sbc	r23, r13
    5900:	88 27       	eor	r24, r24
    5902:	77 fd       	sbrc	r23, 7
    5904:	80 95       	com	r24
    5906:	98 2f       	mov	r25, r24
    5908:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    590c:	9b 01       	movw	r18, r22
    590e:	ac 01       	movw	r20, r24
    5910:	c8 01       	movw	r24, r16
    5912:	b7 01       	movw	r22, r14
    5914:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    5918:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    591c:	6a 0d       	add	r22, r10
    591e:	7b 1d       	adc	r23, r11
    5920:	e7 cd       	rjmp	.-1074   	; 0x54f0 <getInputFromSpeed+0x124>
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
    5922:	61 30       	cpi	r22, 0x01	; 1
    5924:	09 f4       	brne	.+2      	; 0x5928 <getInputFromSpeed+0x55c>
    5926:	50 c0       	rjmp	.+160    	; 0x59c8 <getInputFromSpeed+0x5fc>
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
    5928:	62 30       	cpi	r22, 0x02	; 2
    592a:	09 f4       	brne	.+2      	; 0x592e <getInputFromSpeed+0x562>
    592c:	82 c0       	rjmp	.+260    	; 0x5a32 <getInputFromSpeed+0x666>
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
    592e:	63 30       	cpi	r22, 0x03	; 3
    5930:	09 f0       	breq	.+2      	; 0x5934 <getInputFromSpeed+0x568>
    5932:	dc cd       	rjmp	.-1096   	; 0x54ec <getInputFromSpeed+0x120>
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    5934:	fe 01       	movw	r30, r28
    5936:	e2 95       	swap	r30
    5938:	f2 95       	swap	r31
    593a:	f0 7f       	andi	r31, 0xF0	; 240
    593c:	fe 27       	eor	r31, r30
    593e:	e0 7f       	andi	r30, 0xF0	; 240
    5940:	fe 27       	eor	r31, r30
    5942:	ed 54       	subi	r30, 0x4D	; 77
    5944:	f7 4f       	sbci	r31, 0xF7	; 247
    5946:	c6 84       	ldd	r12, Z+14	; 0x0e
    5948:	d7 84       	ldd	r13, Z+15	; 0x0f
    594a:	a4 84       	ldd	r10, Z+12	; 0x0c
    594c:	b5 84       	ldd	r11, Z+13	; 0x0d
    594e:	2c 19       	sub	r18, r12
    5950:	3d 09       	sbc	r19, r13
    5952:	b9 01       	movw	r22, r18
    5954:	88 27       	eor	r24, r24
    5956:	77 fd       	sbrc	r23, 7
    5958:	80 95       	com	r24
    595a:	98 2f       	mov	r25, r24
    595c:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    5960:	7b 01       	movw	r14, r22
    5962:	8c 01       	movw	r16, r24
    5964:	c2 95       	swap	r28
    5966:	d2 95       	swap	r29
    5968:	d0 7f       	andi	r29, 0xF0	; 240
    596a:	dc 27       	eor	r29, r28
    596c:	c0 7f       	andi	r28, 0xF0	; 240
    596e:	dc 27       	eor	r29, r28
    5970:	cd 53       	subi	r28, 0x3D	; 61
    5972:	d7 4f       	sbci	r29, 0xF7	; 247
    5974:	6c 85       	ldd	r22, Y+12	; 0x0c
    5976:	7d 85       	ldd	r23, Y+13	; 0x0d
    5978:	6a 19       	sub	r22, r10
    597a:	7b 09       	sbc	r23, r11
    597c:	88 27       	eor	r24, r24
    597e:	77 fd       	sbrc	r23, 7
    5980:	80 95       	com	r24
    5982:	98 2f       	mov	r25, r24
    5984:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    5988:	9b 01       	movw	r18, r22
    598a:	ac 01       	movw	r20, r24
    598c:	c8 01       	movw	r24, r16
    598e:	b7 01       	movw	r22, r14
    5990:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    5994:	7b 01       	movw	r14, r22
    5996:	8c 01       	movw	r16, r24
    5998:	6e 85       	ldd	r22, Y+14	; 0x0e
    599a:	7f 85       	ldd	r23, Y+15	; 0x0f
    599c:	6c 19       	sub	r22, r12
    599e:	7d 09       	sbc	r23, r13
    59a0:	88 27       	eor	r24, r24
    59a2:	77 fd       	sbrc	r23, 7
    59a4:	80 95       	com	r24
    59a6:	98 2f       	mov	r25, r24
    59a8:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    59ac:	9b 01       	movw	r18, r22
    59ae:	ac 01       	movw	r20, r24
    59b0:	c8 01       	movw	r24, r16
    59b2:	b7 01       	movw	r22, r14
    59b4:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    59b8:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    59bc:	6a 0d       	add	r22, r10
    59be:	7b 1d       	adc	r23, r11
            temp = -temp;
    59c0:	70 95       	com	r23
    59c2:	61 95       	neg	r22
    59c4:	7f 4f       	sbci	r23, 0xFF	; 255
    59c6:	94 cd       	rjmp	.-1240   	; 0x54f0 <getInputFromSpeed+0x124>
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    59c8:	fe 01       	movw	r30, r28
    59ca:	e2 95       	swap	r30
    59cc:	f2 95       	swap	r31
    59ce:	f0 7f       	andi	r31, 0xF0	; 240
    59d0:	fe 27       	eor	r31, r30
    59d2:	e0 7f       	andi	r30, 0xF0	; 240
    59d4:	fe 27       	eor	r31, r30
    59d6:	ed 54       	subi	r30, 0x4D	; 77
    59d8:	f7 4f       	sbci	r31, 0xF7	; 247
    59da:	c6 80       	ldd	r12, Z+6	; 0x06
    59dc:	d7 80       	ldd	r13, Z+7	; 0x07
    59de:	a4 80       	ldd	r10, Z+4	; 0x04
    59e0:	b5 80       	ldd	r11, Z+5	; 0x05
    59e2:	2c 19       	sub	r18, r12
    59e4:	3d 09       	sbc	r19, r13
    59e6:	b9 01       	movw	r22, r18
    59e8:	88 27       	eor	r24, r24
    59ea:	77 fd       	sbrc	r23, 7
    59ec:	80 95       	com	r24
    59ee:	98 2f       	mov	r25, r24
    59f0:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    59f4:	7b 01       	movw	r14, r22
    59f6:	8c 01       	movw	r16, r24
    59f8:	c2 95       	swap	r28
    59fa:	d2 95       	swap	r29
    59fc:	d0 7f       	andi	r29, 0xF0	; 240
    59fe:	dc 27       	eor	r29, r28
    5a00:	c0 7f       	andi	r28, 0xF0	; 240
    5a02:	dc 27       	eor	r29, r28
    5a04:	cd 53       	subi	r28, 0x3D	; 61
    5a06:	d7 4f       	sbci	r29, 0xF7	; 247
    5a08:	6c 81       	ldd	r22, Y+4	; 0x04
    5a0a:	7d 81       	ldd	r23, Y+5	; 0x05
    5a0c:	6a 19       	sub	r22, r10
    5a0e:	7b 09       	sbc	r23, r11
    5a10:	88 27       	eor	r24, r24
    5a12:	77 fd       	sbrc	r23, 7
    5a14:	80 95       	com	r24
    5a16:	98 2f       	mov	r25, r24
    5a18:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    5a1c:	9b 01       	movw	r18, r22
    5a1e:	ac 01       	movw	r20, r24
    5a20:	c8 01       	movw	r24, r16
    5a22:	b7 01       	movw	r22, r14
    5a24:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    5a28:	7b 01       	movw	r14, r22
    5a2a:	8c 01       	movw	r16, r24
    5a2c:	6e 81       	ldd	r22, Y+6	; 0x06
    5a2e:	7f 81       	ldd	r23, Y+7	; 0x07
    5a30:	65 cf       	rjmp	.-310    	; 0x58fc <getInputFromSpeed+0x530>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    5a32:	fe 01       	movw	r30, r28
    5a34:	e2 95       	swap	r30
    5a36:	f2 95       	swap	r31
    5a38:	f0 7f       	andi	r31, 0xF0	; 240
    5a3a:	fe 27       	eor	r31, r30
    5a3c:	e0 7f       	andi	r30, 0xF0	; 240
    5a3e:	fe 27       	eor	r31, r30
    5a40:	ed 54       	subi	r30, 0x4D	; 77
    5a42:	f7 4f       	sbci	r31, 0xF7	; 247
    5a44:	c2 84       	ldd	r12, Z+10	; 0x0a
    5a46:	d3 84       	ldd	r13, Z+11	; 0x0b
    5a48:	a0 84       	ldd	r10, Z+8	; 0x08
    5a4a:	b1 84       	ldd	r11, Z+9	; 0x09
    5a4c:	2c 19       	sub	r18, r12
    5a4e:	3d 09       	sbc	r19, r13
    5a50:	b9 01       	movw	r22, r18
    5a52:	88 27       	eor	r24, r24
    5a54:	77 fd       	sbrc	r23, 7
    5a56:	80 95       	com	r24
    5a58:	98 2f       	mov	r25, r24
    5a5a:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    5a5e:	7b 01       	movw	r14, r22
    5a60:	8c 01       	movw	r16, r24
    5a62:	c2 95       	swap	r28
    5a64:	d2 95       	swap	r29
    5a66:	d0 7f       	andi	r29, 0xF0	; 240
    5a68:	dc 27       	eor	r29, r28
    5a6a:	c0 7f       	andi	r28, 0xF0	; 240
    5a6c:	dc 27       	eor	r29, r28
    5a6e:	cd 53       	subi	r28, 0x3D	; 61
    5a70:	d7 4f       	sbci	r29, 0xF7	; 247
    5a72:	68 85       	ldd	r22, Y+8	; 0x08
    5a74:	79 85       	ldd	r23, Y+9	; 0x09
    5a76:	6a 19       	sub	r22, r10
    5a78:	7b 09       	sbc	r23, r11
    5a7a:	88 27       	eor	r24, r24
    5a7c:	77 fd       	sbrc	r23, 7
    5a7e:	80 95       	com	r24
    5a80:	98 2f       	mov	r25, r24
    5a82:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    5a86:	9b 01       	movw	r18, r22
    5a88:	ac 01       	movw	r20, r24
    5a8a:	c8 01       	movw	r24, r16
    5a8c:	b7 01       	movw	r22, r14
    5a8e:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    5a92:	7b 01       	movw	r14, r22
    5a94:	8c 01       	movw	r16, r24
    5a96:	6a 85       	ldd	r22, Y+10	; 0x0a
    5a98:	7b 85       	ldd	r23, Y+11	; 0x0b
    5a9a:	80 cf       	rjmp	.-256    	; 0x599c <getInputFromSpeed+0x5d0>

00005a9c <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5a9c:	8f 92       	push	r8
    5a9e:	9f 92       	push	r9
    5aa0:	af 92       	push	r10
    5aa2:	bf 92       	push	r11
    5aa4:	cf 92       	push	r12
    5aa6:	df 92       	push	r13
    5aa8:	ef 92       	push	r14
    5aaa:	ff 92       	push	r15
    5aac:	0f 93       	push	r16
    5aae:	1f 93       	push	r17
    5ab0:	cf 93       	push	r28
    5ab2:	df 93       	push	r29

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5ab4:	c0 91 f3 02 	lds	r28, 0x02F3
    5ab8:	d0 91 f4 02 	lds	r29, 0x02F4
    5abc:	80 91 f5 02 	lds	r24, 0x02F5
    5ac0:	90 91 f6 02 	lds	r25, 0x02F6
    5ac4:	97 fd       	sbrc	r25, 7
    5ac6:	d9 c0       	rjmp	.+434    	; 0x5c7a <getRightSpeedFromInput+0x1de>
    5ac8:	60 91 c7 08 	lds	r22, 0x08C7
    5acc:	70 91 c8 08 	lds	r23, 0x08C8
    5ad0:	6c 17       	cp	r22, r28
    5ad2:	7d 07       	cpc	r23, r29
    5ad4:	0c f0       	brlt	.+2      	; 0x5ad8 <getRightSpeedFromInput+0x3c>
    5ad6:	bd c0       	rjmp	.+378    	; 0x5c52 <getRightSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    5ad8:	0f ef       	ldi	r16, 0xFF	; 255
    5ada:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5adc:	80 91 d7 08 	lds	r24, 0x08D7
    5ae0:	90 91 d8 08 	lds	r25, 0x08D8
    5ae4:	8c 17       	cp	r24, r28
    5ae6:	9d 07       	cpc	r25, r29
    5ae8:	44 f0       	brlt	.+16     	; 0x5afa <getRightSpeedFromInput+0x5e>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5aea:	81 e0       	ldi	r24, 0x01	; 1
    5aec:	9f ef       	ldi	r25, 0xFF	; 255
    5aee:	0f 3f       	cpi	r16, 0xFF	; 255
    5af0:	19 07       	cpc	r17, r25
    5af2:	09 f0       	breq	.+2      	; 0x5af6 <getRightSpeedFromInput+0x5a>
    5af4:	80 e0       	ldi	r24, 0x00	; 0
    5af6:	08 2f       	mov	r16, r24
    5af8:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5afa:	80 91 e7 08 	lds	r24, 0x08E7
    5afe:	90 91 e8 08 	lds	r25, 0x08E8
    5b02:	8c 17       	cp	r24, r28
    5b04:	9d 07       	cpc	r25, r29
    5b06:	2c f0       	brlt	.+10     	; 0x5b12 <getRightSpeedFromInput+0x76>
    5b08:	8f ef       	ldi	r24, 0xFF	; 255
    5b0a:	0f 3f       	cpi	r16, 0xFF	; 255
    5b0c:	18 07       	cpc	r17, r24
    5b0e:	09 f4       	brne	.+2      	; 0x5b12 <getRightSpeedFromInput+0x76>
    5b10:	6c c1       	rjmp	.+728    	; 0x5dea <getRightSpeedFromInput+0x34e>
    5b12:	80 91 f7 08 	lds	r24, 0x08F7
    5b16:	90 91 f8 08 	lds	r25, 0x08F8
    5b1a:	8c 17       	cp	r24, r28
    5b1c:	9d 07       	cpc	r25, r29
    5b1e:	2c f0       	brlt	.+10     	; 0x5b2a <getRightSpeedFromInput+0x8e>
    5b20:	9f ef       	ldi	r25, 0xFF	; 255
    5b22:	0f 3f       	cpi	r16, 0xFF	; 255
    5b24:	19 07       	cpc	r17, r25
    5b26:	09 f4       	brne	.+2      	; 0x5b2a <getRightSpeedFromInput+0x8e>
    5b28:	72 c1       	rjmp	.+740    	; 0x5e0e <getRightSpeedFromInput+0x372>
    5b2a:	80 91 07 09 	lds	r24, 0x0907
    5b2e:	90 91 08 09 	lds	r25, 0x0908
    5b32:	8c 17       	cp	r24, r28
    5b34:	9d 07       	cpc	r25, r29
    5b36:	2c f0       	brlt	.+10     	; 0x5b42 <getRightSpeedFromInput+0xa6>
    5b38:	8f ef       	ldi	r24, 0xFF	; 255
    5b3a:	0f 3f       	cpi	r16, 0xFF	; 255
    5b3c:	18 07       	cpc	r17, r24
    5b3e:	09 f4       	brne	.+2      	; 0x5b42 <getRightSpeedFromInput+0xa6>
    5b40:	63 c1       	rjmp	.+710    	; 0x5e08 <getRightSpeedFromInput+0x36c>
    5b42:	80 91 17 09 	lds	r24, 0x0917
    5b46:	90 91 18 09 	lds	r25, 0x0918
    5b4a:	8c 17       	cp	r24, r28
    5b4c:	9d 07       	cpc	r25, r29
    5b4e:	2c f0       	brlt	.+10     	; 0x5b5a <getRightSpeedFromInput+0xbe>
    5b50:	9f ef       	ldi	r25, 0xFF	; 255
    5b52:	0f 3f       	cpi	r16, 0xFF	; 255
    5b54:	19 07       	cpc	r17, r25
    5b56:	09 f4       	brne	.+2      	; 0x5b5a <getRightSpeedFromInput+0xbe>
    5b58:	54 c1       	rjmp	.+680    	; 0x5e02 <getRightSpeedFromInput+0x366>
    5b5a:	80 91 27 09 	lds	r24, 0x0927
    5b5e:	90 91 28 09 	lds	r25, 0x0928
    5b62:	8c 17       	cp	r24, r28
    5b64:	9d 07       	cpc	r25, r29
    5b66:	2c f0       	brlt	.+10     	; 0x5b72 <getRightSpeedFromInput+0xd6>
    5b68:	8f ef       	ldi	r24, 0xFF	; 255
    5b6a:	0f 3f       	cpi	r16, 0xFF	; 255
    5b6c:	18 07       	cpc	r17, r24
    5b6e:	09 f4       	brne	.+2      	; 0x5b72 <getRightSpeedFromInput+0xd6>
    5b70:	45 c1       	rjmp	.+650    	; 0x5dfc <getRightSpeedFromInput+0x360>
    5b72:	80 91 37 09 	lds	r24, 0x0937
    5b76:	90 91 38 09 	lds	r25, 0x0938
    5b7a:	8c 17       	cp	r24, r28
    5b7c:	9d 07       	cpc	r25, r29
    5b7e:	2c f0       	brlt	.+10     	; 0x5b8a <getRightSpeedFromInput+0xee>
    5b80:	9f ef       	ldi	r25, 0xFF	; 255
    5b82:	0f 3f       	cpi	r16, 0xFF	; 255
    5b84:	19 07       	cpc	r17, r25
    5b86:	09 f4       	brne	.+2      	; 0x5b8a <getRightSpeedFromInput+0xee>
    5b88:	36 c1       	rjmp	.+620    	; 0x5df6 <getRightSpeedFromInput+0x35a>
    5b8a:	e0 90 47 09 	lds	r14, 0x0947
    5b8e:	f0 90 48 09 	lds	r15, 0x0948
    5b92:	ec 16       	cp	r14, r28
    5b94:	fd 06       	cpc	r15, r29
    5b96:	2c f0       	brlt	.+10     	; 0x5ba2 <getRightSpeedFromInput+0x106>
    5b98:	8f ef       	ldi	r24, 0xFF	; 255
    5b9a:	0f 3f       	cpi	r16, 0xFF	; 255
    5b9c:	18 07       	cpc	r17, r24
    5b9e:	09 f4       	brne	.+2      	; 0x5ba2 <getRightSpeedFromInput+0x106>
    5ba0:	27 c1       	rjmp	.+590    	; 0x5df0 <getRightSpeedFromInput+0x354>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    5ba2:	20 97       	sbiw	r28, 0x00	; 0
    5ba4:	09 f4       	brne	.+2      	; 0x5ba8 <getRightSpeedFromInput+0x10c>
    5ba6:	58 c0       	rjmp	.+176    	; 0x5c58 <getRightSpeedFromInput+0x1bc>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    5ba8:	01 15       	cp	r16, r1
    5baa:	11 05       	cpc	r17, r1
    5bac:	09 f4       	brne	.+2      	; 0x5bb0 <getRightSpeedFromInput+0x114>
    5bae:	32 c1       	rjmp	.+612    	; 0x5e14 <getRightSpeedFromInput+0x378>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5bb0:	9f ef       	ldi	r25, 0xFF	; 255
    5bb2:	0f 3f       	cpi	r16, 0xFF	; 255
    5bb4:	19 07       	cpc	r17, r25
    5bb6:	09 f4       	brne	.+2      	; 0x5bba <getRightSpeedFromInput+0x11e>
    5bb8:	e9 c0       	rjmp	.+466    	; 0x5d8c <getRightSpeedFromInput+0x2f0>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    5bba:	f8 01       	movw	r30, r16
    5bbc:	e2 95       	swap	r30
    5bbe:	f2 95       	swap	r31
    5bc0:	f0 7f       	andi	r31, 0xF0	; 240
    5bc2:	fe 27       	eor	r31, r30
    5bc4:	e0 7f       	andi	r30, 0xF0	; 240
    5bc6:	fe 27       	eor	r31, r30
    5bc8:	ed 54       	subi	r30, 0x4D	; 77
    5bca:	f7 4f       	sbci	r31, 0xF7	; 247
    5bcc:	a4 80       	ldd	r10, Z+4	; 0x04
    5bce:	b5 80       	ldd	r11, Z+5	; 0x05
    5bd0:	86 80       	ldd	r8, Z+6	; 0x06
    5bd2:	97 80       	ldd	r9, Z+7	; 0x07
    5bd4:	ca 19       	sub	r28, r10
    5bd6:	db 09       	sbc	r29, r11
    5bd8:	be 01       	movw	r22, r28
    5bda:	88 27       	eor	r24, r24
    5bdc:	77 fd       	sbrc	r23, 7
    5bde:	80 95       	com	r24
    5be0:	98 2f       	mov	r25, r24
    5be2:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    5be6:	6b 01       	movw	r12, r22
    5be8:	7c 01       	movw	r14, r24
    5bea:	e8 01       	movw	r28, r16
    5bec:	c2 95       	swap	r28
    5bee:	d2 95       	swap	r29
    5bf0:	d0 7f       	andi	r29, 0xF0	; 240
    5bf2:	dc 27       	eor	r29, r28
    5bf4:	c0 7f       	andi	r28, 0xF0	; 240
    5bf6:	dc 27       	eor	r29, r28
    5bf8:	cd 53       	subi	r28, 0x3D	; 61
    5bfa:	d7 4f       	sbci	r29, 0xF7	; 247
    5bfc:	6e 81       	ldd	r22, Y+6	; 0x06
    5bfe:	7f 81       	ldd	r23, Y+7	; 0x07
    5c00:	68 19       	sub	r22, r8
    5c02:	79 09       	sbc	r23, r9
    5c04:	88 27       	eor	r24, r24
    5c06:	77 fd       	sbrc	r23, 7
    5c08:	80 95       	com	r24
    5c0a:	98 2f       	mov	r25, r24
    5c0c:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    5c10:	9b 01       	movw	r18, r22
    5c12:	ac 01       	movw	r20, r24
    5c14:	c7 01       	movw	r24, r14
    5c16:	b6 01       	movw	r22, r12
    5c18:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    5c1c:	7b 01       	movw	r14, r22
    5c1e:	8c 01       	movw	r16, r24
    5c20:	6c 81       	ldd	r22, Y+4	; 0x04
    5c22:	7d 81       	ldd	r23, Y+5	; 0x05
    5c24:	6a 19       	sub	r22, r10
    5c26:	7b 09       	sbc	r23, r11
    5c28:	88 27       	eor	r24, r24
    5c2a:	77 fd       	sbrc	r23, 7
    5c2c:	80 95       	com	r24
    5c2e:	98 2f       	mov	r25, r24
    5c30:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    5c34:	9b 01       	movw	r18, r22
    5c36:	ac 01       	movw	r20, r24
    5c38:	c8 01       	movw	r24, r16
    5c3a:	b7 01       	movw	r22, r14
    5c3c:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    5c40:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    5c44:	68 0d       	add	r22, r8
    5c46:	79 1d       	adc	r23, r9
    5c48:	70 93 bb 04 	sts	0x04BB, r23
    5c4c:	60 93 ba 04 	sts	0x04BA, r22
    5c50:	07 c0       	rjmp	.+14     	; 0x5c60 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5c52:	00 e0       	ldi	r16, 0x00	; 0
    5c54:	10 e0       	ldi	r17, 0x00	; 0
    5c56:	42 cf       	rjmp	.-380    	; 0x5adc <getRightSpeedFromInput+0x40>
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
    5c58:	10 92 bb 04 	sts	0x04BB, r1
    5c5c:	10 92 ba 04 	sts	0x04BA, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    5c60:	df 91       	pop	r29
    5c62:	cf 91       	pop	r28
    5c64:	1f 91       	pop	r17
    5c66:	0f 91       	pop	r16
    5c68:	ff 90       	pop	r15
    5c6a:	ef 90       	pop	r14
    5c6c:	df 90       	pop	r13
    5c6e:	cf 90       	pop	r12
    5c70:	bf 90       	pop	r11
    5c72:	af 90       	pop	r10
    5c74:	9f 90       	pop	r9
    5c76:	8f 90       	pop	r8
    5c78:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5c7a:	60 91 cf 08 	lds	r22, 0x08CF
    5c7e:	70 91 d0 08 	lds	r23, 0x08D0
    5c82:	6c 17       	cp	r22, r28
    5c84:	7d 07       	cpc	r23, r29
    5c86:	0c f0       	brlt	.+2      	; 0x5c8a <getRightSpeedFromInput+0x1ee>
    5c88:	7e c0       	rjmp	.+252    	; 0x5d86 <getRightSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    5c8a:	0f ef       	ldi	r16, 0xFF	; 255
    5c8c:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5c8e:	80 91 df 08 	lds	r24, 0x08DF
    5c92:	90 91 e0 08 	lds	r25, 0x08E0
    5c96:	8c 17       	cp	r24, r28
    5c98:	9d 07       	cpc	r25, r29
    5c9a:	44 f0       	brlt	.+16     	; 0x5cac <getRightSpeedFromInput+0x210>
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    5c9c:	81 e0       	ldi	r24, 0x01	; 1
    5c9e:	9f ef       	ldi	r25, 0xFF	; 255
    5ca0:	0f 3f       	cpi	r16, 0xFF	; 255
    5ca2:	19 07       	cpc	r17, r25
    5ca4:	09 f0       	breq	.+2      	; 0x5ca8 <getRightSpeedFromInput+0x20c>
    5ca6:	80 e0       	ldi	r24, 0x00	; 0
    5ca8:	08 2f       	mov	r16, r24
    5caa:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5cac:	80 91 ef 08 	lds	r24, 0x08EF
    5cb0:	90 91 f0 08 	lds	r25, 0x08F0
    5cb4:	8c 17       	cp	r24, r28
    5cb6:	9d 07       	cpc	r25, r29
    5cb8:	2c f0       	brlt	.+10     	; 0x5cc4 <getRightSpeedFromInput+0x228>
    5cba:	8f ef       	ldi	r24, 0xFF	; 255
    5cbc:	0f 3f       	cpi	r16, 0xFF	; 255
    5cbe:	18 07       	cpc	r17, r24
    5cc0:	09 f4       	brne	.+2      	; 0x5cc4 <getRightSpeedFromInput+0x228>
    5cc2:	19 c1       	rjmp	.+562    	; 0x5ef6 <getRightSpeedFromInput+0x45a>
    5cc4:	80 91 ff 08 	lds	r24, 0x08FF
    5cc8:	90 91 00 09 	lds	r25, 0x0900
    5ccc:	8c 17       	cp	r24, r28
    5cce:	9d 07       	cpc	r25, r29
    5cd0:	2c f0       	brlt	.+10     	; 0x5cdc <getRightSpeedFromInput+0x240>
    5cd2:	9f ef       	ldi	r25, 0xFF	; 255
    5cd4:	0f 3f       	cpi	r16, 0xFF	; 255
    5cd6:	19 07       	cpc	r17, r25
    5cd8:	09 f4       	brne	.+2      	; 0x5cdc <getRightSpeedFromInput+0x240>
    5cda:	0a c1       	rjmp	.+532    	; 0x5ef0 <getRightSpeedFromInput+0x454>
    5cdc:	80 91 0f 09 	lds	r24, 0x090F
    5ce0:	90 91 10 09 	lds	r25, 0x0910
    5ce4:	8c 17       	cp	r24, r28
    5ce6:	9d 07       	cpc	r25, r29
    5ce8:	2c f0       	brlt	.+10     	; 0x5cf4 <getRightSpeedFromInput+0x258>
    5cea:	8f ef       	ldi	r24, 0xFF	; 255
    5cec:	0f 3f       	cpi	r16, 0xFF	; 255
    5cee:	18 07       	cpc	r17, r24
    5cf0:	09 f4       	brne	.+2      	; 0x5cf4 <getRightSpeedFromInput+0x258>
    5cf2:	fb c0       	rjmp	.+502    	; 0x5eea <getRightSpeedFromInput+0x44e>
    5cf4:	80 91 1f 09 	lds	r24, 0x091F
    5cf8:	90 91 20 09 	lds	r25, 0x0920
    5cfc:	8c 17       	cp	r24, r28
    5cfe:	9d 07       	cpc	r25, r29
    5d00:	2c f0       	brlt	.+10     	; 0x5d0c <getRightSpeedFromInput+0x270>
    5d02:	9f ef       	ldi	r25, 0xFF	; 255
    5d04:	0f 3f       	cpi	r16, 0xFF	; 255
    5d06:	19 07       	cpc	r17, r25
    5d08:	09 f4       	brne	.+2      	; 0x5d0c <getRightSpeedFromInput+0x270>
    5d0a:	ec c0       	rjmp	.+472    	; 0x5ee4 <getRightSpeedFromInput+0x448>
    5d0c:	80 91 2f 09 	lds	r24, 0x092F
    5d10:	90 91 30 09 	lds	r25, 0x0930
    5d14:	8c 17       	cp	r24, r28
    5d16:	9d 07       	cpc	r25, r29
    5d18:	2c f0       	brlt	.+10     	; 0x5d24 <getRightSpeedFromInput+0x288>
    5d1a:	8f ef       	ldi	r24, 0xFF	; 255
    5d1c:	0f 3f       	cpi	r16, 0xFF	; 255
    5d1e:	18 07       	cpc	r17, r24
    5d20:	09 f4       	brne	.+2      	; 0x5d24 <getRightSpeedFromInput+0x288>
    5d22:	dd c0       	rjmp	.+442    	; 0x5ede <getRightSpeedFromInput+0x442>
    5d24:	80 91 3f 09 	lds	r24, 0x093F
    5d28:	90 91 40 09 	lds	r25, 0x0940
    5d2c:	8c 17       	cp	r24, r28
    5d2e:	9d 07       	cpc	r25, r29
    5d30:	2c f0       	brlt	.+10     	; 0x5d3c <getRightSpeedFromInput+0x2a0>
    5d32:	9f ef       	ldi	r25, 0xFF	; 255
    5d34:	0f 3f       	cpi	r16, 0xFF	; 255
    5d36:	19 07       	cpc	r17, r25
    5d38:	09 f4       	brne	.+2      	; 0x5d3c <getRightSpeedFromInput+0x2a0>
    5d3a:	ce c0       	rjmp	.+412    	; 0x5ed8 <getRightSpeedFromInput+0x43c>
    5d3c:	e0 90 4f 09 	lds	r14, 0x094F
    5d40:	f0 90 50 09 	lds	r15, 0x0950
    5d44:	ec 16       	cp	r14, r28
    5d46:	fd 06       	cpc	r15, r29
    5d48:	2c f0       	brlt	.+10     	; 0x5d54 <getRightSpeedFromInput+0x2b8>
    5d4a:	8f ef       	ldi	r24, 0xFF	; 255
    5d4c:	0f 3f       	cpi	r16, 0xFF	; 255
    5d4e:	18 07       	cpc	r17, r24
    5d50:	09 f4       	brne	.+2      	; 0x5d54 <getRightSpeedFromInput+0x2b8>
    5d52:	bf c0       	rjmp	.+382    	; 0x5ed2 <getRightSpeedFromInput+0x436>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    5d54:	01 15       	cp	r16, r1
    5d56:	11 05       	cpc	r17, r1
    5d58:	09 f0       	breq	.+2      	; 0x5d5c <getRightSpeedFromInput+0x2c0>
    5d5a:	6e c0       	rjmp	.+220    	; 0x5e38 <getRightSpeedFromInput+0x39c>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    5d5c:	20 91 d1 08 	lds	r18, 0x08D1
    5d60:	30 91 d2 08 	lds	r19, 0x08D2
    5d64:	c2 9f       	mul	r28, r18
    5d66:	c0 01       	movw	r24, r0
    5d68:	c3 9f       	mul	r28, r19
    5d6a:	90 0d       	add	r25, r0
    5d6c:	d2 9f       	mul	r29, r18
    5d6e:	90 0d       	add	r25, r0
    5d70:	11 24       	eor	r1, r1
    5d72:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    5d76:	70 95       	com	r23
    5d78:	61 95       	neg	r22
    5d7a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d7c:	70 93 bb 04 	sts	0x04BB, r23
    5d80:	60 93 ba 04 	sts	0x04BA, r22
    5d84:	6d cf       	rjmp	.-294    	; 0x5c60 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5d86:	00 e0       	ldi	r16, 0x00	; 0
    5d88:	10 e0       	ldi	r17, 0x00	; 0
    5d8a:	81 cf       	rjmp	.-254    	; 0x5c8e <getRightSpeedFromInput+0x1f2>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    5d8c:	60 91 49 09 	lds	r22, 0x0949
    5d90:	70 91 4a 09 	lds	r23, 0x094A
    5d94:	88 27       	eor	r24, r24
    5d96:	77 fd       	sbrc	r23, 7
    5d98:	80 95       	com	r24
    5d9a:	98 2f       	mov	r25, r24
    5d9c:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    5da0:	5b 01       	movw	r10, r22
    5da2:	6c 01       	movw	r12, r24
    5da4:	be 01       	movw	r22, r28
    5da6:	88 27       	eor	r24, r24
    5da8:	77 fd       	sbrc	r23, 7
    5daa:	80 95       	com	r24
    5dac:	98 2f       	mov	r25, r24
    5dae:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    5db2:	9b 01       	movw	r18, r22
    5db4:	ac 01       	movw	r20, r24
    5db6:	c6 01       	movw	r24, r12
    5db8:	b5 01       	movw	r22, r10
    5dba:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    5dbe:	5b 01       	movw	r10, r22
    5dc0:	6c 01       	movw	r12, r24
    5dc2:	b7 01       	movw	r22, r14
    5dc4:	88 27       	eor	r24, r24
    5dc6:	77 fd       	sbrc	r23, 7
    5dc8:	80 95       	com	r24
    5dca:	98 2f       	mov	r25, r24
    5dcc:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    5dd0:	9b 01       	movw	r18, r22
    5dd2:	ac 01       	movw	r20, r24
    5dd4:	c6 01       	movw	r24, r12
    5dd6:	b5 01       	movw	r22, r10
    5dd8:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    5ddc:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    5de0:	70 93 bb 04 	sts	0x04BB, r23
    5de4:	60 93 ba 04 	sts	0x04BA, r22
    5de8:	3b cf       	rjmp	.-394    	; 0x5c60 <getRightSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5dea:	02 e0       	ldi	r16, 0x02	; 2
    5dec:	10 e0       	ldi	r17, 0x00	; 0
    5dee:	91 ce       	rjmp	.-734    	; 0x5b12 <getRightSpeedFromInput+0x76>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    5df0:	08 e0       	ldi	r16, 0x08	; 8
    5df2:	10 e0       	ldi	r17, 0x00	; 0
    5df4:	d6 ce       	rjmp	.-596    	; 0x5ba2 <getRightSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5df6:	07 e0       	ldi	r16, 0x07	; 7
    5df8:	10 e0       	ldi	r17, 0x00	; 0
    5dfa:	c7 ce       	rjmp	.-626    	; 0x5b8a <getRightSpeedFromInput+0xee>
    5dfc:	06 e0       	ldi	r16, 0x06	; 6
    5dfe:	10 e0       	ldi	r17, 0x00	; 0
    5e00:	b8 ce       	rjmp	.-656    	; 0x5b72 <getRightSpeedFromInput+0xd6>
    5e02:	05 e0       	ldi	r16, 0x05	; 5
    5e04:	10 e0       	ldi	r17, 0x00	; 0
    5e06:	a9 ce       	rjmp	.-686    	; 0x5b5a <getRightSpeedFromInput+0xbe>
    5e08:	04 e0       	ldi	r16, 0x04	; 4
    5e0a:	10 e0       	ldi	r17, 0x00	; 0
    5e0c:	9a ce       	rjmp	.-716    	; 0x5b42 <getRightSpeedFromInput+0xa6>
    5e0e:	03 e0       	ldi	r16, 0x03	; 3
    5e10:	10 e0       	ldi	r17, 0x00	; 0
    5e12:	8b ce       	rjmp	.-746    	; 0x5b2a <getRightSpeedFromInput+0x8e>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    5e14:	20 91 c9 08 	lds	r18, 0x08C9
    5e18:	30 91 ca 08 	lds	r19, 0x08CA
    5e1c:	c2 9f       	mul	r28, r18
    5e1e:	c0 01       	movw	r24, r0
    5e20:	c3 9f       	mul	r28, r19
    5e22:	90 0d       	add	r25, r0
    5e24:	d2 9f       	mul	r29, r18
    5e26:	90 0d       	add	r25, r0
    5e28:	11 24       	eor	r1, r1
    5e2a:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
    5e2e:	70 93 bb 04 	sts	0x04BB, r23
    5e32:	60 93 ba 04 	sts	0x04BA, r22
    5e36:	14 cf       	rjmp	.-472    	; 0x5c60 <getRightSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    5e38:	8f ef       	ldi	r24, 0xFF	; 255
    5e3a:	0f 3f       	cpi	r16, 0xFF	; 255
    5e3c:	18 07       	cpc	r17, r24
    5e3e:	09 f4       	brne	.+2      	; 0x5e42 <getRightSpeedFromInput+0x3a6>
    5e40:	5d c0       	rjmp	.+186    	; 0x5efc <getRightSpeedFromInput+0x460>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    5e42:	f8 01       	movw	r30, r16
    5e44:	e2 95       	swap	r30
    5e46:	f2 95       	swap	r31
    5e48:	f0 7f       	andi	r31, 0xF0	; 240
    5e4a:	fe 27       	eor	r31, r30
    5e4c:	e0 7f       	andi	r30, 0xF0	; 240
    5e4e:	fe 27       	eor	r31, r30
    5e50:	ed 54       	subi	r30, 0x4D	; 77
    5e52:	f7 4f       	sbci	r31, 0xF7	; 247
    5e54:	a4 84       	ldd	r10, Z+12	; 0x0c
    5e56:	b5 84       	ldd	r11, Z+13	; 0x0d
    5e58:	86 84       	ldd	r8, Z+14	; 0x0e
    5e5a:	97 84       	ldd	r9, Z+15	; 0x0f
    5e5c:	ca 19       	sub	r28, r10
    5e5e:	db 09       	sbc	r29, r11
    5e60:	be 01       	movw	r22, r28
    5e62:	88 27       	eor	r24, r24
    5e64:	77 fd       	sbrc	r23, 7
    5e66:	80 95       	com	r24
    5e68:	98 2f       	mov	r25, r24
    5e6a:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    5e6e:	6b 01       	movw	r12, r22
    5e70:	7c 01       	movw	r14, r24
    5e72:	e8 01       	movw	r28, r16
    5e74:	c2 95       	swap	r28
    5e76:	d2 95       	swap	r29
    5e78:	d0 7f       	andi	r29, 0xF0	; 240
    5e7a:	dc 27       	eor	r29, r28
    5e7c:	c0 7f       	andi	r28, 0xF0	; 240
    5e7e:	dc 27       	eor	r29, r28
    5e80:	cd 53       	subi	r28, 0x3D	; 61
    5e82:	d7 4f       	sbci	r29, 0xF7	; 247
    5e84:	6e 85       	ldd	r22, Y+14	; 0x0e
    5e86:	7f 85       	ldd	r23, Y+15	; 0x0f
    5e88:	68 19       	sub	r22, r8
    5e8a:	79 09       	sbc	r23, r9
    5e8c:	88 27       	eor	r24, r24
    5e8e:	77 fd       	sbrc	r23, 7
    5e90:	80 95       	com	r24
    5e92:	98 2f       	mov	r25, r24
    5e94:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    5e98:	9b 01       	movw	r18, r22
    5e9a:	ac 01       	movw	r20, r24
    5e9c:	c7 01       	movw	r24, r14
    5e9e:	b6 01       	movw	r22, r12
    5ea0:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    5ea4:	7b 01       	movw	r14, r22
    5ea6:	8c 01       	movw	r16, r24
    5ea8:	6c 85       	ldd	r22, Y+12	; 0x0c
    5eaa:	7d 85       	ldd	r23, Y+13	; 0x0d
    5eac:	6a 19       	sub	r22, r10
    5eae:	7b 09       	sbc	r23, r11
    5eb0:	88 27       	eor	r24, r24
    5eb2:	77 fd       	sbrc	r23, 7
    5eb4:	80 95       	com	r24
    5eb6:	98 2f       	mov	r25, r24
    5eb8:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    5ebc:	9b 01       	movw	r18, r22
    5ebe:	ac 01       	movw	r20, r24
    5ec0:	c8 01       	movw	r24, r16
    5ec2:	b7 01       	movw	r22, r14
    5ec4:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    5ec8:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    5ecc:	68 0d       	add	r22, r8
    5ece:	79 1d       	adc	r23, r9
    5ed0:	52 cf       	rjmp	.-348    	; 0x5d76 <getRightSpeedFromInput+0x2da>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    5ed2:	08 e0       	ldi	r16, 0x08	; 8
    5ed4:	10 e0       	ldi	r17, 0x00	; 0
    5ed6:	3e cf       	rjmp	.-388    	; 0x5d54 <getRightSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5ed8:	07 e0       	ldi	r16, 0x07	; 7
    5eda:	10 e0       	ldi	r17, 0x00	; 0
    5edc:	2f cf       	rjmp	.-418    	; 0x5d3c <getRightSpeedFromInput+0x2a0>
    5ede:	06 e0       	ldi	r16, 0x06	; 6
    5ee0:	10 e0       	ldi	r17, 0x00	; 0
    5ee2:	20 cf       	rjmp	.-448    	; 0x5d24 <getRightSpeedFromInput+0x288>
    5ee4:	05 e0       	ldi	r16, 0x05	; 5
    5ee6:	10 e0       	ldi	r17, 0x00	; 0
    5ee8:	11 cf       	rjmp	.-478    	; 0x5d0c <getRightSpeedFromInput+0x270>
    5eea:	04 e0       	ldi	r16, 0x04	; 4
    5eec:	10 e0       	ldi	r17, 0x00	; 0
    5eee:	02 cf       	rjmp	.-508    	; 0x5cf4 <getRightSpeedFromInput+0x258>
    5ef0:	03 e0       	ldi	r16, 0x03	; 3
    5ef2:	10 e0       	ldi	r17, 0x00	; 0
    5ef4:	f3 ce       	rjmp	.-538    	; 0x5cdc <getRightSpeedFromInput+0x240>
    5ef6:	02 e0       	ldi	r16, 0x02	; 2
    5ef8:	10 e0       	ldi	r17, 0x00	; 0
    5efa:	e4 ce       	rjmp	.-568    	; 0x5cc4 <getRightSpeedFromInput+0x228>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    5efc:	60 91 51 09 	lds	r22, 0x0951
    5f00:	70 91 52 09 	lds	r23, 0x0952
    5f04:	88 27       	eor	r24, r24
    5f06:	77 fd       	sbrc	r23, 7
    5f08:	80 95       	com	r24
    5f0a:	98 2f       	mov	r25, r24
    5f0c:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    5f10:	5b 01       	movw	r10, r22
    5f12:	6c 01       	movw	r12, r24
    5f14:	be 01       	movw	r22, r28
    5f16:	88 27       	eor	r24, r24
    5f18:	77 fd       	sbrc	r23, 7
    5f1a:	80 95       	com	r24
    5f1c:	98 2f       	mov	r25, r24
    5f1e:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    5f22:	9b 01       	movw	r18, r22
    5f24:	ac 01       	movw	r20, r24
    5f26:	c6 01       	movw	r24, r12
    5f28:	b5 01       	movw	r22, r10
    5f2a:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    5f2e:	5b 01       	movw	r10, r22
    5f30:	6c 01       	movw	r12, r24
    5f32:	b7 01       	movw	r22, r14
    5f34:	88 27       	eor	r24, r24
    5f36:	77 fd       	sbrc	r23, 7
    5f38:	80 95       	com	r24
    5f3a:	98 2f       	mov	r25, r24
    5f3c:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    5f40:	9b 01       	movw	r18, r22
    5f42:	ac 01       	movw	r20, r24
    5f44:	c6 01       	movw	r24, r12
    5f46:	b5 01       	movw	r22, r10
    5f48:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    5f4c:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    5f50:	12 cf       	rjmp	.-476    	; 0x5d76 <getRightSpeedFromInput+0x2da>

00005f52 <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    5f52:	8f 92       	push	r8
    5f54:	9f 92       	push	r9
    5f56:	af 92       	push	r10
    5f58:	bf 92       	push	r11
    5f5a:	cf 92       	push	r12
    5f5c:	df 92       	push	r13
    5f5e:	ef 92       	push	r14
    5f60:	ff 92       	push	r15
    5f62:	0f 93       	push	r16
    5f64:	1f 93       	push	r17
    5f66:	cf 93       	push	r28
    5f68:	df 93       	push	r29

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5f6a:	c0 91 f1 02 	lds	r28, 0x02F1
    5f6e:	d0 91 f2 02 	lds	r29, 0x02F2
    5f72:	80 91 f7 02 	lds	r24, 0x02F7
    5f76:	90 91 f8 02 	lds	r25, 0x02F8
    5f7a:	97 fd       	sbrc	r25, 7
    5f7c:	d9 c0       	rjmp	.+434    	; 0x6130 <getLeftSpeedFromInput+0x1de>
    5f7e:	60 91 c3 08 	lds	r22, 0x08C3
    5f82:	70 91 c4 08 	lds	r23, 0x08C4
    5f86:	6c 17       	cp	r22, r28
    5f88:	7d 07       	cpc	r23, r29
    5f8a:	0c f0       	brlt	.+2      	; 0x5f8e <getLeftSpeedFromInput+0x3c>
    5f8c:	bd c0       	rjmp	.+378    	; 0x6108 <getLeftSpeedFromInput+0x1b6>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    5f8e:	0f ef       	ldi	r16, 0xFF	; 255
    5f90:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5f92:	80 91 d3 08 	lds	r24, 0x08D3
    5f96:	90 91 d4 08 	lds	r25, 0x08D4
    5f9a:	8c 17       	cp	r24, r28
    5f9c:	9d 07       	cpc	r25, r29
    5f9e:	44 f0       	brlt	.+16     	; 0x5fb0 <getLeftSpeedFromInput+0x5e>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    5fa0:	81 e0       	ldi	r24, 0x01	; 1
    5fa2:	9f ef       	ldi	r25, 0xFF	; 255
    5fa4:	0f 3f       	cpi	r16, 0xFF	; 255
    5fa6:	19 07       	cpc	r17, r25
    5fa8:	09 f0       	breq	.+2      	; 0x5fac <getLeftSpeedFromInput+0x5a>
    5faa:	80 e0       	ldi	r24, 0x00	; 0
    5fac:	08 2f       	mov	r16, r24
    5fae:	10 e0       	ldi	r17, 0x00	; 0

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    5fb0:	80 91 e3 08 	lds	r24, 0x08E3
    5fb4:	90 91 e4 08 	lds	r25, 0x08E4
    5fb8:	8c 17       	cp	r24, r28
    5fba:	9d 07       	cpc	r25, r29
    5fbc:	2c f0       	brlt	.+10     	; 0x5fc8 <getLeftSpeedFromInput+0x76>
    5fbe:	8f ef       	ldi	r24, 0xFF	; 255
    5fc0:	0f 3f       	cpi	r16, 0xFF	; 255
    5fc2:	18 07       	cpc	r17, r24
    5fc4:	09 f4       	brne	.+2      	; 0x5fc8 <getLeftSpeedFromInput+0x76>
    5fc6:	6c c1       	rjmp	.+728    	; 0x62a0 <getLeftSpeedFromInput+0x34e>
    5fc8:	80 91 f3 08 	lds	r24, 0x08F3
    5fcc:	90 91 f4 08 	lds	r25, 0x08F4
    5fd0:	8c 17       	cp	r24, r28
    5fd2:	9d 07       	cpc	r25, r29
    5fd4:	2c f0       	brlt	.+10     	; 0x5fe0 <getLeftSpeedFromInput+0x8e>
    5fd6:	9f ef       	ldi	r25, 0xFF	; 255
    5fd8:	0f 3f       	cpi	r16, 0xFF	; 255
    5fda:	19 07       	cpc	r17, r25
    5fdc:	09 f4       	brne	.+2      	; 0x5fe0 <getLeftSpeedFromInput+0x8e>
    5fde:	72 c1       	rjmp	.+740    	; 0x62c4 <getLeftSpeedFromInput+0x372>
    5fe0:	80 91 03 09 	lds	r24, 0x0903
    5fe4:	90 91 04 09 	lds	r25, 0x0904
    5fe8:	8c 17       	cp	r24, r28
    5fea:	9d 07       	cpc	r25, r29
    5fec:	2c f0       	brlt	.+10     	; 0x5ff8 <getLeftSpeedFromInput+0xa6>
    5fee:	8f ef       	ldi	r24, 0xFF	; 255
    5ff0:	0f 3f       	cpi	r16, 0xFF	; 255
    5ff2:	18 07       	cpc	r17, r24
    5ff4:	09 f4       	brne	.+2      	; 0x5ff8 <getLeftSpeedFromInput+0xa6>
    5ff6:	63 c1       	rjmp	.+710    	; 0x62be <getLeftSpeedFromInput+0x36c>
    5ff8:	80 91 13 09 	lds	r24, 0x0913
    5ffc:	90 91 14 09 	lds	r25, 0x0914
    6000:	8c 17       	cp	r24, r28
    6002:	9d 07       	cpc	r25, r29
    6004:	2c f0       	brlt	.+10     	; 0x6010 <getLeftSpeedFromInput+0xbe>
    6006:	9f ef       	ldi	r25, 0xFF	; 255
    6008:	0f 3f       	cpi	r16, 0xFF	; 255
    600a:	19 07       	cpc	r17, r25
    600c:	09 f4       	brne	.+2      	; 0x6010 <getLeftSpeedFromInput+0xbe>
    600e:	54 c1       	rjmp	.+680    	; 0x62b8 <getLeftSpeedFromInput+0x366>
    6010:	80 91 23 09 	lds	r24, 0x0923
    6014:	90 91 24 09 	lds	r25, 0x0924
    6018:	8c 17       	cp	r24, r28
    601a:	9d 07       	cpc	r25, r29
    601c:	2c f0       	brlt	.+10     	; 0x6028 <getLeftSpeedFromInput+0xd6>
    601e:	8f ef       	ldi	r24, 0xFF	; 255
    6020:	0f 3f       	cpi	r16, 0xFF	; 255
    6022:	18 07       	cpc	r17, r24
    6024:	09 f4       	brne	.+2      	; 0x6028 <getLeftSpeedFromInput+0xd6>
    6026:	45 c1       	rjmp	.+650    	; 0x62b2 <getLeftSpeedFromInput+0x360>
    6028:	80 91 33 09 	lds	r24, 0x0933
    602c:	90 91 34 09 	lds	r25, 0x0934
    6030:	8c 17       	cp	r24, r28
    6032:	9d 07       	cpc	r25, r29
    6034:	2c f0       	brlt	.+10     	; 0x6040 <getLeftSpeedFromInput+0xee>
    6036:	9f ef       	ldi	r25, 0xFF	; 255
    6038:	0f 3f       	cpi	r16, 0xFF	; 255
    603a:	19 07       	cpc	r17, r25
    603c:	09 f4       	brne	.+2      	; 0x6040 <getLeftSpeedFromInput+0xee>
    603e:	36 c1       	rjmp	.+620    	; 0x62ac <getLeftSpeedFromInput+0x35a>
    6040:	e0 90 43 09 	lds	r14, 0x0943
    6044:	f0 90 44 09 	lds	r15, 0x0944
    6048:	ec 16       	cp	r14, r28
    604a:	fd 06       	cpc	r15, r29
    604c:	2c f0       	brlt	.+10     	; 0x6058 <getLeftSpeedFromInput+0x106>
    604e:	8f ef       	ldi	r24, 0xFF	; 255
    6050:	0f 3f       	cpi	r16, 0xFF	; 255
    6052:	18 07       	cpc	r17, r24
    6054:	09 f4       	brne	.+2      	; 0x6058 <getLeftSpeedFromInput+0x106>
    6056:	27 c1       	rjmp	.+590    	; 0x62a6 <getLeftSpeedFromInput+0x354>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    6058:	20 97       	sbiw	r28, 0x00	; 0
    605a:	09 f4       	brne	.+2      	; 0x605e <getLeftSpeedFromInput+0x10c>
    605c:	58 c0       	rjmp	.+176    	; 0x610e <getLeftSpeedFromInput+0x1bc>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    605e:	01 15       	cp	r16, r1
    6060:	11 05       	cpc	r17, r1
    6062:	09 f4       	brne	.+2      	; 0x6066 <getLeftSpeedFromInput+0x114>
    6064:	32 c1       	rjmp	.+612    	; 0x62ca <getLeftSpeedFromInput+0x378>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    6066:	9f ef       	ldi	r25, 0xFF	; 255
    6068:	0f 3f       	cpi	r16, 0xFF	; 255
    606a:	19 07       	cpc	r17, r25
    606c:	09 f4       	brne	.+2      	; 0x6070 <getLeftSpeedFromInput+0x11e>
    606e:	e9 c0       	rjmp	.+466    	; 0x6242 <getLeftSpeedFromInput+0x2f0>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    6070:	f8 01       	movw	r30, r16
    6072:	e2 95       	swap	r30
    6074:	f2 95       	swap	r31
    6076:	f0 7f       	andi	r31, 0xF0	; 240
    6078:	fe 27       	eor	r31, r30
    607a:	e0 7f       	andi	r30, 0xF0	; 240
    607c:	fe 27       	eor	r31, r30
    607e:	ed 54       	subi	r30, 0x4D	; 77
    6080:	f7 4f       	sbci	r31, 0xF7	; 247
    6082:	a0 80       	ld	r10, Z
    6084:	b1 80       	ldd	r11, Z+1	; 0x01
    6086:	82 80       	ldd	r8, Z+2	; 0x02
    6088:	93 80       	ldd	r9, Z+3	; 0x03
    608a:	ca 19       	sub	r28, r10
    608c:	db 09       	sbc	r29, r11
    608e:	be 01       	movw	r22, r28
    6090:	88 27       	eor	r24, r24
    6092:	77 fd       	sbrc	r23, 7
    6094:	80 95       	com	r24
    6096:	98 2f       	mov	r25, r24
    6098:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    609c:	6b 01       	movw	r12, r22
    609e:	7c 01       	movw	r14, r24
    60a0:	e8 01       	movw	r28, r16
    60a2:	c2 95       	swap	r28
    60a4:	d2 95       	swap	r29
    60a6:	d0 7f       	andi	r29, 0xF0	; 240
    60a8:	dc 27       	eor	r29, r28
    60aa:	c0 7f       	andi	r28, 0xF0	; 240
    60ac:	dc 27       	eor	r29, r28
    60ae:	cd 53       	subi	r28, 0x3D	; 61
    60b0:	d7 4f       	sbci	r29, 0xF7	; 247
    60b2:	6a 81       	ldd	r22, Y+2	; 0x02
    60b4:	7b 81       	ldd	r23, Y+3	; 0x03
    60b6:	68 19       	sub	r22, r8
    60b8:	79 09       	sbc	r23, r9
    60ba:	88 27       	eor	r24, r24
    60bc:	77 fd       	sbrc	r23, 7
    60be:	80 95       	com	r24
    60c0:	98 2f       	mov	r25, r24
    60c2:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    60c6:	9b 01       	movw	r18, r22
    60c8:	ac 01       	movw	r20, r24
    60ca:	c7 01       	movw	r24, r14
    60cc:	b6 01       	movw	r22, r12
    60ce:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    60d2:	7b 01       	movw	r14, r22
    60d4:	8c 01       	movw	r16, r24
    60d6:	68 81       	ld	r22, Y
    60d8:	79 81       	ldd	r23, Y+1	; 0x01
    60da:	6a 19       	sub	r22, r10
    60dc:	7b 09       	sbc	r23, r11
    60de:	88 27       	eor	r24, r24
    60e0:	77 fd       	sbrc	r23, 7
    60e2:	80 95       	com	r24
    60e4:	98 2f       	mov	r25, r24
    60e6:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    60ea:	9b 01       	movw	r18, r22
    60ec:	ac 01       	movw	r20, r24
    60ee:	c8 01       	movw	r24, r16
    60f0:	b7 01       	movw	r22, r14
    60f2:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    60f6:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    60fa:	68 0d       	add	r22, r8
    60fc:	79 1d       	adc	r23, r9
    60fe:	70 93 b9 04 	sts	0x04B9, r23
    6102:	60 93 b8 04 	sts	0x04B8, r22
    6106:	07 c0       	rjmp	.+14     	; 0x6116 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    6108:	00 e0       	ldi	r16, 0x00	; 0
    610a:	10 e0       	ldi	r17, 0x00	; 0
    610c:	42 cf       	rjmp	.-380    	; 0x5f92 <getLeftSpeedFromInput+0x40>
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
    610e:	10 92 b9 04 	sts	0x04B9, r1
    6112:	10 92 b8 04 	sts	0x04B8, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    6116:	df 91       	pop	r29
    6118:	cf 91       	pop	r28
    611a:	1f 91       	pop	r17
    611c:	0f 91       	pop	r16
    611e:	ff 90       	pop	r15
    6120:	ef 90       	pop	r14
    6122:	df 90       	pop	r13
    6124:	cf 90       	pop	r12
    6126:	bf 90       	pop	r11
    6128:	af 90       	pop	r10
    612a:	9f 90       	pop	r9
    612c:	8f 90       	pop	r8
    612e:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6130:	60 91 cb 08 	lds	r22, 0x08CB
    6134:	70 91 cc 08 	lds	r23, 0x08CC
    6138:	6c 17       	cp	r22, r28
    613a:	7d 07       	cpc	r23, r29
    613c:	0c f0       	brlt	.+2      	; 0x6140 <getLeftSpeedFromInput+0x1ee>
    613e:	7e c0       	rjmp	.+252    	; 0x623c <getLeftSpeedFromInput+0x2ea>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    6140:	0f ef       	ldi	r16, 0xFF	; 255
    6142:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6144:	80 91 db 08 	lds	r24, 0x08DB
    6148:	90 91 dc 08 	lds	r25, 0x08DC
    614c:	8c 17       	cp	r24, r28
    614e:	9d 07       	cpc	r25, r29
    6150:	44 f0       	brlt	.+16     	; 0x6162 <getLeftSpeedFromInput+0x210>
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    6152:	81 e0       	ldi	r24, 0x01	; 1
    6154:	9f ef       	ldi	r25, 0xFF	; 255
    6156:	0f 3f       	cpi	r16, 0xFF	; 255
    6158:	19 07       	cpc	r17, r25
    615a:	09 f0       	breq	.+2      	; 0x615e <getLeftSpeedFromInput+0x20c>
    615c:	80 e0       	ldi	r24, 0x00	; 0
    615e:	08 2f       	mov	r16, r24
    6160:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6162:	80 91 eb 08 	lds	r24, 0x08EB
    6166:	90 91 ec 08 	lds	r25, 0x08EC
    616a:	8c 17       	cp	r24, r28
    616c:	9d 07       	cpc	r25, r29
    616e:	2c f0       	brlt	.+10     	; 0x617a <getLeftSpeedFromInput+0x228>
    6170:	8f ef       	ldi	r24, 0xFF	; 255
    6172:	0f 3f       	cpi	r16, 0xFF	; 255
    6174:	18 07       	cpc	r17, r24
    6176:	09 f4       	brne	.+2      	; 0x617a <getLeftSpeedFromInput+0x228>
    6178:	19 c1       	rjmp	.+562    	; 0x63ac <getLeftSpeedFromInput+0x45a>
    617a:	80 91 fb 08 	lds	r24, 0x08FB
    617e:	90 91 fc 08 	lds	r25, 0x08FC
    6182:	8c 17       	cp	r24, r28
    6184:	9d 07       	cpc	r25, r29
    6186:	2c f0       	brlt	.+10     	; 0x6192 <getLeftSpeedFromInput+0x240>
    6188:	9f ef       	ldi	r25, 0xFF	; 255
    618a:	0f 3f       	cpi	r16, 0xFF	; 255
    618c:	19 07       	cpc	r17, r25
    618e:	09 f4       	brne	.+2      	; 0x6192 <getLeftSpeedFromInput+0x240>
    6190:	0a c1       	rjmp	.+532    	; 0x63a6 <getLeftSpeedFromInput+0x454>
    6192:	80 91 0b 09 	lds	r24, 0x090B
    6196:	90 91 0c 09 	lds	r25, 0x090C
    619a:	8c 17       	cp	r24, r28
    619c:	9d 07       	cpc	r25, r29
    619e:	2c f0       	brlt	.+10     	; 0x61aa <getLeftSpeedFromInput+0x258>
    61a0:	8f ef       	ldi	r24, 0xFF	; 255
    61a2:	0f 3f       	cpi	r16, 0xFF	; 255
    61a4:	18 07       	cpc	r17, r24
    61a6:	09 f4       	brne	.+2      	; 0x61aa <getLeftSpeedFromInput+0x258>
    61a8:	fb c0       	rjmp	.+502    	; 0x63a0 <getLeftSpeedFromInput+0x44e>
    61aa:	80 91 1b 09 	lds	r24, 0x091B
    61ae:	90 91 1c 09 	lds	r25, 0x091C
    61b2:	8c 17       	cp	r24, r28
    61b4:	9d 07       	cpc	r25, r29
    61b6:	2c f0       	brlt	.+10     	; 0x61c2 <getLeftSpeedFromInput+0x270>
    61b8:	9f ef       	ldi	r25, 0xFF	; 255
    61ba:	0f 3f       	cpi	r16, 0xFF	; 255
    61bc:	19 07       	cpc	r17, r25
    61be:	09 f4       	brne	.+2      	; 0x61c2 <getLeftSpeedFromInput+0x270>
    61c0:	ec c0       	rjmp	.+472    	; 0x639a <getLeftSpeedFromInput+0x448>
    61c2:	80 91 2b 09 	lds	r24, 0x092B
    61c6:	90 91 2c 09 	lds	r25, 0x092C
    61ca:	8c 17       	cp	r24, r28
    61cc:	9d 07       	cpc	r25, r29
    61ce:	2c f0       	brlt	.+10     	; 0x61da <getLeftSpeedFromInput+0x288>
    61d0:	8f ef       	ldi	r24, 0xFF	; 255
    61d2:	0f 3f       	cpi	r16, 0xFF	; 255
    61d4:	18 07       	cpc	r17, r24
    61d6:	09 f4       	brne	.+2      	; 0x61da <getLeftSpeedFromInput+0x288>
    61d8:	dd c0       	rjmp	.+442    	; 0x6394 <getLeftSpeedFromInput+0x442>
    61da:	80 91 3b 09 	lds	r24, 0x093B
    61de:	90 91 3c 09 	lds	r25, 0x093C
    61e2:	8c 17       	cp	r24, r28
    61e4:	9d 07       	cpc	r25, r29
    61e6:	2c f0       	brlt	.+10     	; 0x61f2 <getLeftSpeedFromInput+0x2a0>
    61e8:	9f ef       	ldi	r25, 0xFF	; 255
    61ea:	0f 3f       	cpi	r16, 0xFF	; 255
    61ec:	19 07       	cpc	r17, r25
    61ee:	09 f4       	brne	.+2      	; 0x61f2 <getLeftSpeedFromInput+0x2a0>
    61f0:	ce c0       	rjmp	.+412    	; 0x638e <getLeftSpeedFromInput+0x43c>
    61f2:	e0 90 4b 09 	lds	r14, 0x094B
    61f6:	f0 90 4c 09 	lds	r15, 0x094C
    61fa:	ec 16       	cp	r14, r28
    61fc:	fd 06       	cpc	r15, r29
    61fe:	2c f0       	brlt	.+10     	; 0x620a <getLeftSpeedFromInput+0x2b8>
    6200:	8f ef       	ldi	r24, 0xFF	; 255
    6202:	0f 3f       	cpi	r16, 0xFF	; 255
    6204:	18 07       	cpc	r17, r24
    6206:	09 f4       	brne	.+2      	; 0x620a <getLeftSpeedFromInput+0x2b8>
    6208:	bf c0       	rjmp	.+382    	; 0x6388 <getLeftSpeedFromInput+0x436>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    620a:	01 15       	cp	r16, r1
    620c:	11 05       	cpc	r17, r1
    620e:	09 f0       	breq	.+2      	; 0x6212 <getLeftSpeedFromInput+0x2c0>
    6210:	6e c0       	rjmp	.+220    	; 0x62ee <getLeftSpeedFromInput+0x39c>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    6212:	20 91 cd 08 	lds	r18, 0x08CD
    6216:	30 91 ce 08 	lds	r19, 0x08CE
    621a:	c2 9f       	mul	r28, r18
    621c:	c0 01       	movw	r24, r0
    621e:	c3 9f       	mul	r28, r19
    6220:	90 0d       	add	r25, r0
    6222:	d2 9f       	mul	r29, r18
    6224:	90 0d       	add	r25, r0
    6226:	11 24       	eor	r1, r1
    6228:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    622c:	70 95       	com	r23
    622e:	61 95       	neg	r22
    6230:	7f 4f       	sbci	r23, 0xFF	; 255
    6232:	70 93 b9 04 	sts	0x04B9, r23
    6236:	60 93 b8 04 	sts	0x04B8, r22
    623a:	6d cf       	rjmp	.-294    	; 0x6116 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    623c:	00 e0       	ldi	r16, 0x00	; 0
    623e:	10 e0       	ldi	r17, 0x00	; 0
    6240:	81 cf       	rjmp	.-254    	; 0x6144 <getLeftSpeedFromInput+0x1f2>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    6242:	60 91 45 09 	lds	r22, 0x0945
    6246:	70 91 46 09 	lds	r23, 0x0946
    624a:	88 27       	eor	r24, r24
    624c:	77 fd       	sbrc	r23, 7
    624e:	80 95       	com	r24
    6250:	98 2f       	mov	r25, r24
    6252:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    6256:	5b 01       	movw	r10, r22
    6258:	6c 01       	movw	r12, r24
    625a:	be 01       	movw	r22, r28
    625c:	88 27       	eor	r24, r24
    625e:	77 fd       	sbrc	r23, 7
    6260:	80 95       	com	r24
    6262:	98 2f       	mov	r25, r24
    6264:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    6268:	9b 01       	movw	r18, r22
    626a:	ac 01       	movw	r20, r24
    626c:	c6 01       	movw	r24, r12
    626e:	b5 01       	movw	r22, r10
    6270:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    6274:	5b 01       	movw	r10, r22
    6276:	6c 01       	movw	r12, r24
    6278:	b7 01       	movw	r22, r14
    627a:	88 27       	eor	r24, r24
    627c:	77 fd       	sbrc	r23, 7
    627e:	80 95       	com	r24
    6280:	98 2f       	mov	r25, r24
    6282:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    6286:	9b 01       	movw	r18, r22
    6288:	ac 01       	movw	r20, r24
    628a:	c6 01       	movw	r24, r12
    628c:	b5 01       	movw	r22, r10
    628e:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    6292:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    6296:	70 93 b9 04 	sts	0x04B9, r23
    629a:	60 93 b8 04 	sts	0x04B8, r22
    629e:	3b cf       	rjmp	.-394    	; 0x6116 <getLeftSpeedFromInput+0x1c4>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    62a0:	02 e0       	ldi	r16, 0x02	; 2
    62a2:	10 e0       	ldi	r17, 0x00	; 0
    62a4:	91 ce       	rjmp	.-734    	; 0x5fc8 <getLeftSpeedFromInput+0x76>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    62a6:	08 e0       	ldi	r16, 0x08	; 8
    62a8:	10 e0       	ldi	r17, 0x00	; 0
    62aa:	d6 ce       	rjmp	.-596    	; 0x6058 <getLeftSpeedFromInput+0x106>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    62ac:	07 e0       	ldi	r16, 0x07	; 7
    62ae:	10 e0       	ldi	r17, 0x00	; 0
    62b0:	c7 ce       	rjmp	.-626    	; 0x6040 <getLeftSpeedFromInput+0xee>
    62b2:	06 e0       	ldi	r16, 0x06	; 6
    62b4:	10 e0       	ldi	r17, 0x00	; 0
    62b6:	b8 ce       	rjmp	.-656    	; 0x6028 <getLeftSpeedFromInput+0xd6>
    62b8:	05 e0       	ldi	r16, 0x05	; 5
    62ba:	10 e0       	ldi	r17, 0x00	; 0
    62bc:	a9 ce       	rjmp	.-686    	; 0x6010 <getLeftSpeedFromInput+0xbe>
    62be:	04 e0       	ldi	r16, 0x04	; 4
    62c0:	10 e0       	ldi	r17, 0x00	; 0
    62c2:	9a ce       	rjmp	.-716    	; 0x5ff8 <getLeftSpeedFromInput+0xa6>
    62c4:	03 e0       	ldi	r16, 0x03	; 3
    62c6:	10 e0       	ldi	r17, 0x00	; 0
    62c8:	8b ce       	rjmp	.-746    	; 0x5fe0 <getLeftSpeedFromInput+0x8e>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    62ca:	20 91 c5 08 	lds	r18, 0x08C5
    62ce:	30 91 c6 08 	lds	r19, 0x08C6
    62d2:	c2 9f       	mul	r28, r18
    62d4:	c0 01       	movw	r24, r0
    62d6:	c3 9f       	mul	r28, r19
    62d8:	90 0d       	add	r25, r0
    62da:	d2 9f       	mul	r29, r18
    62dc:	90 0d       	add	r25, r0
    62de:	11 24       	eor	r1, r1
    62e0:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
    62e4:	70 93 b9 04 	sts	0x04B9, r23
    62e8:	60 93 b8 04 	sts	0x04B8, r22
    62ec:	14 cf       	rjmp	.-472    	; 0x6116 <getLeftSpeedFromInput+0x1c4>
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    62ee:	8f ef       	ldi	r24, 0xFF	; 255
    62f0:	0f 3f       	cpi	r16, 0xFF	; 255
    62f2:	18 07       	cpc	r17, r24
    62f4:	09 f4       	brne	.+2      	; 0x62f8 <getLeftSpeedFromInput+0x3a6>
    62f6:	5d c0       	rjmp	.+186    	; 0x63b2 <getLeftSpeedFromInput+0x460>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    62f8:	f8 01       	movw	r30, r16
    62fa:	e2 95       	swap	r30
    62fc:	f2 95       	swap	r31
    62fe:	f0 7f       	andi	r31, 0xF0	; 240
    6300:	fe 27       	eor	r31, r30
    6302:	e0 7f       	andi	r30, 0xF0	; 240
    6304:	fe 27       	eor	r31, r30
    6306:	ed 54       	subi	r30, 0x4D	; 77
    6308:	f7 4f       	sbci	r31, 0xF7	; 247
    630a:	a0 84       	ldd	r10, Z+8	; 0x08
    630c:	b1 84       	ldd	r11, Z+9	; 0x09
    630e:	82 84       	ldd	r8, Z+10	; 0x0a
    6310:	93 84       	ldd	r9, Z+11	; 0x0b
    6312:	ca 19       	sub	r28, r10
    6314:	db 09       	sbc	r29, r11
    6316:	be 01       	movw	r22, r28
    6318:	88 27       	eor	r24, r24
    631a:	77 fd       	sbrc	r23, 7
    631c:	80 95       	com	r24
    631e:	98 2f       	mov	r25, r24
    6320:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    6324:	6b 01       	movw	r12, r22
    6326:	7c 01       	movw	r14, r24
    6328:	e8 01       	movw	r28, r16
    632a:	c2 95       	swap	r28
    632c:	d2 95       	swap	r29
    632e:	d0 7f       	andi	r29, 0xF0	; 240
    6330:	dc 27       	eor	r29, r28
    6332:	c0 7f       	andi	r28, 0xF0	; 240
    6334:	dc 27       	eor	r29, r28
    6336:	cd 53       	subi	r28, 0x3D	; 61
    6338:	d7 4f       	sbci	r29, 0xF7	; 247
    633a:	6a 85       	ldd	r22, Y+10	; 0x0a
    633c:	7b 85       	ldd	r23, Y+11	; 0x0b
    633e:	68 19       	sub	r22, r8
    6340:	79 09       	sbc	r23, r9
    6342:	88 27       	eor	r24, r24
    6344:	77 fd       	sbrc	r23, 7
    6346:	80 95       	com	r24
    6348:	98 2f       	mov	r25, r24
    634a:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    634e:	9b 01       	movw	r18, r22
    6350:	ac 01       	movw	r20, r24
    6352:	c7 01       	movw	r24, r14
    6354:	b6 01       	movw	r22, r12
    6356:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    635a:	7b 01       	movw	r14, r22
    635c:	8c 01       	movw	r16, r24
    635e:	68 85       	ldd	r22, Y+8	; 0x08
    6360:	79 85       	ldd	r23, Y+9	; 0x09
    6362:	6a 19       	sub	r22, r10
    6364:	7b 09       	sbc	r23, r11
    6366:	88 27       	eor	r24, r24
    6368:	77 fd       	sbrc	r23, 7
    636a:	80 95       	com	r24
    636c:	98 2f       	mov	r25, r24
    636e:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    6372:	9b 01       	movw	r18, r22
    6374:	ac 01       	movw	r20, r24
    6376:	c8 01       	movw	r24, r16
    6378:	b7 01       	movw	r22, r14
    637a:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    637e:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    6382:	68 0d       	add	r22, r8
    6384:	79 1d       	adc	r23, r9
    6386:	52 cf       	rjmp	.-348    	; 0x622c <getLeftSpeedFromInput+0x2da>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    6388:	08 e0       	ldi	r16, 0x08	; 8
    638a:	10 e0       	ldi	r17, 0x00	; 0
    638c:	3e cf       	rjmp	.-388    	; 0x620a <getLeftSpeedFromInput+0x2b8>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    638e:	07 e0       	ldi	r16, 0x07	; 7
    6390:	10 e0       	ldi	r17, 0x00	; 0
    6392:	2f cf       	rjmp	.-418    	; 0x61f2 <getLeftSpeedFromInput+0x2a0>
    6394:	06 e0       	ldi	r16, 0x06	; 6
    6396:	10 e0       	ldi	r17, 0x00	; 0
    6398:	20 cf       	rjmp	.-448    	; 0x61da <getLeftSpeedFromInput+0x288>
    639a:	05 e0       	ldi	r16, 0x05	; 5
    639c:	10 e0       	ldi	r17, 0x00	; 0
    639e:	11 cf       	rjmp	.-478    	; 0x61c2 <getLeftSpeedFromInput+0x270>
    63a0:	04 e0       	ldi	r16, 0x04	; 4
    63a2:	10 e0       	ldi	r17, 0x00	; 0
    63a4:	02 cf       	rjmp	.-508    	; 0x61aa <getLeftSpeedFromInput+0x258>
    63a6:	03 e0       	ldi	r16, 0x03	; 3
    63a8:	10 e0       	ldi	r17, 0x00	; 0
    63aa:	f3 ce       	rjmp	.-538    	; 0x6192 <getLeftSpeedFromInput+0x240>
    63ac:	02 e0       	ldi	r16, 0x02	; 2
    63ae:	10 e0       	ldi	r17, 0x00	; 0
    63b0:	e4 ce       	rjmp	.-568    	; 0x617a <getLeftSpeedFromInput+0x228>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    63b2:	60 91 4d 09 	lds	r22, 0x094D
    63b6:	70 91 4e 09 	lds	r23, 0x094E
    63ba:	88 27       	eor	r24, r24
    63bc:	77 fd       	sbrc	r23, 7
    63be:	80 95       	com	r24
    63c0:	98 2f       	mov	r25, r24
    63c2:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    63c6:	5b 01       	movw	r10, r22
    63c8:	6c 01       	movw	r12, r24
    63ca:	be 01       	movw	r22, r28
    63cc:	88 27       	eor	r24, r24
    63ce:	77 fd       	sbrc	r23, 7
    63d0:	80 95       	com	r24
    63d2:	98 2f       	mov	r25, r24
    63d4:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    63d8:	9b 01       	movw	r18, r22
    63da:	ac 01       	movw	r20, r24
    63dc:	c6 01       	movw	r24, r12
    63de:	b5 01       	movw	r22, r10
    63e0:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    63e4:	5b 01       	movw	r10, r22
    63e6:	6c 01       	movw	r12, r24
    63e8:	b7 01       	movw	r22, r14
    63ea:	88 27       	eor	r24, r24
    63ec:	77 fd       	sbrc	r23, 7
    63ee:	80 95       	com	r24
    63f0:	98 2f       	mov	r25, r24
    63f2:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    63f6:	9b 01       	movw	r18, r22
    63f8:	ac 01       	movw	r20, r24
    63fa:	c6 01       	movw	r24, r12
    63fc:	b5 01       	movw	r22, r10
    63fe:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    6402:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    6406:	12 cf       	rjmp	.-476    	; 0x622c <getLeftSpeedFromInput+0x2da>

00006408 <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    6408:	2f 92       	push	r2
    640a:	3f 92       	push	r3
    640c:	4f 92       	push	r4
    640e:	5f 92       	push	r5
    6410:	6f 92       	push	r6
    6412:	7f 92       	push	r7
    6414:	8f 92       	push	r8
    6416:	9f 92       	push	r9
    6418:	af 92       	push	r10
    641a:	bf 92       	push	r11
    641c:	cf 92       	push	r12
    641e:	df 92       	push	r13
    6420:	ef 92       	push	r14
    6422:	ff 92       	push	r15
    6424:	0f 93       	push	r16
    6426:	1f 93       	push	r17

	if(calibrateOdomFlag==1) {
    6428:	80 91 4d 05 	lds	r24, 0x054D
    642c:	81 30       	cpi	r24, 0x01	; 1
    642e:	09 f4       	brne	.+2      	; 0x6432 <handleMotorsWithSpeedController+0x2a>
    6430:	28 c2       	rjmp	.+1104   	; 0x6882 <handleMotorsWithSpeedController+0x47a>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    6432:	80 91 fd 02 	lds	r24, 0x02FD
    6436:	90 91 fe 02 	lds	r25, 0x02FE
    643a:	97 fd       	sbrc	r25, 7
    643c:	9a c2       	rjmp	.+1332   	; 0x6972 <handleMotorsWithSpeedController+0x56a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    643e:	61 e0       	ldi	r22, 0x01	; 1
    6440:	0e 94 e6 29 	call	0x53cc	; 0x53cc <getInputFromSpeed>
    6444:	90 93 0e 03 	sts	0x030E, r25
    6448:	80 93 0d 03 	sts	0x030D, r24
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    644c:	80 91 ff 02 	lds	r24, 0x02FF
    6450:	90 91 00 03 	lds	r25, 0x0300
    6454:	97 fd       	sbrc	r25, 7
    6456:	85 c2       	rjmp	.+1290   	; 0x6962 <handleMotorsWithSpeedController+0x55a>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
    6458:	60 e0       	ldi	r22, 0x00	; 0
    645a:	0e 94 e6 29 	call	0x53cc	; 0x53cc <getInputFromSpeed>
    645e:	90 93 10 03 	sts	0x0310, r25
    6462:	80 93 0f 03 	sts	0x030F, r24
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
    6466:	20 91 6c 04 	lds	r18, 0x046C
    646a:	22 23       	and	r18, r18
    646c:	09 f0       	breq	.+2      	; 0x6470 <handleMotorsWithSpeedController+0x68>
    646e:	fe c1       	rjmp	.+1020   	; 0x686c <handleMotorsWithSpeedController+0x464>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    6470:	90 93 ec 02 	sts	0x02EC, r25
    6474:	80 93 eb 02 	sts	0x02EB, r24
	pwm_right_desired_to_control = pwm_right_working;
    6478:	80 91 0d 03 	lds	r24, 0x030D
    647c:	90 91 0e 03 	lds	r25, 0x030E
    6480:	90 93 ea 02 	sts	0x02EA, r25
    6484:	80 93 e9 02 	sts	0x02E9, r24

	if(compute_left_vel) {
    6488:	80 91 07 02 	lds	r24, 0x0207
    648c:	88 23       	and	r24, r24
    648e:	09 f4       	brne	.+2      	; 0x6492 <handleMotorsWithSpeedController+0x8a>
    6490:	93 c0       	rjmp	.+294    	; 0x65b8 <handleMotorsWithSpeedController+0x1b0>

		last_left_vel = left_vel_sum>>2;
    6492:	20 91 ed 02 	lds	r18, 0x02ED
    6496:	30 91 ee 02 	lds	r19, 0x02EE
    649a:	36 95       	lsr	r19
    649c:	27 95       	ror	r18
    649e:	36 95       	lsr	r19
    64a0:	27 95       	ror	r18
    64a2:	30 93 f2 02 	sts	0x02F2, r19
    64a6:	20 93 f1 02 	sts	0x02F1, r18
		compute_left_vel = 0;
    64aa:	10 92 07 02 	sts	0x0207, r1
		left_vel_sum = 0;
    64ae:	10 92 ee 02 	sts	0x02EE, r1
    64b2:	10 92 ed 02 	sts	0x02ED, r1
		
		if(calibrateOdomFlag==1) {
    64b6:	80 91 4d 05 	lds	r24, 0x054D
    64ba:	81 30       	cpi	r24, 0x01	; 1
    64bc:	09 f4       	brne	.+2      	; 0x64c0 <handleMotorsWithSpeedController+0xb8>
    64be:	08 c2       	rjmp	.+1040   	; 0x68d0 <handleMotorsWithSpeedController+0x4c8>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    64c0:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    64c4:	80 91 93 04 	lds	r24, 0x0493
    64c8:	90 91 94 04 	lds	r25, 0x0494
    64cc:	a0 91 95 04 	lds	r26, 0x0495
    64d0:	b0 91 96 04 	lds	r27, 0x0496
    64d4:	80 93 9b 04 	sts	0x049B, r24
    64d8:	90 93 9c 04 	sts	0x049C, r25
    64dc:	a0 93 9d 04 	sts	0x049D, r26
    64e0:	b0 93 9e 04 	sts	0x049E, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    64e4:	60 91 b8 04 	lds	r22, 0x04B8
    64e8:	70 91 b9 04 	lds	r23, 0x04B9
    64ec:	88 27       	eor	r24, r24
    64ee:	77 fd       	sbrc	r23, 7
    64f0:	80 95       	com	r24
    64f2:	98 2f       	mov	r25, r24
    64f4:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    64f8:	7b 01       	movw	r14, r22
    64fa:	8c 01       	movw	r16, r24
    64fc:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    6500:	20 91 bc 04 	lds	r18, 0x04BC
    6504:	30 91 bd 04 	lds	r19, 0x04BD
    6508:	40 91 be 04 	lds	r20, 0x04BE
    650c:	50 91 bf 04 	lds	r21, 0x04BF
    6510:	62 1b       	sub	r22, r18
    6512:	73 0b       	sbc	r23, r19
    6514:	84 0b       	sbc	r24, r20
    6516:	95 0b       	sbc	r25, r21
    6518:	0e 94 fd 4f 	call	0x9ffa	; 0x9ffa <__floatunsisf>
    651c:	20 e0       	ldi	r18, 0x00	; 0
    651e:	30 e0       	ldi	r19, 0x00	; 0
    6520:	40 ed       	ldi	r20, 0xD0	; 208
    6522:	52 e4       	ldi	r21, 0x42	; 66
    6524:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    6528:	9b 01       	movw	r18, r22
    652a:	ac 01       	movw	r20, r24
    652c:	c8 01       	movw	r24, r16
    652e:	b7 01       	movw	r22, r14
    6530:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    6534:	20 e0       	ldi	r18, 0x00	; 0
    6536:	34 e2       	ldi	r19, 0x24	; 36
    6538:	44 e7       	ldi	r20, 0x74	; 116
    653a:	59 e4       	ldi	r21, 0x49	; 73
    653c:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    6540:	9b 01       	movw	r18, r22
    6542:	ac 01       	movw	r20, r24
    6544:	60 91 93 04 	lds	r22, 0x0493
    6548:	70 91 94 04 	lds	r23, 0x0494
    654c:	80 91 95 04 	lds	r24, 0x0495
    6550:	90 91 96 04 	lds	r25, 0x0496
    6554:	0e 94 97 4e 	call	0x9d2e	; 0x9d2e <__addsf3>
    6558:	60 93 93 04 	sts	0x0493, r22
    655c:	70 93 94 04 	sts	0x0494, r23
    6560:	80 93 95 04 	sts	0x0495, r24
    6564:	90 93 96 04 	sts	0x0496, r25
		timeLeftOdom = getTime100MicroSec();
    6568:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    656c:	60 93 bc 04 	sts	0x04BC, r22
    6570:	70 93 bd 04 	sts	0x04BD, r23
    6574:	80 93 be 04 	sts	0x04BE, r24
    6578:	90 93 bf 04 	sts	0x04BF, r25
		} else {
			leftMotSteps -= ((float)(last_left_vel>>3))*(LEFT_ENC_OFFSET-ENC_SLOPE*((float)(last_left_vel>>2)))/1000.0;
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
    657c:	80 91 16 02 	lds	r24, 0x0216
    6580:	81 30       	cpi	r24, 0x01	; 1
    6582:	09 f4       	brne	.+2      	; 0x6586 <handleMotorsWithSpeedController+0x17e>
    6584:	c7 c1       	rjmp	.+910    	; 0x6914 <handleMotorsWithSpeedController+0x50c>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_left(&pwm_left_working);
    6586:	8f e0       	ldi	r24, 0x0F	; 15
    6588:	93 e0       	ldi	r25, 0x03	; 3
    658a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <start_vertical_speed_control_left>
			//PORTB |= (1 << 6);
		}

		pwm_left = pwm_left_working;
    658e:	80 91 0f 03 	lds	r24, 0x030F
    6592:	90 91 10 03 	lds	r25, 0x0310
    6596:	90 93 f8 02 	sts	0x02F8, r25
    659a:	80 93 f7 02 	sts	0x02F7, r24

		if(pwm_left > 0) {
    659e:	18 16       	cp	r1, r24
    65a0:	19 06       	cpc	r1, r25
    65a2:	0c f0       	brlt	.+2      	; 0x65a6 <handleMotorsWithSpeedController+0x19e>
    65a4:	f9 c1       	rjmp	.+1010   	; 0x6998 <handleMotorsWithSpeedController+0x590>
			OCR4A = (unsigned int)pwm_left;
    65a6:	90 93 a9 00 	sts	0x00A9, r25
    65aa:	80 93 a8 00 	sts	0x00A8, r24
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    65ae:	80 91 a3 04 	lds	r24, 0x04A3
    65b2:	8f 5f       	subi	r24, 0xFF	; 255
    65b4:	80 93 a3 04 	sts	0x04A3, r24

	}

	if(compute_right_vel) {
    65b8:	80 91 08 02 	lds	r24, 0x0208
    65bc:	88 23       	and	r24, r24
    65be:	09 f0       	breq	.+2      	; 0x65c2 <handleMotorsWithSpeedController+0x1ba>
    65c0:	c1 c0       	rjmp	.+386    	; 0x6744 <handleMotorsWithSpeedController+0x33c>
    65c2:	80 91 a3 04 	lds	r24, 0x04A3

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    65c6:	82 30       	cpi	r24, 0x02	; 2
    65c8:	08 f4       	brcc	.+2      	; 0x65cc <handleMotorsWithSpeedController+0x1c4>
    65ca:	ab c0       	rjmp	.+342    	; 0x6722 <handleMotorsWithSpeedController+0x31a>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    65cc:	10 92 a3 04 	sts	0x04A3, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    65d0:	60 90 97 04 	lds	r6, 0x0497
    65d4:	70 90 98 04 	lds	r7, 0x0498
    65d8:	80 90 99 04 	lds	r8, 0x0499
    65dc:	90 90 9a 04 	lds	r9, 0x049A
    65e0:	20 90 93 04 	lds	r2, 0x0493
    65e4:	30 90 94 04 	lds	r3, 0x0494
    65e8:	40 90 95 04 	lds	r4, 0x0495
    65ec:	50 90 96 04 	lds	r5, 0x0496
    65f0:	c4 01       	movw	r24, r8
    65f2:	b3 01       	movw	r22, r6
    65f4:	20 91 9f 04 	lds	r18, 0x049F
    65f8:	30 91 a0 04 	lds	r19, 0x04A0
    65fc:	40 91 a1 04 	lds	r20, 0x04A1
    6600:	50 91 a2 04 	lds	r21, 0x04A2
    6604:	0e 94 96 4e 	call	0x9d2c	; 0x9d2c <__subsf3>
    6608:	7b 01       	movw	r14, r22
    660a:	8c 01       	movw	r16, r24
    660c:	c2 01       	movw	r24, r4
    660e:	b1 01       	movw	r22, r2
    6610:	20 91 9b 04 	lds	r18, 0x049B
    6614:	30 91 9c 04 	lds	r19, 0x049C
    6618:	40 91 9d 04 	lds	r20, 0x049D
    661c:	50 91 9e 04 	lds	r21, 0x049E
    6620:	0e 94 96 4e 	call	0x9d2c	; 0x9d2c <__subsf3>
    6624:	9b 01       	movw	r18, r22
    6626:	ac 01       	movw	r20, r24
    6628:	c8 01       	movw	r24, r16
    662a:	b7 01       	movw	r22, r14
    662c:	0e 94 97 4e 	call	0x9d2e	; 0x9d2e <__addsf3>
    6630:	20 e0       	ldi	r18, 0x00	; 0
    6632:	30 e0       	ldi	r19, 0x00	; 0
    6634:	40 e0       	ldi	r20, 0x00	; 0
    6636:	5f e3       	ldi	r21, 0x3F	; 63
    6638:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    663c:	d6 2e       	mov	r13, r22
    663e:	c7 2e       	mov	r12, r23
    6640:	b8 2e       	mov	r11, r24
    6642:	a9 2e       	mov	r10, r25
    6644:	a6 01       	movw	r20, r12
    6646:	95 01       	movw	r18, r10
    6648:	85 2f       	mov	r24, r21
    664a:	94 2f       	mov	r25, r20
    664c:	a3 2f       	mov	r26, r19
    664e:	b2 2f       	mov	r27, r18
    6650:	80 93 7f 04 	sts	0x047F, r24
    6654:	90 93 80 04 	sts	0x0480, r25
    6658:	a0 93 81 04 	sts	0x0481, r26
    665c:	b0 93 82 04 	sts	0x0482, r27

		if(robotPosition == HORIZONTAL_POS) {
    6660:	80 91 16 02 	lds	r24, 0x0216
    6664:	81 30       	cpi	r24, 0x01	; 1
    6666:	09 f4       	brne	.+2      	; 0x666a <handleMotorsWithSpeedController+0x262>
    6668:	1d c1       	rjmp	.+570    	; 0x68a4 <handleMotorsWithSpeedController+0x49c>
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			//thetaOld = thetaAcc;
			theta = thetaAcc;
    666a:	f0 90 a4 04 	lds	r15, 0x04A4
    666e:	00 91 a5 04 	lds	r16, 0x04A5
    6672:	10 91 a6 04 	lds	r17, 0x04A6
    6676:	e0 90 a7 04 	lds	r14, 0x04A7
    667a:	8f 2d       	mov	r24, r15
    667c:	90 2f       	mov	r25, r16
    667e:	a1 2f       	mov	r26, r17
    6680:	be 2d       	mov	r27, r14
    6682:	80 93 6f 04 	sts	0x046F, r24
    6686:	90 93 70 04 	sts	0x0470, r25
    668a:	a0 93 71 04 	sts	0x0471, r26
    668e:	b0 93 72 04 	sts	0x0472, r27
		}

		//deltaDistOld = ((rightMotSteps-rightMotStepsOld)+(leftMotSteps-leftMotStepsOld))/2.0;

		xPos = xPos + cos(theta)*deltaDist;				
    6692:	6f 2d       	mov	r22, r15
    6694:	70 2f       	mov	r23, r16
    6696:	81 2f       	mov	r24, r17
    6698:	9e 2d       	mov	r25, r14
    669a:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <cos>
    669e:	9b 01       	movw	r18, r22
    66a0:	ac 01       	movw	r20, r24
    66a2:	d6 01       	movw	r26, r12
    66a4:	f5 01       	movw	r30, r10
    66a6:	6b 2f       	mov	r22, r27
    66a8:	7c 2d       	mov	r23, r12
    66aa:	8f 2f       	mov	r24, r31
    66ac:	9a 2d       	mov	r25, r10
    66ae:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    66b2:	9b 01       	movw	r18, r22
    66b4:	ac 01       	movw	r20, r24
    66b6:	60 91 77 04 	lds	r22, 0x0477
    66ba:	70 91 78 04 	lds	r23, 0x0478
    66be:	80 91 79 04 	lds	r24, 0x0479
    66c2:	90 91 7a 04 	lds	r25, 0x047A
    66c6:	0e 94 97 4e 	call	0x9d2e	; 0x9d2e <__addsf3>
    66ca:	60 93 77 04 	sts	0x0477, r22
    66ce:	70 93 78 04 	sts	0x0478, r23
    66d2:	80 93 79 04 	sts	0x0479, r24
    66d6:	90 93 7a 04 	sts	0x047A, r25
		yPos = yPos + sin(theta)*deltaDist;
    66da:	6f 2d       	mov	r22, r15
    66dc:	70 2f       	mov	r23, r16
    66de:	81 2f       	mov	r24, r17
    66e0:	9e 2d       	mov	r25, r14
    66e2:	0e 94 77 51 	call	0xa2ee	; 0xa2ee <sin>
    66e6:	9b 01       	movw	r18, r22
    66e8:	ac 01       	movw	r20, r24
    66ea:	d6 01       	movw	r26, r12
    66ec:	f5 01       	movw	r30, r10
    66ee:	6b 2f       	mov	r22, r27
    66f0:	7c 2d       	mov	r23, r12
    66f2:	8f 2f       	mov	r24, r31
    66f4:	9a 2d       	mov	r25, r10
    66f6:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    66fa:	9b 01       	movw	r18, r22
    66fc:	ac 01       	movw	r20, r24
    66fe:	60 91 7b 04 	lds	r22, 0x047B
    6702:	70 91 7c 04 	lds	r23, 0x047C
    6706:	80 91 7d 04 	lds	r24, 0x047D
    670a:	90 91 7e 04 	lds	r25, 0x047E
    670e:	0e 94 97 4e 	call	0x9d2e	; 0x9d2e <__addsf3>
    6712:	60 93 7b 04 	sts	0x047B, r22
    6716:	70 93 7c 04 	sts	0x047C, r23
    671a:	80 93 7d 04 	sts	0x047D, r24
    671e:	90 93 7e 04 	sts	0x047E, r25
		//xPosOld = xPosOld + cos(thetaOld)*deltaDistOld;				
		//yPosOld = yPosOld + sin(thetaOld)*deltaDistOld;

	}

}
    6722:	1f 91       	pop	r17
    6724:	0f 91       	pop	r16
    6726:	ff 90       	pop	r15
    6728:	ef 90       	pop	r14
    672a:	df 90       	pop	r13
    672c:	cf 90       	pop	r12
    672e:	bf 90       	pop	r11
    6730:	af 90       	pop	r10
    6732:	9f 90       	pop	r9
    6734:	8f 90       	pop	r8
    6736:	7f 90       	pop	r7
    6738:	6f 90       	pop	r6
    673a:	5f 90       	pop	r5
    673c:	4f 90       	pop	r4
    673e:	3f 90       	pop	r3
    6740:	2f 90       	pop	r2
    6742:	08 95       	ret

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    6744:	20 91 ef 02 	lds	r18, 0x02EF
    6748:	30 91 f0 02 	lds	r19, 0x02F0
    674c:	36 95       	lsr	r19
    674e:	27 95       	ror	r18
    6750:	36 95       	lsr	r19
    6752:	27 95       	ror	r18
    6754:	30 93 f4 02 	sts	0x02F4, r19
    6758:	20 93 f3 02 	sts	0x02F3, r18
		compute_right_vel = 0;
    675c:	10 92 08 02 	sts	0x0208, r1
		right_vel_sum = 0;
    6760:	10 92 f0 02 	sts	0x02F0, r1
    6764:	10 92 ef 02 	sts	0x02EF, r1

		if(calibrateOdomFlag==1) {
    6768:	80 91 4d 05 	lds	r24, 0x054D
    676c:	81 30       	cpi	r24, 0x01	; 1
    676e:	09 f4       	brne	.+2      	; 0x6772 <handleMotorsWithSpeedController+0x36a>
    6770:	d6 c0       	rjmp	.+428    	; 0x691e <handleMotorsWithSpeedController+0x516>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    6772:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    6776:	80 91 97 04 	lds	r24, 0x0497
    677a:	90 91 98 04 	lds	r25, 0x0498
    677e:	a0 91 99 04 	lds	r26, 0x0499
    6782:	b0 91 9a 04 	lds	r27, 0x049A
    6786:	80 93 9f 04 	sts	0x049F, r24
    678a:	90 93 a0 04 	sts	0x04A0, r25
    678e:	a0 93 a1 04 	sts	0x04A1, r26
    6792:	b0 93 a2 04 	sts	0x04A2, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    6796:	60 91 ba 04 	lds	r22, 0x04BA
    679a:	70 91 bb 04 	lds	r23, 0x04BB
    679e:	88 27       	eor	r24, r24
    67a0:	77 fd       	sbrc	r23, 7
    67a2:	80 95       	com	r24
    67a4:	98 2f       	mov	r25, r24
    67a6:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    67aa:	7b 01       	movw	r14, r22
    67ac:	8c 01       	movw	r16, r24
    67ae:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    67b2:	20 91 c0 04 	lds	r18, 0x04C0
    67b6:	30 91 c1 04 	lds	r19, 0x04C1
    67ba:	40 91 c2 04 	lds	r20, 0x04C2
    67be:	50 91 c3 04 	lds	r21, 0x04C3
    67c2:	62 1b       	sub	r22, r18
    67c4:	73 0b       	sbc	r23, r19
    67c6:	84 0b       	sbc	r24, r20
    67c8:	95 0b       	sbc	r25, r21
    67ca:	0e 94 fd 4f 	call	0x9ffa	; 0x9ffa <__floatunsisf>
    67ce:	20 e0       	ldi	r18, 0x00	; 0
    67d0:	30 e0       	ldi	r19, 0x00	; 0
    67d2:	40 ed       	ldi	r20, 0xD0	; 208
    67d4:	52 e4       	ldi	r21, 0x42	; 66
    67d6:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    67da:	9b 01       	movw	r18, r22
    67dc:	ac 01       	movw	r20, r24
    67de:	c8 01       	movw	r24, r16
    67e0:	b7 01       	movw	r22, r14
    67e2:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    67e6:	20 e0       	ldi	r18, 0x00	; 0
    67e8:	34 e2       	ldi	r19, 0x24	; 36
    67ea:	44 e7       	ldi	r20, 0x74	; 116
    67ec:	59 e4       	ldi	r21, 0x49	; 73
    67ee:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    67f2:	9b 01       	movw	r18, r22
    67f4:	ac 01       	movw	r20, r24
    67f6:	60 91 97 04 	lds	r22, 0x0497
    67fa:	70 91 98 04 	lds	r23, 0x0498
    67fe:	80 91 99 04 	lds	r24, 0x0499
    6802:	90 91 9a 04 	lds	r25, 0x049A
    6806:	0e 94 97 4e 	call	0x9d2e	; 0x9d2e <__addsf3>
    680a:	60 93 97 04 	sts	0x0497, r22
    680e:	70 93 98 04 	sts	0x0498, r23
    6812:	80 93 99 04 	sts	0x0499, r24
    6816:	90 93 9a 04 	sts	0x049A, r25
		timeRightOdom = getTime100MicroSec();
    681a:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    681e:	60 93 c0 04 	sts	0x04C0, r22
    6822:	70 93 c1 04 	sts	0x04C1, r23
    6826:	80 93 c2 04 	sts	0x04C2, r24
    682a:	90 93 c3 04 	sts	0x04C3, r25
		} else {
			rightMotSteps -= ((float)(last_right_vel>>3))*(RIGHT_ENC_OFFSET-ENC_SLOPE*((float)(last_right_vel>>2)))/1000.0;
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
    682e:	80 91 16 02 	lds	r24, 0x0216
    6832:	81 30       	cpi	r24, 0x01	; 1
    6834:	09 f4       	brne	.+2      	; 0x6838 <handleMotorsWithSpeedController+0x430>
    6836:	47 c0       	rjmp	.+142    	; 0x68c6 <handleMotorsWithSpeedController+0x4be>
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
			//PORTB |= (1 << 5);
		} else {
			//PORTB &= ~(1 << 6);
			start_vertical_speed_control_right(&pwm_right_working);
    6838:	8d e0       	ldi	r24, 0x0D	; 13
    683a:	93 e0       	ldi	r25, 0x03	; 3
    683c:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <start_vertical_speed_control_right>
			//PORTB |= (1 << 6);
		}

		pwm_right = pwm_right_working;
    6840:	80 91 0d 03 	lds	r24, 0x030D
    6844:	90 91 0e 03 	lds	r25, 0x030E
    6848:	90 93 f6 02 	sts	0x02F6, r25
    684c:	80 93 f5 02 	sts	0x02F5, r24

		if(pwm_right > 0) {
    6850:	18 16       	cp	r1, r24
    6852:	19 06       	cpc	r1, r25
    6854:	0c f0       	brlt	.+2      	; 0x6858 <handleMotorsWithSpeedController+0x450>
    6856:	95 c0       	rjmp	.+298    	; 0x6982 <handleMotorsWithSpeedController+0x57a>
			OCR3A = (unsigned int)pwm_right;
    6858:	90 93 99 00 	sts	0x0099, r25
    685c:	80 93 98 00 	sts	0x0098, r24
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    6860:	80 91 a3 04 	lds	r24, 0x04A3
    6864:	8f 5f       	subi	r24, 0xFF	; 255
    6866:	80 93 a3 04 	sts	0x04A3, r24
    686a:	ad ce       	rjmp	.-678    	; 0x65c6 <handleMotorsWithSpeedController+0x1be>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    686c:	8f e0       	ldi	r24, 0x0F	; 15
    686e:	93 e0       	ldi	r25, 0x03	; 3
    6870:	6d e0       	ldi	r22, 0x0D	; 13
    6872:	73 e0       	ldi	r23, 0x03	; 3
    6874:	0e 94 39 38 	call	0x7072	; 0x7072 <obstacleAvoidance>
    6878:	80 91 0f 03 	lds	r24, 0x030F
    687c:	90 91 10 03 	lds	r25, 0x0310
    6880:	f7 cd       	rjmp	.-1042   	; 0x6470 <handleMotorsWithSpeedController+0x68>
}

void handleMotorsWithSpeedController() {

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    6882:	80 91 fd 02 	lds	r24, 0x02FD
    6886:	90 91 fe 02 	lds	r25, 0x02FE
    688a:	90 93 0e 03 	sts	0x030E, r25
    688e:	80 93 0d 03 	sts	0x030D, r24
		pwm_left_working = pwm_intermediate_left_desired;
    6892:	80 91 ff 02 	lds	r24, 0x02FF
    6896:	90 91 00 03 	lds	r25, 0x0300
    689a:	90 93 10 03 	sts	0x0310, r25
    689e:	80 93 0f 03 	sts	0x030F, r24
    68a2:	e1 cd       	rjmp	.-1086   	; 0x6466 <handleMotorsWithSpeedController+0x5e>

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			//thetaOld = (rightMotSteps - leftMotSteps)/WHEEL_DIST;	// radians
			theta = (rightDist-leftDist)/WHEEL_DIST;
    68a4:	c4 01       	movw	r24, r8
    68a6:	b3 01       	movw	r22, r6
    68a8:	a2 01       	movw	r20, r4
    68aa:	91 01       	movw	r18, r2
    68ac:	0e 94 96 4e 	call	0x9d2c	; 0x9d2c <__subsf3>
    68b0:	20 e0       	ldi	r18, 0x00	; 0
    68b2:	30 e0       	ldi	r19, 0x00	; 0
    68b4:	4e e1       	ldi	r20, 0x1E	; 30
    68b6:	52 e4       	ldi	r21, 0x42	; 66
    68b8:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <__divsf3>
    68bc:	f6 2e       	mov	r15, r22
    68be:	07 2f       	mov	r16, r23
    68c0:	18 2f       	mov	r17, r24
    68c2:	e9 2e       	mov	r14, r25
    68c4:	da ce       	rjmp	.-588    	; 0x667a <handleMotorsWithSpeedController+0x272>
		}
*/

		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_right(&pwm_right_working);
    68c6:	8d e0       	ldi	r24, 0x0D	; 13
    68c8:	93 e0       	ldi	r25, 0x03	; 3
    68ca:	0e 94 c8 18 	call	0x3190	; 0x3190 <start_horizontal_speed_control_right>
    68ce:	b8 cf       	rjmp	.-144    	; 0x6840 <handleMotorsWithSpeedController+0x438>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    68d0:	44 27       	eor	r20, r20
    68d2:	37 fd       	sbrc	r19, 7
    68d4:	40 95       	com	r20
    68d6:	54 2f       	mov	r21, r20
    68d8:	80 91 a8 04 	lds	r24, 0x04A8
    68dc:	90 91 a9 04 	lds	r25, 0x04A9
    68e0:	a0 91 aa 04 	lds	r26, 0x04AA
    68e4:	b0 91 ab 04 	lds	r27, 0x04AB
    68e8:	82 0f       	add	r24, r18
    68ea:	93 1f       	adc	r25, r19
    68ec:	a4 1f       	adc	r26, r20
    68ee:	b5 1f       	adc	r27, r21
    68f0:	80 93 a8 04 	sts	0x04A8, r24
    68f4:	90 93 a9 04 	sts	0x04A9, r25
    68f8:	a0 93 aa 04 	sts	0x04AA, r26
    68fc:	b0 93 ab 04 	sts	0x04AB, r27
			leftSumCount++;
    6900:	80 91 b0 04 	lds	r24, 0x04B0
    6904:	90 91 b1 04 	lds	r25, 0x04B1
    6908:	01 96       	adiw	r24, 0x01	; 1
    690a:	90 93 b1 04 	sts	0x04B1, r25
    690e:	80 93 b0 04 	sts	0x04B0, r24
    6912:	d6 cd       	rjmp	.-1108   	; 0x64c0 <handleMotorsWithSpeedController+0xb8>
		}

*/
		if(robotPosition == HORIZONTAL_POS) {
			//PORTB &= ~(1 << 5);
			start_horizontal_speed_control_left(&pwm_left_working);
    6914:	8f e0       	ldi	r24, 0x0F	; 15
    6916:	93 e0       	ldi	r25, 0x03	; 3
    6918:	0e 94 0f 1a 	call	0x341e	; 0x341e <start_horizontal_speed_control_left>
    691c:	38 ce       	rjmp	.-912    	; 0x658e <handleMotorsWithSpeedController+0x186>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    691e:	44 27       	eor	r20, r20
    6920:	37 fd       	sbrc	r19, 7
    6922:	40 95       	com	r20
    6924:	54 2f       	mov	r21, r20
    6926:	80 91 ac 04 	lds	r24, 0x04AC
    692a:	90 91 ad 04 	lds	r25, 0x04AD
    692e:	a0 91 ae 04 	lds	r26, 0x04AE
    6932:	b0 91 af 04 	lds	r27, 0x04AF
    6936:	82 0f       	add	r24, r18
    6938:	93 1f       	adc	r25, r19
    693a:	a4 1f       	adc	r26, r20
    693c:	b5 1f       	adc	r27, r21
    693e:	80 93 ac 04 	sts	0x04AC, r24
    6942:	90 93 ad 04 	sts	0x04AD, r25
    6946:	a0 93 ae 04 	sts	0x04AE, r26
    694a:	b0 93 af 04 	sts	0x04AF, r27
			rightSumCount++;
    694e:	80 91 b2 04 	lds	r24, 0x04B2
    6952:	90 91 b3 04 	lds	r25, 0x04B3
    6956:	01 96       	adiw	r24, 0x01	; 1
    6958:	90 93 b3 04 	sts	0x04B3, r25
    695c:	80 93 b2 04 	sts	0x04B2, r24
    6960:	08 cf       	rjmp	.-496    	; 0x6772 <handleMotorsWithSpeedController+0x36a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    6962:	62 e0       	ldi	r22, 0x02	; 2
    6964:	0e 94 e6 29 	call	0x53cc	; 0x53cc <getInputFromSpeed>
    6968:	90 93 10 03 	sts	0x0310, r25
    696c:	80 93 0f 03 	sts	0x030F, r24
    6970:	7a cd       	rjmp	.-1292   	; 0x6466 <handleMotorsWithSpeedController+0x5e>
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    6972:	63 e0       	ldi	r22, 0x03	; 3
    6974:	0e 94 e6 29 	call	0x53cc	; 0x53cc <getInputFromSpeed>
    6978:	90 93 0e 03 	sts	0x030E, r25
    697c:	80 93 0d 03 	sts	0x030D, r24
    6980:	65 cd       	rjmp	.-1334   	; 0x644c <handleMotorsWithSpeedController+0x44>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    6982:	00 97       	sbiw	r24, 0x00	; 0
    6984:	a1 f4       	brne	.+40     	; 0x69ae <handleMotorsWithSpeedController+0x5a6>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    6986:	10 92 99 00 	sts	0x0099, r1
    698a:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    698e:	10 92 9b 00 	sts	0x009B, r1
    6992:	10 92 9a 00 	sts	0x009A, r1
    6996:	64 cf       	rjmp	.-312    	; 0x6860 <handleMotorsWithSpeedController+0x458>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    6998:	00 97       	sbiw	r24, 0x00	; 0
    699a:	89 f4       	brne	.+34     	; 0x69be <handleMotorsWithSpeedController+0x5b6>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    699c:	10 92 a9 00 	sts	0x00A9, r1
    69a0:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    69a4:	10 92 ab 00 	sts	0x00AB, r1
    69a8:	10 92 aa 00 	sts	0x00AA, r1
    69ac:	00 ce       	rjmp	.-1024   	; 0x65ae <handleMotorsWithSpeedController+0x1a6>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    69ae:	90 95       	com	r25
    69b0:	81 95       	neg	r24
    69b2:	9f 4f       	sbci	r25, 0xFF	; 255
    69b4:	90 93 9b 00 	sts	0x009B, r25
    69b8:	80 93 9a 00 	sts	0x009A, r24
    69bc:	51 cf       	rjmp	.-350    	; 0x6860 <handleMotorsWithSpeedController+0x458>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    69be:	90 95       	com	r25
    69c0:	81 95       	neg	r24
    69c2:	9f 4f       	sbci	r25, 0xFF	; 255
    69c4:	90 93 ab 00 	sts	0x00AB, r25
    69c8:	80 93 aa 00 	sts	0x00AA, r24
    69cc:	f0 cd       	rjmp	.-1056   	; 0x65ae <handleMotorsWithSpeedController+0x1a6>

000069ce <writeDefaultCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void writeDefaultCalibration() {
    69ce:	2f 92       	push	r2
    69d0:	3f 92       	push	r3
    69d2:	4f 92       	push	r4
    69d4:	5f 92       	push	r5
    69d6:	6f 92       	push	r6
    69d8:	7f 92       	push	r7
    69da:	8f 92       	push	r8
    69dc:	9f 92       	push	r9
    69de:	af 92       	push	r10
    69e0:	bf 92       	push	r11
    69e2:	cf 92       	push	r12
    69e4:	df 92       	push	r13
    69e6:	ef 92       	push	r14
    69e8:	ff 92       	push	r15
    69ea:	0f 93       	push	r16
    69ec:	1f 93       	push	r17
    69ee:	cf 93       	push	r28
    69f0:	df 93       	push	r29
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    69f2:	a4 e1       	ldi	r26, 0x14	; 20
    69f4:	b0 e0       	ldi	r27, 0x00	; 0
    69f6:	b0 93 c4 08 	sts	0x08C4, r27
    69fa:	a0 93 c3 08 	sts	0x08C3, r26
    calibration[1][0] = 40;
    69fe:	88 e2       	ldi	r24, 0x28	; 40
    6a00:	90 e0       	ldi	r25, 0x00	; 0
    6a02:	90 93 d4 08 	sts	0x08D4, r25
    6a06:	80 93 d3 08 	sts	0x08D3, r24
    calibration[2][0] = 59;
    6a0a:	6b e3       	ldi	r22, 0x3B	; 59
    6a0c:	70 e0       	ldi	r23, 0x00	; 0
    6a0e:	70 93 e4 08 	sts	0x08E4, r23
    6a12:	60 93 e3 08 	sts	0x08E3, r22
    calibration[3][0] = 79;
    6a16:	0f e4       	ldi	r16, 0x4F	; 79
    6a18:	10 e0       	ldi	r17, 0x00	; 0
    6a1a:	10 93 f4 08 	sts	0x08F4, r17
    6a1e:	00 93 f3 08 	sts	0x08F3, r16
    calibration[4][0] = 100;
    6a22:	84 e6       	ldi	r24, 0x64	; 100
    6a24:	90 e0       	ldi	r25, 0x00	; 0
    6a26:	90 93 04 09 	sts	0x0904, r25
    6a2a:	80 93 03 09 	sts	0x0903, r24
    calibration[5][0] = 120;
    6a2e:	f8 e7       	ldi	r31, 0x78	; 120
    6a30:	af 2e       	mov	r10, r31
    6a32:	b1 2c       	mov	r11, r1
    6a34:	b0 92 14 09 	sts	0x0914, r11
    6a38:	a0 92 13 09 	sts	0x0913, r10
    calibration[6][0] = 139;
    6a3c:	8b e8       	ldi	r24, 0x8B	; 139
    6a3e:	90 e0       	ldi	r25, 0x00	; 0
    6a40:	90 93 24 09 	sts	0x0924, r25
    6a44:	80 93 23 09 	sts	0x0923, r24
    calibration[7][0] = 159;
    6a48:	2f e9       	ldi	r18, 0x9F	; 159
    6a4a:	30 e0       	ldi	r19, 0x00	; 0
    6a4c:	30 93 34 09 	sts	0x0934, r19
    6a50:	20 93 33 09 	sts	0x0933, r18
	calibration[8][0] = 180;
    6a54:	44 eb       	ldi	r20, 0xB4	; 180
    6a56:	50 e0       	ldi	r21, 0x00	; 0
    6a58:	50 93 44 09 	sts	0x0944, r21
    6a5c:	40 93 43 09 	sts	0x0943, r20
    calibration[0][1] = 19;    	// real speed measured in mm/s
    6a60:	63 e1       	ldi	r22, 0x13	; 19
    6a62:	70 e0       	ldi	r23, 0x00	; 0
    6a64:	70 93 c6 08 	sts	0x08C6, r23
    6a68:	60 93 c5 08 	sts	0x08C5, r22
    calibration[1][1] = 47;
    6a6c:	2f e2       	ldi	r18, 0x2F	; 47
    6a6e:	30 e0       	ldi	r19, 0x00	; 0
    6a70:	30 93 d6 08 	sts	0x08D6, r19
    6a74:	20 93 d5 08 	sts	0x08D5, r18
    calibration[2][1] = 72;
    6a78:	28 e4       	ldi	r18, 0x48	; 72
    6a7a:	30 e0       	ldi	r19, 0x00	; 0
    6a7c:	30 93 e6 08 	sts	0x08E6, r19
    6a80:	20 93 e5 08 	sts	0x08E5, r18
    calibration[3][1] = 91;
    6a84:	2b e5       	ldi	r18, 0x5B	; 91
    6a86:	30 e0       	ldi	r19, 0x00	; 0
    6a88:	30 93 f6 08 	sts	0x08F6, r19
    6a8c:	20 93 f5 08 	sts	0x08F5, r18
    calibration[4][1] = 109;
    6a90:	2d e6       	ldi	r18, 0x6D	; 109
    6a92:	30 e0       	ldi	r19, 0x00	; 0
    6a94:	30 93 06 09 	sts	0x0906, r19
    6a98:	20 93 05 09 	sts	0x0905, r18
    calibration[5][1] = 125;
    6a9c:	ed e7       	ldi	r30, 0x7D	; 125
    6a9e:	6e 2e       	mov	r6, r30
    6aa0:	71 2c       	mov	r7, r1
    6aa2:	70 92 16 09 	sts	0x0916, r7
    6aa6:	60 92 15 09 	sts	0x0915, r6
    calibration[6][1] = 143;
    6aaa:	2f e8       	ldi	r18, 0x8F	; 143
    6aac:	30 e0       	ldi	r19, 0x00	; 0
    6aae:	30 93 26 09 	sts	0x0926, r19
    6ab2:	20 93 25 09 	sts	0x0925, r18
    calibration[7][1] = 160;
    6ab6:	20 ea       	ldi	r18, 0xA0	; 160
    6ab8:	30 e0       	ldi	r19, 0x00	; 0
    6aba:	30 93 36 09 	sts	0x0936, r19
    6abe:	20 93 35 09 	sts	0x0935, r18
	calibration[8][1] = 174;
    6ac2:	ee ea       	ldi	r30, 0xAE	; 174
    6ac4:	f0 e0       	ldi	r31, 0x00	; 0
    6ac6:	f0 93 46 09 	sts	0x0946, r31
    6aca:	e0 93 45 09 	sts	0x0945, r30
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    6ace:	70 93 c8 08 	sts	0x08C8, r23
    6ad2:	60 93 c7 08 	sts	0x08C7, r22
    calibration[1][2] = 39;
    6ad6:	e7 e2       	ldi	r30, 0x27	; 39
    6ad8:	f0 e0       	ldi	r31, 0x00	; 0
    6ada:	f0 93 d8 08 	sts	0x08D8, r31
    6ade:	e0 93 d7 08 	sts	0x08D7, r30
    calibration[2][2] = 60;
    6ae2:	cc e3       	ldi	r28, 0x3C	; 60
    6ae4:	d0 e0       	ldi	r29, 0x00	; 0
    6ae6:	d0 93 e8 08 	sts	0x08E8, r29
    6aea:	c0 93 e7 08 	sts	0x08E7, r28
    calibration[3][2] = 80;
    6aee:	60 e5       	ldi	r22, 0x50	; 80
    6af0:	70 e0       	ldi	r23, 0x00	; 0
    6af2:	70 93 f8 08 	sts	0x08F8, r23
    6af6:	60 93 f7 08 	sts	0x08F7, r22
    calibration[4][2] = 99;
    6afa:	63 e6       	ldi	r22, 0x63	; 99
    6afc:	e6 2e       	mov	r14, r22
    6afe:	f1 2c       	mov	r15, r1
    6b00:	f0 92 08 09 	sts	0x0908, r15
    6b04:	e0 92 07 09 	sts	0x0907, r14
    calibration[5][2] = 119;
    6b08:	67 e7       	ldi	r22, 0x77	; 119
    6b0a:	70 e0       	ldi	r23, 0x00	; 0
    6b0c:	70 93 18 09 	sts	0x0918, r23
    6b10:	60 93 17 09 	sts	0x0917, r22
    calibration[6][2] = 140;
    6b14:	0f 2e       	mov	r0, r31
    6b16:	fc e8       	ldi	r31, 0x8C	; 140
    6b18:	cf 2e       	mov	r12, r31
    6b1a:	dd 24       	eor	r13, r13
    6b1c:	f0 2d       	mov	r31, r0
    6b1e:	d0 92 28 09 	sts	0x0928, r13
    6b22:	c0 92 27 09 	sts	0x0927, r12
    calibration[7][2] = 160;
    6b26:	30 93 38 09 	sts	0x0938, r19
    6b2a:	20 93 37 09 	sts	0x0937, r18
	calibration[8][2] = 180;
    6b2e:	50 93 48 09 	sts	0x0948, r21
    6b32:	40 93 47 09 	sts	0x0947, r20
    calibration[0][3] = 23;    	// real speed measured in mm/s
    6b36:	0f 2e       	mov	r0, r31
    6b38:	f7 e1       	ldi	r31, 0x17	; 23
    6b3a:	8f 2e       	mov	r8, r31
    6b3c:	99 24       	eor	r9, r9
    6b3e:	f0 2d       	mov	r31, r0
    6b40:	90 92 ca 08 	sts	0x08CA, r9
    6b44:	80 92 c9 08 	sts	0x08C9, r8
    calibration[1][3] = 46;
    6b48:	0f 2e       	mov	r0, r31
    6b4a:	fe e2       	ldi	r31, 0x2E	; 46
    6b4c:	4f 2e       	mov	r4, r31
    6b4e:	55 24       	eor	r5, r5
    6b50:	f0 2d       	mov	r31, r0
    6b52:	50 92 da 08 	sts	0x08DA, r5
    6b56:	40 92 d9 08 	sts	0x08D9, r4
    calibration[2][3] = 64;
    6b5a:	88 24       	eor	r8, r8
    6b5c:	99 24       	eor	r9, r9
    6b5e:	68 94       	set
    6b60:	86 f8       	bld	r8, 6
    6b62:	90 92 ea 08 	sts	0x08EA, r9
    6b66:	80 92 e9 08 	sts	0x08E9, r8
    calibration[3][3] = 81;
    6b6a:	0f 2e       	mov	r0, r31
    6b6c:	f1 e5       	ldi	r31, 0x51	; 81
    6b6e:	2f 2e       	mov	r2, r31
    6b70:	33 24       	eor	r3, r3
    6b72:	f0 2d       	mov	r31, r0
    6b74:	30 92 fa 08 	sts	0x08FA, r3
    6b78:	20 92 f9 08 	sts	0x08F9, r2
    calibration[4][3] = 97;
    6b7c:	0f 2e       	mov	r0, r31
    6b7e:	f1 e6       	ldi	r31, 0x61	; 97
    6b80:	8f 2e       	mov	r8, r31
    6b82:	99 24       	eor	r9, r9
    6b84:	f0 2d       	mov	r31, r0
    6b86:	90 92 0a 09 	sts	0x090A, r9
    6b8a:	80 92 09 09 	sts	0x0909, r8
    calibration[5][3] = 112;
    6b8e:	0f 2e       	mov	r0, r31
    6b90:	f0 e7       	ldi	r31, 0x70	; 112
    6b92:	8f 2e       	mov	r8, r31
    6b94:	99 24       	eor	r9, r9
    6b96:	f0 2d       	mov	r31, r0
    6b98:	90 92 1a 09 	sts	0x091A, r9
    6b9c:	80 92 19 09 	sts	0x0919, r8
    calibration[6][3] = 125;
    6ba0:	70 92 2a 09 	sts	0x092A, r7
    6ba4:	60 92 29 09 	sts	0x0929, r6
    calibration[7][3] = 139;
    6ba8:	90 93 3a 09 	sts	0x093A, r25
    6bac:	80 93 39 09 	sts	0x0939, r24
	calibration[8][3] = 152;
    6bb0:	0f 2e       	mov	r0, r31
    6bb2:	f8 e9       	ldi	r31, 0x98	; 152
    6bb4:	8f 2e       	mov	r8, r31
    6bb6:	99 24       	eor	r9, r9
    6bb8:	f0 2d       	mov	r31, r0
    6bba:	90 92 4a 09 	sts	0x094A, r9
    6bbe:	80 92 49 09 	sts	0x0949, r8
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    6bc2:	b0 93 cc 08 	sts	0x08CC, r27
    6bc6:	a0 93 cb 08 	sts	0x08CB, r26
    calibration[1][4] = 39;
    6bca:	f0 93 dc 08 	sts	0x08DC, r31
    6bce:	e0 93 db 08 	sts	0x08DB, r30
    calibration[2][4] = 60;
    6bd2:	d0 93 ec 08 	sts	0x08EC, r29
    6bd6:	c0 93 eb 08 	sts	0x08EB, r28
    calibration[3][4] = 79;
    6bda:	10 93 fc 08 	sts	0x08FC, r17
    6bde:	00 93 fb 08 	sts	0x08FB, r16
    calibration[4][4] = 99;
    6be2:	f0 92 0c 09 	sts	0x090C, r15
    6be6:	e0 92 0b 09 	sts	0x090B, r14
    calibration[5][4] = 120;
    6bea:	b0 92 1c 09 	sts	0x091C, r11
    6bee:	a0 92 1b 09 	sts	0x091B, r10
    calibration[6][4] = 140;
    6bf2:	d0 92 2c 09 	sts	0x092C, r13
    6bf6:	c0 92 2b 09 	sts	0x092B, r12
    calibration[7][4] = 160;
    6bfa:	30 93 3c 09 	sts	0x093C, r19
    6bfe:	20 93 3b 09 	sts	0x093B, r18
	calibration[8][4] = 179;
    6c02:	c3 eb       	ldi	r28, 0xB3	; 179
    6c04:	d0 e0       	ldi	r29, 0x00	; 0
    6c06:	d0 93 4c 09 	sts	0x094C, r29
    6c0a:	c0 93 4b 09 	sts	0x094B, r28
    calibration[0][5] = 18;    	// real speed measured in mm/s
    6c0e:	c2 e1       	ldi	r28, 0x12	; 18
    6c10:	d0 e0       	ldi	r29, 0x00	; 0
    6c12:	d0 93 ce 08 	sts	0x08CE, r29
    6c16:	c0 93 cd 08 	sts	0x08CD, r28
    calibration[1][5] = 45;
    6c1a:	cd e2       	ldi	r28, 0x2D	; 45
    6c1c:	d0 e0       	ldi	r29, 0x00	; 0
    6c1e:	d0 93 de 08 	sts	0x08DE, r29
    6c22:	c0 93 dd 08 	sts	0x08DD, r28
    calibration[2][5] = 68;
    6c26:	c4 e4       	ldi	r28, 0x44	; 68
    6c28:	d0 e0       	ldi	r29, 0x00	; 0
    6c2a:	d0 93 ee 08 	sts	0x08EE, r29
    6c2e:	c0 93 ed 08 	sts	0x08ED, r28
    calibration[3][5] = 87;
    6c32:	c7 e5       	ldi	r28, 0x57	; 87
    6c34:	d0 e0       	ldi	r29, 0x00	; 0
    6c36:	d0 93 fe 08 	sts	0x08FE, r29
    6c3a:	c0 93 fd 08 	sts	0x08FD, r28
    calibration[4][5] = 105;
    6c3e:	c9 e6       	ldi	r28, 0x69	; 105
    6c40:	d0 e0       	ldi	r29, 0x00	; 0
    6c42:	d0 93 0e 09 	sts	0x090E, r29
    6c46:	c0 93 0d 09 	sts	0x090D, r28
    calibration[5][5] = 119;
    6c4a:	70 93 1e 09 	sts	0x091E, r23
    6c4e:	60 93 1d 09 	sts	0x091D, r22
    calibration[6][5] = 137;
    6c52:	c9 e8       	ldi	r28, 0x89	; 137
    6c54:	d0 e0       	ldi	r29, 0x00	; 0
    6c56:	d0 93 2e 09 	sts	0x092E, r29
    6c5a:	c0 93 2d 09 	sts	0x092D, r28
    calibration[7][5] = 151;
    6c5e:	c7 e9       	ldi	r28, 0x97	; 151
    6c60:	d0 e0       	ldi	r29, 0x00	; 0
    6c62:	d0 93 3e 09 	sts	0x093E, r29
    6c66:	c0 93 3d 09 	sts	0x093D, r28
	calibration[8][5] = 168;
    6c6a:	c8 ea       	ldi	r28, 0xA8	; 168
    6c6c:	d0 e0       	ldi	r29, 0x00	; 0
    6c6e:	d0 93 4e 09 	sts	0x094E, r29
    6c72:	c0 93 4d 09 	sts	0x094D, r28
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    6c76:	b0 93 d0 08 	sts	0x08D0, r27
    6c7a:	a0 93 cf 08 	sts	0x08CF, r26
    calibration[1][6] = 39;
    6c7e:	f0 93 e0 08 	sts	0x08E0, r31
    6c82:	e0 93 df 08 	sts	0x08DF, r30
    calibration[2][6] = 59;
    6c86:	eb e3       	ldi	r30, 0x3B	; 59
    6c88:	f0 e0       	ldi	r31, 0x00	; 0
    6c8a:	f0 93 f0 08 	sts	0x08F0, r31
    6c8e:	e0 93 ef 08 	sts	0x08EF, r30
    calibration[3][6] = 80;
    6c92:	e0 e5       	ldi	r30, 0x50	; 80
    6c94:	f0 e0       	ldi	r31, 0x00	; 0
    6c96:	f0 93 00 09 	sts	0x0900, r31
    6c9a:	e0 93 ff 08 	sts	0x08FF, r30
    calibration[4][6] = 100;
    6c9e:	e4 e6       	ldi	r30, 0x64	; 100
    6ca0:	f0 e0       	ldi	r31, 0x00	; 0
    6ca2:	f0 93 10 09 	sts	0x0910, r31
    6ca6:	e0 93 0f 09 	sts	0x090F, r30
    calibration[5][6] = 119;
    6caa:	70 93 20 09 	sts	0x0920, r23
    6cae:	60 93 1f 09 	sts	0x091F, r22
    calibration[6][6] = 139;
    6cb2:	90 93 30 09 	sts	0x0930, r25
    6cb6:	80 93 2f 09 	sts	0x092F, r24
    calibration[7][6] = 160;
    6cba:	30 93 40 09 	sts	0x0940, r19
    6cbe:	20 93 3f 09 	sts	0x093F, r18
	calibration[8][6] = 180;
    6cc2:	50 93 50 09 	sts	0x0950, r21
    6cc6:	40 93 4f 09 	sts	0x094F, r20
    calibration[0][7] = 22;    	// real speed measured in mm/s
    6cca:	26 e1       	ldi	r18, 0x16	; 22
    6ccc:	30 e0       	ldi	r19, 0x00	; 0
    6cce:	30 93 d2 08 	sts	0x08D2, r19
    6cd2:	20 93 d1 08 	sts	0x08D1, r18
    calibration[1][7] = 46;
    6cd6:	50 92 e2 08 	sts	0x08E2, r5
    6cda:	40 92 e1 08 	sts	0x08E1, r4
    calibration[2][7] = 65;
    6cde:	21 e4       	ldi	r18, 0x41	; 65
    6ce0:	30 e0       	ldi	r19, 0x00	; 0
    6ce2:	30 93 f2 08 	sts	0x08F2, r19
    6ce6:	20 93 f1 08 	sts	0x08F1, r18
    calibration[3][7] = 81;
    6cea:	30 92 02 09 	sts	0x0902, r3
    6cee:	20 92 01 09 	sts	0x0901, r2
    calibration[4][7] = 96;
    6cf2:	20 e6       	ldi	r18, 0x60	; 96
    6cf4:	30 e0       	ldi	r19, 0x00	; 0
    6cf6:	30 93 12 09 	sts	0x0912, r19
    6cfa:	20 93 11 09 	sts	0x0911, r18
    calibration[5][7] = 111;
    6cfe:	2f e6       	ldi	r18, 0x6F	; 111
    6d00:	30 e0       	ldi	r19, 0x00	; 0
    6d02:	30 93 22 09 	sts	0x0922, r19
    6d06:	20 93 21 09 	sts	0x0921, r18
    calibration[6][7] = 125;
    6d0a:	70 92 32 09 	sts	0x0932, r7
    6d0e:	60 92 31 09 	sts	0x0931, r6
    calibration[7][7] = 139;
    6d12:	90 93 42 09 	sts	0x0942, r25
    6d16:	80 93 41 09 	sts	0x0941, r24
	calibration[8][7] = 153;
    6d1a:	89 e9       	ldi	r24, 0x99	; 153
    6d1c:	90 e0       	ldi	r25, 0x00	; 0
    6d1e:	90 93 52 09 	sts	0x0952, r25
    6d22:	80 93 51 09 	sts	0x0951, r24

    writeCalibrationToFlash();
    6d26:	0e 94 ae 42 	call	0x855c	; 0x855c <writeCalibrationToFlash>
}
    6d2a:	df 91       	pop	r29
    6d2c:	cf 91       	pop	r28
    6d2e:	1f 91       	pop	r17
    6d30:	0f 91       	pop	r16
    6d32:	ff 90       	pop	r15
    6d34:	ef 90       	pop	r14
    6d36:	df 90       	pop	r13
    6d38:	cf 90       	pop	r12
    6d3a:	bf 90       	pop	r11
    6d3c:	af 90       	pop	r10
    6d3e:	9f 90       	pop	r9
    6d40:	8f 90       	pop	r8
    6d42:	7f 90       	pop	r7
    6d44:	6f 90       	pop	r6
    6d46:	5f 90       	pop	r5
    6d48:	4f 90       	pop	r4
    6d4a:	3f 90       	pop	r3
    6d4c:	2f 90       	pop	r2
    6d4e:	08 95       	ret

00006d50 <initCalibration>:

void initCalibration() {

    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    6d50:	8a e6       	ldi	r24, 0x6A	; 106
    6d52:	9f e0       	ldi	r25, 0x0F	; 15
    6d54:	0e 94 9f 52 	call	0xa53e	; 0xa53e <__eerd_word_m2560>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    6d58:	2a ea       	ldi	r18, 0xAA	; 170
    6d5a:	85 35       	cpi	r24, 0x55	; 85
    6d5c:	92 07       	cpc	r25, r18
    6d5e:	19 f0       	breq	.+6      	; 0x6d66 <initCalibration+0x16>
        readCalibrationFromFlash();
    } else {
		writeDefaultCalibration();		
    6d60:	0e 94 e7 34 	call	0x69ce	; 0x69ce <writeDefaultCalibration>
    6d64:	08 95       	ret
    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    6d66:	0e 94 bd 42 	call	0x857a	; 0x857a <readCalibrationFromFlash>
    6d6a:	08 95       	ret

00006d6c <__vector_45>:
    }

}

// Motor left
ISR(TIMER4_OVF_vect) {
    6d6c:	1f 92       	push	r1
    6d6e:	0f 92       	push	r0
    6d70:	0f b6       	in	r0, 0x3f	; 63
    6d72:	0f 92       	push	r0
    6d74:	11 24       	eor	r1, r1
    6d76:	8f 93       	push	r24
    6d78:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    6d7a:	80 91 6e 04 	lds	r24, 0x046E
    6d7e:	88 23       	and	r24, r24
    6d80:	61 f0       	breq	.+24     	; 0x6d9a <__vector_45+0x2e>
		pwm_left = 0;
    6d82:	10 92 f8 02 	sts	0x02F8, r1
    6d86:	10 92 f7 02 	sts	0x02F7, r1
		OCR4A = 0;
    6d8a:	10 92 a9 00 	sts	0x00A9, r1
    6d8e:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    6d92:	10 92 ab 00 	sts	0x00AB, r1
    6d96:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    6d9a:	10 92 e2 02 	sts	0x02E2, r1
    6d9e:	10 92 e1 02 	sts	0x02E1, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    6da2:	80 91 f7 02 	lds	r24, 0x02F7
    6da6:	90 91 f8 02 	lds	r25, 0x02F8
    6daa:	00 97       	sbiw	r24, 0x00	; 0
    6dac:	41 f5       	brne	.+80     	; 0x6dfe <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    6dae:	80 91 eb 02 	lds	r24, 0x02EB
    6db2:	90 91 ec 02 	lds	r25, 0x02EC
    6db6:	97 fd       	sbrc	r25, 7
    6db8:	69 c0       	rjmp	.+210    	; 0x6e8c <__vector_45+0x120>
			leftMotorPhase = PASSIVE_PHASE;
    6dba:	81 e0       	ldi	r24, 0x01	; 1
    6dbc:	80 93 28 02 	sts	0x0228, r24
			currentMotLeftChannel = 14;
    6dc0:	8e e0       	ldi	r24, 0x0E	; 14
    6dc2:	80 93 25 02 	sts	0x0225, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    6dc6:	81 e0       	ldi	r24, 0x01	; 1
    6dc8:	80 93 0a 02 	sts	0x020A, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    6dcc:	80 91 a0 00 	lds	r24, 0x00A0
    6dd0:	8f 75       	andi	r24, 0x5F	; 95
    6dd2:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    6dd6:	80 91 02 01 	lds	r24, 0x0102
    6dda:	87 7e       	andi	r24, 0xE7	; 231
    6ddc:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    6de0:	80 91 72 00 	lds	r24, 0x0072
    6de4:	89 7f       	andi	r24, 0xF9	; 249
    6de6:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    6dea:	89 b3       	in	r24, 0x19	; 25
    6dec:	86 60       	ori	r24, 0x06	; 6
    6dee:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    6df0:	9f 91       	pop	r25
    6df2:	8f 91       	pop	r24
    6df4:	0f 90       	pop	r0
    6df6:	0f be       	out	0x3f, r0	; 63
    6df8:	0f 90       	pop	r0
    6dfa:	1f 90       	pop	r1
    6dfc:	18 95       	reti
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    6dfe:	18 16       	cp	r1, r24
    6e00:	19 06       	cpc	r1, r25
    6e02:	2c f5       	brge	.+74     	; 0x6e4e <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
    6e04:	10 92 28 02 	sts	0x0228, r1
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    6e08:	8f e0       	ldi	r24, 0x0F	; 15
    6e0a:	80 93 25 02 	sts	0x0225, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    6e0e:	80 91 a0 00 	lds	r24, 0x00A0
    6e12:	8f 7d       	andi	r24, 0xDF	; 223
    6e14:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    6e18:	80 91 72 00 	lds	r24, 0x0072
    6e1c:	8b 7f       	andi	r24, 0xFB	; 251
    6e1e:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    6e22:	80 91 02 01 	lds	r24, 0x0102
    6e26:	8f 7e       	andi	r24, 0xEF	; 239
    6e28:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    6e2c:	80 91 a0 00 	lds	r24, 0x00A0
    6e30:	80 68       	ori	r24, 0x80	; 128
    6e32:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    6e36:	80 91 72 00 	lds	r24, 0x0072
    6e3a:	82 60       	ori	r24, 0x02	; 2
    6e3c:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    6e40:	9f 91       	pop	r25
    6e42:	8f 91       	pop	r24
    6e44:	0f 90       	pop	r0
    6e46:	0f be       	out	0x3f, r0	; 63
    6e48:	0f 90       	pop	r0
    6e4a:	1f 90       	pop	r1
    6e4c:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
		PORTH &= ~(1 << 4);				// output to 0
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
    6e4e:	10 92 28 02 	sts	0x0228, r1
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    6e52:	8e e0       	ldi	r24, 0x0E	; 14
    6e54:	80 93 25 02 	sts	0x0225, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    6e58:	80 91 a0 00 	lds	r24, 0x00A0
    6e5c:	8f 77       	andi	r24, 0x7F	; 127
    6e5e:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    6e62:	80 91 72 00 	lds	r24, 0x0072
    6e66:	8d 7f       	andi	r24, 0xFD	; 253
    6e68:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    6e6c:	80 91 02 01 	lds	r24, 0x0102
    6e70:	87 7f       	andi	r24, 0xF7	; 247
    6e72:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    6e76:	80 91 a0 00 	lds	r24, 0x00A0
    6e7a:	80 62       	ori	r24, 0x20	; 32
    6e7c:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    6e80:	80 91 72 00 	lds	r24, 0x0072
    6e84:	84 60       	ori	r24, 0x04	; 4
    6e86:	80 93 72 00 	sts	0x0072, r24
    6e8a:	b2 cf       	rjmp	.-156    	; 0x6df0 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    6e8c:	81 e0       	ldi	r24, 0x01	; 1
    6e8e:	80 93 28 02 	sts	0x0228, r24
			currentMotLeftChannel = 15;
    6e92:	8f e0       	ldi	r24, 0x0F	; 15
    6e94:	80 93 25 02 	sts	0x0225, r24
    6e98:	96 cf       	rjmp	.-212    	; 0x6dc6 <__vector_45+0x5a>

00006e9a <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    6e9a:	1f 92       	push	r1
    6e9c:	0f 92       	push	r0
    6e9e:	0f b6       	in	r0, 0x3f	; 63
    6ea0:	0f 92       	push	r0
    6ea2:	11 24       	eor	r1, r1
    6ea4:	8f 93       	push	r24
    6ea6:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    6ea8:	81 e0       	ldi	r24, 0x01	; 1
    6eaa:	80 93 28 02 	sts	0x0228, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    6eae:	9e e0       	ldi	r25, 0x0E	; 14
    6eb0:	90 93 25 02 	sts	0x0225, r25

	firstSampleLeft = 1;
    6eb4:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    6eb8:	9f 91       	pop	r25
    6eba:	8f 91       	pop	r24
    6ebc:	0f 90       	pop	r0
    6ebe:	0f be       	out	0x3f, r0	; 63
    6ec0:	0f 90       	pop	r0
    6ec2:	1f 90       	pop	r1
    6ec4:	18 95       	reti

00006ec6 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    6ec6:	1f 92       	push	r1
    6ec8:	0f 92       	push	r0
    6eca:	0f b6       	in	r0, 0x3f	; 63
    6ecc:	0f 92       	push	r0
    6ece:	11 24       	eor	r1, r1
    6ed0:	8f 93       	push	r24
    6ed2:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    6ed4:	81 e0       	ldi	r24, 0x01	; 1
    6ed6:	80 93 28 02 	sts	0x0228, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    6eda:	9f e0       	ldi	r25, 0x0F	; 15
    6edc:	90 93 25 02 	sts	0x0225, r25

	firstSampleLeft = 1;
    6ee0:	80 93 0a 02 	sts	0x020A, r24

//	LED_GREEN_OFF;

}
    6ee4:	9f 91       	pop	r25
    6ee6:	8f 91       	pop	r24
    6ee8:	0f 90       	pop	r0
    6eea:	0f be       	out	0x3f, r0	; 63
    6eec:	0f 90       	pop	r0
    6eee:	1f 90       	pop	r1
    6ef0:	18 95       	reti

00006ef2 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    6ef2:	1f 92       	push	r1
    6ef4:	0f 92       	push	r0
    6ef6:	0f b6       	in	r0, 0x3f	; 63
    6ef8:	0f 92       	push	r0
    6efa:	11 24       	eor	r1, r1
    6efc:	8f 93       	push	r24
    6efe:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    6f00:	80 91 6e 04 	lds	r24, 0x046E
    6f04:	88 23       	and	r24, r24
    6f06:	61 f0       	breq	.+24     	; 0x6f20 <__vector_35+0x2e>
		pwm_right = 0;
    6f08:	10 92 f6 02 	sts	0x02F6, r1
    6f0c:	10 92 f5 02 	sts	0x02F5, r1
		OCR3A = 0;
    6f10:	10 92 99 00 	sts	0x0099, r1
    6f14:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    6f18:	10 92 9b 00 	sts	0x009B, r1
    6f1c:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    6f20:	10 92 e4 02 	sts	0x02E4, r1
    6f24:	10 92 e3 02 	sts	0x02E3, r1


	if(pwm_right == 0) {
    6f28:	80 91 f5 02 	lds	r24, 0x02F5
    6f2c:	90 91 f6 02 	lds	r25, 0x02F6
    6f30:	00 97       	sbiw	r24, 0x00	; 0
    6f32:	31 f5       	brne	.+76     	; 0x6f80 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    6f34:	80 91 e9 02 	lds	r24, 0x02E9
    6f38:	90 91 ea 02 	lds	r25, 0x02EA
    6f3c:	97 fd       	sbrc	r25, 7
    6f3e:	5f c0       	rjmp	.+190    	; 0x6ffe <__vector_35+0x10c>
			rightMotorPhase = PASSIVE_PHASE;
    6f40:	81 e0       	ldi	r24, 0x01	; 1
    6f42:	80 93 27 02 	sts	0x0227, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    6f46:	8c e0       	ldi	r24, 0x0C	; 12
    6f48:	80 93 26 02 	sts	0x0226, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    6f4c:	81 e0       	ldi	r24, 0x01	; 1
    6f4e:	80 93 09 02 	sts	0x0209, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    6f52:	80 91 90 00 	lds	r24, 0x0090
    6f56:	8f 75       	andi	r24, 0x5F	; 95
    6f58:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    6f5c:	8e b1       	in	r24, 0x0e	; 14
    6f5e:	87 7e       	andi	r24, 0xE7	; 231
    6f60:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    6f62:	80 91 71 00 	lds	r24, 0x0071
    6f66:	89 7f       	andi	r24, 0xF9	; 249
    6f68:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    6f6c:	88 b3       	in	r24, 0x18	; 24
    6f6e:	86 60       	ori	r24, 0x06	; 6
    6f70:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    6f72:	9f 91       	pop	r25
    6f74:	8f 91       	pop	r24
    6f76:	0f 90       	pop	r0
    6f78:	0f be       	out	0x3f, r0	; 63
    6f7a:	0f 90       	pop	r0
    6f7c:	1f 90       	pop	r1
    6f7e:	18 95       	reti
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    6f80:	18 16       	cp	r1, r24
    6f82:	19 06       	cpc	r1, r25
    6f84:	0c f5       	brge	.+66     	; 0x6fc8 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
    6f86:	10 92 27 02 	sts	0x0227, r1
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    6f8a:	8d e0       	ldi	r24, 0x0D	; 13
    6f8c:	80 93 26 02 	sts	0x0226, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    6f90:	80 91 90 00 	lds	r24, 0x0090
    6f94:	8f 7d       	andi	r24, 0xDF	; 223
    6f96:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    6f9a:	80 91 71 00 	lds	r24, 0x0071
    6f9e:	8b 7f       	andi	r24, 0xFB	; 251
    6fa0:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    6fa4:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    6fa6:	80 91 90 00 	lds	r24, 0x0090
    6faa:	80 68       	ori	r24, 0x80	; 128
    6fac:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    6fb0:	80 91 71 00 	lds	r24, 0x0071
    6fb4:	82 60       	ori	r24, 0x02	; 2
    6fb6:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    6fba:	9f 91       	pop	r25
    6fbc:	8f 91       	pop	r24
    6fbe:	0f 90       	pop	r0
    6fc0:	0f be       	out	0x3f, r0	; 63
    6fc2:	0f 90       	pop	r0
    6fc4:	1f 90       	pop	r1
    6fc6:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
		PORTE &= ~(1 << 4);				// output to 0
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
    6fc8:	10 92 27 02 	sts	0x0227, r1
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    6fcc:	8c e0       	ldi	r24, 0x0C	; 12
    6fce:	80 93 26 02 	sts	0x0226, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    6fd2:	80 91 90 00 	lds	r24, 0x0090
    6fd6:	8f 77       	andi	r24, 0x7F	; 127
    6fd8:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    6fdc:	80 91 71 00 	lds	r24, 0x0071
    6fe0:	8d 7f       	andi	r24, 0xFD	; 253
    6fe2:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    6fe6:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    6fe8:	80 91 90 00 	lds	r24, 0x0090
    6fec:	80 62       	ori	r24, 0x20	; 32
    6fee:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    6ff2:	80 91 71 00 	lds	r24, 0x0071
    6ff6:	84 60       	ori	r24, 0x04	; 4
    6ff8:	80 93 71 00 	sts	0x0071, r24
    6ffc:	ba cf       	rjmp	.-140    	; 0x6f72 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    6ffe:	81 e0       	ldi	r24, 0x01	; 1
    7000:	80 93 27 02 	sts	0x0227, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    7004:	8d e0       	ldi	r24, 0x0D	; 13
    7006:	80 93 26 02 	sts	0x0226, r24
    700a:	a0 cf       	rjmp	.-192    	; 0x6f4c <__vector_35+0x5a>

0000700c <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    700c:	1f 92       	push	r1
    700e:	0f 92       	push	r0
    7010:	0f b6       	in	r0, 0x3f	; 63
    7012:	0f 92       	push	r0
    7014:	11 24       	eor	r1, r1
    7016:	8f 93       	push	r24
    7018:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    701a:	81 e0       	ldi	r24, 0x01	; 1
    701c:	80 93 27 02 	sts	0x0227, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    7020:	9c e0       	ldi	r25, 0x0C	; 12
    7022:	90 93 26 02 	sts	0x0226, r25

	firstSampleRight = 1;
    7026:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;

}
    702a:	9f 91       	pop	r25
    702c:	8f 91       	pop	r24
    702e:	0f 90       	pop	r0
    7030:	0f be       	out	0x3f, r0	; 63
    7032:	0f 90       	pop	r0
    7034:	1f 90       	pop	r1
    7036:	18 95       	reti

00007038 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    7038:	1f 92       	push	r1
    703a:	0f 92       	push	r0
    703c:	0f b6       	in	r0, 0x3f	; 63
    703e:	0f 92       	push	r0
    7040:	11 24       	eor	r1, r1
    7042:	8f 93       	push	r24
    7044:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    7046:	81 e0       	ldi	r24, 0x01	; 1
    7048:	80 93 27 02 	sts	0x0227, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    704c:	9d e0       	ldi	r25, 0x0D	; 13
    704e:	90 93 26 02 	sts	0x0226, r25

	firstSampleRight = 1;
    7052:	80 93 09 02 	sts	0x0209, r24

//	LED_RED_OFF;
}
    7056:	9f 91       	pop	r25
    7058:	8f 91       	pop	r24
    705a:	0f 90       	pop	r0
    705c:	0f be       	out	0x3f, r0	; 63
    705e:	0f 90       	pop	r0
    7060:	1f 90       	pop	r1
    7062:	18 95       	reti

00007064 <initBehaviors>:

#include "behaviors.h"

void initBehaviors() {

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)
    7064:	80 91 94 00 	lds	r24, 0x0094
    7068:	90 91 95 00 	lds	r25, 0x0095
    706c:	0e 94 75 52 	call	0xa4ea	; 0xa4ea <srand>

}
    7070:	08 95       	ret

00007072 <obstacleAvoidance>:

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    7072:	2f 92       	push	r2
    7074:	3f 92       	push	r3
    7076:	4f 92       	push	r4
    7078:	5f 92       	push	r5
    707a:	6f 92       	push	r6
    707c:	7f 92       	push	r7
    707e:	8f 92       	push	r8
    7080:	9f 92       	push	r9
    7082:	af 92       	push	r10
    7084:	bf 92       	push	r11
    7086:	cf 92       	push	r12
    7088:	df 92       	push	r13
    708a:	ef 92       	push	r14
    708c:	ff 92       	push	r15
    708e:	0f 93       	push	r16
    7090:	1f 93       	push	r17
    7092:	df 93       	push	r29
    7094:	cf 93       	push	r28
    7096:	cd b7       	in	r28, 0x3d	; 61
    7098:	de b7       	in	r29, 0x3e	; 62
    709a:	28 97       	sbiw	r28, 0x08	; 8
    709c:	0f b6       	in	r0, 0x3f	; 63
    709e:	f8 94       	cli
    70a0:	de bf       	out	0x3e, r29	; 62
    70a2:	0f be       	out	0x3f, r0	; 63
    70a4:	cd bf       	out	0x3d, r28	; 61
    70a6:	3c 01       	movw	r6, r24
    70a8:	7a 83       	std	Y+2, r23	; 0x02
    70aa:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    70ac:	fc 01       	movw	r30, r24
    70ae:	01 90       	ld	r0, Z+
    70b0:	f0 81       	ld	r31, Z
    70b2:	e0 2d       	mov	r30, r0
    70b4:	fc 83       	std	Y+4, r31	; 0x04
    70b6:	eb 83       	std	Y+3, r30	; 0x03
    70b8:	fb 01       	movw	r30, r22
    70ba:	01 90       	ld	r0, Z+
    70bc:	f0 81       	ld	r31, Z
    70be:	e0 2d       	mov	r30, r0
    70c0:	fe 83       	std	Y+6, r31	; 0x06
    70c2:	ed 83       	std	Y+5, r30	; 0x05

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    70c4:	00 91 c1 02 	lds	r16, 0x02C1
    70c8:	10 91 c2 02 	lds	r17, 0x02C2
    70cc:	05 30       	cpi	r16, 0x05	; 5
    70ce:	11 05       	cpc	r17, r1
    70d0:	34 f4       	brge	.+12     	; 0x70de <obstacleAvoidance+0x6c>
			proximityResultLinear[i] = 0;
    70d2:	10 92 c2 02 	sts	0x02C2, r1
    70d6:	10 92 c1 02 	sts	0x02C1, r1
    70da:	00 e0       	ldi	r16, 0x00	; 0
    70dc:	10 e0       	ldi	r17, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    70de:	60 91 c3 02 	lds	r22, 0x02C3
    70e2:	70 91 c4 02 	lds	r23, 0x02C4
    70e6:	65 30       	cpi	r22, 0x05	; 5
    70e8:	71 05       	cpc	r23, r1
    70ea:	34 f4       	brge	.+12     	; 0x70f8 <obstacleAvoidance+0x86>
			proximityResultLinear[i] = 0;
    70ec:	10 92 c4 02 	sts	0x02C4, r1
    70f0:	10 92 c3 02 	sts	0x02C3, r1
    70f4:	60 e0       	ldi	r22, 0x00	; 0
    70f6:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    70f8:	80 91 c5 02 	lds	r24, 0x02C5
    70fc:	90 91 c6 02 	lds	r25, 0x02C6
    7100:	85 30       	cpi	r24, 0x05	; 5
    7102:	91 05       	cpc	r25, r1
    7104:	24 f4       	brge	.+8      	; 0x710e <obstacleAvoidance+0x9c>
			proximityResultLinear[i] = 0;
    7106:	10 92 c6 02 	sts	0x02C6, r1
    710a:	10 92 c5 02 	sts	0x02C5, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    710e:	40 91 c7 02 	lds	r20, 0x02C7
    7112:	50 91 c8 02 	lds	r21, 0x02C8
    7116:	45 30       	cpi	r20, 0x05	; 5
    7118:	51 05       	cpc	r21, r1
    711a:	34 f4       	brge	.+12     	; 0x7128 <obstacleAvoidance+0xb6>
			proximityResultLinear[i] = 0;
    711c:	10 92 c8 02 	sts	0x02C8, r1
    7120:	10 92 c7 02 	sts	0x02C7, r1
    7124:	40 e0       	ldi	r20, 0x00	; 0
    7126:	50 e0       	ldi	r21, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7128:	40 90 c9 02 	lds	r4, 0x02C9
    712c:	50 90 ca 02 	lds	r5, 0x02CA
    7130:	f5 e0       	ldi	r31, 0x05	; 5
    7132:	4f 16       	cp	r4, r31
    7134:	51 04       	cpc	r5, r1
    7136:	34 f4       	brge	.+12     	; 0x7144 <obstacleAvoidance+0xd2>
			proximityResultLinear[i] = 0;
    7138:	10 92 ca 02 	sts	0x02CA, r1
    713c:	10 92 c9 02 	sts	0x02C9, r1
    7140:	44 24       	eor	r4, r4
    7142:	55 24       	eor	r5, r5
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7144:	20 91 cb 02 	lds	r18, 0x02CB
    7148:	30 91 cc 02 	lds	r19, 0x02CC
    714c:	25 30       	cpi	r18, 0x05	; 5
    714e:	31 05       	cpc	r19, r1
    7150:	34 f4       	brge	.+12     	; 0x715e <obstacleAvoidance+0xec>
			proximityResultLinear[i] = 0;
    7152:	10 92 cc 02 	sts	0x02CC, r1
    7156:	10 92 cb 02 	sts	0x02CB, r1
    715a:	20 e0       	ldi	r18, 0x00	; 0
    715c:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    715e:	80 91 cd 02 	lds	r24, 0x02CD
    7162:	90 91 ce 02 	lds	r25, 0x02CE
    7166:	85 30       	cpi	r24, 0x05	; 5
    7168:	91 05       	cpc	r25, r1
    716a:	24 f4       	brge	.+8      	; 0x7174 <obstacleAvoidance+0x102>
			proximityResultLinear[i] = 0;
    716c:	10 92 ce 02 	sts	0x02CE, r1
    7170:	10 92 cd 02 	sts	0x02CD, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    7174:	80 91 cf 02 	lds	r24, 0x02CF
    7178:	90 91 d0 02 	lds	r25, 0x02D0
    717c:	85 30       	cpi	r24, 0x05	; 5
    717e:	91 05       	cpc	r25, r1
    7180:	34 f4       	brge	.+12     	; 0x718e <obstacleAvoidance+0x11c>
			proximityResultLinear[i] = 0;
    7182:	10 92 d0 02 	sts	0x02D0, r1
    7186:	10 92 cf 02 	sts	0x02CF, r1
    718a:	80 e0       	ldi	r24, 0x00	; 0
    718c:	90 e0       	ldi	r25, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    718e:	10 95       	com	r17
    7190:	01 95       	neg	r16
    7192:	1f 4f       	sbci	r17, 0xFF	; 255
    7194:	5b 01       	movw	r10, r22
    7196:	b5 94       	asr	r11
    7198:	a7 94       	ror	r10
    719a:	7a 01       	movw	r14, r20
    719c:	f5 94       	asr	r15
    719e:	e7 94       	ror	r14
    71a0:	69 01       	movw	r12, r18
    71a2:	d5 94       	asr	r13
    71a4:	c7 94       	ror	r12
    71a6:	4c 01       	movw	r8, r24
    71a8:	95 94       	asr	r9
    71aa:	87 94       	ror	r8
    71ac:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <rand>
    71b0:	92 01       	movw	r18, r4
    71b2:	2e 51       	subi	r18, 0x1E	; 30
    71b4:	30 40       	sbci	r19, 0x00	; 0
    71b6:	20 0f       	add	r18, r16
    71b8:	31 1f       	adc	r19, r17
    71ba:	2e 0d       	add	r18, r14
    71bc:	3f 1d       	adc	r19, r15
    71be:	2c 0d       	add	r18, r12
    71c0:	3d 1d       	adc	r19, r13
    71c2:	2a 19       	sub	r18, r10
    71c4:	3b 09       	sbc	r19, r11
    71c6:	28 19       	sub	r18, r8
    71c8:	39 09       	sbc	r19, r9
    71ca:	6c e3       	ldi	r22, 0x3C	; 60
    71cc:	26 2e       	mov	r2, r22
    71ce:	31 2c       	mov	r3, r1
    71d0:	b1 01       	movw	r22, r2
    71d2:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
    71d6:	28 0f       	add	r18, r24
    71d8:	39 1f       	adc	r19, r25
    71da:	38 87       	std	Y+8, r19	; 0x08
    71dc:	2f 83       	std	Y+7, r18	; 0x07
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    71de:	e0 90 c3 02 	lds	r14, 0x02C3
    71e2:	f0 90 c4 02 	lds	r15, 0x02C4
    71e6:	f5 94       	asr	r15
    71e8:	e7 94       	ror	r14
    71ea:	00 91 c5 02 	lds	r16, 0x02C5
    71ee:	10 91 c6 02 	lds	r17, 0x02C6
    71f2:	15 95       	asr	r17
    71f4:	07 95       	ror	r16
    71f6:	15 95       	asr	r17
    71f8:	07 95       	ror	r16
    71fa:	c0 90 c7 02 	lds	r12, 0x02C7
    71fe:	d0 90 c8 02 	lds	r13, 0x02C8
    7202:	d5 94       	asr	r13
    7204:	c7 94       	ror	r12
    7206:	a0 90 cb 02 	lds	r10, 0x02CB
    720a:	b0 90 cc 02 	lds	r11, 0x02CC
    720e:	b5 94       	asr	r11
    7210:	a7 94       	ror	r10
    7212:	40 90 cd 02 	lds	r4, 0x02CD
    7216:	50 90 ce 02 	lds	r5, 0x02CE
    721a:	55 94       	asr	r5
    721c:	47 94       	ror	r4
    721e:	55 94       	asr	r5
    7220:	47 94       	ror	r4
    7222:	80 90 cf 02 	lds	r8, 0x02CF
    7226:	90 90 d0 02 	lds	r9, 0x02D0
    722a:	95 94       	asr	r9
    722c:	87 94       	ror	r8
    722e:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <rand>
    7232:	97 01       	movw	r18, r14
    7234:	20 0f       	add	r18, r16
    7236:	31 1f       	adc	r19, r17
    7238:	2e 51       	subi	r18, 0x1E	; 30
    723a:	30 40       	sbci	r19, 0x00	; 0
    723c:	2c 0d       	add	r18, r12
    723e:	3d 1d       	adc	r19, r13
    7240:	2a 19       	sub	r18, r10
    7242:	3b 09       	sbc	r19, r11
    7244:	28 19       	sub	r18, r8
    7246:	39 09       	sbc	r19, r9
    7248:	24 19       	sub	r18, r4
    724a:	35 09       	sbc	r19, r5
    724c:	b1 01       	movw	r22, r2
    724e:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <__divmodhi4>
    7252:	28 0f       	add	r18, r24
    7254:	39 1f       	adc	r19, r25
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    7256:	4b 81       	ldd	r20, Y+3	; 0x03
    7258:	5c 81       	ldd	r21, Y+4	; 0x04
    725a:	57 fd       	sbrc	r21, 7
    725c:	e5 c0       	rjmp	.+458    	; 0x7428 <obstacleAvoidance+0x3b6>
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    725e:	5a 01       	movw	r10, r20
    7260:	cc 24       	eor	r12, r12
    7262:	b7 fc       	sbrc	r11, 7
    7264:	c0 94       	com	r12
    7266:	dc 2c       	mov	r13, r12
    7268:	8f 81       	ldd	r24, Y+7	; 0x07
    726a:	98 85       	ldd	r25, Y+8	; 0x08
    726c:	1c 01       	movw	r2, r24
    726e:	44 24       	eor	r4, r4
    7270:	37 fc       	sbrc	r3, 7
    7272:	40 94       	com	r4
    7274:	54 2c       	mov	r5, r4
    7276:	79 01       	movw	r14, r18
    7278:	00 27       	eor	r16, r16
    727a:	f7 fc       	sbrc	r15, 7
    727c:	00 95       	com	r16
    727e:	10 2f       	mov	r17, r16
    7280:	c2 01       	movw	r24, r4
    7282:	b1 01       	movw	r22, r2
    7284:	6e 19       	sub	r22, r14
    7286:	7f 09       	sbc	r23, r15
    7288:	80 0b       	sbc	r24, r16
    728a:	91 0b       	sbc	r25, r17
    728c:	a6 01       	movw	r20, r12
    728e:	95 01       	movw	r18, r10
    7290:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__mulsi3>
    7294:	b6 e0       	ldi	r27, 0x06	; 6
    7296:	95 95       	asr	r25
    7298:	87 95       	ror	r24
    729a:	77 95       	ror	r23
    729c:	67 95       	ror	r22
    729e:	ba 95       	dec	r27
    72a0:	d1 f7       	brne	.-12     	; 0x7296 <obstacleAvoidance+0x224>
    72a2:	6a 0d       	add	r22, r10
    72a4:	7b 1d       	adc	r23, r11
    72a6:	8c 1d       	adc	r24, r12
    72a8:	9d 1d       	adc	r25, r13
		*pwmLeft = (signed int)res;
    72aa:	f3 01       	movw	r30, r6
    72ac:	71 83       	std	Z+1, r23	; 0x01
    72ae:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    72b0:	2d 81       	ldd	r18, Y+5	; 0x05
    72b2:	3e 81       	ldd	r19, Y+6	; 0x06
    72b4:	37 fd       	sbrc	r19, 7
    72b6:	97 c0       	rjmp	.+302    	; 0x73e6 <obstacleAvoidance+0x374>
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    72b8:	59 01       	movw	r10, r18
    72ba:	cc 24       	eor	r12, r12
    72bc:	b7 fc       	sbrc	r11, 7
    72be:	c0 94       	com	r12
    72c0:	dc 2c       	mov	r13, r12
    72c2:	c8 01       	movw	r24, r16
    72c4:	b7 01       	movw	r22, r14
    72c6:	62 0d       	add	r22, r2
    72c8:	73 1d       	adc	r23, r3
    72ca:	84 1d       	adc	r24, r4
    72cc:	95 1d       	adc	r25, r5
    72ce:	a6 01       	movw	r20, r12
    72d0:	95 01       	movw	r18, r10
    72d2:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__mulsi3>
    72d6:	f6 e0       	ldi	r31, 0x06	; 6
    72d8:	95 95       	asr	r25
    72da:	87 95       	ror	r24
    72dc:	77 95       	ror	r23
    72de:	67 95       	ror	r22
    72e0:	fa 95       	dec	r31
    72e2:	d1 f7       	brne	.-12     	; 0x72d8 <obstacleAvoidance+0x266>
    72e4:	6a 0d       	add	r22, r10
    72e6:	7b 1d       	adc	r23, r11
    72e8:	8c 1d       	adc	r24, r12
    72ea:	9d 1d       	adc	r25, r13
		*pwmRight = (signed int)res;
    72ec:	9b 01       	movw	r18, r22
    72ee:	e9 81       	ldd	r30, Y+1	; 0x01
    72f0:	fa 81       	ldd	r31, Y+2	; 0x02
    72f2:	71 83       	std	Z+1, r23	; 0x01
    72f4:	60 83       	st	Z, r22
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
    72f6:	80 91 4c 04 	lds	r24, 0x044C
    72fa:	8a 30       	cpi	r24, 0x0A	; 10
    72fc:	09 f4       	brne	.+2      	; 0x7300 <obstacleAvoidance+0x28e>
    72fe:	4b c0       	rjmp	.+150    	; 0x7396 <obstacleAvoidance+0x324>
			}
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    7300:	f2 e0       	ldi	r31, 0x02	; 2
    7302:	21 30       	cpi	r18, 0x01	; 1
    7304:	3f 07       	cpc	r19, r31
    7306:	44 f0       	brlt	.+16     	; 0x7318 <obstacleAvoidance+0x2a6>
    7308:	80 e0       	ldi	r24, 0x00	; 0
    730a:	92 e0       	ldi	r25, 0x02	; 2
    730c:	e9 81       	ldd	r30, Y+1	; 0x01
    730e:	fa 81       	ldd	r31, Y+2	; 0x02
    7310:	91 83       	std	Z+1, r25	; 0x01
    7312:	80 83       	st	Z, r24
    7314:	20 e0       	ldi	r18, 0x00	; 0
    7316:	32 e0       	ldi	r19, 0x02	; 2
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    7318:	f3 01       	movw	r30, r6
    731a:	80 81       	ld	r24, Z
    731c:	91 81       	ldd	r25, Z+1	; 0x01
    731e:	f2 e0       	ldi	r31, 0x02	; 2
    7320:	81 30       	cpi	r24, 0x01	; 1
    7322:	9f 07       	cpc	r25, r31
    7324:	4c f0       	brlt	.+18     	; 0x7338 <obstacleAvoidance+0x2c6>
    7326:	80 e0       	ldi	r24, 0x00	; 0
    7328:	92 e0       	ldi	r25, 0x02	; 2
    732a:	f3 01       	movw	r30, r6
    732c:	91 83       	std	Z+1, r25	; 0x01
    732e:	80 83       	st	Z, r24
    7330:	e9 81       	ldd	r30, Y+1	; 0x01
    7332:	fa 81       	ldd	r31, Y+2	; 0x02
    7334:	20 81       	ld	r18, Z
    7336:	31 81       	ldd	r19, Z+1	; 0x01
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    7338:	fe ef       	ldi	r31, 0xFE	; 254
    733a:	20 30       	cpi	r18, 0x00	; 0
    733c:	3f 07       	cpc	r19, r31
    733e:	4c f4       	brge	.+18     	; 0x7352 <obstacleAvoidance+0x2e0>
    7340:	80 e0       	ldi	r24, 0x00	; 0
    7342:	9e ef       	ldi	r25, 0xFE	; 254
    7344:	e9 81       	ldd	r30, Y+1	; 0x01
    7346:	fa 81       	ldd	r31, Y+2	; 0x02
    7348:	91 83       	std	Z+1, r25	; 0x01
    734a:	80 83       	st	Z, r24
    734c:	f3 01       	movw	r30, r6
    734e:	80 81       	ld	r24, Z
    7350:	91 81       	ldd	r25, Z+1	; 0x01
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    7352:	fe ef       	ldi	r31, 0xFE	; 254
    7354:	80 30       	cpi	r24, 0x00	; 0
    7356:	9f 07       	cpc	r25, r31
    7358:	2c f4       	brge	.+10     	; 0x7364 <obstacleAvoidance+0x2f2>
    735a:	80 e0       	ldi	r24, 0x00	; 0
    735c:	9e ef       	ldi	r25, 0xFE	; 254
    735e:	f3 01       	movw	r30, r6
    7360:	91 83       	std	Z+1, r25	; 0x01
    7362:	80 83       	st	Z, r24

}
    7364:	28 96       	adiw	r28, 0x08	; 8
    7366:	0f b6       	in	r0, 0x3f	; 63
    7368:	f8 94       	cli
    736a:	de bf       	out	0x3e, r29	; 62
    736c:	0f be       	out	0x3f, r0	; 63
    736e:	cd bf       	out	0x3d, r28	; 61
    7370:	cf 91       	pop	r28
    7372:	df 91       	pop	r29
    7374:	1f 91       	pop	r17
    7376:	0f 91       	pop	r16
    7378:	ff 90       	pop	r15
    737a:	ef 90       	pop	r14
    737c:	df 90       	pop	r13
    737e:	cf 90       	pop	r12
    7380:	bf 90       	pop	r11
    7382:	af 90       	pop	r10
    7384:	9f 90       	pop	r9
    7386:	8f 90       	pop	r8
    7388:	7f 90       	pop	r7
    738a:	6f 90       	pop	r6
    738c:	5f 90       	pop	r5
    738e:	4f 90       	pop	r4
    7390:	3f 90       	pop	r3
    7392:	2f 90       	pop	r2
    7394:	08 95       	ret
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    7396:	2b 81       	ldd	r18, Y+3	; 0x03
    7398:	3c 81       	ldd	r19, Y+4	; 0x04
    739a:	21 15       	cp	r18, r1
    739c:	31 05       	cpc	r19, r1
    739e:	f1 f0       	breq	.+60     	; 0x73dc <obstacleAvoidance+0x36a>
    73a0:	2d 81       	ldd	r18, Y+5	; 0x05
    73a2:	3e 81       	ldd	r19, Y+6	; 0x06
    73a4:	21 15       	cp	r18, r1
    73a6:	31 05       	cpc	r19, r1
    73a8:	c9 f0       	breq	.+50     	; 0x73dc <obstacleAvoidance+0x36a>
			if(currentAngle<270 && currentAngle>90) {
    73aa:	80 91 3e 04 	lds	r24, 0x043E
    73ae:	90 91 3f 04 	lds	r25, 0x043F
    73b2:	8b 55       	subi	r24, 0x5B	; 91
    73b4:	90 40       	sbci	r25, 0x00	; 0
    73b6:	83 3b       	cpi	r24, 0xB3	; 179
    73b8:	91 05       	cpc	r25, r1
    73ba:	08 f0       	brcs	.+2      	; 0x73be <obstacleAvoidance+0x34c>
    73bc:	5f c0       	rjmp	.+190    	; 0x747c <obstacleAvoidance+0x40a>
				*pwmLeft += 10;
    73be:	f3 01       	movw	r30, r6
    73c0:	80 81       	ld	r24, Z
    73c2:	91 81       	ldd	r25, Z+1	; 0x01
    73c4:	0a 96       	adiw	r24, 0x0a	; 10
    73c6:	91 83       	std	Z+1, r25	; 0x01
    73c8:	80 83       	st	Z, r24
				*pwmRight -= 10;
    73ca:	e9 81       	ldd	r30, Y+1	; 0x01
    73cc:	fa 81       	ldd	r31, Y+2	; 0x02
    73ce:	20 81       	ld	r18, Z
    73d0:	31 81       	ldd	r19, Z+1	; 0x01
    73d2:	2a 50       	subi	r18, 0x0A	; 10
    73d4:	30 40       	sbci	r19, 0x00	; 0
    73d6:	31 83       	std	Z+1, r19	; 0x01
    73d8:	20 83       	st	Z, r18
    73da:	92 cf       	rjmp	.-220    	; 0x7300 <obstacleAvoidance+0x28e>
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    73dc:	e9 81       	ldd	r30, Y+1	; 0x01
    73de:	fa 81       	ldd	r31, Y+2	; 0x02
    73e0:	20 81       	ld	r18, Z
    73e2:	31 81       	ldd	r19, Z+1	; 0x01
    73e4:	8d cf       	rjmp	.-230    	; 0x7300 <obstacleAvoidance+0x28e>
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    73e6:	59 01       	movw	r10, r18
    73e8:	cc 24       	eor	r12, r12
    73ea:	b7 fc       	sbrc	r11, 7
    73ec:	c0 94       	com	r12
    73ee:	dc 2c       	mov	r13, r12
    73f0:	c2 01       	movw	r24, r4
    73f2:	b1 01       	movw	r22, r2
    73f4:	6e 19       	sub	r22, r14
    73f6:	7f 09       	sbc	r23, r15
    73f8:	80 0b       	sbc	r24, r16
    73fa:	91 0b       	sbc	r25, r17
    73fc:	a6 01       	movw	r20, r12
    73fe:	95 01       	movw	r18, r10
    7400:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__mulsi3>
    7404:	e6 e0       	ldi	r30, 0x06	; 6
    7406:	95 95       	asr	r25
    7408:	87 95       	ror	r24
    740a:	77 95       	ror	r23
    740c:	67 95       	ror	r22
    740e:	ea 95       	dec	r30
    7410:	d1 f7       	brne	.-12     	; 0x7406 <obstacleAvoidance+0x394>
    7412:	26 1b       	sub	r18, r22
    7414:	37 0b       	sbc	r19, r23
    7416:	48 0b       	sbc	r20, r24
    7418:	59 0b       	sbc	r21, r25
    741a:	da 01       	movw	r26, r20
    741c:	c9 01       	movw	r24, r18
		*pwmRight = (signed int)res;
    741e:	e9 81       	ldd	r30, Y+1	; 0x01
    7420:	fa 81       	ldd	r31, Y+2	; 0x02
    7422:	91 83       	std	Z+1, r25	; 0x01
    7424:	80 83       	st	Z, r24
    7426:	67 cf       	rjmp	.-306    	; 0x72f6 <obstacleAvoidance+0x284>
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    7428:	5a 01       	movw	r10, r20
    742a:	cc 24       	eor	r12, r12
    742c:	b7 fc       	sbrc	r11, 7
    742e:	c0 94       	com	r12
    7430:	dc 2c       	mov	r13, r12
    7432:	8f 81       	ldd	r24, Y+7	; 0x07
    7434:	98 85       	ldd	r25, Y+8	; 0x08
    7436:	1c 01       	movw	r2, r24
    7438:	44 24       	eor	r4, r4
    743a:	37 fc       	sbrc	r3, 7
    743c:	40 94       	com	r4
    743e:	54 2c       	mov	r5, r4
    7440:	79 01       	movw	r14, r18
    7442:	00 27       	eor	r16, r16
    7444:	f7 fc       	sbrc	r15, 7
    7446:	00 95       	com	r16
    7448:	10 2f       	mov	r17, r16
    744a:	c8 01       	movw	r24, r16
    744c:	b7 01       	movw	r22, r14
    744e:	62 0d       	add	r22, r2
    7450:	73 1d       	adc	r23, r3
    7452:	84 1d       	adc	r24, r4
    7454:	95 1d       	adc	r25, r5
    7456:	a6 01       	movw	r20, r12
    7458:	95 01       	movw	r18, r10
    745a:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__mulsi3>
    745e:	a6 e0       	ldi	r26, 0x06	; 6
    7460:	95 95       	asr	r25
    7462:	87 95       	ror	r24
    7464:	77 95       	ror	r23
    7466:	67 95       	ror	r22
    7468:	aa 95       	dec	r26
    746a:	d1 f7       	brne	.-12     	; 0x7460 <obstacleAvoidance+0x3ee>
    746c:	26 1b       	sub	r18, r22
    746e:	37 0b       	sbc	r19, r23
    7470:	48 0b       	sbc	r20, r24
    7472:	59 0b       	sbc	r21, r25
		*pwmLeft = (signed int)res;
    7474:	f3 01       	movw	r30, r6
    7476:	31 83       	std	Z+1, r19	; 0x01
    7478:	20 83       	st	Z, r18
    747a:	1a cf       	rjmp	.-460    	; 0x72b0 <obstacleAvoidance+0x23e>
		if(desL!=0 && desR!=0) {
			if(currentAngle<270 && currentAngle>90) {
				*pwmLeft += 10;
				*pwmRight -= 10;
			} else {
				*pwmLeft -= 10;
    747c:	f3 01       	movw	r30, r6
    747e:	80 81       	ld	r24, Z
    7480:	91 81       	ldd	r25, Z+1	; 0x01
    7482:	0a 97       	sbiw	r24, 0x0a	; 10
    7484:	91 83       	std	Z+1, r25	; 0x01
    7486:	80 83       	st	Z, r24
				*pwmRight += 10;
    7488:	e9 81       	ldd	r30, Y+1	; 0x01
    748a:	fa 81       	ldd	r31, Y+2	; 0x02
    748c:	20 81       	ld	r18, Z
    748e:	31 81       	ldd	r19, Z+1	; 0x01
    7490:	26 5f       	subi	r18, 0xF6	; 246
    7492:	3f 4f       	sbci	r19, 0xFF	; 255
    7494:	31 83       	std	Z+1, r19	; 0x01
    7496:	20 83       	st	Z, r18
    7498:	33 cf       	rjmp	.-410    	; 0x7300 <obstacleAvoidance+0x28e>

0000749a <cliffDetected>:


char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    749a:	80 91 69 02 	lds	r24, 0x0269
    749e:	90 91 6a 02 	lds	r25, 0x026A
    74a2:	21 e0       	ldi	r18, 0x01	; 1
    74a4:	84 3a       	cpi	r24, 0xA4	; 164
    74a6:	92 07       	cpc	r25, r18
    74a8:	d4 f0       	brlt	.+52     	; 0x74de <cliffDetected+0x44>
    74aa:	80 91 6b 02 	lds	r24, 0x026B
    74ae:	90 91 6c 02 	lds	r25, 0x026C
    74b2:	21 e0       	ldi	r18, 0x01	; 1
    74b4:	84 3a       	cpi	r24, 0xA4	; 164
    74b6:	92 07       	cpc	r25, r18
    74b8:	94 f0       	brlt	.+36     	; 0x74de <cliffDetected+0x44>
    74ba:	80 91 6d 02 	lds	r24, 0x026D
    74be:	90 91 6e 02 	lds	r25, 0x026E
    74c2:	21 e0       	ldi	r18, 0x01	; 1
    74c4:	84 3a       	cpi	r24, 0xA4	; 164
    74c6:	92 07       	cpc	r25, r18
    74c8:	74 f0       	brlt	.+28     	; 0x74e6 <cliffDetected+0x4c>
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    74ca:	81 e0       	ldi	r24, 0x01	; 1
    74cc:	20 91 6f 02 	lds	r18, 0x026F
    74d0:	30 91 70 02 	lds	r19, 0x0270
    74d4:	91 e0       	ldi	r25, 0x01	; 1
    74d6:	24 3a       	cpi	r18, 0xA4	; 164
    74d8:	39 07       	cpc	r19, r25
    74da:	1c f4       	brge	.+6      	; 0x74e2 <cliffDetected+0x48>
	} else {
		return 0;
	}


}
    74dc:	08 95       	ret
char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    74de:	81 e0       	ldi	r24, 0x01	; 1
    74e0:	08 95       	ret
    74e2:	80 e0       	ldi	r24, 0x00	; 0
    74e4:	08 95       	ret
    74e6:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}


}
    74e8:	08 95       	ret

000074ea <enableObstacleAvoidance>:

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    74ea:	81 e0       	ldi	r24, 0x01	; 1
    74ec:	80 93 6c 04 	sts	0x046C, r24
}
    74f0:	08 95       	ret

000074f2 <disableObstacleAvoidance>:

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    74f2:	10 92 6c 04 	sts	0x046C, r1
}
    74f6:	08 95       	ret

000074f8 <enableCliffAvoidance>:

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    74f8:	81 e0       	ldi	r24, 0x01	; 1
    74fa:	80 93 6d 04 	sts	0x046D, r24
}
    74fe:	08 95       	ret

00007500 <disableCliffAvoidance>:

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    7500:	10 92 6d 04 	sts	0x046D, r1
}
    7504:	08 95       	ret

00007506 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    7506:	a0 e8       	ldi	r26, 0x80	; 128
    7508:	b0 e0       	ldi	r27, 0x00	; 0
    750a:	1c 92       	st	X, r1
	TCCR1B = 0;
    750c:	e1 e8       	ldi	r30, 0x81	; 129
    750e:	f0 e0       	ldi	r31, 0x00	; 0
    7510:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    7512:	8c 91       	ld	r24, X
    7514:	89 6a       	ori	r24, 0xA9	; 169
    7516:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    7518:	80 81       	ld	r24, Z
    751a:	89 60       	ori	r24, 0x09	; 9
    751c:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    751e:	80 91 0c 02 	lds	r24, 0x020C
    7522:	90 e0       	ldi	r25, 0x00	; 0
    7524:	90 93 89 00 	sts	0x0089, r25
    7528:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    752c:	80 91 0d 02 	lds	r24, 0x020D
    7530:	90 e0       	ldi	r25, 0x00	; 0
    7532:	90 93 8b 00 	sts	0x008B, r25
    7536:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    753a:	80 91 0e 02 	lds	r24, 0x020E
    753e:	90 e0       	ldi	r25, 0x00	; 0
    7540:	90 93 8d 00 	sts	0x008D, r25
    7544:	80 93 8c 00 	sts	0x008C, r24

}
    7548:	08 95       	ret

0000754a <toggleBlueLed>:

void toggleBlueLed() {

	blinkState = 1 - blinkState;
    754a:	81 e0       	ldi	r24, 0x01	; 1
    754c:	90 91 1b 03 	lds	r25, 0x031B
    7550:	89 1b       	sub	r24, r25
    7552:	80 93 1b 03 	sts	0x031B, r24

	if(blinkState) {
    7556:	88 23       	and	r24, r24
    7558:	39 f4       	brne	.+14     	; 0x7568 <toggleBlueLed+0x1e>
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
	} else {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC to get the maximum output power; this is due to the fact 
    755a:	80 91 80 00 	lds	r24, 0x0080
    755e:	87 7f       	andi	r24, 0xF7	; 247
    7560:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// that the minimum duty cycle when the output compare is enable is 1 
    7564:	2f 98       	cbi	0x05, 7	; 5
    7566:	08 95       	ret
void toggleBlueLed() {

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
    7568:	80 91 80 00 	lds	r24, 0x0080
    756c:	88 60       	ori	r24, 0x08	; 8
    756e:	80 93 80 00 	sts	0x0080, r24
		OCR1C = 255;
    7572:	8f ef       	ldi	r24, 0xFF	; 255
    7574:	90 e0       	ldi	r25, 0x00	; 0
    7576:	90 93 8d 00 	sts	0x008D, r25
    757a:	80 93 8c 00 	sts	0x008C, r24
    757e:	08 95       	ret

00007580 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    7580:	88 23       	and	r24, r24
    7582:	59 f0       	breq	.+22     	; 0x759a <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    7584:	90 91 80 00 	lds	r25, 0x0080
    7588:	90 68       	ori	r25, 0x80	; 128
    758a:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    758e:	90 e0       	ldi	r25, 0x00	; 0
    7590:	90 93 89 00 	sts	0x0089, r25
    7594:	80 93 88 00 	sts	0x0088, r24
    7598:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    759a:	80 91 80 00 	lds	r24, 0x0080
    759e:	8f 77       	andi	r24, 0x7F	; 127
    75a0:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    75a4:	2d 98       	cbi	0x05, 5	; 5
    75a6:	08 95       	ret

000075a8 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    75a8:	88 23       	and	r24, r24
    75aa:	59 f0       	breq	.+22     	; 0x75c2 <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    75ac:	90 91 80 00 	lds	r25, 0x0080
    75b0:	90 62       	ori	r25, 0x20	; 32
    75b2:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    75b6:	90 e0       	ldi	r25, 0x00	; 0
    75b8:	90 93 8b 00 	sts	0x008B, r25
    75bc:	80 93 8a 00 	sts	0x008A, r24
    75c0:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    75c2:	80 91 80 00 	lds	r24, 0x0080
    75c6:	8f 7d       	andi	r24, 0xDF	; 223
    75c8:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    75cc:	2e 98       	cbi	0x05, 6	; 5
    75ce:	08 95       	ret

000075d0 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    75d0:	88 23       	and	r24, r24
    75d2:	59 f0       	breq	.+22     	; 0x75ea <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    75d4:	90 91 80 00 	lds	r25, 0x0080
    75d8:	98 60       	ori	r25, 0x08	; 8
    75da:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    75de:	90 e0       	ldi	r25, 0x00	; 0
    75e0:	90 93 8d 00 	sts	0x008D, r25
    75e4:	80 93 8c 00 	sts	0x008C, r24
    75e8:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    75ea:	80 91 80 00 	lds	r24, 0x0080
    75ee:	87 7f       	andi	r24, 0xF7	; 247
    75f0:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    75f4:	2f 98       	cbi	0x05, 7	; 5
    75f6:	08 95       	ret

000075f8 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    75f8:	83 30       	cpi	r24, 0x03	; 3
    75fa:	09 f4       	brne	.+2      	; 0x75fe <setGreenLed+0x6>
    75fc:	5a c0       	rjmp	.+180    	; 0x76b2 <setGreenLed+0xba>
    75fe:	84 30       	cpi	r24, 0x04	; 4
    7600:	80 f0       	brcs	.+32     	; 0x7622 <setGreenLed+0x2a>
    7602:	85 30       	cpi	r24, 0x05	; 5
    7604:	09 f4       	brne	.+2      	; 0x7608 <setGreenLed+0x10>
    7606:	41 c0       	rjmp	.+130    	; 0x768a <setGreenLed+0x92>
    7608:	85 30       	cpi	r24, 0x05	; 5
    760a:	d0 f4       	brcc	.+52     	; 0x7640 <setGreenLed+0x48>
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    760c:	66 23       	and	r22, r22
    760e:	09 f4       	brne	.+2      	; 0x7612 <setGreenLed+0x1a>
    7610:	68 c0       	rjmp	.+208    	; 0x76e2 <setGreenLed+0xea>
    7612:	80 91 0b 01 	lds	r24, 0x010B
    7616:	8f 7e       	andi	r24, 0xEF	; 239
    7618:	80 93 0b 01 	sts	0x010B, r24
    761c:	80 91 0b 01 	lds	r24, 0x010B
    7620:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7622:	81 30       	cpi	r24, 0x01	; 1
    7624:	e1 f1       	breq	.+120    	; 0x769e <setGreenLed+0xa6>
    7626:	82 30       	cpi	r24, 0x02	; 2
    7628:	80 f0       	brcs	.+32     	; 0x764a <setGreenLed+0x52>
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    762a:	66 23       	and	r22, r22
    762c:	09 f4       	brne	.+2      	; 0x7630 <setGreenLed+0x38>
    762e:	46 c0       	rjmp	.+140    	; 0x76bc <setGreenLed+0xc4>
    7630:	80 91 0b 01 	lds	r24, 0x010B
    7634:	8b 7f       	andi	r24, 0xFB	; 251
    7636:	80 93 0b 01 	sts	0x010B, r24
    763a:	80 91 0b 01 	lds	r24, 0x010B
    763e:	08 95       	ret

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    7640:	86 30       	cpi	r24, 0x06	; 6
    7642:	c9 f0       	breq	.+50     	; 0x7676 <setGreenLed+0x7e>
    7644:	87 30       	cpi	r24, 0x07	; 7
    7646:	61 f0       	breq	.+24     	; 0x7660 <setGreenLed+0x68>
    7648:	08 95       	ret

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    764a:	66 23       	and	r22, r22
    764c:	09 f4       	brne	.+2      	; 0x7650 <setGreenLed+0x58>
    764e:	51 c0       	rjmp	.+162    	; 0x76f2 <setGreenLed+0xfa>
    7650:	80 91 0b 01 	lds	r24, 0x010B
    7654:	8e 7f       	andi	r24, 0xFE	; 254
    7656:	80 93 0b 01 	sts	0x010B, r24
    765a:	80 91 0b 01 	lds	r24, 0x010B
    765e:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    7660:	66 23       	and	r22, r22
    7662:	09 f0       	breq	.+2      	; 0x7666 <setGreenLed+0x6e>
    7664:	5e c0       	rjmp	.+188    	; 0x7722 <setGreenLed+0x12a>
    7666:	80 91 0b 01 	lds	r24, 0x010B
    766a:	80 68       	ori	r24, 0x80	; 128
    766c:	80 93 0b 01 	sts	0x010B, r24
    7670:	80 91 0b 01 	lds	r24, 0x010B
    7674:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    7676:	66 23       	and	r22, r22
    7678:	49 f1       	breq	.+82     	; 0x76cc <setGreenLed+0xd4>
    767a:	80 91 0b 01 	lds	r24, 0x010B
    767e:	8f 7b       	andi	r24, 0xBF	; 191
    7680:	80 93 0b 01 	sts	0x010B, r24
    7684:	80 91 0b 01 	lds	r24, 0x010B
    7688:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    768a:	66 23       	and	r22, r22
    768c:	d1 f1       	breq	.+116    	; 0x7702 <setGreenLed+0x10a>
    768e:	80 91 0b 01 	lds	r24, 0x010B
    7692:	8f 7d       	andi	r24, 0xDF	; 223
    7694:	80 93 0b 01 	sts	0x010B, r24
    7698:	80 91 0b 01 	lds	r24, 0x010B
    769c:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    769e:	66 23       	and	r22, r22
    76a0:	c1 f1       	breq	.+112    	; 0x7712 <setGreenLed+0x11a>
    76a2:	80 91 0b 01 	lds	r24, 0x010B
    76a6:	8d 7f       	andi	r24, 0xFD	; 253
    76a8:	80 93 0b 01 	sts	0x010B, r24
    76ac:	80 91 0b 01 	lds	r24, 0x010B
    76b0:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    76b2:	66 23       	and	r22, r22
    76b4:	99 f0       	breq	.+38     	; 0x76dc <setGreenLed+0xe4>
    76b6:	a3 98       	cbi	0x14, 3	; 20
    76b8:	84 b3       	in	r24, 0x14	; 20
    76ba:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    76bc:	80 91 0b 01 	lds	r24, 0x010B
    76c0:	84 60       	ori	r24, 0x04	; 4
    76c2:	80 93 0b 01 	sts	0x010B, r24
    76c6:	80 91 0b 01 	lds	r24, 0x010B
    76ca:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    76cc:	80 91 0b 01 	lds	r24, 0x010B
    76d0:	80 64       	ori	r24, 0x40	; 64
    76d2:	80 93 0b 01 	sts	0x010B, r24
    76d6:	80 91 0b 01 	lds	r24, 0x010B
    76da:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    76dc:	a3 9a       	sbi	0x14, 3	; 20
    76de:	84 b3       	in	r24, 0x14	; 20
    76e0:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    76e2:	80 91 0b 01 	lds	r24, 0x010B
    76e6:	80 61       	ori	r24, 0x10	; 16
    76e8:	80 93 0b 01 	sts	0x010B, r24
    76ec:	80 91 0b 01 	lds	r24, 0x010B
    76f0:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    76f2:	80 91 0b 01 	lds	r24, 0x010B
    76f6:	81 60       	ori	r24, 0x01	; 1
    76f8:	80 93 0b 01 	sts	0x010B, r24
    76fc:	80 91 0b 01 	lds	r24, 0x010B
    7700:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    7702:	80 91 0b 01 	lds	r24, 0x010B
    7706:	80 62       	ori	r24, 0x20	; 32
    7708:	80 93 0b 01 	sts	0x010B, r24
    770c:	80 91 0b 01 	lds	r24, 0x010B
    7710:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    7712:	80 91 0b 01 	lds	r24, 0x010B
    7716:	82 60       	ori	r24, 0x02	; 2
    7718:	80 93 0b 01 	sts	0x010B, r24
    771c:	80 91 0b 01 	lds	r24, 0x010B
    7720:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    7722:	80 91 0b 01 	lds	r24, 0x010B
    7726:	8f 77       	andi	r24, 0x7F	; 127
    7728:	80 93 0b 01 	sts	0x010B, r24
    772c:	80 91 0b 01 	lds	r24, 0x010B
    7730:	08 95       	ret

00007732 <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    7732:	eb e0       	ldi	r30, 0x0B	; 11
    7734:	f1 e0       	ldi	r31, 0x01	; 1
    7736:	80 81       	ld	r24, Z
    7738:	81 60       	ori	r24, 0x01	; 1
    773a:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    773c:	80 81       	ld	r24, Z
    773e:	82 60       	ori	r24, 0x02	; 2
    7740:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    7742:	80 81       	ld	r24, Z
    7744:	84 60       	ori	r24, 0x04	; 4
    7746:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    7748:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    774a:	80 81       	ld	r24, Z
    774c:	80 61       	ori	r24, 0x10	; 16
    774e:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    7750:	80 81       	ld	r24, Z
    7752:	80 62       	ori	r24, 0x20	; 32
    7754:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    7756:	80 81       	ld	r24, Z
    7758:	80 64       	ori	r24, 0x40	; 64
    775a:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    775c:	80 81       	ld	r24, Z
    775e:	80 68       	ori	r24, 0x80	; 128
    7760:	80 83       	st	Z, r24

}
    7762:	08 95       	ret

00007764 <turnOnGreenLeds>:


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    7764:	eb e0       	ldi	r30, 0x0B	; 11
    7766:	f1 e0       	ldi	r31, 0x01	; 1
    7768:	80 81       	ld	r24, Z
    776a:	8e 7f       	andi	r24, 0xFE	; 254
    776c:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    776e:	80 81       	ld	r24, Z
    7770:	8d 7f       	andi	r24, 0xFD	; 253
    7772:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    7774:	80 81       	ld	r24, Z
    7776:	8b 7f       	andi	r24, 0xFB	; 251
    7778:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    777a:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    777c:	80 81       	ld	r24, Z
    777e:	8f 7e       	andi	r24, 0xEF	; 239
    7780:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    7782:	80 81       	ld	r24, Z
    7784:	8f 7d       	andi	r24, 0xDF	; 223
    7786:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    7788:	80 81       	ld	r24, Z
    778a:	8f 7b       	andi	r24, 0xBF	; 191
    778c:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    778e:	80 81       	ld	r24, Z
    7790:	8f 77       	andi	r24, 0x7F	; 127
    7792:	80 83       	st	Z, r24

}
    7794:	08 95       	ret

00007796 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    7796:	0e 94 a6 1b 	call	0x374c	; 0x374c <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    779a:	80 91 14 02 	lds	r24, 0x0214
    779e:	0e 94 ae 1b 	call	0x375c	; 0x375c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    77a2:	88 23       	and	r24, r24
    77a4:	49 f4       	brne	.+18     	; 0x77b8 <initAccelerometer+0x22>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    77a6:	86 e1       	ldi	r24, 0x16	; 22
    77a8:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    77ac:	85 e4       	ldi	r24, 0x45	; 69
    77ae:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    77b2:	0e 94 21 1c 	call	0x3842	; 0x3842 <i2c_stop>
    77b6:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    77b8:	0e 94 21 1c 	call	0x3842	; 0x3842 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    77bc:	86 ea       	ldi	r24, 0xA6	; 166
    77be:	90 e0       	ldi	r25, 0x00	; 0
    77c0:	90 93 15 02 	sts	0x0215, r25
    77c4:	80 93 14 02 	sts	0x0214, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    77c8:	86 ea       	ldi	r24, 0xA6	; 166
    77ca:	0e 94 ae 1b 	call	0x375c	; 0x375c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    77ce:	88 23       	and	r24, r24
    77d0:	41 f5       	brne	.+80     	; 0x7822 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    77d2:	8d e2       	ldi	r24, 0x2D	; 45
    77d4:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
        i2c_write(0x08);	// measurement mode
    77d8:	88 e0       	ldi	r24, 0x08	; 8
    77da:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    77de:	0e 94 21 1c 	call	0x3842	; 0x3842 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    77e2:	80 91 14 02 	lds	r24, 0x0214
    77e6:	0e 94 ae 1b 	call	0x375c	; 0x375c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    77ea:	88 23       	and	r24, r24
    77ec:	d1 f4       	brne	.+52     	; 0x7822 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    77ee:	81 e3       	ldi	r24, 0x31	; 49
    77f0:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    77f4:	80 e0       	ldi	r24, 0x00	; 0
    77f6:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    77fa:	0e 94 21 1c 	call	0x3842	; 0x3842 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    77fe:	80 91 14 02 	lds	r24, 0x0214
    7802:	0e 94 ae 1b 	call	0x375c	; 0x375c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7806:	88 23       	and	r24, r24
    7808:	61 f4       	brne	.+24     	; 0x7822 <initAccelerometer+0x8c>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    780a:	8c e2       	ldi	r24, 0x2C	; 44
    780c:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    7810:	89 e0       	ldi	r24, 0x09	; 9
    7812:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7816:	0e 94 21 1c 	call	0x3842	; 0x3842 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    781a:	81 e0       	ldi	r24, 0x01	; 1
    781c:	80 93 2b 04 	sts	0x042B, r24
    7820:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7822:	0e 94 21 1c 	call	0x3842	; 0x3842 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    7826:	82 e0       	ldi	r24, 0x02	; 2
    7828:	80 93 2b 04 	sts	0x042B, r24
    782c:	08 95       	ret

0000782e <initMMA7455L>:
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    782e:	80 91 14 02 	lds	r24, 0x0214
    7832:	0e 94 ae 1b 	call	0x375c	; 0x375c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7836:	88 23       	and	r24, r24
    7838:	51 f4       	brne	.+20     	; 0x784e <initMMA7455L+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    783a:	86 e1       	ldi	r24, 0x16	; 22
    783c:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    7840:	85 e4       	ldi	r24, 0x45	; 69
    7842:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7846:	0e 94 21 1c 	call	0x3842	; 0x3842 <i2c_stop>
    }

	return 0;				// configuration ok
    784a:	80 e0       	ldi	r24, 0x00	; 0

}
    784c:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    784e:	0e 94 21 1c 	call	0x3842	; 0x3842 <i2c_stop>
		return 1;
    7852:	81 e0       	ldi	r24, 0x01	; 1
    7854:	08 95       	ret

00007856 <initADXL345>:
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7856:	80 91 14 02 	lds	r24, 0x0214
    785a:	0e 94 ae 1b 	call	0x375c	; 0x375c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    785e:	88 23       	and	r24, r24
    7860:	31 f5       	brne	.+76     	; 0x78ae <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    7862:	8d e2       	ldi	r24, 0x2D	; 45
    7864:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
        i2c_write(0x08);	// measurement mode
    7868:	88 e0       	ldi	r24, 0x08	; 8
    786a:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    786e:	0e 94 21 1c 	call	0x3842	; 0x3842 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7872:	80 91 14 02 	lds	r24, 0x0214
    7876:	0e 94 ae 1b 	call	0x375c	; 0x375c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    787a:	88 23       	and	r24, r24
    787c:	c1 f4       	brne	.+48     	; 0x78ae <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    787e:	81 e3       	ldi	r24, 0x31	; 49
    7880:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    7884:	80 e0       	ldi	r24, 0x00	; 0
    7886:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    788a:	0e 94 21 1c 	call	0x3842	; 0x3842 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    788e:	80 91 14 02 	lds	r24, 0x0214
    7892:	0e 94 ae 1b 	call	0x375c	; 0x375c <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7896:	88 23       	and	r24, r24
    7898:	51 f4       	brne	.+20     	; 0x78ae <initADXL345+0x58>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    789a:	8c e2       	ldi	r24, 0x2C	; 44
    789c:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    78a0:	89 e0       	ldi	r24, 0x09	; 9
    78a2:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    78a6:	0e 94 21 1c 	call	0x3842	; 0x3842 <i2c_stop>
    }

	return 0;
    78aa:	80 e0       	ldi	r24, 0x00	; 0

}
    78ac:	08 95       	ret
        i2c_stop();			// set stop conditon = release bus
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    78ae:	0e 94 21 1c 	call	0x3842	; 0x3842 <i2c_stop>
		return 1;
    78b2:	81 e0       	ldi	r24, 0x01	; 1
    78b4:	08 95       	ret

000078b6 <readAccelXY>:

	return 0;

}

void readAccelXY() {
    78b6:	ff 92       	push	r15
    78b8:	0f 93       	push	r16
    78ba:	1f 93       	push	r17
    78bc:	df 93       	push	r29
    78be:	cf 93       	push	r28
    78c0:	0f 92       	push	r0
    78c2:	cd b7       	in	r28, 0x3d	; 61
    78c4:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[4];

	if(useAccel == USE_MMAX7455L) {
    78c6:	80 91 2b 04 	lds	r24, 0x042B
    78ca:	88 23       	and	r24, r24
    78cc:	91 f0       	breq	.+36     	; 0x78f2 <readAccelXY+0x3c>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else if(useAccel == USE_ADXL345) {
    78ce:	81 30       	cpi	r24, 0x01	; 1
    78d0:	09 f4       	brne	.+2      	; 0x78d4 <readAccelXY+0x1e>
    78d2:	88 c0       	rjmp	.+272    	; 0x79e4 <readAccelXY+0x12e>
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
		}

	} else {

		accX = 0;
    78d4:	10 92 2d 04 	sts	0x042D, r1
    78d8:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    78dc:	10 92 2f 04 	sts	0x042F, r1
    78e0:	10 92 2e 04 	sts	0x042E, r1

	}

}
    78e4:	0f 90       	pop	r0
    78e6:	cf 91       	pop	r28
    78e8:	df 91       	pop	r29
    78ea:	1f 91       	pop	r17
    78ec:	0f 91       	pop	r16
    78ee:	ff 90       	pop	r15
    78f0:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    78f2:	80 91 14 02 	lds	r24, 0x0214
    78f6:	0e 94 ae 1b 	call	0x375c	; 0x375c <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    78fa:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x32);											// sends address to read from (X LSB)
    78fc:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7900:	80 91 14 02 	lds	r24, 0x0214
    7904:	8f 5f       	subi	r24, 0xFF	; 255
    7906:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_rep_start>

		for(i=0; i<3; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    790a:	0e 94 3b 1c 	call	0x3876	; 0x3876 <i2c_readAck>
    790e:	08 2f       	mov	r16, r24
    7910:	0e 94 3b 1c 	call	0x3876	; 0x3876 <i2c_readAck>
    7914:	f8 2e       	mov	r15, r24
    7916:	0e 94 3b 1c 	call	0x3876	; 0x3876 <i2c_readAck>
    791a:	18 2f       	mov	r17, r24
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    791c:	0e 94 45 1c 	call	0x388a	; 0x388a <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    7920:	89 83       	std	Y+1, r24	; 0x01
    7922:	0e 94 21 1c 	call	0x3842	; 0x3842 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    7926:	90 91 5d 0b 	lds	r25, 0x0B5D
    792a:	89 81       	ldd	r24, Y+1	; 0x01
    792c:	99 23       	and	r25, r25
    792e:	39 f1       	breq	.+78     	; 0x797e <readAccelXY+0xc8>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    7930:	4f 2d       	mov	r20, r15
    7932:	55 27       	eor	r21, r21
    7934:	47 fd       	sbrc	r20, 7
    7936:	50 95       	com	r21
    7938:	54 2f       	mov	r21, r20
    793a:	44 27       	eor	r20, r20
    793c:	60 2f       	mov	r22, r16
    793e:	77 27       	eor	r23, r23
    7940:	67 fd       	sbrc	r22, 7
    7942:	70 95       	com	r23
    7944:	46 2b       	or	r20, r22
    7946:	57 2b       	or	r21, r23
    7948:	50 93 2d 04 	sts	0x042D, r21
    794c:	40 93 2c 04 	sts	0x042C, r20
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    7950:	28 2f       	mov	r18, r24
    7952:	33 27       	eor	r19, r19
    7954:	27 fd       	sbrc	r18, 7
    7956:	30 95       	com	r19
    7958:	32 2f       	mov	r19, r18
    795a:	22 27       	eor	r18, r18
    795c:	81 2f       	mov	r24, r17
    795e:	99 27       	eor	r25, r25
    7960:	87 fd       	sbrc	r24, 7
    7962:	90 95       	com	r25
    7964:	28 2b       	or	r18, r24
    7966:	39 2b       	or	r19, r25
    7968:	30 93 2f 04 	sts	0x042F, r19
    796c:	20 93 2e 04 	sts	0x042E, r18
		accX = 0;
		accY = 0;

	}

}
    7970:	0f 90       	pop	r0
    7972:	cf 91       	pop	r28
    7974:	df 91       	pop	r29
    7976:	1f 91       	pop	r17
    7978:	0f 91       	pop	r16
    797a:	ff 90       	pop	r15
    797c:	08 95       	ret

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    797e:	4f 2d       	mov	r20, r15
    7980:	55 27       	eor	r21, r21
    7982:	47 fd       	sbrc	r20, 7
    7984:	50 95       	com	r21
    7986:	54 2f       	mov	r21, r20
    7988:	44 27       	eor	r20, r20
    798a:	60 2f       	mov	r22, r16
    798c:	77 27       	eor	r23, r23
    798e:	67 fd       	sbrc	r22, 7
    7990:	70 95       	com	r23
    7992:	46 2b       	or	r20, r22
    7994:	57 2b       	or	r21, r23
    7996:	60 91 32 04 	lds	r22, 0x0432
    799a:	70 91 33 04 	lds	r23, 0x0433
    799e:	46 1b       	sub	r20, r22
    79a0:	57 0b       	sbc	r21, r23
    79a2:	50 93 2d 04 	sts	0x042D, r21
    79a6:	40 93 2c 04 	sts	0x042C, r20
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    79aa:	28 2f       	mov	r18, r24
    79ac:	33 27       	eor	r19, r19
    79ae:	27 fd       	sbrc	r18, 7
    79b0:	30 95       	com	r19
    79b2:	32 2f       	mov	r19, r18
    79b4:	22 27       	eor	r18, r18
    79b6:	81 2f       	mov	r24, r17
    79b8:	99 27       	eor	r25, r25
    79ba:	87 fd       	sbrc	r24, 7
    79bc:	90 95       	com	r25
    79be:	28 2b       	or	r18, r24
    79c0:	39 2b       	or	r19, r25
    79c2:	80 91 34 04 	lds	r24, 0x0434
    79c6:	90 91 35 04 	lds	r25, 0x0435
    79ca:	28 1b       	sub	r18, r24
    79cc:	39 0b       	sbc	r19, r25
    79ce:	30 93 2f 04 	sts	0x042F, r19
    79d2:	20 93 2e 04 	sts	0x042E, r18
		accX = 0;
		accY = 0;

	}

}
    79d6:	0f 90       	pop	r0
    79d8:	cf 91       	pop	r28
    79da:	df 91       	pop	r29
    79dc:	1f 91       	pop	r17
    79de:	0f 91       	pop	r16
    79e0:	ff 90       	pop	r15
    79e2:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    79e4:	80 91 14 02 	lds	r24, 0x0214
    79e8:	0e 94 ae 1b 	call	0x375c	; 0x375c <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    79ec:	82 e3       	ldi	r24, 0x32	; 50
    79ee:	86 cf       	rjmp	.-244    	; 0x78fc <readAccelXY+0x46>

000079f0 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    79f0:	df 93       	push	r29
    79f2:	cf 93       	push	r28
    79f4:	00 d0       	rcall	.+0      	; 0x79f6 <readAccelXYZ+0x6>
    79f6:	00 d0       	rcall	.+0      	; 0x79f8 <readAccelXYZ+0x8>
    79f8:	cd b7       	in	r28, 0x3d	; 61
    79fa:	de b7       	in	r29, 0x3e	; 62

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    79fc:	80 91 2b 04 	lds	r24, 0x042B
    7a00:	88 23       	and	r24, r24
    7a02:	c1 f0       	breq	.+48     	; 0x7a34 <readAccelXYZ+0x44>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    7a04:	81 30       	cpi	r24, 0x01	; 1
    7a06:	09 f4       	brne	.+2      	; 0x7a0a <readAccelXYZ+0x1a>
    7a08:	ad c0       	rjmp	.+346    	; 0x7b64 <readAccelXYZ+0x174>
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    7a0a:	10 92 2d 04 	sts	0x042D, r1
    7a0e:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    7a12:	10 92 2f 04 	sts	0x042F, r1
    7a16:	10 92 2e 04 	sts	0x042E, r1
		accZ = 0;
    7a1a:	10 92 31 04 	sts	0x0431, r1
    7a1e:	10 92 30 04 	sts	0x0430, r1

	}

}
    7a22:	26 96       	adiw	r28, 0x06	; 6
    7a24:	0f b6       	in	r0, 0x3f	; 63
    7a26:	f8 94       	cli
    7a28:	de bf       	out	0x3e, r29	; 62
    7a2a:	0f be       	out	0x3f, r0	; 63
    7a2c:	cd bf       	out	0x3d, r28	; 61
    7a2e:	cf 91       	pop	r28
    7a30:	df 91       	pop	r29
    7a32:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7a34:	80 91 14 02 	lds	r24, 0x0214
    7a38:	0e 94 ae 1b 	call	0x375c	; 0x375c <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    7a3c:	80 e0       	ldi	r24, 0x00	; 0
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
    7a3e:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7a42:	80 91 14 02 	lds	r24, 0x0214
    7a46:	8f 5f       	subi	r24, 0xFF	; 255
    7a48:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_rep_start>

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    7a4c:	0e 94 3b 1c 	call	0x3876	; 0x3876 <i2c_readAck>
    7a50:	89 83       	std	Y+1, r24	; 0x01
    7a52:	0e 94 3b 1c 	call	0x3876	; 0x3876 <i2c_readAck>
    7a56:	8a 83       	std	Y+2, r24	; 0x02
    7a58:	0e 94 3b 1c 	call	0x3876	; 0x3876 <i2c_readAck>
    7a5c:	8b 83       	std	Y+3, r24	; 0x03
    7a5e:	0e 94 3b 1c 	call	0x3876	; 0x3876 <i2c_readAck>
    7a62:	8c 83       	std	Y+4, r24	; 0x04
    7a64:	0e 94 3b 1c 	call	0x3876	; 0x3876 <i2c_readAck>
    7a68:	8d 83       	std	Y+5, r24	; 0x05
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    7a6a:	0e 94 45 1c 	call	0x388a	; 0x388a <i2c_readNak>
    7a6e:	8e 83       	std	Y+6, r24	; 0x06
		i2c_stop();													// set stop conditon = release bus
    7a70:	0e 94 21 1c 	call	0x3842	; 0x3842 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    7a74:	80 91 5d 0b 	lds	r24, 0x0B5D
    7a78:	88 23       	and	r24, r24
    7a7a:	89 f1       	breq	.+98     	; 0x7ade <readAccelXYZ+0xee>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    7a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    7a7e:	99 27       	eor	r25, r25
    7a80:	87 fd       	sbrc	r24, 7
    7a82:	90 95       	com	r25
    7a84:	98 2f       	mov	r25, r24
    7a86:	88 27       	eor	r24, r24
    7a88:	29 81       	ldd	r18, Y+1	; 0x01
    7a8a:	33 27       	eor	r19, r19
    7a8c:	27 fd       	sbrc	r18, 7
    7a8e:	30 95       	com	r19
    7a90:	82 2b       	or	r24, r18
    7a92:	93 2b       	or	r25, r19
    7a94:	90 93 2d 04 	sts	0x042D, r25
    7a98:	80 93 2c 04 	sts	0x042C, r24
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    7a9c:	8c 81       	ldd	r24, Y+4	; 0x04
    7a9e:	99 27       	eor	r25, r25
    7aa0:	87 fd       	sbrc	r24, 7
    7aa2:	90 95       	com	r25
    7aa4:	98 2f       	mov	r25, r24
    7aa6:	88 27       	eor	r24, r24
    7aa8:	2b 81       	ldd	r18, Y+3	; 0x03
    7aaa:	33 27       	eor	r19, r19
    7aac:	27 fd       	sbrc	r18, 7
    7aae:	30 95       	com	r19
    7ab0:	82 2b       	or	r24, r18
    7ab2:	93 2b       	or	r25, r19
    7ab4:	90 93 2f 04 	sts	0x042F, r25
    7ab8:	80 93 2e 04 	sts	0x042E, r24
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
    7abc:	8e 81       	ldd	r24, Y+6	; 0x06
    7abe:	99 27       	eor	r25, r25
    7ac0:	87 fd       	sbrc	r24, 7
    7ac2:	90 95       	com	r25
    7ac4:	98 2f       	mov	r25, r24
    7ac6:	88 27       	eor	r24, r24
    7ac8:	2d 81       	ldd	r18, Y+5	; 0x05
    7aca:	33 27       	eor	r19, r19
    7acc:	27 fd       	sbrc	r18, 7
    7ace:	30 95       	com	r19
    7ad0:	82 2b       	or	r24, r18
    7ad2:	93 2b       	or	r25, r19
    7ad4:	90 93 31 04 	sts	0x0431, r25
    7ad8:	80 93 30 04 	sts	0x0430, r24
    7adc:	a2 cf       	rjmp	.-188    	; 0x7a22 <readAccelXYZ+0x32>
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    7ade:	8a 81       	ldd	r24, Y+2	; 0x02
    7ae0:	99 27       	eor	r25, r25
    7ae2:	87 fd       	sbrc	r24, 7
    7ae4:	90 95       	com	r25
    7ae6:	98 2f       	mov	r25, r24
    7ae8:	88 27       	eor	r24, r24
    7aea:	29 81       	ldd	r18, Y+1	; 0x01
    7aec:	33 27       	eor	r19, r19
    7aee:	27 fd       	sbrc	r18, 7
    7af0:	30 95       	com	r19
    7af2:	82 2b       	or	r24, r18
    7af4:	93 2b       	or	r25, r19
    7af6:	20 91 32 04 	lds	r18, 0x0432
    7afa:	30 91 33 04 	lds	r19, 0x0433
    7afe:	82 1b       	sub	r24, r18
    7b00:	93 0b       	sbc	r25, r19
    7b02:	90 93 2d 04 	sts	0x042D, r25
    7b06:	80 93 2c 04 	sts	0x042C, r24
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    7b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    7b0c:	99 27       	eor	r25, r25
    7b0e:	87 fd       	sbrc	r24, 7
    7b10:	90 95       	com	r25
    7b12:	98 2f       	mov	r25, r24
    7b14:	88 27       	eor	r24, r24
    7b16:	2b 81       	ldd	r18, Y+3	; 0x03
    7b18:	33 27       	eor	r19, r19
    7b1a:	27 fd       	sbrc	r18, 7
    7b1c:	30 95       	com	r19
    7b1e:	82 2b       	or	r24, r18
    7b20:	93 2b       	or	r25, r19
    7b22:	20 91 34 04 	lds	r18, 0x0434
    7b26:	30 91 35 04 	lds	r19, 0x0435
    7b2a:	82 1b       	sub	r24, r18
    7b2c:	93 0b       	sbc	r25, r19
    7b2e:	90 93 2f 04 	sts	0x042F, r25
    7b32:	80 93 2e 04 	sts	0x042E, r24
			accZ = (((signed int)buff[5]<<8)|buff[4])-accOffsetZ;	// Z axis
    7b36:	8e 81       	ldd	r24, Y+6	; 0x06
    7b38:	99 27       	eor	r25, r25
    7b3a:	87 fd       	sbrc	r24, 7
    7b3c:	90 95       	com	r25
    7b3e:	98 2f       	mov	r25, r24
    7b40:	88 27       	eor	r24, r24
    7b42:	2d 81       	ldd	r18, Y+5	; 0x05
    7b44:	33 27       	eor	r19, r19
    7b46:	27 fd       	sbrc	r18, 7
    7b48:	30 95       	com	r19
    7b4a:	82 2b       	or	r24, r18
    7b4c:	93 2b       	or	r25, r19
    7b4e:	20 91 36 04 	lds	r18, 0x0436
    7b52:	30 91 37 04 	lds	r19, 0x0437
    7b56:	82 1b       	sub	r24, r18
    7b58:	93 0b       	sbc	r25, r19
    7b5a:	90 93 31 04 	sts	0x0431, r25
    7b5e:	80 93 30 04 	sts	0x0430, r24
    7b62:	5f cf       	rjmp	.-322    	; 0x7a22 <readAccelXYZ+0x32>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    7b64:	80 91 14 02 	lds	r24, 0x0214
    7b68:	0e 94 ae 1b 	call	0x375c	; 0x375c <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7b6c:	82 e3       	ldi	r24, 0x32	; 50
    7b6e:	67 cf       	rjmp	.-306    	; 0x7a3e <readAccelXYZ+0x4e>

00007b70 <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    7b70:	cf 93       	push	r28
    7b72:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    7b74:	10 92 0c 02 	sts	0x020C, r1
	pwm_green = 0;
    7b78:	10 92 0d 02 	sts	0x020D, r1
	pwm_blue = 0;
    7b7c:	10 92 0e 02 	sts	0x020E, r1
	updateRedLed(pwm_red);
    7b80:	80 e0       	ldi	r24, 0x00	; 0
    7b82:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
	updateGreenLed(pwm_green);
    7b86:	80 91 0d 02 	lds	r24, 0x020D
    7b8a:	0e 94 d4 3a 	call	0x75a8	; 0x75a8 <updateGreenLed>
	updateBlueLed(pwm_blue);
    7b8e:	80 91 0e 02 	lds	r24, 0x020E
    7b92:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <updateBlueLed>

	calibrationCycle = 0;
    7b96:	10 92 4e 04 	sts	0x044E, r1
    7b9a:	10 92 4d 04 	sts	0x044D, r1
	startCalibration = 1;
    7b9e:	81 e0       	ldi	r24, 0x01	; 1
    7ba0:	80 93 5d 0b 	sts	0x0B5D, r24
					}
					accOffsetXSum = 0;
					accOffsetYSum = 0;
					accOffsetZSum = 0;

					calibrationCycle++;
    7ba4:	c1 e0       	ldi	r28, 0x01	; 1
    7ba6:	d0 e0       	ldi	r29, 0x00	; 0
	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {

		readAccelXYZ();
    7ba8:	0e 94 f8 3c 	call	0x79f0	; 0x79f0 <readAccelXYZ>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    7bac:	20 91 4d 04 	lds	r18, 0x044D
    7bb0:	30 91 4e 04 	lds	r19, 0x044E
    7bb4:	21 31       	cpi	r18, 0x11	; 17
    7bb6:	31 05       	cpc	r19, r1
    7bb8:	0c f4       	brge	.+2      	; 0x7bbc <calibrateSensors+0x4c>
    7bba:	35 c1       	rjmp	.+618    	; 0x7e26 <calibrateSensors+0x2b6>
			continue;

		} else if(calibrationCycle > CALIBRATION_CYCLES) {

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    7bbc:	80 91 89 02 	lds	r24, 0x0289
    7bc0:	90 91 8a 02 	lds	r25, 0x028A
    7bc4:	a0 91 8b 02 	lds	r26, 0x028B
    7bc8:	b0 91 8c 02 	lds	r27, 0x028C
    7bcc:	54 e0       	ldi	r21, 0x04	; 4
    7bce:	b6 95       	lsr	r27
    7bd0:	a7 95       	ror	r26
    7bd2:	97 95       	ror	r25
    7bd4:	87 95       	ror	r24
    7bd6:	5a 95       	dec	r21
    7bd8:	d1 f7       	brne	.-12     	; 0x7bce <calibrateSensors+0x5e>
    7bda:	90 93 72 02 	sts	0x0272, r25
    7bde:	80 93 71 02 	sts	0x0271, r24
    7be2:	80 91 8d 02 	lds	r24, 0x028D
    7be6:	90 91 8e 02 	lds	r25, 0x028E
    7bea:	a0 91 8f 02 	lds	r26, 0x028F
    7bee:	b0 91 90 02 	lds	r27, 0x0290
    7bf2:	44 e0       	ldi	r20, 0x04	; 4
    7bf4:	b6 95       	lsr	r27
    7bf6:	a7 95       	ror	r26
    7bf8:	97 95       	ror	r25
    7bfa:	87 95       	ror	r24
    7bfc:	4a 95       	dec	r20
    7bfe:	d1 f7       	brne	.-12     	; 0x7bf4 <calibrateSensors+0x84>
    7c00:	90 93 74 02 	sts	0x0274, r25
    7c04:	80 93 73 02 	sts	0x0273, r24
    7c08:	80 91 91 02 	lds	r24, 0x0291
    7c0c:	90 91 92 02 	lds	r25, 0x0292
    7c10:	a0 91 93 02 	lds	r26, 0x0293
    7c14:	b0 91 94 02 	lds	r27, 0x0294
    7c18:	34 e0       	ldi	r19, 0x04	; 4
    7c1a:	b6 95       	lsr	r27
    7c1c:	a7 95       	ror	r26
    7c1e:	97 95       	ror	r25
    7c20:	87 95       	ror	r24
    7c22:	3a 95       	dec	r19
    7c24:	d1 f7       	brne	.-12     	; 0x7c1a <calibrateSensors+0xaa>
    7c26:	90 93 76 02 	sts	0x0276, r25
    7c2a:	80 93 75 02 	sts	0x0275, r24
    7c2e:	80 91 95 02 	lds	r24, 0x0295
    7c32:	90 91 96 02 	lds	r25, 0x0296
    7c36:	a0 91 97 02 	lds	r26, 0x0297
    7c3a:	b0 91 98 02 	lds	r27, 0x0298
    7c3e:	24 e0       	ldi	r18, 0x04	; 4
    7c40:	b6 95       	lsr	r27
    7c42:	a7 95       	ror	r26
    7c44:	97 95       	ror	r25
    7c46:	87 95       	ror	r24
    7c48:	2a 95       	dec	r18
    7c4a:	d1 f7       	brne	.-12     	; 0x7c40 <calibrateSensors+0xd0>
    7c4c:	90 93 78 02 	sts	0x0278, r25
    7c50:	80 93 77 02 	sts	0x0277, r24
    7c54:	80 91 99 02 	lds	r24, 0x0299
    7c58:	90 91 9a 02 	lds	r25, 0x029A
    7c5c:	a0 91 9b 02 	lds	r26, 0x029B
    7c60:	b0 91 9c 02 	lds	r27, 0x029C
    7c64:	f4 e0       	ldi	r31, 0x04	; 4
    7c66:	b6 95       	lsr	r27
    7c68:	a7 95       	ror	r26
    7c6a:	97 95       	ror	r25
    7c6c:	87 95       	ror	r24
    7c6e:	fa 95       	dec	r31
    7c70:	d1 f7       	brne	.-12     	; 0x7c66 <calibrateSensors+0xf6>
    7c72:	90 93 7a 02 	sts	0x027A, r25
    7c76:	80 93 79 02 	sts	0x0279, r24
    7c7a:	80 91 9d 02 	lds	r24, 0x029D
    7c7e:	90 91 9e 02 	lds	r25, 0x029E
    7c82:	a0 91 9f 02 	lds	r26, 0x029F
    7c86:	b0 91 a0 02 	lds	r27, 0x02A0
    7c8a:	e4 e0       	ldi	r30, 0x04	; 4
    7c8c:	b6 95       	lsr	r27
    7c8e:	a7 95       	ror	r26
    7c90:	97 95       	ror	r25
    7c92:	87 95       	ror	r24
    7c94:	ea 95       	dec	r30
    7c96:	d1 f7       	brne	.-12     	; 0x7c8c <calibrateSensors+0x11c>
    7c98:	90 93 7c 02 	sts	0x027C, r25
    7c9c:	80 93 7b 02 	sts	0x027B, r24
    7ca0:	80 91 a1 02 	lds	r24, 0x02A1
    7ca4:	90 91 a2 02 	lds	r25, 0x02A2
    7ca8:	a0 91 a3 02 	lds	r26, 0x02A3
    7cac:	b0 91 a4 02 	lds	r27, 0x02A4
    7cb0:	74 e0       	ldi	r23, 0x04	; 4
    7cb2:	b6 95       	lsr	r27
    7cb4:	a7 95       	ror	r26
    7cb6:	97 95       	ror	r25
    7cb8:	87 95       	ror	r24
    7cba:	7a 95       	dec	r23
    7cbc:	d1 f7       	brne	.-12     	; 0x7cb2 <calibrateSensors+0x142>
    7cbe:	90 93 7e 02 	sts	0x027E, r25
    7cc2:	80 93 7d 02 	sts	0x027D, r24
    7cc6:	80 91 a5 02 	lds	r24, 0x02A5
    7cca:	90 91 a6 02 	lds	r25, 0x02A6
    7cce:	a0 91 a7 02 	lds	r26, 0x02A7
    7cd2:	b0 91 a8 02 	lds	r27, 0x02A8
    7cd6:	64 e0       	ldi	r22, 0x04	; 4
    7cd8:	b6 95       	lsr	r27
    7cda:	a7 95       	ror	r26
    7cdc:	97 95       	ror	r25
    7cde:	87 95       	ror	r24
    7ce0:	6a 95       	dec	r22
    7ce2:	d1 f7       	brne	.-12     	; 0x7cd8 <calibrateSensors+0x168>
    7ce4:	90 93 80 02 	sts	0x0280, r25
    7ce8:	80 93 7f 02 	sts	0x027F, r24
    7cec:	80 91 ad 02 	lds	r24, 0x02AD
    7cf0:	90 91 ae 02 	lds	r25, 0x02AE
    7cf4:	a0 91 af 02 	lds	r26, 0x02AF
    7cf8:	b0 91 b0 02 	lds	r27, 0x02B0
    7cfc:	54 e0       	ldi	r21, 0x04	; 4
    7cfe:	b6 95       	lsr	r27
    7d00:	a7 95       	ror	r26
    7d02:	97 95       	ror	r25
    7d04:	87 95       	ror	r24
    7d06:	5a 95       	dec	r21
    7d08:	d1 f7       	brne	.-12     	; 0x7cfe <calibrateSensors+0x18e>
    7d0a:	9c 01       	movw	r18, r24
    7d0c:	80 91 b1 02 	lds	r24, 0x02B1
    7d10:	90 91 b2 02 	lds	r25, 0x02B2
    7d14:	a0 91 b3 02 	lds	r26, 0x02B3
    7d18:	b0 91 b4 02 	lds	r27, 0x02B4
    7d1c:	44 e0       	ldi	r20, 0x04	; 4
    7d1e:	b6 95       	lsr	r27
    7d20:	a7 95       	ror	r26
    7d22:	97 95       	ror	r25
    7d24:	87 95       	ror	r24
    7d26:	4a 95       	dec	r20
    7d28:	d1 f7       	brne	.-12     	; 0x7d1e <calibrateSensors+0x1ae>
    7d2a:	bc 01       	movw	r22, r24
    7d2c:	80 91 b5 02 	lds	r24, 0x02B5
    7d30:	90 91 b6 02 	lds	r25, 0x02B6
    7d34:	a0 91 b7 02 	lds	r26, 0x02B7
    7d38:	b0 91 b8 02 	lds	r27, 0x02B8
    7d3c:	f4 e0       	ldi	r31, 0x04	; 4
    7d3e:	b6 95       	lsr	r27
    7d40:	a7 95       	ror	r26
    7d42:	97 95       	ror	r25
    7d44:	87 95       	ror	r24
    7d46:	fa 95       	dec	r31
    7d48:	d1 f7       	brne	.-12     	; 0x7d3e <calibrateSensors+0x1ce>
    7d4a:	ac 01       	movw	r20, r24
    7d4c:	80 91 a9 02 	lds	r24, 0x02A9
    7d50:	90 91 aa 02 	lds	r25, 0x02AA
    7d54:	a0 91 ab 02 	lds	r26, 0x02AB
    7d58:	b0 91 ac 02 	lds	r27, 0x02AC
    7d5c:	e4 e0       	ldi	r30, 0x04	; 4
    7d5e:	b6 95       	lsr	r27
    7d60:	a7 95       	ror	r26
    7d62:	97 95       	ror	r25
    7d64:	87 95       	ror	r24
    7d66:	ea 95       	dec	r30
    7d68:	d1 f7       	brne	.-12     	; 0x7d5e <calibrateSensors+0x1ee>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    7d6a:	80 50       	subi	r24, 0x00	; 0
    7d6c:	92 40       	sbci	r25, 0x02	; 2
    7d6e:	90 93 82 02 	sts	0x0282, r25
    7d72:	80 93 81 02 	sts	0x0281, r24
    7d76:	20 50       	subi	r18, 0x00	; 0
    7d78:	32 40       	sbci	r19, 0x02	; 2
    7d7a:	30 93 84 02 	sts	0x0284, r19
    7d7e:	20 93 83 02 	sts	0x0283, r18
    7d82:	60 50       	subi	r22, 0x00	; 0
    7d84:	72 40       	sbci	r23, 0x02	; 2
    7d86:	70 93 86 02 	sts	0x0286, r23
    7d8a:	60 93 85 02 	sts	0x0285, r22
    7d8e:	40 50       	subi	r20, 0x00	; 0
    7d90:	52 40       	sbci	r21, 0x02	; 2
    7d92:	50 93 88 02 	sts	0x0288, r21
    7d96:	40 93 87 02 	sts	0x0287, r20
			}

			accOffsetX = accOffsetXSum>>4;
    7d9a:	80 91 38 04 	lds	r24, 0x0438
    7d9e:	90 91 39 04 	lds	r25, 0x0439
    7da2:	95 95       	asr	r25
    7da4:	87 95       	ror	r24
    7da6:	95 95       	asr	r25
    7da8:	87 95       	ror	r24
    7daa:	95 95       	asr	r25
    7dac:	87 95       	ror	r24
    7dae:	95 95       	asr	r25
    7db0:	87 95       	ror	r24
    7db2:	90 93 33 04 	sts	0x0433, r25
    7db6:	80 93 32 04 	sts	0x0432, r24
			accOffsetY = accOffsetYSum>>4;
    7dba:	80 91 3a 04 	lds	r24, 0x043A
    7dbe:	90 91 3b 04 	lds	r25, 0x043B
    7dc2:	95 95       	asr	r25
    7dc4:	87 95       	ror	r24
    7dc6:	95 95       	asr	r25
    7dc8:	87 95       	ror	r24
    7dca:	95 95       	asr	r25
    7dcc:	87 95       	ror	r24
    7dce:	95 95       	asr	r25
    7dd0:	87 95       	ror	r24
    7dd2:	90 93 35 04 	sts	0x0435, r25
    7dd6:	80 93 34 04 	sts	0x0434, r24
			accOffsetZ = accOffsetZSum>>4;
    7dda:	80 91 3c 04 	lds	r24, 0x043C
    7dde:	90 91 3d 04 	lds	r25, 0x043D
    7de2:	95 95       	asr	r25
    7de4:	87 95       	ror	r24
    7de6:	95 95       	asr	r25
    7de8:	87 95       	ror	r24
    7dea:	95 95       	asr	r25
    7dec:	87 95       	ror	r24
    7dee:	95 95       	asr	r25
    7df0:	87 95       	ror	r24
    7df2:	90 93 37 04 	sts	0x0437, r25
    7df6:	80 93 36 04 	sts	0x0436, r24

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    7dfa:	10 92 5d 0b 	sts	0x0B5D, r1

		}

	}

	pwm_red = 255;
    7dfe:	8f ef       	ldi	r24, 0xFF	; 255
    7e00:	80 93 0c 02 	sts	0x020C, r24
	pwm_green = 255;
    7e04:	80 93 0d 02 	sts	0x020D, r24
	pwm_blue = 255;
    7e08:	80 93 0e 02 	sts	0x020E, r24
	updateRedLed(pwm_red);
    7e0c:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
	updateGreenLed(pwm_green);
    7e10:	80 91 0d 02 	lds	r24, 0x020D
    7e14:	0e 94 d4 3a 	call	0x75a8	; 0x75a8 <updateGreenLed>
	updateBlueLed(pwm_blue);
    7e18:	80 91 0e 02 	lds	r24, 0x020E
    7e1c:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <updateBlueLed>

}
    7e20:	df 91       	pop	r29
    7e22:	cf 91       	pop	r28
    7e24:	08 95       	ret

		readAccelXYZ();

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    7e26:	80 91 c0 02 	lds	r24, 0x02C0
    7e2a:	88 23       	and	r24, r24
    7e2c:	09 f4       	brne	.+2      	; 0x7e30 <calibrateSensors+0x2c0>
    7e2e:	86 c1       	rjmp	.+780    	; 0x813c <calibrateSensors+0x5cc>

				proxUpdated = 0;
    7e30:	10 92 c0 02 	sts	0x02C0, r1

				if(calibrationCycle==0) {		// reset all variables
    7e34:	21 15       	cp	r18, r1
    7e36:	31 05       	cpc	r19, r1
    7e38:	09 f4       	brne	.+2      	; 0x7e3c <calibrateSensors+0x2cc>
    7e3a:	86 c1       	rjmp	.+780    	; 0x8148 <calibrateSensors+0x5d8>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    7e3c:	80 91 59 02 	lds	r24, 0x0259
    7e40:	90 91 5a 02 	lds	r25, 0x025A
    7e44:	aa 27       	eor	r26, r26
    7e46:	97 fd       	sbrc	r25, 7
    7e48:	a0 95       	com	r26
    7e4a:	ba 2f       	mov	r27, r26
    7e4c:	40 91 89 02 	lds	r20, 0x0289
    7e50:	50 91 8a 02 	lds	r21, 0x028A
    7e54:	60 91 8b 02 	lds	r22, 0x028B
    7e58:	70 91 8c 02 	lds	r23, 0x028C
    7e5c:	84 0f       	add	r24, r20
    7e5e:	95 1f       	adc	r25, r21
    7e60:	a6 1f       	adc	r26, r22
    7e62:	b7 1f       	adc	r27, r23
    7e64:	80 93 89 02 	sts	0x0289, r24
    7e68:	90 93 8a 02 	sts	0x028A, r25
    7e6c:	a0 93 8b 02 	sts	0x028B, r26
    7e70:	b0 93 8c 02 	sts	0x028C, r27
    7e74:	80 91 5b 02 	lds	r24, 0x025B
    7e78:	90 91 5c 02 	lds	r25, 0x025C
    7e7c:	aa 27       	eor	r26, r26
    7e7e:	97 fd       	sbrc	r25, 7
    7e80:	a0 95       	com	r26
    7e82:	ba 2f       	mov	r27, r26
    7e84:	40 91 8d 02 	lds	r20, 0x028D
    7e88:	50 91 8e 02 	lds	r21, 0x028E
    7e8c:	60 91 8f 02 	lds	r22, 0x028F
    7e90:	70 91 90 02 	lds	r23, 0x0290
    7e94:	84 0f       	add	r24, r20
    7e96:	95 1f       	adc	r25, r21
    7e98:	a6 1f       	adc	r26, r22
    7e9a:	b7 1f       	adc	r27, r23
    7e9c:	80 93 8d 02 	sts	0x028D, r24
    7ea0:	90 93 8e 02 	sts	0x028E, r25
    7ea4:	a0 93 8f 02 	sts	0x028F, r26
    7ea8:	b0 93 90 02 	sts	0x0290, r27
    7eac:	80 91 5d 02 	lds	r24, 0x025D
    7eb0:	90 91 5e 02 	lds	r25, 0x025E
    7eb4:	aa 27       	eor	r26, r26
    7eb6:	97 fd       	sbrc	r25, 7
    7eb8:	a0 95       	com	r26
    7eba:	ba 2f       	mov	r27, r26
    7ebc:	40 91 91 02 	lds	r20, 0x0291
    7ec0:	50 91 92 02 	lds	r21, 0x0292
    7ec4:	60 91 93 02 	lds	r22, 0x0293
    7ec8:	70 91 94 02 	lds	r23, 0x0294
    7ecc:	84 0f       	add	r24, r20
    7ece:	95 1f       	adc	r25, r21
    7ed0:	a6 1f       	adc	r26, r22
    7ed2:	b7 1f       	adc	r27, r23
    7ed4:	80 93 91 02 	sts	0x0291, r24
    7ed8:	90 93 92 02 	sts	0x0292, r25
    7edc:	a0 93 93 02 	sts	0x0293, r26
    7ee0:	b0 93 94 02 	sts	0x0294, r27
    7ee4:	80 91 5f 02 	lds	r24, 0x025F
    7ee8:	90 91 60 02 	lds	r25, 0x0260
    7eec:	aa 27       	eor	r26, r26
    7eee:	97 fd       	sbrc	r25, 7
    7ef0:	a0 95       	com	r26
    7ef2:	ba 2f       	mov	r27, r26
    7ef4:	40 91 95 02 	lds	r20, 0x0295
    7ef8:	50 91 96 02 	lds	r21, 0x0296
    7efc:	60 91 97 02 	lds	r22, 0x0297
    7f00:	70 91 98 02 	lds	r23, 0x0298
    7f04:	84 0f       	add	r24, r20
    7f06:	95 1f       	adc	r25, r21
    7f08:	a6 1f       	adc	r26, r22
    7f0a:	b7 1f       	adc	r27, r23
    7f0c:	80 93 95 02 	sts	0x0295, r24
    7f10:	90 93 96 02 	sts	0x0296, r25
    7f14:	a0 93 97 02 	sts	0x0297, r26
    7f18:	b0 93 98 02 	sts	0x0298, r27
    7f1c:	80 91 61 02 	lds	r24, 0x0261
    7f20:	90 91 62 02 	lds	r25, 0x0262
    7f24:	aa 27       	eor	r26, r26
    7f26:	97 fd       	sbrc	r25, 7
    7f28:	a0 95       	com	r26
    7f2a:	ba 2f       	mov	r27, r26
    7f2c:	40 91 99 02 	lds	r20, 0x0299
    7f30:	50 91 9a 02 	lds	r21, 0x029A
    7f34:	60 91 9b 02 	lds	r22, 0x029B
    7f38:	70 91 9c 02 	lds	r23, 0x029C
    7f3c:	84 0f       	add	r24, r20
    7f3e:	95 1f       	adc	r25, r21
    7f40:	a6 1f       	adc	r26, r22
    7f42:	b7 1f       	adc	r27, r23
    7f44:	80 93 99 02 	sts	0x0299, r24
    7f48:	90 93 9a 02 	sts	0x029A, r25
    7f4c:	a0 93 9b 02 	sts	0x029B, r26
    7f50:	b0 93 9c 02 	sts	0x029C, r27
    7f54:	80 91 63 02 	lds	r24, 0x0263
    7f58:	90 91 64 02 	lds	r25, 0x0264
    7f5c:	aa 27       	eor	r26, r26
    7f5e:	97 fd       	sbrc	r25, 7
    7f60:	a0 95       	com	r26
    7f62:	ba 2f       	mov	r27, r26
    7f64:	40 91 9d 02 	lds	r20, 0x029D
    7f68:	50 91 9e 02 	lds	r21, 0x029E
    7f6c:	60 91 9f 02 	lds	r22, 0x029F
    7f70:	70 91 a0 02 	lds	r23, 0x02A0
    7f74:	84 0f       	add	r24, r20
    7f76:	95 1f       	adc	r25, r21
    7f78:	a6 1f       	adc	r26, r22
    7f7a:	b7 1f       	adc	r27, r23
    7f7c:	80 93 9d 02 	sts	0x029D, r24
    7f80:	90 93 9e 02 	sts	0x029E, r25
    7f84:	a0 93 9f 02 	sts	0x029F, r26
    7f88:	b0 93 a0 02 	sts	0x02A0, r27
    7f8c:	80 91 65 02 	lds	r24, 0x0265
    7f90:	90 91 66 02 	lds	r25, 0x0266
    7f94:	aa 27       	eor	r26, r26
    7f96:	97 fd       	sbrc	r25, 7
    7f98:	a0 95       	com	r26
    7f9a:	ba 2f       	mov	r27, r26
    7f9c:	40 91 a1 02 	lds	r20, 0x02A1
    7fa0:	50 91 a2 02 	lds	r21, 0x02A2
    7fa4:	60 91 a3 02 	lds	r22, 0x02A3
    7fa8:	70 91 a4 02 	lds	r23, 0x02A4
    7fac:	84 0f       	add	r24, r20
    7fae:	95 1f       	adc	r25, r21
    7fb0:	a6 1f       	adc	r26, r22
    7fb2:	b7 1f       	adc	r27, r23
    7fb4:	80 93 a1 02 	sts	0x02A1, r24
    7fb8:	90 93 a2 02 	sts	0x02A2, r25
    7fbc:	a0 93 a3 02 	sts	0x02A3, r26
    7fc0:	b0 93 a4 02 	sts	0x02A4, r27
    7fc4:	80 91 67 02 	lds	r24, 0x0267
    7fc8:	90 91 68 02 	lds	r25, 0x0268
    7fcc:	aa 27       	eor	r26, r26
    7fce:	97 fd       	sbrc	r25, 7
    7fd0:	a0 95       	com	r26
    7fd2:	ba 2f       	mov	r27, r26
    7fd4:	40 91 a5 02 	lds	r20, 0x02A5
    7fd8:	50 91 a6 02 	lds	r21, 0x02A6
    7fdc:	60 91 a7 02 	lds	r22, 0x02A7
    7fe0:	70 91 a8 02 	lds	r23, 0x02A8
    7fe4:	84 0f       	add	r24, r20
    7fe6:	95 1f       	adc	r25, r21
    7fe8:	a6 1f       	adc	r26, r22
    7fea:	b7 1f       	adc	r27, r23
    7fec:	80 93 a5 02 	sts	0x02A5, r24
    7ff0:	90 93 a6 02 	sts	0x02A6, r25
    7ff4:	a0 93 a7 02 	sts	0x02A7, r26
    7ff8:	b0 93 a8 02 	sts	0x02A8, r27
    7ffc:	80 91 69 02 	lds	r24, 0x0269
    8000:	90 91 6a 02 	lds	r25, 0x026A
    8004:	aa 27       	eor	r26, r26
    8006:	97 fd       	sbrc	r25, 7
    8008:	a0 95       	com	r26
    800a:	ba 2f       	mov	r27, r26
    800c:	40 91 a9 02 	lds	r20, 0x02A9
    8010:	50 91 aa 02 	lds	r21, 0x02AA
    8014:	60 91 ab 02 	lds	r22, 0x02AB
    8018:	70 91 ac 02 	lds	r23, 0x02AC
    801c:	84 0f       	add	r24, r20
    801e:	95 1f       	adc	r25, r21
    8020:	a6 1f       	adc	r26, r22
    8022:	b7 1f       	adc	r27, r23
    8024:	80 93 a9 02 	sts	0x02A9, r24
    8028:	90 93 aa 02 	sts	0x02AA, r25
    802c:	a0 93 ab 02 	sts	0x02AB, r26
    8030:	b0 93 ac 02 	sts	0x02AC, r27
    8034:	80 91 6b 02 	lds	r24, 0x026B
    8038:	90 91 6c 02 	lds	r25, 0x026C
    803c:	aa 27       	eor	r26, r26
    803e:	97 fd       	sbrc	r25, 7
    8040:	a0 95       	com	r26
    8042:	ba 2f       	mov	r27, r26
    8044:	40 91 ad 02 	lds	r20, 0x02AD
    8048:	50 91 ae 02 	lds	r21, 0x02AE
    804c:	60 91 af 02 	lds	r22, 0x02AF
    8050:	70 91 b0 02 	lds	r23, 0x02B0
    8054:	84 0f       	add	r24, r20
    8056:	95 1f       	adc	r25, r21
    8058:	a6 1f       	adc	r26, r22
    805a:	b7 1f       	adc	r27, r23
    805c:	80 93 ad 02 	sts	0x02AD, r24
    8060:	90 93 ae 02 	sts	0x02AE, r25
    8064:	a0 93 af 02 	sts	0x02AF, r26
    8068:	b0 93 b0 02 	sts	0x02B0, r27
    806c:	80 91 6d 02 	lds	r24, 0x026D
    8070:	90 91 6e 02 	lds	r25, 0x026E
    8074:	aa 27       	eor	r26, r26
    8076:	97 fd       	sbrc	r25, 7
    8078:	a0 95       	com	r26
    807a:	ba 2f       	mov	r27, r26
    807c:	40 91 b1 02 	lds	r20, 0x02B1
    8080:	50 91 b2 02 	lds	r21, 0x02B2
    8084:	60 91 b3 02 	lds	r22, 0x02B3
    8088:	70 91 b4 02 	lds	r23, 0x02B4
    808c:	84 0f       	add	r24, r20
    808e:	95 1f       	adc	r25, r21
    8090:	a6 1f       	adc	r26, r22
    8092:	b7 1f       	adc	r27, r23
    8094:	80 93 b1 02 	sts	0x02B1, r24
    8098:	90 93 b2 02 	sts	0x02B2, r25
    809c:	a0 93 b3 02 	sts	0x02B3, r26
    80a0:	b0 93 b4 02 	sts	0x02B4, r27
    80a4:	80 91 6f 02 	lds	r24, 0x026F
    80a8:	90 91 70 02 	lds	r25, 0x0270
    80ac:	aa 27       	eor	r26, r26
    80ae:	97 fd       	sbrc	r25, 7
    80b0:	a0 95       	com	r26
    80b2:	ba 2f       	mov	r27, r26
    80b4:	40 91 b5 02 	lds	r20, 0x02B5
    80b8:	50 91 b6 02 	lds	r21, 0x02B6
    80bc:	60 91 b7 02 	lds	r22, 0x02B7
    80c0:	70 91 b8 02 	lds	r23, 0x02B8
    80c4:	84 0f       	add	r24, r20
    80c6:	95 1f       	adc	r25, r21
    80c8:	a6 1f       	adc	r26, r22
    80ca:	b7 1f       	adc	r27, r23
    80cc:	80 93 b5 02 	sts	0x02B5, r24
    80d0:	90 93 b6 02 	sts	0x02B6, r25
    80d4:	a0 93 b7 02 	sts	0x02B7, r26
    80d8:	b0 93 b8 02 	sts	0x02B8, r27
				}

				accOffsetXSum += accX;
    80dc:	80 91 38 04 	lds	r24, 0x0438
    80e0:	90 91 39 04 	lds	r25, 0x0439
    80e4:	40 91 2c 04 	lds	r20, 0x042C
    80e8:	50 91 2d 04 	lds	r21, 0x042D
    80ec:	84 0f       	add	r24, r20
    80ee:	95 1f       	adc	r25, r21
    80f0:	90 93 39 04 	sts	0x0439, r25
    80f4:	80 93 38 04 	sts	0x0438, r24
				accOffsetYSum += accY;
    80f8:	80 91 3a 04 	lds	r24, 0x043A
    80fc:	90 91 3b 04 	lds	r25, 0x043B
    8100:	40 91 2e 04 	lds	r20, 0x042E
    8104:	50 91 2f 04 	lds	r21, 0x042F
    8108:	84 0f       	add	r24, r20
    810a:	95 1f       	adc	r25, r21
    810c:	90 93 3b 04 	sts	0x043B, r25
    8110:	80 93 3a 04 	sts	0x043A, r24
				accOffsetZSum += accZ;
    8114:	80 91 3c 04 	lds	r24, 0x043C
    8118:	90 91 3d 04 	lds	r25, 0x043D
    811c:	40 91 30 04 	lds	r20, 0x0430
    8120:	50 91 31 04 	lds	r21, 0x0431
    8124:	84 0f       	add	r24, r20
    8126:	95 1f       	adc	r25, r21
    8128:	90 93 3d 04 	sts	0x043D, r25
    812c:	80 93 3c 04 	sts	0x043C, r24

				calibrationCycle++;
    8130:	2f 5f       	subi	r18, 0xFF	; 255
    8132:	3f 4f       	sbci	r19, 0xFF	; 255
    8134:	30 93 4e 04 	sts	0x044E, r19
    8138:	20 93 4d 04 	sts	0x044D, r18
    813c:	80 91 5d 0b 	lds	r24, 0x0B5D
	updateBlueLed(pwm_blue);

	calibrationCycle = 0;
	startCalibration = 1;

	while(startCalibration) {
    8140:	88 23       	and	r24, r24
    8142:	09 f0       	breq	.+2      	; 0x8146 <calibrateSensors+0x5d6>
    8144:	31 cd       	rjmp	.-1438   	; 0x7ba8 <calibrateSensors+0x38>
    8146:	5b ce       	rjmp	.-842    	; 0x7dfe <calibrateSensors+0x28e>

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8148:	10 92 89 02 	sts	0x0289, r1
    814c:	10 92 8a 02 	sts	0x028A, r1
    8150:	10 92 8b 02 	sts	0x028B, r1
    8154:	10 92 8c 02 	sts	0x028C, r1
						proximityOffset[i] = 0;
    8158:	10 92 72 02 	sts	0x0272, r1
    815c:	10 92 71 02 	sts	0x0271, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8160:	10 92 8d 02 	sts	0x028D, r1
    8164:	10 92 8e 02 	sts	0x028E, r1
    8168:	10 92 8f 02 	sts	0x028F, r1
    816c:	10 92 90 02 	sts	0x0290, r1
						proximityOffset[i] = 0;
    8170:	10 92 74 02 	sts	0x0274, r1
    8174:	10 92 73 02 	sts	0x0273, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8178:	10 92 91 02 	sts	0x0291, r1
    817c:	10 92 92 02 	sts	0x0292, r1
    8180:	10 92 93 02 	sts	0x0293, r1
    8184:	10 92 94 02 	sts	0x0294, r1
						proximityOffset[i] = 0;
    8188:	10 92 76 02 	sts	0x0276, r1
    818c:	10 92 75 02 	sts	0x0275, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8190:	10 92 95 02 	sts	0x0295, r1
    8194:	10 92 96 02 	sts	0x0296, r1
    8198:	10 92 97 02 	sts	0x0297, r1
    819c:	10 92 98 02 	sts	0x0298, r1
						proximityOffset[i] = 0;
    81a0:	10 92 78 02 	sts	0x0278, r1
    81a4:	10 92 77 02 	sts	0x0277, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    81a8:	10 92 99 02 	sts	0x0299, r1
    81ac:	10 92 9a 02 	sts	0x029A, r1
    81b0:	10 92 9b 02 	sts	0x029B, r1
    81b4:	10 92 9c 02 	sts	0x029C, r1
						proximityOffset[i] = 0;
    81b8:	10 92 7a 02 	sts	0x027A, r1
    81bc:	10 92 79 02 	sts	0x0279, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    81c0:	10 92 9d 02 	sts	0x029D, r1
    81c4:	10 92 9e 02 	sts	0x029E, r1
    81c8:	10 92 9f 02 	sts	0x029F, r1
    81cc:	10 92 a0 02 	sts	0x02A0, r1
						proximityOffset[i] = 0;
    81d0:	10 92 7c 02 	sts	0x027C, r1
    81d4:	10 92 7b 02 	sts	0x027B, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    81d8:	10 92 a1 02 	sts	0x02A1, r1
    81dc:	10 92 a2 02 	sts	0x02A2, r1
    81e0:	10 92 a3 02 	sts	0x02A3, r1
    81e4:	10 92 a4 02 	sts	0x02A4, r1
						proximityOffset[i] = 0;
    81e8:	10 92 7e 02 	sts	0x027E, r1
    81ec:	10 92 7d 02 	sts	0x027D, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    81f0:	10 92 a5 02 	sts	0x02A5, r1
    81f4:	10 92 a6 02 	sts	0x02A6, r1
    81f8:	10 92 a7 02 	sts	0x02A7, r1
    81fc:	10 92 a8 02 	sts	0x02A8, r1
						proximityOffset[i] = 0;
    8200:	10 92 80 02 	sts	0x0280, r1
    8204:	10 92 7f 02 	sts	0x027F, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8208:	10 92 a9 02 	sts	0x02A9, r1
    820c:	10 92 aa 02 	sts	0x02AA, r1
    8210:	10 92 ab 02 	sts	0x02AB, r1
    8214:	10 92 ac 02 	sts	0x02AC, r1
						proximityOffset[i] = 0;
    8218:	10 92 82 02 	sts	0x0282, r1
    821c:	10 92 81 02 	sts	0x0281, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8220:	10 92 ad 02 	sts	0x02AD, r1
    8224:	10 92 ae 02 	sts	0x02AE, r1
    8228:	10 92 af 02 	sts	0x02AF, r1
    822c:	10 92 b0 02 	sts	0x02B0, r1
						proximityOffset[i] = 0;
    8230:	10 92 84 02 	sts	0x0284, r1
    8234:	10 92 83 02 	sts	0x0283, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8238:	10 92 b1 02 	sts	0x02B1, r1
    823c:	10 92 b2 02 	sts	0x02B2, r1
    8240:	10 92 b3 02 	sts	0x02B3, r1
    8244:	10 92 b4 02 	sts	0x02B4, r1
						proximityOffset[i] = 0;
    8248:	10 92 86 02 	sts	0x0286, r1
    824c:	10 92 85 02 	sts	0x0285, r1

				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8250:	10 92 b5 02 	sts	0x02B5, r1
    8254:	10 92 b6 02 	sts	0x02B6, r1
    8258:	10 92 b7 02 	sts	0x02B7, r1
    825c:	10 92 b8 02 	sts	0x02B8, r1
						proximityOffset[i] = 0;
    8260:	10 92 88 02 	sts	0x0288, r1
    8264:	10 92 87 02 	sts	0x0287, r1
					}
					accOffsetXSum = 0;
    8268:	10 92 39 04 	sts	0x0439, r1
    826c:	10 92 38 04 	sts	0x0438, r1
					accOffsetYSum = 0;
    8270:	10 92 3b 04 	sts	0x043B, r1
    8274:	10 92 3a 04 	sts	0x043A, r1
					accOffsetZSum = 0;
    8278:	10 92 3d 04 	sts	0x043D, r1
    827c:	10 92 3c 04 	sts	0x043C, r1

					calibrationCycle++;
    8280:	d0 93 4e 04 	sts	0x044E, r29
    8284:	c0 93 4d 04 	sts	0x044D, r28
    8288:	80 91 5d 0b 	lds	r24, 0x0B5D

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    828c:	59 cf       	rjmp	.-334    	; 0x8140 <calibrateSensors+0x5d0>

0000828e <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    828e:	80 91 2b 04 	lds	r24, 0x042B
    8292:	88 23       	and	r24, r24
    8294:	79 f0       	breq	.+30     	; 0x82b4 <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    8296:	81 30       	cpi	r24, 0x01	; 1
    8298:	11 f1       	breq	.+68     	; 0x82de <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    829a:	10 92 2d 04 	sts	0x042D, r1
    829e:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    82a2:	10 92 2f 04 	sts	0x042F, r1
    82a6:	10 92 2e 04 	sts	0x042E, r1
		accZ = 0;
    82aa:	10 92 31 04 	sts	0x0431, r1
    82ae:	10 92 30 04 	sts	0x0430, r1
    82b2:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    82b4:	80 91 14 02 	lds	r24, 0x0214
    82b8:	0e 94 ae 1b 	call	0x375c	; 0x375c <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    82bc:	80 e0       	ldi	r24, 0x00	; 0
    82be:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    82c2:	80 91 14 02 	lds	r24, 0x0214
    82c6:	8f 5f       	subi	r24, 0xFF	; 255
    82c8:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    82cc:	0e 94 3b 1c 	call	0x3876	; 0x3876 <i2c_readAck>
    82d0:	80 93 42 04 	sts	0x0442, r24
    82d4:	0e 94 3b 1c 	call	0x3876	; 0x3876 <i2c_readAck>
    82d8:	80 93 43 04 	sts	0x0443, r24
    82dc:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    82de:	80 91 14 02 	lds	r24, 0x0214
    82e2:	0e 94 ae 1b 	call	0x375c	; 0x375c <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    82e6:	82 e3       	ldi	r24, 0x32	; 50
    82e8:	0e 94 29 1c 	call	0x3852	; 0x3852 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    82ec:	80 91 14 02 	lds	r24, 0x0214
    82f0:	8f 5f       	subi	r24, 0xFF	; 255
    82f2:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    82f6:	0e 94 3b 1c 	call	0x3876	; 0x3876 <i2c_readAck>
    82fa:	80 93 42 04 	sts	0x0442, r24
    82fe:	0e 94 3b 1c 	call	0x3876	; 0x3876 <i2c_readAck>
    8302:	80 93 43 04 	sts	0x0443, r24
    8306:	0e 94 3b 1c 	call	0x3876	; 0x3876 <i2c_readAck>
    830a:	80 93 44 04 	sts	0x0444, r24
    830e:	08 95       	ret

00008310 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    8310:	80 91 2b 04 	lds	r24, 0x042B
    8314:	88 23       	and	r24, r24
    8316:	09 f0       	breq	.+2      	; 0x831a <readAccelXYZ_2+0xa>
    8318:	4e c0       	rjmp	.+156    	; 0x83b6 <readAccelXYZ_2+0xa6>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    831a:	0e 94 3b 1c 	call	0x3876	; 0x3876 <i2c_readAck>
    831e:	80 93 44 04 	sts	0x0444, r24
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8322:	0e 94 3b 1c 	call	0x3876	; 0x3876 <i2c_readAck>
    8326:	80 93 45 04 	sts	0x0445, r24
    832a:	0e 94 3b 1c 	call	0x3876	; 0x3876 <i2c_readAck>
    832e:	80 93 46 04 	sts	0x0446, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    8332:	0e 94 45 1c 	call	0x388a	; 0x388a <i2c_readNak>
    8336:	80 93 47 04 	sts	0x0447, r24
		i2c_stop();													// set stop conditon = release bus
    833a:	0e 94 21 1c 	call	0x3842	; 0x3842 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    833e:	80 91 5d 0b 	lds	r24, 0x0B5D
    8342:	88 23       	and	r24, r24
    8344:	09 f4       	brne	.+2      	; 0x8348 <readAccelXYZ_2+0x38>
    8346:	47 c0       	rjmp	.+142    	; 0x83d6 <readAccelXYZ_2+0xc6>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    8348:	80 91 43 04 	lds	r24, 0x0443
    834c:	99 27       	eor	r25, r25
    834e:	87 fd       	sbrc	r24, 7
    8350:	90 95       	com	r25
    8352:	98 2f       	mov	r25, r24
    8354:	88 27       	eor	r24, r24
    8356:	20 91 42 04 	lds	r18, 0x0442
    835a:	33 27       	eor	r19, r19
    835c:	27 fd       	sbrc	r18, 7
    835e:	30 95       	com	r19
    8360:	82 2b       	or	r24, r18
    8362:	93 2b       	or	r25, r19
    8364:	90 93 2d 04 	sts	0x042D, r25
    8368:	80 93 2c 04 	sts	0x042C, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    836c:	80 91 45 04 	lds	r24, 0x0445
    8370:	99 27       	eor	r25, r25
    8372:	87 fd       	sbrc	r24, 7
    8374:	90 95       	com	r25
    8376:	98 2f       	mov	r25, r24
    8378:	88 27       	eor	r24, r24
    837a:	20 91 44 04 	lds	r18, 0x0444
    837e:	33 27       	eor	r19, r19
    8380:	27 fd       	sbrc	r18, 7
    8382:	30 95       	com	r19
    8384:	82 2b       	or	r24, r18
    8386:	93 2b       	or	r25, r19
    8388:	90 93 2f 04 	sts	0x042F, r25
    838c:	80 93 2e 04 	sts	0x042E, r24
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
    8390:	80 91 47 04 	lds	r24, 0x0447
    8394:	99 27       	eor	r25, r25
    8396:	87 fd       	sbrc	r24, 7
    8398:	90 95       	com	r25
    839a:	98 2f       	mov	r25, r24
    839c:	88 27       	eor	r24, r24
    839e:	20 91 46 04 	lds	r18, 0x0446
    83a2:	33 27       	eor	r19, r19
    83a4:	27 fd       	sbrc	r18, 7
    83a6:	30 95       	com	r19
    83a8:	82 2b       	or	r24, r18
    83aa:	93 2b       	or	r25, r19
    83ac:	90 93 31 04 	sts	0x0431, r25
    83b0:	80 93 30 04 	sts	0x0430, r24
    83b4:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    83b6:	81 30       	cpi	r24, 0x01	; 1
    83b8:	09 f4       	brne	.+2      	; 0x83bc <readAccelXYZ_2+0xac>
    83ba:	b3 cf       	rjmp	.-154    	; 0x8322 <readAccelXYZ_2+0x12>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
		}

	} else {

		accX = 0;
    83bc:	10 92 2d 04 	sts	0x042D, r1
    83c0:	10 92 2c 04 	sts	0x042C, r1
		accY = 0;
    83c4:	10 92 2f 04 	sts	0x042F, r1
    83c8:	10 92 2e 04 	sts	0x042E, r1
		accZ = 0;
    83cc:	10 92 31 04 	sts	0x0431, r1
    83d0:	10 92 30 04 	sts	0x0430, r1
    83d4:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    83d6:	80 91 43 04 	lds	r24, 0x0443
    83da:	99 27       	eor	r25, r25
    83dc:	87 fd       	sbrc	r24, 7
    83de:	90 95       	com	r25
    83e0:	98 2f       	mov	r25, r24
    83e2:	88 27       	eor	r24, r24
    83e4:	20 91 42 04 	lds	r18, 0x0442
    83e8:	33 27       	eor	r19, r19
    83ea:	27 fd       	sbrc	r18, 7
    83ec:	30 95       	com	r19
    83ee:	82 2b       	or	r24, r18
    83f0:	93 2b       	or	r25, r19
    83f2:	20 91 32 04 	lds	r18, 0x0432
    83f6:	30 91 33 04 	lds	r19, 0x0433
    83fa:	82 1b       	sub	r24, r18
    83fc:	93 0b       	sbc	r25, r19
    83fe:	90 93 2d 04 	sts	0x042D, r25
    8402:	80 93 2c 04 	sts	0x042C, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    8406:	80 91 45 04 	lds	r24, 0x0445
    840a:	99 27       	eor	r25, r25
    840c:	87 fd       	sbrc	r24, 7
    840e:	90 95       	com	r25
    8410:	98 2f       	mov	r25, r24
    8412:	88 27       	eor	r24, r24
    8414:	20 91 44 04 	lds	r18, 0x0444
    8418:	33 27       	eor	r19, r19
    841a:	27 fd       	sbrc	r18, 7
    841c:	30 95       	com	r19
    841e:	82 2b       	or	r24, r18
    8420:	93 2b       	or	r25, r19
    8422:	20 91 34 04 	lds	r18, 0x0434
    8426:	30 91 35 04 	lds	r19, 0x0435
    842a:	82 1b       	sub	r24, r18
    842c:	93 0b       	sbc	r25, r19
    842e:	90 93 2f 04 	sts	0x042F, r25
    8432:	80 93 2e 04 	sts	0x042E, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4])-accOffsetZ;	// Z axis
    8436:	80 91 47 04 	lds	r24, 0x0447
    843a:	99 27       	eor	r25, r25
    843c:	87 fd       	sbrc	r24, 7
    843e:	90 95       	com	r25
    8440:	98 2f       	mov	r25, r24
    8442:	88 27       	eor	r24, r24
    8444:	20 91 46 04 	lds	r18, 0x0446
    8448:	33 27       	eor	r19, r19
    844a:	27 fd       	sbrc	r18, 7
    844c:	30 95       	com	r19
    844e:	82 2b       	or	r24, r18
    8450:	93 2b       	or	r25, r19
    8452:	20 91 36 04 	lds	r18, 0x0436
    8456:	30 91 37 04 	lds	r19, 0x0437
    845a:	82 1b       	sub	r24, r18
    845c:	93 0b       	sbc	r25, r19
    845e:	90 93 31 04 	sts	0x0431, r25
    8462:	80 93 30 04 	sts	0x0430, r24
    8466:	08 95       	ret

00008468 <computeAngle>:

	}

}

void computeAngle() {
    8468:	ef 92       	push	r14
    846a:	ff 92       	push	r15
    846c:	0f 93       	push	r16
    846e:	1f 93       	push	r17

	unsigned int abs_acc_z=abs(accZ);
    8470:	80 91 30 04 	lds	r24, 0x0430
    8474:	90 91 31 04 	lds	r25, 0x0431
    8478:	97 fd       	sbrc	r25, 7
    847a:	6c c0       	rjmp	.+216    	; 0x8554 <computeAngle+0xec>

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
    847c:	85 31       	cpi	r24, 0x15	; 21
    847e:	91 05       	cpc	r25, r1
    8480:	08 f0       	brcs	.+2      	; 0x8484 <computeAngle+0x1c>
    8482:	54 c0       	rjmp	.+168    	; 0x852c <computeAngle+0xc4>
		currPosition = HORIZONTAL_POS;
    8484:	81 e0       	ldi	r24, 0x01	; 1
    8486:	80 93 15 02 	sts	0x0215, r24
    848a:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    848c:	80 91 16 02 	lds	r24, 0x0216
    8490:	82 17       	cp	r24, r18
    8492:	09 f4       	brne	.+2      	; 0x8496 <computeAngle+0x2e>
    8494:	53 c0       	rjmp	.+166    	; 0x853c <computeAngle+0xd4>
		timesInSamePos++;
    8496:	80 91 40 04 	lds	r24, 0x0440
    849a:	90 91 41 04 	lds	r25, 0x0441
    849e:	01 96       	adiw	r24, 0x01	; 1
    84a0:	90 93 41 04 	sts	0x0441, r25
    84a4:	80 93 40 04 	sts	0x0440, r24
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    84a8:	88 3c       	cpi	r24, 0xC8	; 200
    84aa:	91 05       	cpc	r25, r1
    84ac:	08 f0       	brcs	.+2      	; 0x84b0 <computeAngle+0x48>
    84ae:	4b c0       	rjmp	.+150    	; 0x8546 <computeAngle+0xde>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    84b0:	60 91 2c 04 	lds	r22, 0x042C
    84b4:	70 91 2d 04 	lds	r23, 0x042D
    84b8:	88 27       	eor	r24, r24
    84ba:	77 fd       	sbrc	r23, 7
    84bc:	80 95       	com	r24
    84be:	98 2f       	mov	r25, r24
    84c0:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    84c4:	7b 01       	movw	r14, r22
    84c6:	8c 01       	movw	r16, r24
    84c8:	60 91 2e 04 	lds	r22, 0x042E
    84cc:	70 91 2f 04 	lds	r23, 0x042F
    84d0:	88 27       	eor	r24, r24
    84d2:	77 fd       	sbrc	r23, 7
    84d4:	80 95       	com	r24
    84d6:	98 2f       	mov	r25, r24
    84d8:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <__floatsisf>
    84dc:	9b 01       	movw	r18, r22
    84de:	ac 01       	movw	r20, r24
    84e0:	c8 01       	movw	r24, r16
    84e2:	b7 01       	movw	r22, r14
    84e4:	0e 94 0a 4f 	call	0x9e14	; 0x9e14 <atan2>
    84e8:	60 93 a4 04 	sts	0x04A4, r22
    84ec:	70 93 a5 04 	sts	0x04A5, r23
    84f0:	80 93 a6 04 	sts	0x04A6, r24
    84f4:	90 93 a7 04 	sts	0x04A7, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    84f8:	21 ee       	ldi	r18, 0xE1	; 225
    84fa:	3e e2       	ldi	r19, 0x2E	; 46
    84fc:	45 e6       	ldi	r20, 0x65	; 101
    84fe:	52 e4       	ldi	r21, 0x42	; 66
    8500:	0e 94 14 51 	call	0xa228	; 0xa228 <__mulsf3>
    8504:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <__fixsfsi>
    8508:	9b 01       	movw	r18, r22
    850a:	70 93 3f 04 	sts	0x043F, r23
    850e:	60 93 3e 04 	sts	0x043E, r22

	if(currentAngle < 0) {
    8512:	77 ff       	sbrs	r23, 7
    8514:	06 c0       	rjmp	.+12     	; 0x8522 <computeAngle+0xba>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    8516:	28 59       	subi	r18, 0x98	; 152
    8518:	3e 4f       	sbci	r19, 0xFE	; 254
    851a:	30 93 3f 04 	sts	0x043F, r19
    851e:	20 93 3e 04 	sts	0x043E, r18
	}

}
    8522:	1f 91       	pop	r17
    8524:	0f 91       	pop	r16
    8526:	ff 90       	pop	r15
    8528:	ef 90       	pop	r14
    852a:	08 95       	ret
	// this check (threshold) works only if the accelerometer is calibrated
	// leaving the robot flat on the ground
	if(abs_acc_z <= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    852c:	10 92 15 02 	sts	0x0215, r1
    8530:	20 e0       	ldi	r18, 0x00	; 0
	}
	if(currPosition != robotPosition) {			
    8532:	80 91 16 02 	lds	r24, 0x0216
    8536:	82 17       	cp	r24, r18
    8538:	09 f0       	breq	.+2      	; 0x853c <computeAngle+0xd4>
    853a:	ad cf       	rjmp	.-166    	; 0x8496 <computeAngle+0x2e>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    853c:	10 92 41 04 	sts	0x0441, r1
    8540:	10 92 40 04 	sts	0x0440, r1
    8544:	b5 cf       	rjmp	.-150    	; 0x84b0 <computeAngle+0x48>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    8546:	10 92 41 04 	sts	0x0441, r1
    854a:	10 92 40 04 	sts	0x0440, r1
			robotPosition = currPosition;
    854e:	20 93 16 02 	sts	0x0216, r18
    8552:	ae cf       	rjmp	.-164    	; 0x84b0 <computeAngle+0x48>

}

void computeAngle() {

	unsigned int abs_acc_z=abs(accZ);
    8554:	90 95       	com	r25
    8556:	81 95       	neg	r24
    8558:	9f 4f       	sbci	r25, 0xFF	; 255
    855a:	90 cf       	rjmp	.-224    	; 0x847c <computeAngle+0x14>

0000855c <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    855c:	83 ec       	ldi	r24, 0xC3	; 195
    855e:	98 e0       	ldi	r25, 0x08	; 8
    8560:	6c e6       	ldi	r22, 0x6C	; 108
    8562:	7f e0       	ldi	r23, 0x0F	; 15
    8564:	40 e9       	ldi	r20, 0x90	; 144
    8566:	50 e0       	ldi	r21, 0x00	; 0
    8568:	0e 94 a5 52 	call	0xa54a	; 0xa54a <__eeupd_block_m2560>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    856c:	8a e6       	ldi	r24, 0x6A	; 106
    856e:	9f e0       	ldi	r25, 0x0F	; 15
    8570:	65 e5       	ldi	r22, 0x55	; 85
    8572:	7a ea       	ldi	r23, 0xAA	; 170
    8574:	0e 94 c7 52 	call	0xa58e	; 0xa58e <__eeupd_word_m2560>
}
    8578:	08 95       	ret

0000857a <readCalibrationFromFlash>:

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    857a:	83 ec       	ldi	r24, 0xC3	; 195
    857c:	98 e0       	ldi	r25, 0x08	; 8
    857e:	6c e6       	ldi	r22, 0x6C	; 108
    8580:	7f e0       	ldi	r23, 0x0F	; 15
    8582:	40 e9       	ldi	r20, 0x90	; 144
    8584:	50 e0       	ldi	r21, 0x00	; 0
    8586:	0e 94 87 52 	call	0xa50e	; 0xa50e <__eerd_block_m2560>
}
    858a:	08 95       	ret

0000858c <irCommInit>:
#include "irCommunication.h"

void irCommInit(unsigned char mode) {
    858c:	1f 93       	push	r17
    858e:	18 2f       	mov	r17, r24
	if(mode==IRCOMM_MODE_RECEIVE) {
    8590:	81 30       	cpi	r24, 0x01	; 1
    8592:	81 f0       	breq	.+32     	; 0x85b4 <irCommInit+0x28>
		irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
		memset(irCommMaxSensorValueAdc, 0x00, 16);
		memset(irCommMinSensorValueAdc, 0xFF, 16);
		irCommEnabled = IRCOMM_MODE_RECEIVE;
		irCommState = IRCOMM_RX_IDLE_STATE;
	} else if(mode==IRCOMM_MODE_TRANSMIT) {
    8594:	82 30       	cpi	r24, 0x02	; 2
    8596:	39 f0       	breq	.+14     	; 0x85a6 <irCommInit+0x1a>
		irCommEnabled = IRCOMM_MODE_TRANSMIT;
		irCommState = IRCOMM_TX_IDLE_STATE;
	} else if(mode==IRCOMM_MODE_RECEIVE_ONLY) {
    8598:	83 30       	cpi	r24, 0x03	; 3
    859a:	09 f4       	brne	.+2      	; 0x859e <irCommInit+0x12>
    859c:	40 c0       	rjmp	.+128    	; 0x861e <irCommInit+0x92>
		irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
		memset(irCommMaxSensorValueAdc, 0x00, 16);
		memset(irCommMinSensorValueAdc, 0xFF, 16);
		irCommEnabled = IRCOMM_MODE_RECEIVE_ONLY;
		irCommState = IRCOMM_RX_IDLE_STATE;
	} else if(mode==IRCOMM_MODE_TRANSMIT_ONLY) {
    859e:	84 30       	cpi	r24, 0x04	; 4
    85a0:	11 f0       	breq	.+4      	; 0x85a6 <irCommInit+0x1a>
		irCommEnabled = IRCOMM_MODE_TRANSMIT_ONLY;
		irCommState = IRCOMM_TX_IDLE_STATE;
	}
}
    85a2:	1f 91       	pop	r17
    85a4:	08 95       	ret
		memset(irCommMaxSensorValueAdc, 0x00, 16);
		memset(irCommMinSensorValueAdc, 0xFF, 16);
		irCommEnabled = IRCOMM_MODE_RECEIVE_ONLY;
		irCommState = IRCOMM_RX_IDLE_STATE;
	} else if(mode==IRCOMM_MODE_TRANSMIT_ONLY) {
		irCommEnabled = IRCOMM_MODE_TRANSMIT_ONLY;
    85a6:	10 93 c4 04 	sts	0x04C4, r17
		irCommState = IRCOMM_TX_IDLE_STATE;
    85aa:	81 e0       	ldi	r24, 0x01	; 1
    85ac:	80 93 c6 04 	sts	0x04C6, r24
	}
}
    85b0:	1f 91       	pop	r17
    85b2:	08 95       	ret
#include "irCommunication.h"

void irCommInit(unsigned char mode) {
	if(mode==IRCOMM_MODE_RECEIVE) {
		irCommProxValuesAdc = irCommProxValuesBuff1;
    85b4:	8a ea       	ldi	r24, 0xAA	; 170
    85b6:	95 e0       	ldi	r25, 0x05	; 5
    85b8:	90 93 4b 08 	sts	0x084B, r25
    85bc:	80 93 4a 08 	sts	0x084A, r24
		irCommProxValuesCurr = irCommProxValuesBuff2;
    85c0:	8c ee       	ldi	r24, 0xEC	; 236
    85c2:	96 e0       	ldi	r25, 0x06	; 6
    85c4:	90 93 2d 08 	sts	0x082D, r25
    85c8:	80 93 2c 08 	sts	0x082C, r24
		irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
    85cc:	e9 e5       	ldi	r30, 0x59	; 89
    85ce:	f9 e0       	ldi	r31, 0x09	; 9
    85d0:	f0 93 19 0b 	sts	0x0B19, r31
    85d4:	e0 93 18 0b 	sts	0x0B18, r30
		irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
    85d8:	87 e4       	ldi	r24, 0x47	; 71
    85da:	9b e0       	ldi	r25, 0x0B	; 11
    85dc:	90 93 2a 05 	sts	0x052A, r25
    85e0:	80 93 29 05 	sts	0x0529, r24
		irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
    85e4:	2e e2       	ldi	r18, 0x2E	; 46
    85e6:	38 e0       	ldi	r19, 0x08	; 8
    85e8:	30 93 a7 05 	sts	0x05A7, r19
    85ec:	20 93 a6 05 	sts	0x05A6, r18
		irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
    85f0:	83 eb       	ldi	r24, 0xB3	; 179
    85f2:	98 e0       	ldi	r25, 0x08	; 8
    85f4:	90 93 16 05 	sts	0x0516, r25
    85f8:	80 93 15 05 	sts	0x0515, r24
		memset(irCommMaxSensorValueAdc, 0x00, 16);
    85fc:	80 e1       	ldi	r24, 0x10	; 16
    85fe:	df 01       	movw	r26, r30
    8600:	1d 92       	st	X+, r1
    8602:	8a 95       	dec	r24
    8604:	e9 f7       	brne	.-6      	; 0x8600 <irCommInit+0x74>
		memset(irCommMinSensorValueAdc, 0xFF, 16);
    8606:	c9 01       	movw	r24, r18
    8608:	6f ef       	ldi	r22, 0xFF	; 255
    860a:	70 e0       	ldi	r23, 0x00	; 0
    860c:	40 e1       	ldi	r20, 0x10	; 16
    860e:	50 e0       	ldi	r21, 0x00	; 0
    8610:	0e 94 80 52 	call	0xa500	; 0xa500 <memset>
		irCommEnabled = IRCOMM_MODE_RECEIVE;
    8614:	10 93 c4 04 	sts	0x04C4, r17
		irCommState = IRCOMM_RX_IDLE_STATE;
    8618:	10 93 c6 04 	sts	0x04C6, r17
    861c:	c2 cf       	rjmp	.-124    	; 0x85a2 <irCommInit+0x16>
	} else if(mode==IRCOMM_MODE_TRANSMIT) {
		irCommEnabled = IRCOMM_MODE_TRANSMIT;
		irCommState = IRCOMM_TX_IDLE_STATE;
	} else if(mode==IRCOMM_MODE_RECEIVE_ONLY) {
		irCommProxValuesAdc = irCommProxValuesBuff1;
    861e:	8a ea       	ldi	r24, 0xAA	; 170
    8620:	95 e0       	ldi	r25, 0x05	; 5
    8622:	90 93 4b 08 	sts	0x084B, r25
    8626:	80 93 4a 08 	sts	0x084A, r24
		irCommProxValuesCurr = irCommProxValuesBuff2;
    862a:	8c ee       	ldi	r24, 0xEC	; 236
    862c:	96 e0       	ldi	r25, 0x06	; 6
    862e:	90 93 2d 08 	sts	0x082D, r25
    8632:	80 93 2c 08 	sts	0x082C, r24
		irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
    8636:	e9 e5       	ldi	r30, 0x59	; 89
    8638:	f9 e0       	ldi	r31, 0x09	; 9
    863a:	f0 93 19 0b 	sts	0x0B19, r31
    863e:	e0 93 18 0b 	sts	0x0B18, r30
		irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
    8642:	87 e4       	ldi	r24, 0x47	; 71
    8644:	9b e0       	ldi	r25, 0x0B	; 11
    8646:	90 93 2a 05 	sts	0x052A, r25
    864a:	80 93 29 05 	sts	0x0529, r24
		irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
    864e:	2e e2       	ldi	r18, 0x2E	; 46
    8650:	38 e0       	ldi	r19, 0x08	; 8
    8652:	30 93 a7 05 	sts	0x05A7, r19
    8656:	20 93 a6 05 	sts	0x05A6, r18
		irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
    865a:	83 eb       	ldi	r24, 0xB3	; 179
    865c:	98 e0       	ldi	r25, 0x08	; 8
    865e:	90 93 16 05 	sts	0x0516, r25
    8662:	80 93 15 05 	sts	0x0515, r24
		memset(irCommMaxSensorValueAdc, 0x00, 16);
    8666:	80 e1       	ldi	r24, 0x10	; 16
    8668:	df 01       	movw	r26, r30
    866a:	1d 92       	st	X+, r1
    866c:	8a 95       	dec	r24
    866e:	e9 f7       	brne	.-6      	; 0x866a <irCommInit+0xde>
		memset(irCommMinSensorValueAdc, 0xFF, 16);
    8670:	c9 01       	movw	r24, r18
    8672:	6f ef       	ldi	r22, 0xFF	; 255
    8674:	70 e0       	ldi	r23, 0x00	; 0
    8676:	40 e1       	ldi	r20, 0x10	; 16
    8678:	50 e0       	ldi	r21, 0x00	; 0
    867a:	0e 94 80 52 	call	0xa500	; 0xa500 <memset>
		irCommEnabled = IRCOMM_MODE_RECEIVE_ONLY;
    867e:	10 93 c4 04 	sts	0x04C4, r17
		irCommState = IRCOMM_RX_IDLE_STATE;
    8682:	81 e0       	ldi	r24, 0x01	; 1
    8684:	80 93 c6 04 	sts	0x04C6, r24
    8688:	8c cf       	rjmp	.-232    	; 0x85a2 <irCommInit+0x16>

0000868a <irCommDeinit>:
		irCommState = IRCOMM_TX_IDLE_STATE;
	}
}

void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
    868a:	10 92 c4 04 	sts	0x04C4, r1
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
    868e:	10 92 c5 04 	sts	0x04C5, r1
}
    8692:	08 95       	ret

00008694 <resetDebugVariables>:

void resetDebugVariables() {
    8694:	ef 92       	push	r14
    8696:	ff 92       	push	r15
    8698:	0f 93       	push	r16
    869a:	1f 93       	push	r17
    869c:	cf 93       	push	r28
    869e:	df 93       	push	r29
	irCommRxMaxSensorIndexTemp=0;
    86a0:	10 92 d5 04 	sts	0x04D5, r1
	irCommRxMaxDiffIndexTemp=0;
    86a4:	10 92 d6 04 	sts	0x04D6, r1
	irCommMaxSensorValueCurrIndexTemp=0;
    86a8:	10 92 d9 04 	sts	0x04D9, r1
	irCommMinSensorValueCurrIndexTemp=0;
    86ac:	10 92 da 04 	sts	0x04DA, r1
	memset(irCommRxMaxSensorTemp, 0xFF, 4);
    86b0:	ee 24       	eor	r14, r14
    86b2:	ea 94       	dec	r14
    86b4:	fe 2c       	mov	r15, r14
    86b6:	87 01       	movw	r16, r14
    86b8:	e0 92 0a 0b 	sts	0x0B0A, r14
    86bc:	f0 92 0b 0b 	sts	0x0B0B, r15
    86c0:	00 93 0c 0b 	sts	0x0B0C, r16
    86c4:	10 93 0d 0b 	sts	0x0B0D, r17
	memset(irCommRxMaxDiffTemp, 0xFF, 4);
    86c8:	e0 92 43 0b 	sts	0x0B43, r14
    86cc:	f0 92 44 0b 	sts	0x0B44, r15
    86d0:	00 93 45 0b 	sts	0x0B45, r16
    86d4:	10 93 46 0b 	sts	0x0B46, r17
	memset(irCommMaxSensorValueCurrTemp, 0xFF, 4);
    86d8:	e0 92 17 05 	sts	0x0517, r14
    86dc:	f0 92 18 05 	sts	0x0518, r15
    86e0:	00 93 19 05 	sts	0x0519, r16
    86e4:	10 93 1a 05 	sts	0x051A, r17
	memset(irCommMinSensorValueCurrTemp, 0xFF, 4);
    86e8:	e0 92 0e 0b 	sts	0x0B0E, r14
    86ec:	f0 92 0f 0b 	sts	0x0B0F, r15
    86f0:	00 93 10 0b 	sts	0x0B10, r16
    86f4:	10 93 11 0b 	sts	0x0B11, r17

	irCommStateIndexTemp = 0;					
    86f8:	10 92 e2 04 	sts	0x04E2, r1
	memset(irCommStateTemp, 0xFF, 14);
    86fc:	8b e1       	ldi	r24, 0x1B	; 27
    86fe:	95 e0       	ldi	r25, 0x05	; 5
    8700:	6f ef       	ldi	r22, 0xFF	; 255
    8702:	70 e0       	ldi	r23, 0x00	; 0
    8704:	4e e0       	ldi	r20, 0x0E	; 14
    8706:	50 e0       	ldi	r21, 0x00	; 0
    8708:	0e 94 80 52 	call	0xa500	; 0xa500 <memset>

	irCommShiftCountFinalIndexTemp = 0;
    870c:	10 92 dc 04 	sts	0x04DC, r1
	memset(irCommShiftCountFinalTemp, 0xFF, 2);
    8710:	cf ef       	ldi	r28, 0xFF	; 255
    8712:	df ef       	ldi	r29, 0xFF	; 255
    8714:	d0 93 17 0b 	sts	0x0B17, r29
    8718:	c0 93 16 0b 	sts	0x0B16, r28
	irCommRxStartBitDetectedIndexTemp = 0;
    871c:	10 92 e1 04 	sts	0x04E1, r1
	memset(irCommRxStartBitDetectedTemp, 0xFF, 2);
    8720:	d0 93 55 05 	sts	0x0555, r29
    8724:	c0 93 54 05 	sts	0x0554, r28
	irCommSwitchCountIndexTemp = 0;
    8728:	10 92 d8 04 	sts	0x04D8, r1
	memset(irCommSwitchCountTemp, 0xFF, 2);
    872c:	d0 93 31 05 	sts	0x0531, r29
    8730:	c0 93 30 05 	sts	0x0530, r28
	irCommMaxSensorSignalFiltIndexTemp = 0;
    8734:	10 92 d4 04 	sts	0x04D4, r1
	memset(irCommMaxSensorSignalFiltTemp, 0xFF, 80);
    8738:	86 e5       	ldi	r24, 0x56	; 86
    873a:	95 e0       	ldi	r25, 0x05	; 5
    873c:	6f ef       	ldi	r22, 0xFF	; 255
    873e:	70 e0       	ldi	r23, 0x00	; 0
    8740:	40 e5       	ldi	r20, 0x50	; 80
    8742:	50 e0       	ldi	r21, 0x00	; 0
    8744:	0e 94 80 52 	call	0xa500	; 0xa500 <memset>
	irCommMaxSensorSignalIndexTemp = 0;
    8748:	10 92 d3 04 	sts	0x04D3, r1
	memset(irCommMaxSensorSignalTemp, 0xFF, 80);
    874c:	8c e4       	ldi	r24, 0x4C	; 76
    874e:	98 e0       	ldi	r25, 0x08	; 8
    8750:	6f ef       	ldi	r22, 0xFF	; 255
    8752:	70 e0       	ldi	r23, 0x00	; 0
    8754:	40 e5       	ldi	r20, 0x50	; 80
    8756:	50 e0       	ldi	r21, 0x00	; 0
    8758:	0e 94 80 52 	call	0xa500	; 0xa500 <memset>
	irCommProxMeanIndexTemp = 0;
    875c:	10 92 d7 04 	sts	0x04D7, r1
	memset(irCommProxMeanTemp, 0xFF, 4);
    8760:	e0 92 4e 05 	sts	0x054E, r14
    8764:	f0 92 4f 05 	sts	0x054F, r15
    8768:	00 93 50 05 	sts	0x0550, r16
    876c:	10 93 51 05 	sts	0x0551, r17
	irCommComputeShiftIndexTemp = 0;
    8770:	10 92 de 04 	sts	0x04DE, r1
	memset(irCommComputeShiftTemp, 0xFF, 2);
    8774:	d0 93 4c 05 	sts	0x054C, r29
    8778:	c0 93 4b 05 	sts	0x054B, r28
	irCommShiftCountIndexTemp = 0;
    877c:	10 92 db 04 	sts	0x04DB, r1
	memset(irCommShiftCountTemp, 0xFF, 2);
    8780:	d0 93 5f 0b 	sts	0x0B5F, r29
    8784:	c0 93 5e 0b 	sts	0x0B5E, r28
	irCommRxPeakHighToLowIndexTemp = 0;
    8788:	10 92 df 04 	sts	0x04DF, r1
	memset(irCommRxPeakHighToLowTemp, 0xFF, 2);
    878c:	d0 93 a9 05 	sts	0x05A9, r29
    8790:	c0 93 a8 05 	sts	0x05A8, r28
	irCommRxStartPeakDurationIndexTemp = 0;
    8794:	10 92 e0 04 	sts	0x04E0, r1
	memset(irCommRxStartPeakDurationTemp, 0xFF, 2);
    8798:	d0 93 eb 06 	sts	0x06EB, r29
    879c:	c0 93 ea 06 	sts	0x06EA, r28
	irCommStartDiffIndexTemp = 0;
    87a0:	10 92 dd 04 	sts	0x04DD, r1
	memset(irCommSyncStateTemp, 0xFF, 2);
    87a4:	d0 93 4a 05 	sts	0x054A, r29
    87a8:	c0 93 49 05 	sts	0x0549, r28
	irCommSyncStateIndexTemp = 0;
    87ac:	10 92 e3 04 	sts	0x04E3, r1
	memset(irCommBitsSignalTemp, 0xFF, 400);
    87b0:	88 e7       	ldi	r24, 0x78	; 120
    87b2:	99 e0       	ldi	r25, 0x09	; 9
    87b4:	6f ef       	ldi	r22, 0xFF	; 255
    87b6:	70 e0       	ldi	r23, 0x00	; 0
    87b8:	40 e9       	ldi	r20, 0x90	; 144
    87ba:	51 e0       	ldi	r21, 0x01	; 1
    87bc:	0e 94 80 52 	call	0xa500	; 0xa500 <memset>
	irCommBitsSignalIndexTemp = 0;
    87c0:	10 92 e4 04 	sts	0x04E4, r1
	memset(irCommRxBitReceivedTemp, 0xFF, 10);
    87c4:	8e e3       	ldi	r24, 0x3E	; 62
    87c6:	98 e0       	ldi	r25, 0x08	; 8
    87c8:	6f ef       	ldi	r22, 0xFF	; 255
    87ca:	70 e0       	ldi	r23, 0x00	; 0
    87cc:	4a e0       	ldi	r20, 0x0A	; 10
    87ce:	50 e0       	ldi	r21, 0x00	; 0
    87d0:	0e 94 80 52 	call	0xa500	; 0xa500 <memset>
	irCommRxBitReceivedIndexTemp = 0;
    87d4:	10 92 e5 04 	sts	0x04E5, r1
	
	
}
    87d8:	df 91       	pop	r29
    87da:	cf 91       	pop	r28
    87dc:	1f 91       	pop	r17
    87de:	0f 91       	pop	r16
    87e0:	ff 90       	pop	r15
    87e2:	ef 90       	pop	r14
    87e4:	08 95       	ret

000087e6 <irCommTasks>:

void irCommTasks() {
    87e6:	4f 92       	push	r4
    87e8:	5f 92       	push	r5
    87ea:	6f 92       	push	r6
    87ec:	7f 92       	push	r7
    87ee:	8f 92       	push	r8
    87f0:	9f 92       	push	r9
    87f2:	af 92       	push	r10
    87f4:	bf 92       	push	r11
    87f6:	cf 92       	push	r12
    87f8:	df 92       	push	r13
    87fa:	ef 92       	push	r14
    87fc:	ff 92       	push	r15
    87fe:	0f 93       	push	r16
    8800:	1f 93       	push	r17
    8802:	df 93       	push	r29
    8804:	cf 93       	push	r28
    8806:	0f 92       	push	r0
    8808:	0f 92       	push	r0
    880a:	cd b7       	in	r28, 0x3d	; 61
    880c:	de b7       	in	r29, 0x3e	; 62
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {
    880e:	00 91 c5 04 	lds	r16, 0x04C5
    8812:	01 30       	cpi	r16, 0x01	; 1
    8814:	09 f4       	brne	.+2      	; 0x8818 <irCommTasks+0x32>
    8816:	e4 c0       	rjmp	.+456    	; 0x89e0 <irCommTasks+0x1fa>
			case IRCOMM_RX_STOP:
				break;
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {
    8818:	02 30       	cpi	r16, 0x02	; 2
    881a:	99 f0       	breq	.+38     	; 0x8842 <irCommTasks+0x5c>

		}

	}

}
    881c:	0f 90       	pop	r0
    881e:	0f 90       	pop	r0
    8820:	cf 91       	pop	r28
    8822:	df 91       	pop	r29
    8824:	1f 91       	pop	r17
    8826:	0f 91       	pop	r16
    8828:	ff 90       	pop	r15
    882a:	ef 90       	pop	r14
    882c:	df 90       	pop	r13
    882e:	cf 90       	pop	r12
    8830:	bf 90       	pop	r11
    8832:	af 90       	pop	r10
    8834:	9f 90       	pop	r9
    8836:	8f 90       	pop	r8
    8838:	7f 90       	pop	r7
    883a:	6f 90       	pop	r6
    883c:	5f 90       	pop	r5
    883e:	4f 90       	pop	r4
    8840:	08 95       	ret
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {

		switch(irCommState) {
    8842:	80 91 c6 04 	lds	r24, 0x04C6
    8846:	82 30       	cpi	r24, 0x02	; 2
    8848:	09 f4       	brne	.+2      	; 0x884c <irCommTasks+0x66>
    884a:	5f c1       	rjmp	.+702    	; 0x8b0a <irCommTasks+0x324>
    884c:	85 30       	cpi	r24, 0x05	; 5
    884e:	31 f7       	brne	.-52     	; 0x881c <irCommTasks+0x36>
			case IRCOMM_TX_IDLE_STATE:					
				break;

			case IRCOMM_TX_PREPARE_TRANSMISSION:
				if((getTime100MicroSec() - irCommTxWaitStartTime) < PAUSE_100_MSEC) {
    8850:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    8854:	20 91 07 05 	lds	r18, 0x0507
    8858:	30 91 08 05 	lds	r19, 0x0508
    885c:	40 91 09 05 	lds	r20, 0x0509
    8860:	50 91 0a 05 	lds	r21, 0x050A
    8864:	62 1b       	sub	r22, r18
    8866:	73 0b       	sbc	r23, r19
    8868:	84 0b       	sbc	r24, r20
    886a:	95 0b       	sbc	r25, r21
    886c:	61 3c       	cpi	r22, 0xC1	; 193
    886e:	23 e0       	ldi	r18, 0x03	; 3
    8870:	72 07       	cpc	r23, r18
    8872:	20 e0       	ldi	r18, 0x00	; 0
    8874:	82 07       	cpc	r24, r18
    8876:	20 e0       	ldi	r18, 0x00	; 0
    8878:	92 07       	cpc	r25, r18
    887a:	80 f2       	brcs	.-96     	; 0x881c <irCommTasks+0x36>
					//updateBlueLed(0);
					break;
				}
				//updateBlueLed(255);
				//updateBlueLed(0);
				irCommTickCounter = getTime100MicroSec()-irCommTickCounter2;
    887c:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    8880:	20 91 ce 04 	lds	r18, 0x04CE
    8884:	30 91 cf 04 	lds	r19, 0x04CF
    8888:	40 91 d0 04 	lds	r20, 0x04D0
    888c:	50 91 d1 04 	lds	r21, 0x04D1
    8890:	62 1b       	sub	r22, r18
    8892:	73 0b       	sbc	r23, r19
    8894:	84 0b       	sbc	r24, r20
    8896:	95 0b       	sbc	r25, r21
    8898:	60 93 ca 04 	sts	0x04CA, r22
    889c:	70 93 cb 04 	sts	0x04CB, r23
    88a0:	80 93 cc 04 	sts	0x04CC, r24
    88a4:	90 93 cd 04 	sts	0x04CD, r25
				irCommTickCounter2 = getTime100MicroSec();
    88a8:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <getTime100MicroSec>
    88ac:	60 93 ce 04 	sts	0x04CE, r22
    88b0:	70 93 cf 04 	sts	0x04CF, r23
    88b4:	80 93 d0 04 	sts	0x04D0, r24
    88b8:	90 93 d1 04 	sts	0x04D1, r25
				irCommTxBitToTransmit[0] = 2;	// start bit 1
    88bc:	00 93 33 05 	sts	0x0533, r16
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
    88c0:	83 e0       	ldi	r24, 0x03	; 3
    88c2:	80 93 34 05 	sts	0x0534, r24
    88c6:	80 91 05 05 	lds	r24, 0x0505
    88ca:	90 e0       	ldi	r25, 0x00	; 0
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    88cc:	9c 01       	movw	r18, r24
    88ce:	21 70       	andi	r18, 0x01	; 1
    88d0:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    88d2:	20 93 3c 05 	sts	0x053C, r18
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    88d6:	41 e0       	ldi	r20, 0x01	; 1
    88d8:	21 30       	cpi	r18, 0x01	; 1
    88da:	31 05       	cpc	r19, r1
    88dc:	09 f0       	breq	.+2      	; 0x88e0 <irCommTasks+0xfa>
    88de:	40 e0       	ldi	r20, 0x00	; 0
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    88e0:	9c 01       	movw	r18, r24
    88e2:	35 95       	asr	r19
    88e4:	27 95       	ror	r18
    88e6:	21 70       	andi	r18, 0x01	; 1
    88e8:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    88ea:	20 93 3b 05 	sts	0x053B, r18
					if(irCommTempValue==1) {
    88ee:	21 30       	cpi	r18, 0x01	; 1
    88f0:	31 05       	cpc	r19, r1
    88f2:	09 f4       	brne	.+2      	; 0x88f6 <irCommTasks+0x110>
    88f4:	ec c7       	rjmp	.+4056   	; 0x98ce <irCommTasks+0x10e8>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    88f6:	9c 01       	movw	r18, r24
    88f8:	35 95       	asr	r19
    88fa:	27 95       	ror	r18
    88fc:	35 95       	asr	r19
    88fe:	27 95       	ror	r18
    8900:	21 70       	andi	r18, 0x01	; 1
    8902:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8904:	20 93 3a 05 	sts	0x053A, r18
					if(irCommTempValue==1) {
    8908:	21 30       	cpi	r18, 0x01	; 1
    890a:	31 05       	cpc	r19, r1
    890c:	09 f4       	brne	.+2      	; 0x8910 <irCommTasks+0x12a>
    890e:	dd c7       	rjmp	.+4026   	; 0x98ca <irCommTasks+0x10e4>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8910:	9c 01       	movw	r18, r24
    8912:	35 95       	asr	r19
    8914:	27 95       	ror	r18
    8916:	35 95       	asr	r19
    8918:	27 95       	ror	r18
    891a:	35 95       	asr	r19
    891c:	27 95       	ror	r18
    891e:	21 70       	andi	r18, 0x01	; 1
    8920:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8922:	20 93 39 05 	sts	0x0539, r18
					if(irCommTempValue==1) {
    8926:	21 30       	cpi	r18, 0x01	; 1
    8928:	31 05       	cpc	r19, r1
    892a:	09 f4       	brne	.+2      	; 0x892e <irCommTasks+0x148>
    892c:	cc c7       	rjmp	.+3992   	; 0x98c6 <irCommTasks+0x10e0>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    892e:	9c 01       	movw	r18, r24
    8930:	35 95       	asr	r19
    8932:	27 95       	ror	r18
    8934:	35 95       	asr	r19
    8936:	27 95       	ror	r18
    8938:	35 95       	asr	r19
    893a:	27 95       	ror	r18
    893c:	35 95       	asr	r19
    893e:	27 95       	ror	r18
    8940:	21 70       	andi	r18, 0x01	; 1
    8942:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    8944:	20 93 38 05 	sts	0x0538, r18
					if(irCommTempValue==1) {
    8948:	21 30       	cpi	r18, 0x01	; 1
    894a:	31 05       	cpc	r19, r1
    894c:	09 f4       	brne	.+2      	; 0x8950 <irCommTasks+0x16a>
    894e:	b9 c7       	rjmp	.+3954   	; 0x98c2 <irCommTasks+0x10dc>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8950:	9c 01       	movw	r18, r24
    8952:	35 95       	asr	r19
    8954:	27 95       	ror	r18
    8956:	35 95       	asr	r19
    8958:	27 95       	ror	r18
    895a:	35 95       	asr	r19
    895c:	27 95       	ror	r18
    895e:	35 95       	asr	r19
    8960:	27 95       	ror	r18
    8962:	35 95       	asr	r19
    8964:	27 95       	ror	r18
    8966:	21 70       	andi	r18, 0x01	; 1
    8968:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    896a:	20 93 37 05 	sts	0x0537, r18
					if(irCommTempValue==1) {
    896e:	21 30       	cpi	r18, 0x01	; 1
    8970:	31 05       	cpc	r19, r1
    8972:	09 f4       	brne	.+2      	; 0x8976 <irCommTasks+0x190>
    8974:	a4 c7       	rjmp	.+3912   	; 0x98be <irCommTasks+0x10d8>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8976:	9c 01       	movw	r18, r24
    8978:	02 2e       	mov	r0, r18
    897a:	23 2f       	mov	r18, r19
    897c:	00 0c       	add	r0, r0
    897e:	22 1f       	adc	r18, r18
    8980:	33 0b       	sbc	r19, r19
    8982:	00 0c       	add	r0, r0
    8984:	22 1f       	adc	r18, r18
    8986:	33 1f       	adc	r19, r19
    8988:	21 70       	andi	r18, 0x01	; 1
    898a:	30 70       	andi	r19, 0x00	; 0
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    898c:	20 93 36 05 	sts	0x0536, r18
					if(irCommTempValue==1) {
    8990:	21 30       	cpi	r18, 0x01	; 1
    8992:	31 05       	cpc	r19, r1
    8994:	09 f4       	brne	.+2      	; 0x8998 <irCommTasks+0x1b2>
    8996:	91 c7       	rjmp	.+3874   	; 0x98ba <irCommTasks+0x10d4>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
    8998:	88 0f       	add	r24, r24
    899a:	89 2f       	mov	r24, r25
    899c:	88 1f       	adc	r24, r24
    899e:	99 0b       	sbc	r25, r25
    89a0:	91 95       	neg	r25
					irCommTxBitToTransmit[9-i] = irCommTempValue;
    89a2:	80 93 35 05 	sts	0x0535, r24
					if(irCommTempValue==1) {
    89a6:	81 30       	cpi	r24, 0x01	; 1
    89a8:	91 05       	cpc	r25, r1
    89aa:	09 f4       	brne	.+2      	; 0x89ae <irCommTasks+0x1c8>
    89ac:	84 c7       	rjmp	.+3848   	; 0x98b6 <irCommTasks+0x10d0>
						irCommTxCrc++;
    89ae:	90 93 c8 04 	sts	0x04C8, r25
    89b2:	80 93 c7 04 	sts	0x04C7, r24
					}
					//irCommTxBitToTransmit[9-i] = 2;
				}
				irCommTxCrc = irCommTxCrc % 4;
    89b6:	43 70       	andi	r20, 0x03	; 3
				irCommTxCrc = 4 - irCommTxCrc;
    89b8:	84 e0       	ldi	r24, 0x04	; 4
    89ba:	84 1b       	sub	r24, r20
    89bc:	80 93 0b 05 	sts	0x050B, r24
				irCommTxBitToTransmit[10] = (irCommTxCrc>>1)&0x01;
    89c0:	98 2f       	mov	r25, r24
    89c2:	96 95       	lsr	r25
    89c4:	91 70       	andi	r25, 0x01	; 1
    89c6:	90 93 3d 05 	sts	0x053D, r25
				irCommTxBitToTransmit[11] = irCommTxCrc&0x01;	
    89ca:	81 70       	andi	r24, 0x01	; 1
    89cc:	80 93 3e 05 	sts	0x053E, r24
				irCommTxBitCount = 0;							
    89d0:	10 92 0c 05 	sts	0x050C, r1
				irCommTxPulseState = 0;	
    89d4:	10 92 0d 05 	sts	0x050D, r1
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
    89d8:	82 e0       	ldi	r24, 0x02	; 2
    89da:	80 93 c6 04 	sts	0x04C6, r24
				break;
    89de:	1e cf       	rjmp	.-452    	; 0x881c <irCommTasks+0x36>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    89e0:	80 91 c6 04 	lds	r24, 0x04C6
    89e4:	86 30       	cpi	r24, 0x06	; 6
    89e6:	09 f4       	brne	.+2      	; 0x89ea <irCommTasks+0x204>
    89e8:	63 c2       	rjmp	.+1222   	; 0x8eb0 <irCommTasks+0x6ca>
    89ea:	87 30       	cpi	r24, 0x07	; 7
    89ec:	08 f0       	brcs	.+2      	; 0x89f0 <irCommTasks+0x20a>
    89ee:	bb c0       	rjmp	.+374    	; 0x8b66 <irCommTasks+0x380>
    89f0:	82 30       	cpi	r24, 0x02	; 2
    89f2:	09 f4       	brne	.+2      	; 0x89f6 <irCommTasks+0x210>
    89f4:	d4 c3       	rjmp	.+1960   	; 0x919e <irCommTasks+0x9b8>
    89f6:	83 30       	cpi	r24, 0x03	; 3
    89f8:	09 f0       	breq	.+2      	; 0x89fc <irCommTasks+0x216>
    89fa:	10 cf       	rjmp	.-480    	; 0x881c <irCommTasks+0x36>
												
				break;

			case IRCOMM_RX_DETECT_START_BIT_STATE:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
    89fc:	10 92 e9 04 	sts	0x04E9, r1
    8a00:	10 92 ea 04 	sts	0x04EA, r1
    8a04:	10 92 eb 04 	sts	0x04EB, r1
    8a08:	10 92 ec 04 	sts	0x04EC, r1
				irCommTempMin = 1024;
    8a0c:	80 e0       	ldi	r24, 0x00	; 0
    8a0e:	94 e0       	ldi	r25, 0x04	; 4
    8a10:	90 93 f0 04 	sts	0x04F0, r25
    8a14:	80 93 ef 04 	sts	0x04EF, r24
				irCommTempMax = 0;
    8a18:	10 92 ee 04 	sts	0x04EE, r1
    8a1c:	10 92 ed 04 	sts	0x04ED, r1
				irCommShiftCount = 0;
    8a20:	10 92 f1 04 	sts	0x04F1, r1
				irCommComputeShift = 1;												
    8a24:	00 93 f2 04 	sts	0x04F2, r16
    8a28:	ba e1       	ldi	r27, 0x1A	; 26
    8a2a:	4b 2e       	mov	r4, r27
    8a2c:	bb e0       	ldi	r27, 0x0B	; 11
    8a2e:	5b 2e       	mov	r5, r27
    8a30:	92 01       	movw	r18, r4
    8a32:	00 e0       	ldi	r16, 0x00	; 0
    8a34:	10 e0       	ldi	r17, 0x00	; 0
    8a36:	bb 24       	eor	r11, r11
    8a38:	b3 94       	inc	r11
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];

					if(irCommMaxSensorSignalIndexTemp>39) {
						irCommMaxSensorSignalIndexTemp = 39;
    8a3a:	a7 e2       	ldi	r26, 0x27	; 39
    8a3c:	aa 2e       	mov	r10, r26
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = 1024;
    8a3e:	81 2c       	mov	r8, r1
    8a40:	f4 e0       	ldi	r31, 0x04	; 4
    8a42:	9f 2e       	mov	r9, r31
							irCommTempMax = 0;
							irCommComputeShift = 2;
    8a44:	e2 e0       	ldi	r30, 0x02	; 2
    8a46:	7e 2e       	mov	r7, r30
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    8a48:	66 24       	eor	r6, r6
    8a4a:	63 94       	inc	r6
    8a4c:	34 c0       	rjmp	.+104    	; 0x8ab6 <irCommTasks+0x2d0>

					if(irCommMaxSensorSignalIndexTemp>39) {
						irCommMaxSensorSignalIndexTemp = 39;
						updateRedLed(0);
					}
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
    8a4e:	e8 2f       	mov	r30, r24
    8a50:	f0 e0       	ldi	r31, 0x00	; 0
    8a52:	ee 0f       	add	r30, r30
    8a54:	ff 1f       	adc	r31, r31
    8a56:	e4 5b       	subi	r30, 0xB4	; 180
    8a58:	f7 4f       	sbci	r31, 0xF7	; 247
    8a5a:	51 83       	std	Z+1, r21	; 0x01
    8a5c:	40 83       	st	Z, r20
					irCommMaxSensorSignalIndexTemp++;					
    8a5e:	8f 5f       	subi	r24, 0xFF	; 255
    8a60:	80 93 d3 04 	sts	0x04D3, r24

					irCommProxSum += irCommMaxSensorSignal[i];
    8a64:	6a 01       	movw	r12, r20
    8a66:	ee 24       	eor	r14, r14
    8a68:	d7 fc       	sbrc	r13, 7
    8a6a:	e0 94       	com	r14
    8a6c:	fe 2c       	mov	r15, r14
    8a6e:	80 91 e9 04 	lds	r24, 0x04E9
    8a72:	90 91 ea 04 	lds	r25, 0x04EA
    8a76:	a0 91 eb 04 	lds	r26, 0x04EB
    8a7a:	b0 91 ec 04 	lds	r27, 0x04EC
    8a7e:	8c 0d       	add	r24, r12
    8a80:	9d 1d       	adc	r25, r13
    8a82:	ae 1d       	adc	r26, r14
    8a84:	bf 1d       	adc	r27, r15
    8a86:	80 93 e9 04 	sts	0x04E9, r24
    8a8a:	90 93 ea 04 	sts	0x04EA, r25
    8a8e:	a0 93 eb 04 	sts	0x04EB, r26
    8a92:	b0 93 ec 04 	sts	0x04EC, r27
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
    8a96:	bb 2d       	mov	r27, r11
    8a98:	b1 30       	cpi	r27, 0x01	; 1
    8a9a:	09 f4       	brne	.+2      	; 0x8a9e <irCommTasks+0x2b8>
    8a9c:	b9 c2       	rjmp	.+1394   	; 0x9010 <irCommTasks+0x82a>
							irCommTempMax = 0;
							irCommComputeShift = 2;
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
							irCommRxStartPeakDuration = 0;
						}
					 } else if(irCommComputeShift == 2) {		
    8a9e:	fb 2d       	mov	r31, r11
    8aa0:	f2 30       	cpi	r31, 0x02	; 2
    8aa2:	09 f4       	brne	.+2      	; 0x8aa6 <irCommTasks+0x2c0>
    8aa4:	25 c3       	rjmp	.+1610   	; 0x90f0 <irCommTasks+0x90a>
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
								irCommComputeShift = 0;
    8aa6:	08 5f       	subi	r16, 0xF8	; 248
    8aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    8aaa:	2e 5f       	subi	r18, 0xFE	; 254
    8aac:	3f 4f       	sbci	r19, 0xFF	; 255
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8aae:	00 3a       	cpi	r16, 0xA0	; 160
    8ab0:	11 05       	cpc	r17, r1
    8ab2:	09 f4       	brne	.+2      	; 0x8ab6 <irCommTasks+0x2d0>
    8ab4:	b5 c4       	rjmp	.+2410   	; 0x9420 <irCommTasks+0xc3a>
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    8ab6:	80 91 5b 0b 	lds	r24, 0x0B5B
    8aba:	90 91 5c 0b 	lds	r25, 0x0B5C
    8abe:	80 0f       	add	r24, r16
    8ac0:	91 1f       	adc	r25, r17
    8ac2:	88 0f       	add	r24, r24
    8ac4:	99 1f       	adc	r25, r25
    8ac6:	e0 91 2c 08 	lds	r30, 0x082C
    8aca:	f0 91 2d 08 	lds	r31, 0x082D
    8ace:	e8 0f       	add	r30, r24
    8ad0:	f9 1f       	adc	r31, r25
    8ad2:	40 81       	ld	r20, Z
    8ad4:	51 81       	ldd	r21, Z+1	; 0x01
    8ad6:	f9 01       	movw	r30, r18
    8ad8:	51 83       	std	Z+1, r21	; 0x01
    8ada:	40 83       	st	Z, r20

					if(irCommMaxSensorSignalIndexTemp>39) {
    8adc:	80 91 d3 04 	lds	r24, 0x04D3
    8ae0:	88 32       	cpi	r24, 0x28	; 40
    8ae2:	08 f4       	brcc	.+2      	; 0x8ae6 <irCommTasks+0x300>
    8ae4:	b4 cf       	rjmp	.-152    	; 0x8a4e <irCommTasks+0x268>
						irCommMaxSensorSignalIndexTemp = 39;
    8ae6:	a0 92 d3 04 	sts	0x04D3, r10
						updateRedLed(0);
    8aea:	80 e0       	ldi	r24, 0x00	; 0
    8aec:	29 83       	std	Y+1, r18	; 0x01
    8aee:	3a 83       	std	Y+2, r19	; 0x02
    8af0:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    8af4:	80 91 d3 04 	lds	r24, 0x04D3
    8af8:	29 81       	ldd	r18, Y+1	; 0x01
    8afa:	3a 81       	ldd	r19, Y+2	; 0x02
    8afc:	d9 01       	movw	r26, r18
    8afe:	4d 91       	ld	r20, X+
    8b00:	5c 91       	ld	r21, X
    8b02:	11 97       	sbiw	r26, 0x01	; 1
    8b04:	b0 90 f2 04 	lds	r11, 0x04F2
    8b08:	a2 cf       	rjmp	.-188    	; 0x8a4e <irCommTasks+0x268>
				irCommTxPulseState = 0;	
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				updateBlueLed(255);
    8b0a:	8f ef       	ldi	r24, 0xFF	; 255
    8b0c:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <updateBlueLed>
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
    8b10:	20 91 0c 05 	lds	r18, 0x050C
    8b14:	e2 2f       	mov	r30, r18
    8b16:	f0 e0       	ldi	r31, 0x00	; 0
    8b18:	ed 5c       	subi	r30, 0xCD	; 205
    8b1a:	fa 4f       	sbci	r31, 0xFA	; 250
    8b1c:	00 81       	ld	r16, Z
    8b1e:	03 30       	cpi	r16, 0x03	; 3
    8b20:	09 f4       	brne	.+2      	; 0x8b24 <irCommTasks+0x33e>
    8b22:	91 c6       	rjmp	.+3362   	; 0x9846 <irCommTasks+0x1060>
					updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
    8b24:	02 30       	cpi	r16, 0x02	; 2
    8b26:	09 f4       	brne	.+2      	; 0x8b2a <irCommTasks+0x344>
    8b28:	b8 c6       	rjmp	.+3440   	; 0x989a <irCommTasks+0x10b4>
					updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
    8b2a:	01 30       	cpi	r16, 0x01	; 1
    8b2c:	09 f4       	brne	.+2      	; 0x8b30 <irCommTasks+0x34a>
    8b2e:	66 c2       	rjmp	.+1228   	; 0x8ffc <irCommTasks+0x816>
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
				} else {
					irCommTxDuration = IRCOMM_BIT0_DURATION;						
    8b30:	8e e1       	ldi	r24, 0x1E	; 30
    8b32:	90 e0       	ldi	r25, 0x00	; 0
    8b34:	90 93 0f 05 	sts	0x050F, r25
    8b38:	80 93 0e 05 	sts	0x050E, r24
					irCommTxSwitchCount = IRCOMM_BIT0_SWITCH_COUNT;
    8b3c:	88 e0       	ldi	r24, 0x08	; 8
    8b3e:	80 93 10 05 	sts	0x0510, r24
				}
				if(irCommTxBitCount == 0) {
    8b42:	22 23       	and	r18, r18
    8b44:	31 f4       	brne	.+12     	; 0x8b52 <irCommTasks+0x36c>
					PORTA = irCommTxSensorMask;
    8b46:	80 91 13 05 	lds	r24, 0x0513
    8b4a:	82 b9       	out	0x02, r24	; 2
					irCommTxPulseState = 1;
    8b4c:	81 e0       	ldi	r24, 0x01	; 1
    8b4e:	80 93 0d 05 	sts	0x050D, r24
				}
				irCommTxDurationCycle = 0;
    8b52:	10 92 12 05 	sts	0x0512, r1
				irCommTxSwitchCounter = 0;						
    8b56:	10 92 11 05 	sts	0x0511, r1
				irCommState = IRCOMM_TX_TRANSMIT_BIT;
    8b5a:	83 e0       	ldi	r24, 0x03	; 3
    8b5c:	80 93 c6 04 	sts	0x04C6, r24
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    8b60:	80 93 04 05 	sts	0x0504, r24
    8b64:	5b ce       	rjmp	.-842    	; 0x881c <irCommTasks+0x36>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
    8b66:	87 30       	cpi	r24, 0x07	; 7
    8b68:	09 f4       	brne	.+2      	; 0x8b6c <irCommTasks+0x386>
    8b6a:	f7 c2       	rjmp	.+1518   	; 0x915a <irCommTasks+0x974>
    8b6c:	88 30       	cpi	r24, 0x08	; 8
    8b6e:	09 f0       	breq	.+2      	; 0x8b72 <irCommTasks+0x38c>
    8b70:	55 ce       	rjmp	.-854    	; 0x881c <irCommTasks+0x36>
				irCommState = IRCOMM_RX_IDLE_STATE;

				break;

			case IRCOMM_RX_DEBUG:								
				irCommSendValues = 0;						
    8b72:	10 92 c9 04 	sts	0x04C9, r1
				while(irCommSendValues==0);	// wait for the start from the uart (computer)
    8b76:	80 91 c9 04 	lds	r24, 0x04C9
    8b7a:	88 23       	and	r24, r24
    8b7c:	e1 f3       	breq	.-8      	; 0x8b76 <irCommTasks+0x390>
				usart0Transmit(0xFF, 1);
    8b7e:	8f ef       	ldi	r24, 0xFF	; 255
    8b80:	61 e0       	ldi	r22, 0x01	; 1
    8b82:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[0],1);
    8b86:	80 91 0a 0b 	lds	r24, 0x0B0A
    8b8a:	61 e0       	ldi	r22, 0x01	; 1
    8b8c:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommRxMaxSensorTemp[1],1);
    8b90:	80 91 0c 0b 	lds	r24, 0x0B0C
    8b94:	61 e0       	ldi	r22, 0x01	; 1
    8b96:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]&0xFF,1);
    8b9a:	80 91 43 0b 	lds	r24, 0x0B43
    8b9e:	61 e0       	ldi	r22, 0x01	; 1
    8ba0:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[0]>>8,1);
    8ba4:	80 91 44 0b 	lds	r24, 0x0B44
    8ba8:	61 e0       	ldi	r22, 0x01	; 1
    8baa:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]&0xFF,1);
    8bae:	80 91 45 0b 	lds	r24, 0x0B45
    8bb2:	61 e0       	ldi	r22, 0x01	; 1
    8bb4:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommRxMaxDiffTemp[1]>>8,1);
    8bb8:	80 91 46 0b 	lds	r24, 0x0B46
    8bbc:	61 e0       	ldi	r22, 0x01	; 1
    8bbe:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]&0xFF,1);
    8bc2:	80 91 4e 05 	lds	r24, 0x054E
    8bc6:	61 e0       	ldi	r22, 0x01	; 1
    8bc8:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
    8bcc:	80 91 4f 05 	lds	r24, 0x054F
    8bd0:	61 e0       	ldi	r22, 0x01	; 1
    8bd2:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
    8bd6:	80 91 50 05 	lds	r24, 0x0550
    8bda:	61 e0       	ldi	r22, 0x01	; 1
    8bdc:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
    8be0:	80 91 51 05 	lds	r24, 0x0551
    8be4:	61 e0       	ldi	r22, 0x01	; 1
    8be6:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[0],1);
    8bea:	80 91 30 05 	lds	r24, 0x0530
    8bee:	61 e0       	ldi	r22, 0x01	; 1
    8bf0:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommSwitchCountTemp[1],1);
    8bf4:	80 91 31 05 	lds	r24, 0x0531
    8bf8:	61 e0       	ldi	r22, 0x01	; 1
    8bfa:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8bfe:	bc e4       	ldi	r27, 0x4C	; 76
    8c00:	cb 2e       	mov	r12, r27
    8c02:	b8 e0       	ldi	r27, 0x08	; 8
    8c04:	db 2e       	mov	r13, r27
    8c06:	06 e5       	ldi	r16, 0x56	; 86
    8c08:	15 e0       	ldi	r17, 0x05	; 5
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
					irCommTempValue = irCommMaxSensorSignalTemp[i];
    8c0a:	f6 01       	movw	r30, r12
    8c0c:	80 81       	ld	r24, Z
    8c0e:	91 81       	ldd	r25, Z+1	; 0x01
    8c10:	22 e0       	ldi	r18, 0x02	; 2
    8c12:	30 e0       	ldi	r19, 0x00	; 0
    8c14:	c2 0e       	add	r12, r18
    8c16:	d3 1e       	adc	r13, r19
    8c18:	80 93 c7 04 	sts	0x04C7, r24
    8c1c:	90 93 c8 04 	sts	0x04C8, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    8c20:	61 e0       	ldi	r22, 0x01	; 1
    8c22:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    8c26:	80 91 c8 04 	lds	r24, 0x04C8
    8c2a:	61 e0       	ldi	r22, 0x01	; 1
    8c2c:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
    8c30:	d8 01       	movw	r26, r16
    8c32:	8c 91       	ld	r24, X
    8c34:	11 96       	adiw	r26, 0x01	; 1
    8c36:	9c 91       	ld	r25, X
    8c38:	0e 5f       	subi	r16, 0xFE	; 254
    8c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    8c3c:	80 93 c7 04 	sts	0x04C7, r24
    8c40:	90 93 c8 04 	sts	0x04C8, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    8c44:	61 e0       	ldi	r22, 0x01	; 1
    8c46:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    8c4a:	80 91 c8 04 	lds	r24, 0x04C8
    8c4e:	61 e0       	ldi	r22, 0x01	; 1
    8c50:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommProxMeanTemp[0]>>8,1);
				usart0Transmit(irCommProxMeanTemp[1]&0xFF,1);
				usart0Transmit(irCommProxMeanTemp[1]>>8,1);
				usart0Transmit(irCommSwitchCountTemp[0],1);
				usart0Transmit(irCommSwitchCountTemp[1],1);
				for(i=0; i<IRCOMM_SAMPLING_WINDOW*2; i++) {
    8c54:	bc e9       	ldi	r27, 0x9C	; 156
    8c56:	cb 16       	cp	r12, r27
    8c58:	b8 e0       	ldi	r27, 0x08	; 8
    8c5a:	db 06       	cpc	r13, r27
    8c5c:	b1 f6       	brne	.-84     	; 0x8c0a <irCommTasks+0x424>
					usart0Transmit(irCommTempValue>>8,1);
					irCommTempValue = irCommMaxSensorSignalFiltTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]&0xFF,1);
    8c5e:	80 91 17 05 	lds	r24, 0x0517
    8c62:	61 e0       	ldi	r22, 0x01	; 1
    8c64:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[0]>>8,1);
    8c68:	80 91 18 05 	lds	r24, 0x0518
    8c6c:	61 e0       	ldi	r22, 0x01	; 1
    8c6e:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]&0xFF,1);
    8c72:	80 91 19 05 	lds	r24, 0x0519
    8c76:	61 e0       	ldi	r22, 0x01	; 1
    8c78:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommMaxSensorValueCurrTemp[1]>>8,1);
    8c7c:	80 91 1a 05 	lds	r24, 0x051A
    8c80:	61 e0       	ldi	r22, 0x01	; 1
    8c82:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]&0xFF,1);
    8c86:	80 91 0e 0b 	lds	r24, 0x0B0E
    8c8a:	61 e0       	ldi	r22, 0x01	; 1
    8c8c:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[0]>>8,1);
    8c90:	80 91 0f 0b 	lds	r24, 0x0B0F
    8c94:	61 e0       	ldi	r22, 0x01	; 1
    8c96:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]&0xFF,1);
    8c9a:	80 91 10 0b 	lds	r24, 0x0B10
    8c9e:	61 e0       	ldi	r22, 0x01	; 1
    8ca0:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommMinSensorValueCurrTemp[1]>>8,1);
    8ca4:	80 91 11 0b 	lds	r24, 0x0B11
    8ca8:	61 e0       	ldi	r22, 0x01	; 1
    8caa:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[0],1);
    8cae:	80 91 5e 0b 	lds	r24, 0x0B5E
    8cb2:	61 e0       	ldi	r22, 0x01	; 1
    8cb4:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommShiftCountTemp[1],1);
    8cb8:	80 91 5f 0b 	lds	r24, 0x0B5F
    8cbc:	61 e0       	ldi	r22, 0x01	; 1
    8cbe:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[0],1);
    8cc2:	80 91 16 0b 	lds	r24, 0x0B16
    8cc6:	61 e0       	ldi	r22, 0x01	; 1
    8cc8:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommShiftCountFinalTemp[1],1);
    8ccc:	80 91 17 0b 	lds	r24, 0x0B17
    8cd0:	61 e0       	ldi	r22, 0x01	; 1
    8cd2:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]&0xFF,1);
    8cd6:	80 91 9d 08 	lds	r24, 0x089D
    8cda:	61 e0       	ldi	r22, 0x01	; 1
    8cdc:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[0]>>8,1);
    8ce0:	80 91 9e 08 	lds	r24, 0x089E
    8ce4:	61 e0       	ldi	r22, 0x01	; 1
    8ce6:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]&0xFF,1);
    8cea:	80 91 9f 08 	lds	r24, 0x089F
    8cee:	61 e0       	ldi	r22, 0x01	; 1
    8cf0:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommStartDiffTemp[1]>>8,1);
    8cf4:	80 91 a0 08 	lds	r24, 0x08A0
    8cf8:	61 e0       	ldi	r22, 0x01	; 1
    8cfa:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[0],1);
    8cfe:	80 91 4b 05 	lds	r24, 0x054B
    8d02:	61 e0       	ldi	r22, 0x01	; 1
    8d04:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommComputeShiftTemp[1],1);
    8d08:	80 91 4c 05 	lds	r24, 0x054C
    8d0c:	61 e0       	ldi	r22, 0x01	; 1
    8d0e:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[0],1);
    8d12:	80 91 a8 05 	lds	r24, 0x05A8
    8d16:	61 e0       	ldi	r22, 0x01	; 1
    8d18:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommRxPeakHighToLowTemp[1],1);
    8d1c:	80 91 a9 05 	lds	r24, 0x05A9
    8d20:	61 e0       	ldi	r22, 0x01	; 1
    8d22:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[0],1);
    8d26:	80 91 ea 06 	lds	r24, 0x06EA
    8d2a:	61 e0       	ldi	r22, 0x01	; 1
    8d2c:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommRxStartPeakDurationTemp[1],1);
    8d30:	80 91 eb 06 	lds	r24, 0x06EB
    8d34:	61 e0       	ldi	r22, 0x01	; 1
    8d36:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[0],1);
    8d3a:	80 91 54 05 	lds	r24, 0x0554
    8d3e:	61 e0       	ldi	r22, 0x01	; 1
    8d40:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommRxStartBitDetectedTemp[1],1);
    8d44:	80 91 55 05 	lds	r24, 0x0555
    8d48:	61 e0       	ldi	r22, 0x01	; 1
    8d4a:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
    8d4e:	80 91 49 05 	lds	r24, 0x0549
    8d52:	61 e0       	ldi	r22, 0x01	; 1
    8d54:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[1],1);
    8d58:	80 91 4a 05 	lds	r24, 0x054A
    8d5c:	61 e0       	ldi	r22, 0x01	; 1
    8d5e:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
    8d62:	80 91 1b 05 	lds	r24, 0x051B
    8d66:	61 e0       	ldi	r22, 0x01	; 1
    8d68:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8d6c:	80 91 1c 05 	lds	r24, 0x051C
    8d70:	61 e0       	ldi	r22, 0x01	; 1
    8d72:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8d76:	80 91 1d 05 	lds	r24, 0x051D
    8d7a:	61 e0       	ldi	r22, 0x01	; 1
    8d7c:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8d80:	80 91 1e 05 	lds	r24, 0x051E
    8d84:	61 e0       	ldi	r22, 0x01	; 1
    8d86:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8d8a:	80 91 1f 05 	lds	r24, 0x051F
    8d8e:	61 e0       	ldi	r22, 0x01	; 1
    8d90:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8d94:	80 91 20 05 	lds	r24, 0x0520
    8d98:	61 e0       	ldi	r22, 0x01	; 1
    8d9a:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8d9e:	80 91 21 05 	lds	r24, 0x0521
    8da2:	61 e0       	ldi	r22, 0x01	; 1
    8da4:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8da8:	80 91 22 05 	lds	r24, 0x0522
    8dac:	61 e0       	ldi	r22, 0x01	; 1
    8dae:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8db2:	80 91 23 05 	lds	r24, 0x0523
    8db6:	61 e0       	ldi	r22, 0x01	; 1
    8db8:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8dbc:	80 91 24 05 	lds	r24, 0x0524
    8dc0:	61 e0       	ldi	r22, 0x01	; 1
    8dc2:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8dc6:	80 91 25 05 	lds	r24, 0x0525
    8dca:	61 e0       	ldi	r22, 0x01	; 1
    8dcc:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8dd0:	80 91 26 05 	lds	r24, 0x0526
    8dd4:	61 e0       	ldi	r22, 0x01	; 1
    8dd6:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8dda:	80 91 27 05 	lds	r24, 0x0527
    8dde:	61 e0       	ldi	r22, 0x01	; 1
    8de0:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8de4:	80 91 28 05 	lds	r24, 0x0528
    8de8:	61 e0       	ldi	r22, 0x01	; 1
    8dea:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8dee:	08 e7       	ldi	r16, 0x78	; 120
    8df0:	19 e0       	ldi	r17, 0x09	; 9
				}
				for(i=0; i<200; i++) {
					irCommTempValue = irCommBitsSignalTemp[i];
    8df2:	f8 01       	movw	r30, r16
    8df4:	80 81       	ld	r24, Z
    8df6:	91 81       	ldd	r25, Z+1	; 0x01
    8df8:	0e 5f       	subi	r16, 0xFE	; 254
    8dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    8dfc:	80 93 c7 04 	sts	0x04C7, r24
    8e00:	90 93 c8 04 	sts	0x04C8, r25
					usart0Transmit(irCommTempValue&0xFF,1);
    8e04:	61 e0       	ldi	r22, 0x01	; 1
    8e06:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
					usart0Transmit(irCommTempValue>>8,1);
    8e0a:	80 91 c8 04 	lds	r24, 0x04C8
    8e0e:	61 e0       	ldi	r22, 0x01	; 1
    8e10:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommSyncStateTemp[0],1);
				usart0Transmit(irCommSyncStateTemp[1],1);
				for(i=0; i<14; i++) {
					usart0Transmit(irCommStateTemp[i],1);
				}
				for(i=0; i<200; i++) {
    8e14:	fb e0       	ldi	r31, 0x0B	; 11
    8e16:	08 30       	cpi	r16, 0x08	; 8
    8e18:	1f 07       	cpc	r17, r31
    8e1a:	59 f7       	brne	.-42     	; 0x8df2 <irCommTasks+0x60c>
					irCommTempValue = irCommBitsSignalTemp[i];
					usart0Transmit(irCommTempValue&0xFF,1);
					usart0Transmit(irCommTempValue>>8,1);
				}
				for(i=0; i<10; i++) {
					usart0Transmit(irCommRxBitReceivedTemp[i],1);
    8e1c:	80 91 3e 08 	lds	r24, 0x083E
    8e20:	61 e0       	ldi	r22, 0x01	; 1
    8e22:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8e26:	80 91 3f 08 	lds	r24, 0x083F
    8e2a:	61 e0       	ldi	r22, 0x01	; 1
    8e2c:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8e30:	80 91 40 08 	lds	r24, 0x0840
    8e34:	61 e0       	ldi	r22, 0x01	; 1
    8e36:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8e3a:	80 91 41 08 	lds	r24, 0x0841
    8e3e:	61 e0       	ldi	r22, 0x01	; 1
    8e40:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8e44:	80 91 42 08 	lds	r24, 0x0842
    8e48:	61 e0       	ldi	r22, 0x01	; 1
    8e4a:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8e4e:	80 91 43 08 	lds	r24, 0x0843
    8e52:	61 e0       	ldi	r22, 0x01	; 1
    8e54:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8e58:	80 91 44 08 	lds	r24, 0x0844
    8e5c:	61 e0       	ldi	r22, 0x01	; 1
    8e5e:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8e62:	80 91 45 08 	lds	r24, 0x0845
    8e66:	61 e0       	ldi	r22, 0x01	; 1
    8e68:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8e6c:	80 91 46 08 	lds	r24, 0x0846
    8e70:	61 e0       	ldi	r22, 0x01	; 1
    8e72:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
    8e76:	80 91 47 08 	lds	r24, 0x0847
    8e7a:	61 e0       	ldi	r22, 0x01	; 1
    8e7c:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				}
				usart0Transmit(irCommRxCrc,1);
    8e80:	80 91 e8 04 	lds	r24, 0x04E8
    8e84:	61 e0       	ldi	r22, 0x01	; 1
    8e86:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommRxCrcError,1);
    8e8a:	80 91 f8 04 	lds	r24, 0x04F8
    8e8e:	61 e0       	ldi	r22, 0x01	; 1
    8e90:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommRxByte,1);
    8e94:	80 91 f9 04 	lds	r24, 0x04F9
    8e98:	61 e0       	ldi	r22, 0x01	; 1
    8e9a:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
				usart0Transmit(irCommRxByteExpected,1);				
    8e9e:	80 91 fc 04 	lds	r24, 0x04FC
    8ea2:	61 e0       	ldi	r22, 0x01	; 1
    8ea4:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>

				irCommState = IRCOMM_RX_STOP;
    8ea8:	89 e0       	ldi	r24, 0x09	; 9
    8eaa:	80 93 c6 04 	sts	0x04C6, r24
				break;
    8eae:	b6 cc       	rjmp	.-1684   	; 0x881c <irCommTasks+0x36>
			case IRCOMM_RX_WAITING_BIT:
				break;

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
    8eb0:	10 92 e9 04 	sts	0x04E9, r1
    8eb4:	10 92 ea 04 	sts	0x04EA, r1
    8eb8:	10 92 eb 04 	sts	0x04EB, r1
    8ebc:	10 92 ec 04 	sts	0x04EC, r1
				irCommTempMin = 1024;
    8ec0:	80 e0       	ldi	r24, 0x00	; 0
    8ec2:	94 e0       	ldi	r25, 0x04	; 4
    8ec4:	90 93 f0 04 	sts	0x04F0, r25
    8ec8:	80 93 ef 04 	sts	0x04EF, r24
				irCommTempMax = 0;
    8ecc:	10 92 ee 04 	sts	0x04EE, r1
    8ed0:	10 92 ed 04 	sts	0x04ED, r1
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    8ed4:	80 91 5b 0b 	lds	r24, 0x0B5B
    8ed8:	90 91 5c 0b 	lds	r25, 0x0B5C
    8edc:	88 0f       	add	r24, r24
    8ede:	99 1f       	adc	r25, r25
    8ee0:	e0 91 2c 08 	lds	r30, 0x082C
    8ee4:	f0 91 2d 08 	lds	r31, 0x082D
    8ee8:	e8 0f       	add	r30, r24
    8eea:	f9 1f       	adc	r31, r25

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
    8eec:	0a e1       	ldi	r16, 0x1A	; 26
    8eee:	1b e0       	ldi	r17, 0x0B	; 11
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    8ef0:	58 e2       	ldi	r21, 0x28	; 40
    8ef2:	a5 2e       	mov	r10, r21
    8ef4:	b1 2c       	mov	r11, r1
    8ef6:	a0 0e       	add	r10, r16
    8ef8:	b1 1e       	adc	r11, r17
    8efa:	48 01       	movw	r8, r16
    8efc:	60 e0       	ldi	r22, 0x00	; 0
    8efe:	70 e0       	ldi	r23, 0x00	; 0
    8f00:	40 e0       	ldi	r20, 0x00	; 0
    8f02:	54 e0       	ldi	r21, 0x04	; 4
    8f04:	cc 24       	eor	r12, r12
    8f06:	dd 24       	eor	r13, r13
    8f08:	76 01       	movw	r14, r12
    8f0a:	08 c0       	rjmp	.+16     	; 0x8f1c <irCommTasks+0x736>
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8f0c:	40 91 ef 04 	lds	r20, 0x04EF
    8f10:	50 91 f0 04 	lds	r21, 0x04F0
    8f14:	60 91 ed 04 	lds	r22, 0x04ED
    8f18:	70 91 ee 04 	lds	r23, 0x04EE
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
    8f1c:	20 81       	ld	r18, Z
    8f1e:	31 81       	ldd	r19, Z+1	; 0x01
    8f20:	d4 01       	movw	r26, r8
    8f22:	2d 93       	st	X+, r18
    8f24:	3d 93       	st	X+, r19
    8f26:	4d 01       	movw	r8, r26
					irCommProxSum += irCommMaxSensorSignal[i];
    8f28:	c9 01       	movw	r24, r18
    8f2a:	aa 27       	eor	r26, r26
    8f2c:	97 fd       	sbrc	r25, 7
    8f2e:	a0 95       	com	r26
    8f30:	ba 2f       	mov	r27, r26
    8f32:	c8 0e       	add	r12, r24
    8f34:	d9 1e       	adc	r13, r25
    8f36:	ea 1e       	adc	r14, r26
    8f38:	fb 1e       	adc	r15, r27
					if(irCommTempMin > irCommMaxSensorSignal[i]) {
    8f3a:	24 17       	cp	r18, r20
    8f3c:	35 07       	cpc	r19, r21
    8f3e:	2c f4       	brge	.+10     	; 0x8f4a <irCommTasks+0x764>
						irCommTempMin = irCommMaxSensorSignal[i];
    8f40:	30 93 f0 04 	sts	0x04F0, r19
    8f44:	20 93 ef 04 	sts	0x04EF, r18
    8f48:	a9 01       	movw	r20, r18
					}
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
    8f4a:	62 17       	cp	r22, r18
    8f4c:	73 07       	cpc	r23, r19
    8f4e:	2c f4       	brge	.+10     	; 0x8f5a <irCommTasks+0x774>
						irCommTempMax = irCommMaxSensorSignal[i];
    8f50:	30 93 ee 04 	sts	0x04EE, r19
    8f54:	20 93 ed 04 	sts	0x04ED, r18
    8f58:	b9 01       	movw	r22, r18
    8f5a:	70 96       	adiw	r30, 0x10	; 16
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8f5c:	b2 e4       	ldi	r27, 0x42	; 66
    8f5e:	8b 16       	cp	r8, r27
    8f60:	bb e0       	ldi	r27, 0x0B	; 11
    8f62:	9b 06       	cpc	r9, r27
    8f64:	99 f6       	brne	.-90     	; 0x8f0c <irCommTasks+0x726>
    8f66:	c0 92 e9 04 	sts	0x04E9, r12
    8f6a:	d0 92 ea 04 	sts	0x04EA, r13
    8f6e:	e0 92 eb 04 	sts	0x04EB, r14
    8f72:	f0 92 ec 04 	sts	0x04EC, r15
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
						irCommTempMax = irCommMaxSensorSignal[i];
					}
				}

				if((irCommTempMax-irCommTempMin) < IRCOMM_DETECTION_AMPLITUDE_THR) {	// error...no significant signal perceived					
    8f76:	64 1b       	sub	r22, r20
    8f78:	75 0b       	sbc	r23, r21
    8f7a:	68 32       	cpi	r22, 0x28	; 40
    8f7c:	71 05       	cpc	r23, r1
    8f7e:	0c f4       	brge	.+2      	; 0x8f82 <irCommTasks+0x79c>
    8f80:	81 c3       	rjmp	.+1794   	; 0x9684 <irCommTasks+0xe9e>

					resetDebugVariables();
					break;
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    8f82:	c7 01       	movw	r24, r14
    8f84:	b6 01       	movw	r22, r12
    8f86:	24 e1       	ldi	r18, 0x14	; 20
    8f88:	30 e0       	ldi	r19, 0x00	; 0
    8f8a:	40 e0       	ldi	r20, 0x00	; 0
    8f8c:	50 e0       	ldi	r21, 0x00	; 0
    8f8e:	0e 94 e5 51 	call	0xa3ca	; 0xa3ca <__divmodsi4>
    8f92:	b9 01       	movw	r22, r18
    8f94:	30 93 f4 04 	sts	0x04F4, r19
    8f98:	20 93 f3 04 	sts	0x04F3, r18
    8f9c:	20 91 e4 04 	lds	r18, 0x04E4
				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;

					if(irCommBitsSignalIndexTemp>199) {
						irCommBitsSignalIndexTemp = 199;
    8fa0:	47 ec       	ldi	r20, 0xC7	; 199
    8fa2:	c4 2e       	mov	r12, r20
    8fa4:	16 c0       	rjmp	.+44     	; 0x8fd2 <irCommTasks+0x7ec>
						updateRedLed(0);
					}
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
    8fa6:	e2 2f       	mov	r30, r18
    8fa8:	f0 e0       	ldi	r31, 0x00	; 0
    8faa:	ee 0f       	add	r30, r30
    8fac:	ff 1f       	adc	r31, r31
    8fae:	e8 58       	subi	r30, 0x88	; 136
    8fb0:	f6 4f       	sbci	r31, 0xF6	; 246
    8fb2:	91 83       	std	Z+1, r25	; 0x01
    8fb4:	80 83       	st	Z, r24
					irCommBitsSignalIndexTemp++;
    8fb6:	2f 5f       	subi	r18, 0xFF	; 255
    8fb8:	20 93 e4 04 	sts	0x04E4, r18
    8fbc:	0e 5f       	subi	r16, 0xFE	; 254
    8fbe:	1f 4f       	sbci	r17, 0xFF	; 255
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    8fc0:	bb e0       	ldi	r27, 0x0B	; 11
    8fc2:	02 34       	cpi	r16, 0x42	; 66
    8fc4:	1b 07       	cpc	r17, r27
    8fc6:	09 f4       	brne	.+2      	; 0x8fca <irCommTasks+0x7e4>
    8fc8:	80 c3       	rjmp	.+1792   	; 0x96ca <irCommTasks+0xee4>
    8fca:	60 91 f3 04 	lds	r22, 0x04F3
    8fce:	70 91 f4 04 	lds	r23, 0x04F4
					irCommMaxSensorSignal[i] -= irCommProxMean;
    8fd2:	f8 01       	movw	r30, r16
    8fd4:	80 81       	ld	r24, Z
    8fd6:	91 81       	ldd	r25, Z+1	; 0x01
    8fd8:	86 1b       	sub	r24, r22
    8fda:	97 0b       	sbc	r25, r23
    8fdc:	91 83       	std	Z+1, r25	; 0x01
    8fde:	80 83       	st	Z, r24

					if(irCommBitsSignalIndexTemp>199) {
    8fe0:	28 3c       	cpi	r18, 0xC8	; 200
    8fe2:	08 f3       	brcs	.-62     	; 0x8fa6 <irCommTasks+0x7c0>
						irCommBitsSignalIndexTemp = 199;
    8fe4:	c0 92 e4 04 	sts	0x04E4, r12
						updateRedLed(0);
    8fe8:	80 e0       	ldi	r24, 0x00	; 0
    8fea:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    8fee:	20 91 e4 04 	lds	r18, 0x04E4
    8ff2:	d8 01       	movw	r26, r16
    8ff4:	8d 91       	ld	r24, X+
    8ff6:	9c 91       	ld	r25, X
    8ff8:	11 97       	sbiw	r26, 0x01	; 1
    8ffa:	d5 cf       	rjmp	.-86     	; 0x8fa6 <irCommTasks+0x7c0>
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
    8ffc:	8c e3       	ldi	r24, 0x3C	; 60
    8ffe:	90 e0       	ldi	r25, 0x00	; 0
    9000:	90 93 0f 05 	sts	0x050F, r25
    9004:	80 93 0e 05 	sts	0x050E, r24
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
    9008:	84 e0       	ldi	r24, 0x04	; 4
    900a:	80 93 10 05 	sts	0x0510, r24
    900e:	99 cd       	rjmp	.-1230   	; 0x8b42 <irCommTasks+0x35c>
					irCommMaxSensorSignalTemp[irCommMaxSensorSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommMaxSensorSignalIndexTemp++;					

					irCommProxSum += irCommMaxSensorSignal[i];
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
						irCommShiftCount++;								
    9010:	a0 91 f1 04 	lds	r26, 0x04F1
    9014:	af 5f       	subi	r26, 0xFF	; 255
    9016:	a0 93 f1 04 	sts	0x04F1, r26
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    901a:	80 91 ef 04 	lds	r24, 0x04EF
    901e:	90 91 f0 04 	lds	r25, 0x04F0
    9022:	48 17       	cp	r20, r24
    9024:	59 07       	cpc	r21, r25
    9026:	2c f4       	brge	.+10     	; 0x9032 <irCommTasks+0x84c>
							irCommTempMin = irCommMaxSensorSignal[i];
    9028:	50 93 f0 04 	sts	0x04F0, r21
    902c:	40 93 ef 04 	sts	0x04EF, r20
    9030:	ca 01       	movw	r24, r20
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    9032:	60 91 ed 04 	lds	r22, 0x04ED
    9036:	70 91 ee 04 	lds	r23, 0x04EE
    903a:	64 17       	cp	r22, r20
    903c:	75 07       	cpc	r23, r21
    903e:	2c f4       	brge	.+10     	; 0x904a <irCommTasks+0x864>
							irCommTempMax = irCommMaxSensorSignal[i];
    9040:	50 93 ee 04 	sts	0x04EE, r21
    9044:	40 93 ed 04 	sts	0x04ED, r20
    9048:	ba 01       	movw	r22, r20
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
    904a:	fb 01       	movw	r30, r22
    904c:	e8 1b       	sub	r30, r24
    904e:	f9 0b       	sbc	r31, r25
    9050:	cf 01       	movw	r24, r30
    9052:	ce 2e       	mov	r12, r30
    9054:	b9 2f       	mov	r27, r25
    9056:	e0 93 c7 04 	sts	0x04C7, r30
    905a:	90 93 c8 04 	sts	0x04C8, r25
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    905e:	e8 32       	cpi	r30, 0x28	; 40
    9060:	f1 05       	cpc	r31, r1
    9062:	0c f4       	brge	.+2      	; 0x9066 <irCommTasks+0x880>
    9064:	20 cd       	rjmp	.-1472   	; 0x8aa6 <irCommTasks+0x2c0>

							if(irCommStartDiffIndexTemp>1) {
    9066:	80 91 dd 04 	lds	r24, 0x04DD
    906a:	82 30       	cpi	r24, 0x02	; 2
    906c:	c0 f0       	brcs	.+48     	; 0x909e <irCommTasks+0x8b8>
								irCommStartDiffIndexTemp = 1;
    906e:	60 92 dd 04 	sts	0x04DD, r6
								updateRedLed(0);
    9072:	80 e0       	ldi	r24, 0x00	; 0
    9074:	29 83       	std	Y+1, r18	; 0x01
    9076:	3a 83       	std	Y+2, r19	; 0x02
    9078:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    907c:	80 91 dd 04 	lds	r24, 0x04DD
    9080:	c0 90 c7 04 	lds	r12, 0x04C7
    9084:	b0 91 c8 04 	lds	r27, 0x04C8
    9088:	29 81       	ldd	r18, Y+1	; 0x01
    908a:	3a 81       	ldd	r19, Y+2	; 0x02
    908c:	f9 01       	movw	r30, r18
    908e:	40 81       	ld	r20, Z
    9090:	51 81       	ldd	r21, Z+1	; 0x01
    9092:	60 91 ed 04 	lds	r22, 0x04ED
    9096:	70 91 ee 04 	lds	r23, 0x04EE
    909a:	a0 91 f1 04 	lds	r26, 0x04F1
							}
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
    909e:	e8 2f       	mov	r30, r24
    90a0:	f0 e0       	ldi	r31, 0x00	; 0
    90a2:	ee 0f       	add	r30, r30
    90a4:	ff 1f       	adc	r31, r31
    90a6:	e3 56       	subi	r30, 0x63	; 99
    90a8:	f7 4f       	sbci	r31, 0xF7	; 247
    90aa:	c0 82       	st	Z, r12
    90ac:	b1 83       	std	Z+1, r27	; 0x01
							irCommStartDiffIndexTemp++;
    90ae:	8f 5f       	subi	r24, 0xFF	; 255
    90b0:	80 93 dd 04 	sts	0x04DD, r24
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
    90b4:	46 17       	cp	r20, r22
    90b6:	57 07       	cpc	r21, r23
    90b8:	09 f4       	brne	.+2      	; 0x90bc <irCommTasks+0x8d6>
    90ba:	de c2       	rjmp	.+1468   	; 0x9678 <irCommTasks+0xe92>
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
    90bc:	80 91 ef 04 	lds	r24, 0x04EF
    90c0:	90 91 f0 04 	lds	r25, 0x04F0
    90c4:	84 17       	cp	r24, r20
    90c6:	95 07       	cpc	r25, r21
    90c8:	09 f4       	brne	.+2      	; 0x90cc <irCommTasks+0x8e6>
    90ca:	e6 c2       	rjmp	.+1484   	; 0x9698 <irCommTasks+0xeb2>
								irCommRxPeakHighToLow = 1;
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = 1024;
    90cc:	90 92 f0 04 	sts	0x04F0, r9
    90d0:	80 92 ef 04 	sts	0x04EF, r8
							irCommTempMax = 0;
    90d4:	10 92 ee 04 	sts	0x04EE, r1
    90d8:	10 92 ed 04 	sts	0x04ED, r1
							irCommComputeShift = 2;
    90dc:	70 92 f2 04 	sts	0x04F2, r7
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
    90e0:	a1 50       	subi	r26, 0x01	; 1
    90e2:	a0 93 f1 04 	sts	0x04F1, r26
							irCommRxStartPeakDuration = 0;
    90e6:	10 92 03 05 	sts	0x0503, r1
    90ea:	b2 e0       	ldi	r27, 0x02	; 2
    90ec:	bb 2e       	mov	r11, r27
    90ee:	db cc       	rjmp	.-1610   	; 0x8aa6 <irCommTasks+0x2c0>
						}
					 } else if(irCommComputeShift == 2) {		
					 	irCommRxStartPeakDuration++;					
    90f0:	80 91 03 05 	lds	r24, 0x0503
    90f4:	8f 5f       	subi	r24, 0xFF	; 255
    90f6:	80 93 03 05 	sts	0x0503, r24
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
    90fa:	60 91 ef 04 	lds	r22, 0x04EF
    90fe:	70 91 f0 04 	lds	r23, 0x04F0
    9102:	46 17       	cp	r20, r22
    9104:	57 07       	cpc	r21, r23
    9106:	2c f4       	brge	.+10     	; 0x9112 <irCommTasks+0x92c>
							irCommTempMin = irCommMaxSensorSignal[i];
    9108:	50 93 f0 04 	sts	0x04F0, r21
    910c:	40 93 ef 04 	sts	0x04EF, r20
    9110:	ba 01       	movw	r22, r20
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
    9112:	80 91 ed 04 	lds	r24, 0x04ED
    9116:	90 91 ee 04 	lds	r25, 0x04EE
    911a:	84 17       	cp	r24, r20
    911c:	95 07       	cpc	r25, r21
    911e:	2c f4       	brge	.+10     	; 0x912a <irCommTasks+0x944>
							irCommTempMax = irCommMaxSensorSignal[i];
    9120:	50 93 ee 04 	sts	0x04EE, r21
    9124:	40 93 ed 04 	sts	0x04ED, r20
    9128:	ca 01       	movw	r24, r20
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    912a:	fc 01       	movw	r30, r24
    912c:	e6 1b       	sub	r30, r22
    912e:	f7 0b       	sbc	r31, r23
    9130:	e8 32       	cpi	r30, 0x28	; 40
    9132:	f1 05       	cpc	r31, r1
    9134:	0c f4       	brge	.+2      	; 0x9138 <irCommTasks+0x952>
    9136:	b7 cc       	rjmp	.-1682   	; 0x8aa6 <irCommTasks+0x2c0>
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    9138:	48 17       	cp	r20, r24
    913a:	59 07       	cpc	r21, r25
    913c:	09 f4       	brne	.+2      	; 0x9140 <irCommTasks+0x95a>
    913e:	af c2       	rjmp	.+1374   	; 0x969e <irCommTasks+0xeb8>
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
    9140:	46 17       	cp	r20, r22
    9142:	57 07       	cpc	r21, r23
    9144:	09 f0       	breq	.+2      	; 0x9148 <irCommTasks+0x962>
    9146:	af cc       	rjmp	.-1698   	; 0x8aa6 <irCommTasks+0x2c0>
    9148:	80 91 02 05 	lds	r24, 0x0502
    914c:	88 23       	and	r24, r24
    914e:	09 f0       	breq	.+2      	; 0x9152 <irCommTasks+0x96c>
    9150:	aa cc       	rjmp	.-1708   	; 0x8aa6 <irCommTasks+0x2c0>
								irCommComputeShift = 0;
    9152:	10 92 f2 04 	sts	0x04F2, r1
    9156:	bb 24       	eor	r11, r11
    9158:	a6 cc       	rjmp	.-1716   	; 0x8aa6 <irCommTasks+0x2c0>

				}							
				break;

			case IRCOMM_RX_CHECK_CRC:
				irCommRxCrcError = (irCommRxCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
    915a:	80 91 48 05 	lds	r24, 0x0548
    915e:	90 91 e8 04 	lds	r25, 0x04E8
    9162:	89 0f       	add	r24, r25
    9164:	90 91 47 05 	lds	r25, 0x0547
    9168:	99 0f       	add	r25, r25
    916a:	89 0f       	add	r24, r25
    916c:	83 70       	andi	r24, 0x03	; 3
    916e:	80 93 f8 04 	sts	0x04F8, r24
				if(irCommRxCrcError==0) {
    9172:	88 23       	and	r24, r24
    9174:	09 f4       	brne	.+2      	; 0x9178 <irCommTasks+0x992>
    9176:	0d c3       	rjmp	.+1562   	; 0x9792 <irCommTasks+0xfac>
					updateBlueLed(0);
					usart0Transmit(irCommRxByte,1);		
					updateBlueLed(255);
				}
												
				if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    9178:	80 91 c4 04 	lds	r24, 0x04C4
    917c:	81 30       	cpi	r24, 0x01	; 1
    917e:	49 f4       	brne	.+18     	; 0x9192 <irCommTasks+0x9ac>
					currentProx = 0;
    9180:	10 92 24 02 	sts	0x0224, r1
					adcSaveDataTo = SKIP_SAMPLE;
    9184:	85 e0       	ldi	r24, 0x05	; 5
    9186:	80 93 b9 02 	sts	0x02B9, r24
					adcSamplingState = 0;
    918a:	10 92 ba 02 	sts	0x02BA, r1
					irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    918e:	10 92 c5 04 	sts	0x04C5, r1
				} else {
					irCommRxByteExpected++;
				}				
				*/

				resetDebugVariables();
    9192:	0e 94 4a 43 	call	0x8694	; 0x8694 <resetDebugVariables>

				irCommState = IRCOMM_RX_IDLE_STATE;
    9196:	81 e0       	ldi	r24, 0x01	; 1
    9198:	80 93 c6 04 	sts	0x04C6, r24

				break;
    919c:	3f cb       	rjmp	.-2434   	; 0x881c <irCommTasks+0x36>
		switch(irCommState) {
			case IRCOMM_RX_IDLE_STATE:				
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    919e:	8f ef       	ldi	r24, 0xFF	; 255
    91a0:	9f ef       	ldi	r25, 0xFF	; 255
    91a2:	90 93 49 08 	sts	0x0849, r25
    91a6:	80 93 48 08 	sts	0x0848, r24
    			irCommRxMaxSensor = -1;
    91aa:	90 93 5c 0b 	sts	0x0B5C, r25
    91ae:	80 93 5b 0b 	sts	0x0B5B, r24
    91b2:	a0 91 29 05 	lds	r26, 0x0529
    91b6:	b0 91 2a 05 	lds	r27, 0x052A
    91ba:	c0 90 15 05 	lds	r12, 0x0515
    91be:	d0 90 16 05 	lds	r13, 0x0516
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    91c2:	8d 91       	ld	r24, X+
    91c4:	9c 91       	ld	r25, X
    91c6:	11 97       	sbiw	r26, 0x01	; 1
    91c8:	f6 01       	movw	r30, r12
    91ca:	20 81       	ld	r18, Z
    91cc:	31 81       	ldd	r19, Z+1	; 0x01
    91ce:	82 1b       	sub	r24, r18
    91d0:	93 0b       	sbc	r25, r19
    91d2:	97 fd       	sbrc	r25, 7
    91d4:	08 c0       	rjmp	.+16     	; 0x91e6 <irCommTasks+0xa00>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    91d6:	90 93 49 08 	sts	0x0849, r25
    91da:	80 93 48 08 	sts	0x0848, r24
						irCommRxMaxSensor = i;
    91de:	10 92 5c 0b 	sts	0x0B5C, r1
    91e2:	10 92 5b 0b 	sts	0x0B5B, r1

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    91e6:	12 96       	adiw	r26, 0x02	; 2
    91e8:	2d 91       	ld	r18, X+
    91ea:	3c 91       	ld	r19, X
    91ec:	13 97       	sbiw	r26, 0x03	; 3
    91ee:	f6 01       	movw	r30, r12
    91f0:	82 81       	ldd	r24, Z+2	; 0x02
    91f2:	93 81       	ldd	r25, Z+3	; 0x03
    91f4:	28 1b       	sub	r18, r24
    91f6:	39 0b       	sbc	r19, r25
    91f8:	80 91 48 08 	lds	r24, 0x0848
    91fc:	90 91 49 08 	lds	r25, 0x0849
    9200:	82 17       	cp	r24, r18
    9202:	93 07       	cpc	r25, r19
    9204:	5c f4       	brge	.+22     	; 0x921c <irCommTasks+0xa36>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    9206:	30 93 49 08 	sts	0x0849, r19
    920a:	20 93 48 08 	sts	0x0848, r18
						irCommRxMaxSensor = i;
    920e:	81 e0       	ldi	r24, 0x01	; 1
    9210:	90 e0       	ldi	r25, 0x00	; 0
    9212:	90 93 5c 0b 	sts	0x0B5C, r25
    9216:	80 93 5b 0b 	sts	0x0B5B, r24
    921a:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    921c:	14 96       	adiw	r26, 0x04	; 4
    921e:	2d 91       	ld	r18, X+
    9220:	3c 91       	ld	r19, X
    9222:	15 97       	sbiw	r26, 0x05	; 5
    9224:	f6 01       	movw	r30, r12
    9226:	44 81       	ldd	r20, Z+4	; 0x04
    9228:	55 81       	ldd	r21, Z+5	; 0x05
    922a:	24 1b       	sub	r18, r20
    922c:	35 0b       	sbc	r19, r21
    922e:	82 17       	cp	r24, r18
    9230:	93 07       	cpc	r25, r19
    9232:	5c f4       	brge	.+22     	; 0x924a <irCommTasks+0xa64>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    9234:	30 93 49 08 	sts	0x0849, r19
    9238:	20 93 48 08 	sts	0x0848, r18
						irCommRxMaxSensor = i;
    923c:	82 e0       	ldi	r24, 0x02	; 2
    923e:	90 e0       	ldi	r25, 0x00	; 0
    9240:	90 93 5c 0b 	sts	0x0B5C, r25
    9244:	80 93 5b 0b 	sts	0x0B5B, r24
    9248:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    924a:	16 96       	adiw	r26, 0x06	; 6
    924c:	2d 91       	ld	r18, X+
    924e:	3c 91       	ld	r19, X
    9250:	17 97       	sbiw	r26, 0x07	; 7
    9252:	f6 01       	movw	r30, r12
    9254:	46 81       	ldd	r20, Z+6	; 0x06
    9256:	57 81       	ldd	r21, Z+7	; 0x07
    9258:	24 1b       	sub	r18, r20
    925a:	35 0b       	sbc	r19, r21
    925c:	82 17       	cp	r24, r18
    925e:	93 07       	cpc	r25, r19
    9260:	5c f4       	brge	.+22     	; 0x9278 <irCommTasks+0xa92>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    9262:	30 93 49 08 	sts	0x0849, r19
    9266:	20 93 48 08 	sts	0x0848, r18
						irCommRxMaxSensor = i;
    926a:	83 e0       	ldi	r24, 0x03	; 3
    926c:	90 e0       	ldi	r25, 0x00	; 0
    926e:	90 93 5c 0b 	sts	0x0B5C, r25
    9272:	80 93 5b 0b 	sts	0x0B5B, r24
    9276:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    9278:	18 96       	adiw	r26, 0x08	; 8
    927a:	2d 91       	ld	r18, X+
    927c:	3c 91       	ld	r19, X
    927e:	19 97       	sbiw	r26, 0x09	; 9
    9280:	f6 01       	movw	r30, r12
    9282:	40 85       	ldd	r20, Z+8	; 0x08
    9284:	51 85       	ldd	r21, Z+9	; 0x09
    9286:	24 1b       	sub	r18, r20
    9288:	35 0b       	sbc	r19, r21
    928a:	82 17       	cp	r24, r18
    928c:	93 07       	cpc	r25, r19
    928e:	5c f4       	brge	.+22     	; 0x92a6 <irCommTasks+0xac0>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    9290:	30 93 49 08 	sts	0x0849, r19
    9294:	20 93 48 08 	sts	0x0848, r18
						irCommRxMaxSensor = i;
    9298:	84 e0       	ldi	r24, 0x04	; 4
    929a:	90 e0       	ldi	r25, 0x00	; 0
    929c:	90 93 5c 0b 	sts	0x0B5C, r25
    92a0:	80 93 5b 0b 	sts	0x0B5B, r24
    92a4:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    92a6:	1a 96       	adiw	r26, 0x0a	; 10
    92a8:	2d 91       	ld	r18, X+
    92aa:	3c 91       	ld	r19, X
    92ac:	1b 97       	sbiw	r26, 0x0b	; 11
    92ae:	f6 01       	movw	r30, r12
    92b0:	42 85       	ldd	r20, Z+10	; 0x0a
    92b2:	53 85       	ldd	r21, Z+11	; 0x0b
    92b4:	24 1b       	sub	r18, r20
    92b6:	35 0b       	sbc	r19, r21
    92b8:	82 17       	cp	r24, r18
    92ba:	93 07       	cpc	r25, r19
    92bc:	5c f4       	brge	.+22     	; 0x92d4 <irCommTasks+0xaee>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    92be:	30 93 49 08 	sts	0x0849, r19
    92c2:	20 93 48 08 	sts	0x0848, r18
						irCommRxMaxSensor = i;
    92c6:	85 e0       	ldi	r24, 0x05	; 5
    92c8:	90 e0       	ldi	r25, 0x00	; 0
    92ca:	90 93 5c 0b 	sts	0x0B5C, r25
    92ce:	80 93 5b 0b 	sts	0x0B5B, r24
    92d2:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    92d4:	1c 96       	adiw	r26, 0x0c	; 12
    92d6:	2d 91       	ld	r18, X+
    92d8:	3c 91       	ld	r19, X
    92da:	1d 97       	sbiw	r26, 0x0d	; 13
    92dc:	f6 01       	movw	r30, r12
    92de:	44 85       	ldd	r20, Z+12	; 0x0c
    92e0:	55 85       	ldd	r21, Z+13	; 0x0d
    92e2:	24 1b       	sub	r18, r20
    92e4:	35 0b       	sbc	r19, r21
    92e6:	82 17       	cp	r24, r18
    92e8:	93 07       	cpc	r25, r19
    92ea:	5c f4       	brge	.+22     	; 0x9302 <irCommTasks+0xb1c>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    92ec:	30 93 49 08 	sts	0x0849, r19
    92f0:	20 93 48 08 	sts	0x0848, r18
						irCommRxMaxSensor = i;
    92f4:	86 e0       	ldi	r24, 0x06	; 6
    92f6:	90 e0       	ldi	r25, 0x00	; 0
    92f8:	90 93 5c 0b 	sts	0x0B5C, r25
    92fc:	80 93 5b 0b 	sts	0x0B5B, r24
    9300:	c9 01       	movw	r24, r18

			case IRCOMM_RX_MAX_SENSOR_STATE:				
				irCommRxMaxDiff = -1;
    			irCommRxMaxSensor = -1;
				for(i=0; i<8; i++) {
					if ((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) > irCommRxMaxDiff) {
    9302:	1e 96       	adiw	r26, 0x0e	; 14
    9304:	2d 91       	ld	r18, X+
    9306:	3c 91       	ld	r19, X
    9308:	1f 97       	sbiw	r26, 0x0f	; 15
    930a:	f6 01       	movw	r30, r12
    930c:	46 85       	ldd	r20, Z+14	; 0x0e
    930e:	57 85       	ldd	r21, Z+15	; 0x0f
    9310:	24 1b       	sub	r18, r20
    9312:	35 0b       	sbc	r19, r21
    9314:	82 17       	cp	r24, r18
    9316:	93 07       	cpc	r25, r19
    9318:	5c f4       	brge	.+22     	; 0x9330 <irCommTasks+0xb4a>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
    931a:	30 93 49 08 	sts	0x0849, r19
    931e:	20 93 48 08 	sts	0x0848, r18
						irCommRxMaxSensor = i;
    9322:	87 e0       	ldi	r24, 0x07	; 7
    9324:	90 e0       	ldi	r25, 0x00	; 0
    9326:	90 93 5c 0b 	sts	0x0B5C, r25
    932a:	80 93 5b 0b 	sts	0x0B5B, r24
    932e:	c9 01       	movw	r24, r18
					}
				}

				if(irCommRxMaxSensorIndexTemp>1) {
    9330:	20 91 d5 04 	lds	r18, 0x04D5
    9334:	22 30       	cpi	r18, 0x02	; 2
    9336:	08 f4       	brcc	.+2      	; 0x933a <irCommTasks+0xb54>
    9338:	81 c2       	rjmp	.+1282   	; 0x983c <irCommTasks+0x1056>
    933a:	42 e0       	ldi	r20, 0x02	; 2
    933c:	61 e0       	ldi	r22, 0x01	; 1
    933e:	70 e0       	ldi	r23, 0x00	; 0
					irCommRxMaxSensorIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
    9340:	20 91 5b 0b 	lds	r18, 0x0B5B
    9344:	30 91 5c 0b 	lds	r19, 0x0B5C
    9348:	66 0f       	add	r22, r22
    934a:	77 1f       	adc	r23, r23
    934c:	66 5f       	subi	r22, 0xF6	; 246
    934e:	74 4f       	sbci	r23, 0xF4	; 244
    9350:	fb 01       	movw	r30, r22
    9352:	31 83       	std	Z+1, r19	; 0x01
    9354:	20 83       	st	Z, r18
				irCommRxMaxSensorIndexTemp++;
    9356:	40 93 d5 04 	sts	0x04D5, r20
					
				if(irCommRxMaxDiffIndexTemp>1) {
    935a:	40 91 d6 04 	lds	r20, 0x04D6
    935e:	42 30       	cpi	r20, 0x02	; 2
    9360:	08 f4       	brcc	.+2      	; 0x9364 <irCommTasks+0xb7e>
    9362:	68 c2       	rjmp	.+1232   	; 0x9834 <irCommTasks+0x104e>
    9364:	42 e0       	ldi	r20, 0x02	; 2
    9366:	61 e0       	ldi	r22, 0x01	; 1
    9368:	70 e0       	ldi	r23, 0x00	; 0
					irCommRxMaxDiffIndexTemp = 1;
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
    936a:	66 0f       	add	r22, r22
    936c:	77 1f       	adc	r23, r23
    936e:	6d 5b       	subi	r22, 0xBD	; 189
    9370:	74 4f       	sbci	r23, 0xF4	; 244
    9372:	fb 01       	movw	r30, r22
    9374:	91 83       	std	Z+1, r25	; 0x01
    9376:	80 83       	st	Z, r24
				irCommRxMaxDiffIndexTemp++;
    9378:	40 93 d6 04 	sts	0x04D6, r20
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    937c:	40 91 d9 04 	lds	r20, 0x04D9
    9380:	42 30       	cpi	r20, 0x02	; 2
    9382:	08 f4       	brcc	.+2      	; 0x9386 <irCommTasks+0xba0>
    9384:	52 c2       	rjmp	.+1188   	; 0x982a <irCommTasks+0x1044>
					irCommMaxSensorValueCurrIndexTemp = 1;
    9386:	41 e0       	ldi	r20, 0x01	; 1
    9388:	40 93 d9 04 	sts	0x04D9, r20
    938c:	62 e0       	ldi	r22, 0x02	; 2
    938e:	01 e0       	ldi	r16, 0x01	; 1
    9390:	10 e0       	ldi	r17, 0x00	; 0
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
    9392:	22 0f       	add	r18, r18
    9394:	33 1f       	adc	r19, r19
    9396:	00 0f       	add	r16, r16
    9398:	11 1f       	adc	r17, r17
    939a:	09 5e       	subi	r16, 0xE9	; 233
    939c:	1a 4f       	sbci	r17, 0xFA	; 250
    939e:	a2 0f       	add	r26, r18
    93a0:	b3 1f       	adc	r27, r19
    93a2:	4d 91       	ld	r20, X+
    93a4:	5c 91       	ld	r21, X
    93a6:	d8 01       	movw	r26, r16
    93a8:	11 96       	adiw	r26, 0x01	; 1
    93aa:	5c 93       	st	X, r21
    93ac:	4e 93       	st	-X, r20
				irCommMaxSensorValueCurrIndexTemp++;
    93ae:	60 93 d9 04 	sts	0x04D9, r22
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    93b2:	40 91 da 04 	lds	r20, 0x04DA
    93b6:	42 30       	cpi	r20, 0x02	; 2
    93b8:	08 f4       	brcc	.+2      	; 0x93bc <irCommTasks+0xbd6>
    93ba:	33 c2       	rjmp	.+1126   	; 0x9822 <irCommTasks+0x103c>
					irCommMinSensorValueCurrIndexTemp = 1;
    93bc:	41 e0       	ldi	r20, 0x01	; 1
    93be:	40 93 da 04 	sts	0x04DA, r20
    93c2:	42 e0       	ldi	r20, 0x02	; 2
    93c4:	a1 e0       	ldi	r26, 0x01	; 1
    93c6:	b0 e0       	ldi	r27, 0x00	; 0
					//updateBlueLed(0);
				}
				irCommMinSensorValueCurrTemp[irCommMinSensorValueCurrIndexTemp] = irCommMinSensorValueCurr[irCommRxMaxSensor];
    93c8:	aa 0f       	add	r26, r26
    93ca:	bb 1f       	adc	r27, r27
    93cc:	a2 5f       	subi	r26, 0xF2	; 242
    93ce:	b4 4f       	sbci	r27, 0xF4	; 244
    93d0:	f6 01       	movw	r30, r12
    93d2:	e2 0f       	add	r30, r18
    93d4:	f3 1f       	adc	r31, r19
    93d6:	20 81       	ld	r18, Z
    93d8:	31 81       	ldd	r19, Z+1	; 0x01
    93da:	11 96       	adiw	r26, 0x01	; 1
    93dc:	3c 93       	st	X, r19
    93de:	2e 93       	st	-X, r18
				irCommMinSensorValueCurrIndexTemp++;			
    93e0:	40 93 da 04 	sts	0x04DA, r20


				//if(irCommRxMaxSensor == -1) {
				//	updateRedLed(0);
				//}
				if(irCommRxMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    93e4:	88 32       	cpi	r24, 0x28	; 40
    93e6:	91 05       	cpc	r25, r1
    93e8:	0c f4       	brge	.+2      	; 0x93ec <irCommTasks+0xc06>
    93ea:	5f c1       	rjmp	.+702    	; 0x96aa <irCommTasks+0xec4>
					irCommState = IRCOMM_RX_DETECT_START_BIT_STATE;	
    93ec:	83 e0       	ldi	r24, 0x03	; 3
    93ee:	80 93 c6 04 	sts	0x04C6, r24
					
					if(irCommStateIndexTemp>13) {
    93f2:	80 91 e2 04 	lds	r24, 0x04E2
    93f6:	8e 30       	cpi	r24, 0x0E	; 14
    93f8:	40 f0       	brcs	.+16     	; 0x940a <irCommTasks+0xc24>
						irCommStateIndexTemp = 13;
    93fa:	8d e0       	ldi	r24, 0x0D	; 13
    93fc:	80 93 e2 04 	sts	0x04E2, r24
						updateBlueLed(0);
    9400:	80 e0       	ldi	r24, 0x00	; 0
    9402:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <updateBlueLed>
    9406:	80 91 e2 04 	lds	r24, 0x04E2

					if(irCommStateIndexTemp>13) {
						irCommStateIndexTemp = 13;
						updateRedLed(0);
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
    940a:	90 91 c6 04 	lds	r25, 0x04C6
    940e:	e8 2f       	mov	r30, r24
    9410:	f0 e0       	ldi	r31, 0x00	; 0
    9412:	e5 5e       	subi	r30, 0xE5	; 229
    9414:	fa 4f       	sbci	r31, 0xFA	; 250
    9416:	90 83       	st	Z, r25
					irCommStateIndexTemp++;
    9418:	8f 5f       	subi	r24, 0xFF	; 255
    941a:	80 93 e2 04 	sts	0x04E2, r24
    941e:	fe c9       	rjmp	.-3076   	; 0x881c <irCommTasks+0x36>
						}											
					 }

				}

				if(irCommComputeShiftIndexTemp>1) {
    9420:	80 91 de 04 	lds	r24, 0x04DE
    9424:	82 30       	cpi	r24, 0x02	; 2
    9426:	50 f0       	brcs	.+20     	; 0x943c <irCommTasks+0xc56>
					irCommComputeShiftIndexTemp = 1;
    9428:	81 e0       	ldi	r24, 0x01	; 1
    942a:	80 93 de 04 	sts	0x04DE, r24
					updateRedLed(0);
    942e:	80 e0       	ldi	r24, 0x00	; 0
    9430:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    9434:	80 91 de 04 	lds	r24, 0x04DE
    9438:	b0 90 f2 04 	lds	r11, 0x04F2
				}
				irCommComputeShiftTemp[irCommComputeShiftIndexTemp] = irCommComputeShift;
    943c:	e8 2f       	mov	r30, r24
    943e:	f0 e0       	ldi	r31, 0x00	; 0
    9440:	e5 5b       	subi	r30, 0xB5	; 181
    9442:	fa 4f       	sbci	r31, 0xFA	; 250
    9444:	b0 82       	st	Z, r11
				irCommComputeShiftIndexTemp++;
    9446:	8f 5f       	subi	r24, 0xFF	; 255
    9448:	80 93 de 04 	sts	0x04DE, r24
				
				if(irCommShiftCountIndexTemp>1) {
    944c:	80 91 db 04 	lds	r24, 0x04DB
    9450:	82 30       	cpi	r24, 0x02	; 2
    9452:	40 f0       	brcs	.+16     	; 0x9464 <irCommTasks+0xc7e>
					irCommShiftCountIndexTemp = 1;
    9454:	81 e0       	ldi	r24, 0x01	; 1
    9456:	80 93 db 04 	sts	0x04DB, r24
					updateRedLed(0);
    945a:	80 e0       	ldi	r24, 0x00	; 0
    945c:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    9460:	80 91 db 04 	lds	r24, 0x04DB
				}
				irCommShiftCountTemp[irCommShiftCountIndexTemp] = irCommShiftCount;
    9464:	e8 2f       	mov	r30, r24
    9466:	f0 e0       	ldi	r31, 0x00	; 0
    9468:	e2 5a       	subi	r30, 0xA2	; 162
    946a:	f4 4f       	sbci	r31, 0xF4	; 244
    946c:	90 91 f1 04 	lds	r25, 0x04F1
    9470:	90 83       	st	Z, r25
				irCommShiftCountIndexTemp++;
    9472:	8f 5f       	subi	r24, 0xFF	; 255
    9474:	80 93 db 04 	sts	0x04DB, r24
				
				if(irCommRxPeakHighToLowIndexTemp>1) {
    9478:	80 91 df 04 	lds	r24, 0x04DF
    947c:	82 30       	cpi	r24, 0x02	; 2
    947e:	40 f0       	brcs	.+16     	; 0x9490 <irCommTasks+0xcaa>
					irCommRxPeakHighToLowIndexTemp = 1;
    9480:	81 e0       	ldi	r24, 0x01	; 1
    9482:	80 93 df 04 	sts	0x04DF, r24
					updateRedLed(0);
    9486:	80 e0       	ldi	r24, 0x00	; 0
    9488:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    948c:	80 91 df 04 	lds	r24, 0x04DF
				}
				irCommRxPeakHighToLowTemp[irCommRxPeakHighToLowIndexTemp] = irCommRxPeakHighToLow;
    9490:	e8 2f       	mov	r30, r24
    9492:	f0 e0       	ldi	r31, 0x00	; 0
    9494:	e8 55       	subi	r30, 0x58	; 88
    9496:	fa 4f       	sbci	r31, 0xFA	; 250
    9498:	90 91 02 05 	lds	r25, 0x0502
    949c:	90 83       	st	Z, r25
				irCommRxPeakHighToLowIndexTemp++;
    949e:	8f 5f       	subi	r24, 0xFF	; 255
    94a0:	80 93 df 04 	sts	0x04DF, r24
				
				if(irCommRxStartPeakDurationIndexTemp>1) {
    94a4:	80 91 e0 04 	lds	r24, 0x04E0
    94a8:	82 30       	cpi	r24, 0x02	; 2
    94aa:	40 f0       	brcs	.+16     	; 0x94bc <irCommTasks+0xcd6>
					irCommRxStartPeakDurationIndexTemp = 1;
    94ac:	81 e0       	ldi	r24, 0x01	; 1
    94ae:	80 93 e0 04 	sts	0x04E0, r24
					updateRedLed(0);
    94b2:	80 e0       	ldi	r24, 0x00	; 0
    94b4:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    94b8:	80 91 e0 04 	lds	r24, 0x04E0
				}
				irCommRxStartPeakDurationTemp[irCommRxStartPeakDurationIndexTemp] = irCommRxStartPeakDuration;
    94bc:	e8 2f       	mov	r30, r24
    94be:	f0 e0       	ldi	r31, 0x00	; 0
    94c0:	e6 51       	subi	r30, 0x16	; 22
    94c2:	f9 4f       	sbci	r31, 0xF9	; 249
    94c4:	90 91 03 05 	lds	r25, 0x0503
    94c8:	90 83       	st	Z, r25
				irCommRxStartPeakDurationIndexTemp++;
    94ca:	8f 5f       	subi	r24, 0xFF	; 255
    94cc:	80 93 e0 04 	sts	0x04E0, r24
				*/				
				
				//if(irCommComputeShift != 0) {	// it should not be never 1 because the difference between min and max in the current signal
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
    94d0:	60 91 e9 04 	lds	r22, 0x04E9
    94d4:	70 91 ea 04 	lds	r23, 0x04EA
    94d8:	80 91 eb 04 	lds	r24, 0x04EB
    94dc:	90 91 ec 04 	lds	r25, 0x04EC
    94e0:	24 e1       	ldi	r18, 0x14	; 20
    94e2:	30 e0       	ldi	r19, 0x00	; 0
    94e4:	40 e0       	ldi	r20, 0x00	; 0
    94e6:	50 e0       	ldi	r21, 0x00	; 0
    94e8:	0e 94 e5 51 	call	0xa3ca	; 0xa3ca <__divmodsi4>
    94ec:	b9 01       	movw	r22, r18
    94ee:	30 93 f4 04 	sts	0x04F4, r19
    94f2:	20 93 f3 04 	sts	0x04F3, r18

				if(irCommProxMeanIndexTemp>1) {
    94f6:	80 91 d7 04 	lds	r24, 0x04D7
    94fa:	82 30       	cpi	r24, 0x02	; 2
    94fc:	60 f0       	brcs	.+24     	; 0x9516 <irCommTasks+0xd30>
					irCommProxMeanIndexTemp = 1;
    94fe:	81 e0       	ldi	r24, 0x01	; 1
    9500:	80 93 d7 04 	sts	0x04D7, r24
					updateRedLed(0);
    9504:	80 e0       	ldi	r24, 0x00	; 0
    9506:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    950a:	80 91 d7 04 	lds	r24, 0x04D7
    950e:	60 91 f3 04 	lds	r22, 0x04F3
    9512:	70 91 f4 04 	lds	r23, 0x04F4
				}
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
    9516:	e8 2f       	mov	r30, r24
    9518:	f0 e0       	ldi	r31, 0x00	; 0
    951a:	ee 0f       	add	r30, r30
    951c:	ff 1f       	adc	r31, r31
    951e:	e2 5b       	subi	r30, 0xB2	; 178
    9520:	fa 4f       	sbci	r31, 0xFA	; 250
    9522:	71 83       	std	Z+1, r23	; 0x01
    9524:	60 83       	st	Z, r22
				irCommProxMeanIndexTemp++;
    9526:	8f 5f       	subi	r24, 0xFF	; 255
    9528:	80 93 d7 04 	sts	0x04D7, r24
    952c:	20 91 d4 04 	lds	r18, 0x04D4
	irCommRxBitReceivedIndexTemp = 0;
	
	
}

void irCommTasks() {
    9530:	02 e4       	ldi	r16, 0x42	; 66
    9532:	1b e0       	ldi	r17, 0x0B	; 11
				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
						irCommMaxSensorSignalFiltIndexTemp = 39;
    9534:	e7 e2       	ldi	r30, 0x27	; 39
    9536:	ce 2e       	mov	r12, r30
    9538:	18 c0       	rjmp	.+48     	; 0x956a <irCommTasks+0xd84>
						updateRedLed(0);
					}
					irCommMaxSensorSignalFiltTemp[irCommMaxSensorSignalFiltIndexTemp] = irCommMaxSensorSignal[i];
    953a:	e2 2f       	mov	r30, r18
    953c:	f0 e0       	ldi	r31, 0x00	; 0
    953e:	ee 0f       	add	r30, r30
    9540:	ff 1f       	adc	r31, r31
    9542:	ea 5a       	subi	r30, 0xAA	; 170
    9544:	fa 4f       	sbci	r31, 0xFA	; 250
    9546:	91 83       	std	Z+1, r25	; 0x01
    9548:	80 83       	st	Z, r24
					irCommMaxSensorSignalFiltIndexTemp++;
    954a:	2f 5f       	subi	r18, 0xFF	; 255
    954c:	20 93 d4 04 	sts	0x04D4, r18
    9550:	82 e0       	ldi	r24, 0x02	; 2
    9552:	90 e0       	ldi	r25, 0x00	; 0
    9554:	48 0e       	add	r4, r24
    9556:	59 1e       	adc	r5, r25
				irCommProxMeanTemp[irCommProxMeanIndexTemp] = irCommProxMean;
				irCommProxMeanIndexTemp++;
				

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9558:	92 e4       	ldi	r25, 0x42	; 66
    955a:	49 16       	cp	r4, r25
    955c:	9b e0       	ldi	r25, 0x0B	; 11
    955e:	59 06       	cpc	r5, r25
    9560:	d1 f0       	breq	.+52     	; 0x9596 <irCommTasks+0xdb0>
    9562:	60 91 f3 04 	lds	r22, 0x04F3
    9566:	70 91 f4 04 	lds	r23, 0x04F4
					irCommMaxSensorSignal[i] -= irCommProxMean;
    956a:	d2 01       	movw	r26, r4
    956c:	8d 91       	ld	r24, X+
    956e:	9c 91       	ld	r25, X
    9570:	11 97       	sbiw	r26, 0x01	; 1
    9572:	86 1b       	sub	r24, r22
    9574:	97 0b       	sbc	r25, r23
    9576:	11 96       	adiw	r26, 0x01	; 1
    9578:	9c 93       	st	X, r25
    957a:	8e 93       	st	-X, r24

					if(irCommMaxSensorSignalFiltIndexTemp>39) {
    957c:	28 32       	cpi	r18, 0x28	; 40
    957e:	e8 f2       	brcs	.-70     	; 0x953a <irCommTasks+0xd54>
						irCommMaxSensorSignalFiltIndexTemp = 39;
    9580:	c0 92 d4 04 	sts	0x04D4, r12
						updateRedLed(0);
    9584:	80 e0       	ldi	r24, 0x00	; 0
    9586:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    958a:	20 91 d4 04 	lds	r18, 0x04D4
    958e:	f2 01       	movw	r30, r4
    9590:	80 81       	ld	r24, Z
    9592:	91 81       	ldd	r25, Z+1	; 0x01
    9594:	d2 cf       	rjmp	.-92     	; 0x953a <irCommTasks+0xd54>
					irCommMaxSensorSignalFiltIndexTemp++;
					
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    9596:	80 91 1a 0b 	lds	r24, 0x0B1A
    959a:	90 91 1b 0b 	lds	r25, 0x0B1B
    959e:	18 16       	cp	r1, r24
    95a0:	19 06       	cpc	r1, r25
    95a2:	0c f0       	brlt	.+2      	; 0x95a6 <irCommTasks+0xdc0>
    95a4:	38 c1       	rjmp	.+624    	; 0x9816 <irCommTasks+0x1030>
					irCommSignalState = 1;
    95a6:	81 e0       	ldi	r24, 0x01	; 1
    95a8:	80 93 f5 04 	sts	0x04F5, r24
    95ac:	21 e0       	ldi	r18, 0x01	; 1
    95ae:	38 2f       	mov	r19, r24
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
    95b0:	ec e1       	ldi	r30, 0x1C	; 28
    95b2:	fb e0       	ldi	r31, 0x0B	; 11
    95b4:	40 e0       	ldi	r20, 0x00	; 0
    95b6:	06 c0       	rjmp	.+12     	; 0x95c4 <irCommTasks+0xdde>
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    95b8:	27 fd       	sbrc	r18, 7
    95ba:	0e c0       	rjmp	.+28     	; 0x95d8 <irCommTasks+0xdf2>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    95bc:	0e 17       	cp	r16, r30
    95be:	1f 07       	cpc	r17, r31
    95c0:	71 f0       	breq	.+28     	; 0x95de <irCommTasks+0xdf8>
    95c2:	23 2f       	mov	r18, r19
					if(irCommMaxSensorSignal[i] > 0) {
    95c4:	81 91       	ld	r24, Z+
    95c6:	91 91       	ld	r25, Z+
    95c8:	18 16       	cp	r1, r24
    95ca:	19 06       	cpc	r1, r25
    95cc:	ac f3       	brlt	.-22     	; 0x95b8 <irCommTasks+0xdd2>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    95ce:	12 16       	cp	r1, r18
    95d0:	ac f7       	brge	.-22     	; 0x95bc <irCommTasks+0xdd6>
							irCommSignalState = -1;
							irCommSwitchCount++;
    95d2:	4f 5f       	subi	r20, 0xFF	; 255
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
    95d4:	3f ef       	ldi	r19, 0xFF	; 255
    95d6:	f2 cf       	rjmp	.-28     	; 0x95bc <irCommTasks+0xdd6>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    95d8:	4f 5f       	subi	r20, 0xFF	; 255
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
    95da:	31 e0       	ldi	r19, 0x01	; 1
    95dc:	ef cf       	rjmp	.-34     	; 0x95bc <irCommTasks+0xdd6>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    95de:	30 93 f5 04 	sts	0x04F5, r19
    95e2:	40 93 f6 04 	sts	0x04F6, r20
							irCommSwitchCount++;
						}
					}
				}

				if(irCommSwitchCountIndexTemp>1) {
    95e6:	80 91 d8 04 	lds	r24, 0x04D8
    95ea:	82 30       	cpi	r24, 0x02	; 2
    95ec:	40 f0       	brcs	.+16     	; 0x95fe <irCommTasks+0xe18>
					irCommSwitchCountIndexTemp = 1;
    95ee:	81 e0       	ldi	r24, 0x01	; 1
    95f0:	80 93 d8 04 	sts	0x04D8, r24
					updateRedLed(0);
    95f4:	80 e0       	ldi	r24, 0x00	; 0
    95f6:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    95fa:	80 91 d8 04 	lds	r24, 0x04D8
				}
				irCommSwitchCountTemp[irCommSwitchCountIndexTemp] = irCommSwitchCount;
    95fe:	e8 2f       	mov	r30, r24
    9600:	f0 e0       	ldi	r31, 0x00	; 0
    9602:	e0 5d       	subi	r30, 0xD0	; 208
    9604:	fa 4f       	sbci	r31, 0xFA	; 250
    9606:	90 91 f6 04 	lds	r25, 0x04F6
    960a:	90 83       	st	Z, r25
				irCommSwitchCountIndexTemp++;
    960c:	8f 5f       	subi	r24, 0xFF	; 255
    960e:	80 93 d8 04 	sts	0x04D8, r24
				

				turnOffGreenLeds();
    9612:	0e 94 99 3b 	call	0x7732	; 0x7732 <turnOffGreenLeds>
				if(irCommRxPeakHighToLow==1) {
    9616:	90 91 02 05 	lds	r25, 0x0502
    961a:	91 30       	cpi	r25, 0x01	; 1
    961c:	09 f4       	brne	.+2      	; 0x9620 <irCommTasks+0xe3a>
    961e:	cf c0       	rjmp	.+414    	; 0x97be <irCommTasks+0xfd8>
							resetDebugVariables();				
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
    9620:	90 91 01 05 	lds	r25, 0x0501
    9624:	91 30       	cpi	r25, 0x01	; 1
    9626:	09 f4       	brne	.+2      	; 0x962a <irCommTasks+0xe44>
    9628:	54 c1       	rjmp	.+680    	; 0x98d2 <irCommTasks+0x10ec>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    962a:	90 91 f6 04 	lds	r25, 0x04F6
    962e:	92 30       	cpi	r25, 0x02	; 2
    9630:	09 f4       	brne	.+2      	; 0x9634 <irCommTasks+0xe4e>
    9632:	79 c1       	rjmp	.+754    	; 0x9926 <irCommTasks+0x1140>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    9634:	91 30       	cpi	r25, 0x01	; 1
    9636:	09 f4       	brne	.+2      	; 0x963a <irCommTasks+0xe54>
    9638:	08 c2       	rjmp	.+1040   	; 0x9a4a <irCommTasks+0x1264>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else {
							if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    963a:	80 91 c4 04 	lds	r24, 0x04C4
    963e:	81 30       	cpi	r24, 0x01	; 1
    9640:	09 f4       	brne	.+2      	; 0x9644 <irCommTasks+0xe5e>
    9642:	2a c2       	rjmp	.+1108   	; 0x9a98 <irCommTasks+0x12b2>
								currentProx = 0;
								adcSaveDataTo = SKIP_SAMPLE;
								adcSamplingState = 0;
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							}
							irCommState = IRCOMM_RX_IDLE_STATE;
    9644:	91 e0       	ldi	r25, 0x01	; 1
    9646:	90 93 c6 04 	sts	0x04C6, r25

							if(irCommSyncStateIndexTemp>1) {
    964a:	80 91 e3 04 	lds	r24, 0x04E3
    964e:	82 30       	cpi	r24, 0x02	; 2
    9650:	38 f0       	brcs	.+14     	; 0x9660 <irCommTasks+0xe7a>
								irCommSyncStateIndexTemp = 1;
    9652:	90 93 e3 04 	sts	0x04E3, r25
								updateRedLed(0);
    9656:	80 e0       	ldi	r24, 0x00	; 0
    9658:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    965c:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 15;
    9660:	e8 2f       	mov	r30, r24
    9662:	f0 e0       	ldi	r31, 0x00	; 0
    9664:	e7 5b       	subi	r30, 0xB7	; 183
    9666:	fa 4f       	sbci	r31, 0xFA	; 250
    9668:	9f e0       	ldi	r25, 0x0F	; 15
    966a:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    966c:	8f 5f       	subi	r24, 0xFF	; 255
    966e:	80 93 e3 04 	sts	0x04E3, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9672:	0e 94 4a 43 	call	0x8694	; 0x8694 <resetDebugVariables>
							break;				
    9676:	d2 c8       	rjmp	.-3676   	; 0x881c <irCommTasks+0x36>
							irCommStartDiffTemp[irCommStartDiffIndexTemp] = irCommTempValue;
							irCommStartDiffIndexTemp++;
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
    9678:	10 92 02 05 	sts	0x0502, r1
    967c:	27 cd       	rjmp	.-1458   	; 0x90cc <irCommTasks+0x8e6>
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
						irCommRxByte += 1;
					}
				} else {	// error...no significant signal perceived
					//irCommRxBitReceived[irCommRxBitCount] = 0xFF;
					updateBlueLed(0);
    967e:	80 e0       	ldi	r24, 0x00	; 0
    9680:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <updateBlueLed>
					if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    9684:	80 91 c4 04 	lds	r24, 0x04C4
    9688:	81 30       	cpi	r24, 0x01	; 1
    968a:	a9 f0       	breq	.+42     	; 0x96b6 <irCommTasks+0xed0>
						currentProx = 0;
						adcSaveDataTo = SKIP_SAMPLE;
						adcSamplingState = 0;
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
					}
					irCommState = IRCOMM_RX_IDLE_STATE;
    968c:	81 e0       	ldi	r24, 0x01	; 1
    968e:	80 93 c6 04 	sts	0x04C6, r24

					//irCommState = IRCOMM_RX_DEBUG;
					//irCommAdcRxState = 12;
					//break;

					resetDebugVariables();
    9692:	0e 94 4a 43 	call	0x8694	; 0x8694 <resetDebugVariables>
					break;
    9696:	c2 c8       	rjmp	.-3708   	; 0x881c <irCommTasks+0x36>
							

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
    9698:	60 92 02 05 	sts	0x0502, r6
    969c:	17 cd       	rjmp	.-1490   	; 0x90cc <irCommTasks+0x8e6>
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
							irCommTempMax = irCommMaxSensorSignal[i];
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
    969e:	80 91 02 05 	lds	r24, 0x0502
    96a2:	81 30       	cpi	r24, 0x01	; 1
    96a4:	09 f0       	breq	.+2      	; 0x96a8 <irCommTasks+0xec2>
    96a6:	4c cd       	rjmp	.-1384   	; 0x9140 <irCommTasks+0x95a>
    96a8:	54 cd       	rjmp	.-1368   	; 0x9152 <irCommTasks+0x96c>
					//if(irCommRxStartBitDetected == 1) {	// signal becomes too low to be reliable...or something else happened				
					//	irCommState = IRCOMM_RX_DEBUG;
					//	irCommAdcRxState = 12;
					//	updateGreenLed(0);
					//} else {
						irCommRxStartBitDetected = 0;
    96aa:	10 92 01 05 	sts	0x0501, r1
						if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    96ae:	80 91 c4 04 	lds	r24, 0x04C4
    96b2:	81 30       	cpi	r24, 0x01	; 1
    96b4:	59 f7       	brne	.-42     	; 0x968c <irCommTasks+0xea6>
					}
				} else {	// error...no significant signal perceived
					//irCommRxBitReceived[irCommRxBitCount] = 0xFF;
					updateBlueLed(0);
					if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
						currentProx = 0;
    96b6:	10 92 24 02 	sts	0x0224, r1
						adcSaveDataTo = SKIP_SAMPLE;
    96ba:	85 e0       	ldi	r24, 0x05	; 5
    96bc:	80 93 b9 02 	sts	0x02B9, r24
						adcSamplingState = 0;
    96c0:	10 92 ba 02 	sts	0x02BA, r1
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    96c4:	10 92 c5 04 	sts	0x04C5, r1
    96c8:	e1 cf       	rjmp	.-62     	; 0x968c <irCommTasks+0xea6>
					irCommBitsSignalTemp[irCommBitsSignalIndexTemp] = irCommMaxSensorSignal[i];
					irCommBitsSignalIndexTemp++;
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
    96ca:	80 91 1a 0b 	lds	r24, 0x0B1A
    96ce:	90 91 1b 0b 	lds	r25, 0x0B1B
    96d2:	18 16       	cp	r1, r24
    96d4:	19 06       	cpc	r1, r25
    96d6:	0c f0       	brlt	.+2      	; 0x96da <irCommTasks+0xef4>
    96d8:	8e c1       	rjmp	.+796    	; 0x99f6 <irCommTasks+0x1210>
					irCommSignalState = 1;
    96da:	81 e0       	ldi	r24, 0x01	; 1
    96dc:	80 93 f5 04 	sts	0x04F5, r24
    96e0:	21 e0       	ldi	r18, 0x01	; 1
    96e2:	38 2f       	mov	r19, r24
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
    96e4:	ec e1       	ldi	r30, 0x1C	; 28
    96e6:	fb e0       	ldi	r31, 0x0B	; 11
    96e8:	40 e0       	ldi	r20, 0x00	; 0
    96ea:	06 c0       	rjmp	.+12     	; 0x96f8 <irCommTasks+0xf12>
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
    96ec:	27 fd       	sbrc	r18, 7
    96ee:	0e c0       	rjmp	.+28     	; 0x970c <irCommTasks+0xf26>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    96f0:	ae 16       	cp	r10, r30
    96f2:	bf 06       	cpc	r11, r31
    96f4:	71 f0       	breq	.+28     	; 0x9712 <irCommTasks+0xf2c>
    96f6:	23 2f       	mov	r18, r19
					if(irCommMaxSensorSignal[i] > 0) {
    96f8:	81 91       	ld	r24, Z+
    96fa:	91 91       	ld	r25, Z+
    96fc:	18 16       	cp	r1, r24
    96fe:	19 06       	cpc	r1, r25
    9700:	ac f3       	brlt	.-22     	; 0x96ec <irCommTasks+0xf06>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
    9702:	12 16       	cp	r1, r18
    9704:	ac f7       	brge	.-22     	; 0x96f0 <irCommTasks+0xf0a>
							irCommSignalState = -1;
							irCommSwitchCount++;
    9706:	4f 5f       	subi	r20, 0xFF	; 255
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
    9708:	3f ef       	ldi	r19, 0xFF	; 255
    970a:	f2 cf       	rjmp	.-28     	; 0x96f0 <irCommTasks+0xf0a>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
    970c:	4f 5f       	subi	r20, 0xFF	; 255
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
    970e:	31 e0       	ldi	r19, 0x01	; 1
    9710:	ef cf       	rjmp	.-34     	; 0x96f0 <irCommTasks+0xf0a>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
    9712:	30 93 f5 04 	sts	0x04F5, r19
    9716:	40 93 f6 04 	sts	0x04F6, r20
							irCommSwitchCount++;
						}
					}
				}
				// check whether we received either a "0" or a "1"
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
    971a:	46 30       	cpi	r20, 0x06	; 6
    971c:	08 f4       	brcc	.+2      	; 0x9720 <irCommTasks+0xf3a>
    971e:	a2 c0       	rjmp	.+324    	; 0x9864 <irCommTasks+0x107e>
					irCommRxBitReceived[irCommRxBitCount] = 0;
    9720:	80 91 f7 04 	lds	r24, 0x04F7
    9724:	e8 2f       	mov	r30, r24
    9726:	f0 e0       	ldi	r31, 0x00	; 0
    9728:	e1 5c       	subi	r30, 0xC1	; 193
    972a:	fa 4f       	sbci	r31, 0xFA	; 250
    972c:	10 82       	st	Z, r1
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    972e:	88 30       	cpi	r24, 0x08	; 8
    9730:	08 f0       	brcs	.+2      	; 0x9734 <irCommTasks+0xf4e>
    9732:	67 c1       	rjmp	.+718    	; 0x9a02 <irCommTasks+0x121c>
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
    9734:	90 91 f9 04 	lds	r25, 0x04F9
    9738:	99 0f       	add	r25, r25
    973a:	90 93 f9 04 	sts	0x04F9, r25
    973e:	20 e0       	ldi	r18, 0x00	; 0
					resetDebugVariables();
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
    9740:	90 91 e5 04 	lds	r25, 0x04E5
    9744:	9a 30       	cpi	r25, 0x0A	; 10
    9746:	08 f0       	brcs	.+2      	; 0x974a <irCommTasks+0xf64>
    9748:	70 c1       	rjmp	.+736    	; 0x9a2a <irCommTasks+0x1244>
					irCommRxBitReceivedIndexTemp = 9;
					updateRedLed(0);
				}
				irCommRxBitReceivedTemp[irCommRxBitReceivedIndexTemp] = irCommRxBitReceived[irCommRxBitCount];
    974a:	e9 2f       	mov	r30, r25
    974c:	f0 e0       	ldi	r31, 0x00	; 0
    974e:	e2 5c       	subi	r30, 0xC2	; 194
    9750:	f7 4f       	sbci	r31, 0xF7	; 247
    9752:	20 83       	st	Z, r18
				irCommRxBitReceivedIndexTemp++;
    9754:	9f 5f       	subi	r25, 0xFF	; 255
    9756:	90 93 e5 04 	sts	0x04E5, r25

				setGreenLed(irCommRxBitCount, 1);
    975a:	61 e0       	ldi	r22, 0x01	; 1
    975c:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <setGreenLed>

				irCommRxBitCount++;
    9760:	80 91 f7 04 	lds	r24, 0x04F7
    9764:	8f 5f       	subi	r24, 0xFF	; 255
    9766:	80 93 f7 04 	sts	0x04F7, r24
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
    976a:	8a 30       	cpi	r24, 0x0A	; 10
    976c:	09 f4       	brne	.+2      	; 0x9770 <irCommTasks+0xf8a>
    976e:	54 c1       	rjmp	.+680    	; 0x9a18 <irCommTasks+0x1232>
					}
					irCommStateTemp[irCommStateIndexTemp] = irCommState;
					irCommStateIndexTemp++;

				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;
    9770:	85 e0       	ldi	r24, 0x05	; 5
    9772:	80 93 c6 04 	sts	0x04C6, r24

					if(irCommStateIndexTemp>13) {
    9776:	80 91 e2 04 	lds	r24, 0x04E2
    977a:	8e 30       	cpi	r24, 0x0E	; 14
    977c:	08 f4       	brcc	.+2      	; 0x9780 <irCommTasks+0xf9a>
    977e:	45 ce       	rjmp	.-886    	; 0x940a <irCommTasks+0xc24>
						irCommStateIndexTemp = 13;
    9780:	8d e0       	ldi	r24, 0x0D	; 13
    9782:	80 93 e2 04 	sts	0x04E2, r24
						updateRedLed(0);
    9786:	80 e0       	ldi	r24, 0x00	; 0
    9788:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    978c:	80 91 e2 04 	lds	r24, 0x04E2
    9790:	3c ce       	rjmp	.-904    	; 0x940a <irCommTasks+0xc24>
				break;

			case IRCOMM_RX_CHECK_CRC:
				irCommRxCrcError = (irCommRxCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
				if(irCommRxCrcError==0) {
					irCommRxLastDataReceived = irCommRxByte;
    9792:	80 91 f9 04 	lds	r24, 0x04F9
    9796:	80 93 fe 04 	sts	0x04FE, r24
					irCommRxReceivingSensor = irCommRxMaxSensor;
    979a:	80 91 5b 0b 	lds	r24, 0x0B5B
    979e:	80 93 18 02 	sts	0x0218, r24
					irCommRxDataAvailable = 1;
    97a2:	00 93 ff 04 	sts	0x04FF, r16
					updateBlueLed(0);
    97a6:	80 e0       	ldi	r24, 0x00	; 0
    97a8:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <updateBlueLed>
					usart0Transmit(irCommRxByte,1);		
    97ac:	80 91 f9 04 	lds	r24, 0x04F9
    97b0:	61 e0       	ldi	r22, 0x01	; 1
    97b2:	0e 94 80 1c 	call	0x3900	; 0x3900 <usart0Transmit>
					updateBlueLed(255);
    97b6:	8f ef       	ldi	r24, 0xFF	; 255
    97b8:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <updateBlueLed>
    97bc:	dd cc       	rjmp	.-1606   	; 0x9178 <irCommTasks+0x992>
				irCommSwitchCountIndexTemp++;
				

				turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
    97be:	20 91 01 05 	lds	r18, 0x0501
    97c2:	21 30       	cpi	r18, 0x01	; 1
    97c4:	09 f4       	brne	.+2      	; 0x97c8 <irCommTasks+0xfe2>
    97c6:	72 c1       	rjmp	.+740    	; 0x9aac <irCommTasks+0x12c6>

							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    97c8:	20 91 f6 04 	lds	r18, 0x04F6
    97cc:	22 30       	cpi	r18, 0x02	; 2
    97ce:	09 f4       	brne	.+2      	; 0x97d2 <irCommTasks+0xfec>
    97d0:	a8 c1       	rjmp	.+848    	; 0x9b22 <irCommTasks+0x133c>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {		
    97d2:	21 30       	cpi	r18, 0x01	; 1
    97d4:	09 f4       	brne	.+2      	; 0x97d8 <irCommTasks+0xff2>
    97d6:	d7 c1       	rjmp	.+942    	; 0x9b86 <irCommTasks+0x13a0>
								irCommState = IRCOMM_RX_IDLE_STATE;

								irCommSyncStateIndexTemp++;
							}							
						} else {							
							if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    97d8:	80 91 c4 04 	lds	r24, 0x04C4
    97dc:	81 30       	cpi	r24, 0x01	; 1
    97de:	09 f4       	brne	.+2      	; 0x97e2 <irCommTasks+0xffc>
    97e0:	30 c2       	rjmp	.+1120   	; 0x9c42 <irCommTasks+0x145c>
								currentProx = 0;
								adcSaveDataTo = SKIP_SAMPLE;
								adcSamplingState = 0;
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							}
							irCommState = IRCOMM_RX_IDLE_STATE;	
    97e2:	91 e0       	ldi	r25, 0x01	; 1
    97e4:	90 93 c6 04 	sts	0x04C6, r25

							if(irCommSyncStateIndexTemp>1) {
    97e8:	80 91 e3 04 	lds	r24, 0x04E3
    97ec:	82 30       	cpi	r24, 0x02	; 2
    97ee:	38 f0       	brcs	.+14     	; 0x97fe <irCommTasks+0x1018>
								irCommSyncStateIndexTemp = 1;
    97f0:	90 93 e3 04 	sts	0x04E3, r25
								updateRedLed(0);
    97f4:	80 e0       	ldi	r24, 0x00	; 0
    97f6:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    97fa:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 11;
    97fe:	e8 2f       	mov	r30, r24
    9800:	f0 e0       	ldi	r31, 0x00	; 0
    9802:	e7 5b       	subi	r30, 0xB7	; 183
    9804:	fa 4f       	sbci	r31, 0xFA	; 250
    9806:	9b e0       	ldi	r25, 0x0B	; 11
    9808:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    980a:	8f 5f       	subi	r24, 0xFF	; 255
    980c:	80 93 e3 04 	sts	0x04E3, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9810:	0e 94 4a 43 	call	0x8694	; 0x8694 <resetDebugVariables>
							break;
    9814:	03 c8       	rjmp	.-4090   	; 0x881c <irCommTasks+0x36>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    9816:	8f ef       	ldi	r24, 0xFF	; 255
    9818:	80 93 f5 04 	sts	0x04F5, r24
    981c:	2f ef       	ldi	r18, 0xFF	; 255
    981e:	38 2f       	mov	r19, r24
    9820:	c7 ce       	rjmp	.-626    	; 0x95b0 <irCommTasks+0xdca>
					//updateBlueLed(0);
				}
				irCommMaxSensorValueCurrTemp[irCommMaxSensorValueCurrIndexTemp] = irCommMaxSensorValueCurr[irCommRxMaxSensor];
				irCommMaxSensorValueCurrIndexTemp++;
				
				if(irCommMinSensorValueCurrIndexTemp>1) {
    9822:	a4 2f       	mov	r26, r20
    9824:	b0 e0       	ldi	r27, 0x00	; 0
    9826:	4f 5f       	subi	r20, 0xFF	; 255
    9828:	cf cd       	rjmp	.-1122   	; 0x93c8 <irCommTasks+0xbe2>
					//updateBlueLed(0);
				}
				irCommRxMaxDiffTemp[irCommRxMaxDiffIndexTemp] = irCommRxMaxDiff;
				irCommRxMaxDiffIndexTemp++;
				
				if(irCommMaxSensorValueCurrIndexTemp>1) {
    982a:	04 2f       	mov	r16, r20
    982c:	10 e0       	ldi	r17, 0x00	; 0
    982e:	64 2f       	mov	r22, r20
    9830:	6f 5f       	subi	r22, 0xFF	; 255
    9832:	af cd       	rjmp	.-1186   	; 0x9392 <irCommTasks+0xbac>
					//updateBlueLed(0);
				}
				irCommRxMaxSensorTemp[irCommRxMaxSensorIndexTemp] = irCommRxMaxSensor;
				irCommRxMaxSensorIndexTemp++;
					
				if(irCommRxMaxDiffIndexTemp>1) {
    9834:	64 2f       	mov	r22, r20
    9836:	70 e0       	ldi	r23, 0x00	; 0
    9838:	4f 5f       	subi	r20, 0xFF	; 255
    983a:	97 cd       	rjmp	.-1234   	; 0x936a <irCommTasks+0xb84>
						irCommRxMaxDiff = irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i];
						irCommRxMaxSensor = i;
					}
				}

				if(irCommRxMaxSensorIndexTemp>1) {
    983c:	62 2f       	mov	r22, r18
    983e:	70 e0       	ldi	r23, 0x00	; 0
    9840:	42 2f       	mov	r20, r18
    9842:	4f 5f       	subi	r20, 0xFF	; 255
    9844:	7d cd       	rjmp	.-1286   	; 0x9340 <irCommTasks+0xb5a>
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
					updateBlueLed(0);
    9846:	80 e0       	ldi	r24, 0x00	; 0
    9848:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <updateBlueLed>
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
    984c:	80 ef       	ldi	r24, 0xF0	; 240
    984e:	90 e0       	ldi	r25, 0x00	; 0
    9850:	90 93 0f 05 	sts	0x050F, r25
    9854:	80 93 0e 05 	sts	0x050E, r24
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
    9858:	81 e0       	ldi	r24, 0x01	; 1
    985a:	80 93 10 05 	sts	0x0510, r24
    985e:	20 91 0c 05 	lds	r18, 0x050C
    9862:	6f c9       	rjmp	.-3362   	; 0x8b42 <irCommTasks+0x35c>
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
					irCommRxBitReceived[irCommRxBitCount] = 0;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
					}
				} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
    9864:	43 30       	cpi	r20, 0x03	; 3
    9866:	08 f4       	brcc	.+2      	; 0x986a <irCommTasks+0x1084>
    9868:	0a cf       	rjmp	.-492    	; 0x967e <irCommTasks+0xe98>
					irCommRxBitReceived[irCommRxBitCount] = 1;
    986a:	80 91 f7 04 	lds	r24, 0x04F7
    986e:	e8 2f       	mov	r30, r24
    9870:	f0 e0       	ldi	r31, 0x00	; 0
    9872:	e1 5c       	subi	r30, 0xC1	; 193
    9874:	fa 4f       	sbci	r31, 0xFA	; 250
    9876:	91 e0       	ldi	r25, 0x01	; 1
    9878:	90 83       	st	Z, r25
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    987a:	88 30       	cpi	r24, 0x08	; 8
    987c:	08 f0       	brcs	.+2      	; 0x9880 <irCommTasks+0x109a>
    987e:	0a c1       	rjmp	.+532    	; 0x9a94 <irCommTasks+0x12ae>
						irCommRxCrc++;
    9880:	90 91 e8 04 	lds	r25, 0x04E8
    9884:	9f 5f       	subi	r25, 0xFF	; 255
    9886:	90 93 e8 04 	sts	0x04E8, r25
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
    988a:	90 91 f9 04 	lds	r25, 0x04F9
    988e:	99 0f       	add	r25, r25
						irCommRxByte += 1;
    9890:	9f 5f       	subi	r25, 0xFF	; 255
    9892:	90 93 f9 04 	sts	0x04F9, r25
    9896:	21 e0       	ldi	r18, 0x01	; 1
    9898:	53 cf       	rjmp	.-346    	; 0x9740 <irCommTasks+0xf5a>
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
					updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					updateBlueLed(0);
    989a:	80 e0       	ldi	r24, 0x00	; 0
    989c:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <updateBlueLed>
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
    98a0:	88 e7       	ldi	r24, 0x78	; 120
    98a2:	90 e0       	ldi	r25, 0x00	; 0
    98a4:	90 93 0f 05 	sts	0x050F, r25
    98a8:	80 93 0e 05 	sts	0x050E, r24
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
    98ac:	00 93 10 05 	sts	0x0510, r16
    98b0:	20 91 0c 05 	lds	r18, 0x050C
    98b4:	46 c9       	rjmp	.-3444   	; 0x8b42 <irCommTasks+0x35c>
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
					irCommTxBitToTransmit[9-i] = irCommTempValue;
					if(irCommTempValue==1) {
						irCommTxCrc++;
    98b6:	4f 5f       	subi	r20, 0xFF	; 255
    98b8:	7a c8       	rjmp	.-3852   	; 0x89ae <irCommTasks+0x1c8>
    98ba:	4f 5f       	subi	r20, 0xFF	; 255
    98bc:	6d c8       	rjmp	.-3878   	; 0x8998 <irCommTasks+0x1b2>
    98be:	4f 5f       	subi	r20, 0xFF	; 255
    98c0:	5a c8       	rjmp	.-3916   	; 0x8976 <irCommTasks+0x190>
    98c2:	4f 5f       	subi	r20, 0xFF	; 255
    98c4:	45 c8       	rjmp	.-3958   	; 0x8950 <irCommTasks+0x16a>
    98c6:	4f 5f       	subi	r20, 0xFF	; 255
    98c8:	32 c8       	rjmp	.-3996   	; 0x892e <irCommTasks+0x148>
    98ca:	4f 5f       	subi	r20, 0xFF	; 255
    98cc:	21 c8       	rjmp	.-4030   	; 0x8910 <irCommTasks+0x12a>
    98ce:	4f 5f       	subi	r20, 0xFF	; 255
    98d0:	12 c8       	rjmp	.-4060   	; 0x88f6 <irCommTasks+0x110>
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    98d2:	20 91 f6 04 	lds	r18, 0x04F6
    98d6:	22 30       	cpi	r18, 0x02	; 2
    98d8:	09 f4       	brne	.+2      	; 0x98dc <irCommTasks+0x10f6>
    98da:	12 c1       	rjmp	.+548    	; 0x9b00 <irCommTasks+0x131a>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    98dc:	21 30       	cpi	r18, 0x01	; 1
    98de:	09 f4       	brne	.+2      	; 0x98e2 <irCommTasks+0x10fc>
    98e0:	7e c1       	rjmp	.+764    	; 0x9bde <irCommTasks+0x13f8>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else {
							irCommRxStartBitDetected = 0;
    98e2:	10 92 01 05 	sts	0x0501, r1
							if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    98e6:	80 91 c4 04 	lds	r24, 0x04C4
    98ea:	81 30       	cpi	r24, 0x01	; 1
    98ec:	09 f4       	brne	.+2      	; 0x98f0 <irCommTasks+0x110a>
    98ee:	9f c1       	rjmp	.+830    	; 0x9c2e <irCommTasks+0x1448>
								currentProx = 0;
								adcSaveDataTo = SKIP_SAMPLE;
								adcSamplingState = 0;
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							}
							irCommState = IRCOMM_RX_IDLE_STATE;	
    98f0:	91 e0       	ldi	r25, 0x01	; 1
    98f2:	90 93 c6 04 	sts	0x04C6, r25

							if(irCommSyncStateIndexTemp>1) {
    98f6:	80 91 e3 04 	lds	r24, 0x04E3
    98fa:	82 30       	cpi	r24, 0x02	; 2
    98fc:	38 f0       	brcs	.+14     	; 0x990c <irCommTasks+0x1126>
								irCommSyncStateIndexTemp = 1;
    98fe:	90 93 e3 04 	sts	0x04E3, r25
								updateRedLed(0);
    9902:	80 e0       	ldi	r24, 0x00	; 0
    9904:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    9908:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 13;
    990c:	e8 2f       	mov	r30, r24
    990e:	f0 e0       	ldi	r31, 0x00	; 0
    9910:	e7 5b       	subi	r30, 0xB7	; 183
    9912:	fa 4f       	sbci	r31, 0xFA	; 250
    9914:	9d e0       	ldi	r25, 0x0D	; 13
    9916:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9918:	8f 5f       	subi	r24, 0xFF	; 255
    991a:	80 93 e3 04 	sts	0x04E3, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    991e:	0e 94 4a 43 	call	0x8694	; 0x8694 <resetDebugVariables>
							break;
    9922:	0c 94 0e 44 	jmp	0x881c	; 0x881c <irCommTasks+0x36>
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    9926:	80 91 e3 04 	lds	r24, 0x04E3
    992a:	82 30       	cpi	r24, 0x02	; 2
    992c:	40 f0       	brcs	.+16     	; 0x993e <irCommTasks+0x1158>
								irCommSyncStateIndexTemp = 1;
    992e:	81 e0       	ldi	r24, 0x01	; 1
    9930:	80 93 e3 04 	sts	0x04E3, r24
								updateRedLed(0);
    9934:	80 e0       	ldi	r24, 0x00	; 0
    9936:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    993a:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 1;
    993e:	e8 2f       	mov	r30, r24
    9940:	f0 e0       	ldi	r31, 0x00	; 0
    9942:	e7 5b       	subi	r30, 0xB7	; 183
    9944:	fa 4f       	sbci	r31, 0xFA	; 250
    9946:	91 e0       	ldi	r25, 0x01	; 1
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
								irCommSyncStateIndexTemp = 1;
								updateRedLed(0);
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 5;
    9948:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    994a:	8f 5f       	subi	r24, 0xFF	; 255
    994c:	80 93 e3 04 	sts	0x04E3, r24

							irCommShiftCount = IRCOMM_SAMPLING_WINDOW/2 + irCommShiftCount;
    9950:	80 91 f1 04 	lds	r24, 0x04F1
    9954:	86 5f       	subi	r24, 0xF6	; 246
    9956:	80 93 f1 04 	sts	0x04F1, r24
							irCommRxPeakHighToLow = 0;
    995a:	10 92 02 05 	sts	0x0502, r1
							irCommRxStartBitDetected = 0;
    995e:	10 92 01 05 	sts	0x0501, r1
							irCommSecondBitSkipped = 0;
    9962:	10 92 fa 04 	sts	0x04FA, r1
							irCommShiftCounter = 0;
    9966:	10 92 fb 04 	sts	0x04FB, r1
							irCommRxBitCount = 0;	
    996a:	10 92 f7 04 	sts	0x04F7, r1
							irCommRxCrc = 0;	
    996e:	10 92 e8 04 	sts	0x04E8, r1
							irCommRxByte = 0;
    9972:	10 92 f9 04 	sts	0x04F9, r1
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
    9976:	84 e0       	ldi	r24, 0x04	; 4
    9978:	80 93 c6 04 	sts	0x04C6, r24
							break;				
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
    997c:	80 91 e2 04 	lds	r24, 0x04E2
    9980:	8e 30       	cpi	r24, 0x0E	; 14
    9982:	08 f0       	brcs	.+2      	; 0x9986 <irCommTasks+0x11a0>
    9984:	40 c0       	rjmp	.+128    	; 0x9a06 <irCommTasks+0x1220>
					irCommStateIndexTemp = 13;
					updateRedLed(0);
				}
				irCommStateTemp[irCommStateIndexTemp] = irCommState;
    9986:	90 91 c6 04 	lds	r25, 0x04C6
    998a:	e8 2f       	mov	r30, r24
    998c:	f0 e0       	ldi	r31, 0x00	; 0
    998e:	e5 5e       	subi	r30, 0xE5	; 229
    9990:	fa 4f       	sbci	r31, 0xFA	; 250
    9992:	90 83       	st	Z, r25
				irCommStateIndexTemp++;
    9994:	8f 5f       	subi	r24, 0xFF	; 255
    9996:	80 93 e2 04 	sts	0x04E2, r24
				
				if(irCommShiftCountFinalIndexTemp>1) {
    999a:	80 91 dc 04 	lds	r24, 0x04DC
    999e:	82 30       	cpi	r24, 0x02	; 2
    99a0:	40 f0       	brcs	.+16     	; 0x99b2 <irCommTasks+0x11cc>
					irCommShiftCountFinalIndexTemp = 1;
    99a2:	81 e0       	ldi	r24, 0x01	; 1
    99a4:	80 93 dc 04 	sts	0x04DC, r24
					updateRedLed(0);
    99a8:	80 e0       	ldi	r24, 0x00	; 0
    99aa:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    99ae:	80 91 dc 04 	lds	r24, 0x04DC
				}
				irCommShiftCountFinalTemp[irCommShiftCountFinalIndexTemp] = irCommShiftCount;
    99b2:	e8 2f       	mov	r30, r24
    99b4:	f0 e0       	ldi	r31, 0x00	; 0
    99b6:	ea 5e       	subi	r30, 0xEA	; 234
    99b8:	f4 4f       	sbci	r31, 0xF4	; 244
    99ba:	90 91 f1 04 	lds	r25, 0x04F1
    99be:	90 83       	st	Z, r25
				irCommShiftCountFinalIndexTemp++;
    99c0:	8f 5f       	subi	r24, 0xFF	; 255
    99c2:	80 93 dc 04 	sts	0x04DC, r24
				
				if(irCommRxStartBitDetectedIndexTemp>1) {
    99c6:	80 91 e1 04 	lds	r24, 0x04E1
    99ca:	82 30       	cpi	r24, 0x02	; 2
    99cc:	40 f0       	brcs	.+16     	; 0x99de <irCommTasks+0x11f8>
					irCommRxStartBitDetectedIndexTemp = 1;
    99ce:	81 e0       	ldi	r24, 0x01	; 1
    99d0:	80 93 e1 04 	sts	0x04E1, r24
					updateRedLed(0);
    99d4:	80 e0       	ldi	r24, 0x00	; 0
    99d6:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    99da:	80 91 e1 04 	lds	r24, 0x04E1
				}
				irCommRxStartBitDetectedTemp[irCommRxStartBitDetectedIndexTemp] = irCommRxStartBitDetected;
    99de:	e8 2f       	mov	r30, r24
    99e0:	f0 e0       	ldi	r31, 0x00	; 0
    99e2:	ec 5a       	subi	r30, 0xAC	; 172
    99e4:	fa 4f       	sbci	r31, 0xFA	; 250
    99e6:	90 91 01 05 	lds	r25, 0x0501
    99ea:	90 83       	st	Z, r25
				irCommRxStartBitDetectedIndexTemp++;
    99ec:	8f 5f       	subi	r24, 0xFF	; 255
    99ee:	80 93 e1 04 	sts	0x04E1, r24
				rfDebugSendData();
				rfDebugSendData();
				rfDebugNextPacket();
				*/

				break;
    99f2:	0c 94 0e 44 	jmp	0x881c	; 0x881c <irCommTasks+0x36>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    99f6:	8f ef       	ldi	r24, 0xFF	; 255
    99f8:	80 93 f5 04 	sts	0x04F5, r24
    99fc:	2f ef       	ldi	r18, 0xFF	; 255
    99fe:	38 2f       	mov	r19, r24
    9a00:	71 ce       	rjmp	.-798    	; 0x96e4 <irCommTasks+0xefe>
					}
				}
				// check whether we received either a "0" or a "1"
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
					irCommRxBitReceived[irCommRxBitCount] = 0;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    9a02:	20 e0       	ldi	r18, 0x00	; 0
    9a04:	9d ce       	rjmp	.-710    	; 0x9740 <irCommTasks+0xf5a>
						}
					}
				}
	
				if(irCommStateIndexTemp>13) {
					irCommStateIndexTemp = 13;
    9a06:	8d e0       	ldi	r24, 0x0D	; 13
    9a08:	80 93 e2 04 	sts	0x04E2, r24
					updateRedLed(0);
    9a0c:	80 e0       	ldi	r24, 0x00	; 0
    9a0e:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    9a12:	80 91 e2 04 	lds	r24, 0x04E2
    9a16:	b7 cf       	rjmp	.-146    	; 0x9986 <irCommTasks+0x11a0>

				setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
					irCommState = IRCOMM_RX_CHECK_CRC;
    9a18:	87 e0       	ldi	r24, 0x07	; 7
    9a1a:	80 93 c6 04 	sts	0x04C6, r24

					if(irCommStateIndexTemp>13) {
    9a1e:	80 91 e2 04 	lds	r24, 0x04E2
    9a22:	8e 30       	cpi	r24, 0x0E	; 14
    9a24:	08 f4       	brcc	.+2      	; 0x9a28 <irCommTasks+0x1242>
    9a26:	f1 cc       	rjmp	.-1566   	; 0x940a <irCommTasks+0xc24>
    9a28:	ab ce       	rjmp	.-682    	; 0x9780 <irCommTasks+0xf9a>
					break;

				}

				if(irCommRxBitReceivedIndexTemp>9) {
					irCommRxBitReceivedIndexTemp = 9;
    9a2a:	89 e0       	ldi	r24, 0x09	; 9
    9a2c:	80 93 e5 04 	sts	0x04E5, r24
					updateRedLed(0);
    9a30:	80 e0       	ldi	r24, 0x00	; 0
    9a32:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    9a36:	90 91 e5 04 	lds	r25, 0x04E5
    9a3a:	80 91 f7 04 	lds	r24, 0x04F7
    9a3e:	e8 2f       	mov	r30, r24
    9a40:	f0 e0       	ldi	r31, 0x00	; 0
    9a42:	e1 5c       	subi	r30, 0xC1	; 193
    9a44:	fa 4f       	sbci	r31, 0xFA	; 250
    9a46:	20 81       	ld	r18, Z
    9a48:	80 ce       	rjmp	.-768    	; 0x974a <irCommTasks+0xf64>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    9a4a:	80 91 03 05 	lds	r24, 0x0503
    9a4e:	8b 30       	cpi	r24, 0x0B	; 11
    9a50:	08 f4       	brcc	.+2      	; 0x9a54 <irCommTasks+0x126e>
    9a52:	81 c0       	rjmp	.+258    	; 0x9b56 <irCommTasks+0x1370>
								if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    9a54:	80 91 c4 04 	lds	r24, 0x04C4
    9a58:	81 30       	cpi	r24, 0x01	; 1
    9a5a:	09 f4       	brne	.+2      	; 0x9a5e <irCommTasks+0x1278>
    9a5c:	38 c1       	rjmp	.+624    	; 0x9cce <irCommTasks+0x14e8>
									currentProx = 0;
									adcSaveDataTo = SKIP_SAMPLE;
									adcSamplingState = 0;
									irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
								}
								irCommState = IRCOMM_RX_IDLE_STATE;
    9a5e:	91 e0       	ldi	r25, 0x01	; 1
    9a60:	90 93 c6 04 	sts	0x04C6, r25

								if(irCommSyncStateIndexTemp>1) {
    9a64:	80 91 e3 04 	lds	r24, 0x04E3
    9a68:	82 30       	cpi	r24, 0x02	; 2
    9a6a:	38 f0       	brcs	.+14     	; 0x9a7a <irCommTasks+0x1294>
									irCommSyncStateIndexTemp = 1;
    9a6c:	90 93 e3 04 	sts	0x04E3, r25
									updateRedLed(0);
    9a70:	80 e0       	ldi	r24, 0x00	; 0
    9a72:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    9a76:	80 91 e3 04 	lds	r24, 0x04E3
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 14;
    9a7a:	e8 2f       	mov	r30, r24
    9a7c:	f0 e0       	ldi	r31, 0x00	; 0
    9a7e:	e7 5b       	subi	r30, 0xB7	; 183
    9a80:	fa 4f       	sbci	r31, 0xFA	; 250
    9a82:	9e e0       	ldi	r25, 0x0E	; 14
    9a84:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    9a86:	8f 5f       	subi	r24, 0xFF	; 255
    9a88:	80 93 e3 04 	sts	0x04E3, r24
								//irCommState = IRCOMM_RX_DEBUG;
								//irCommAdcRxState = 12;
								//updateRedLed(0);
								//break;

								resetDebugVariables();				
    9a8c:	0e 94 4a 43 	call	0x8694	; 0x8694 <resetDebugVariables>
								break;
    9a90:	0c 94 0e 44 	jmp	0x881c	; 0x881c <irCommTasks+0x36>
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
					}
				} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
					irCommRxBitReceived[irCommRxBitCount] = 1;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    9a94:	21 e0       	ldi	r18, 0x01	; 1
    9a96:	54 ce       	rjmp	.-856    	; 0x9740 <irCommTasks+0xf5a>
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else {
							if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
								currentProx = 0;
    9a98:	10 92 24 02 	sts	0x0224, r1
								adcSaveDataTo = SKIP_SAMPLE;
    9a9c:	85 e0       	ldi	r24, 0x05	; 5
    9a9e:	80 93 b9 02 	sts	0x02B9, r24
								adcSamplingState = 0;
    9aa2:	10 92 ba 02 	sts	0x02BA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9aa6:	10 92 c5 04 	sts	0x04C5, r1
    9aaa:	cc cd       	rjmp	.-1128   	; 0x9644 <irCommTasks+0xe5e>
				

				turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    9aac:	90 91 f6 04 	lds	r25, 0x04F6
    9ab0:	92 30       	cpi	r25, 0x02	; 2
    9ab2:	09 f4       	brne	.+2      	; 0x9ab6 <irCommTasks+0x12d0>
    9ab4:	d0 c0       	rjmp	.+416    	; 0x9c56 <irCommTasks+0x1470>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
    9ab6:	91 30       	cpi	r25, 0x01	; 1
    9ab8:	09 f4       	brne	.+2      	; 0x9abc <irCommTasks+0x12d6>
    9aba:	f4 c0       	rjmp	.+488    	; 0x9ca4 <irCommTasks+0x14be>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else {
							irCommRxStartBitDetected = 0;
    9abc:	10 92 01 05 	sts	0x0501, r1
							if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    9ac0:	80 91 c4 04 	lds	r24, 0x04C4
    9ac4:	81 30       	cpi	r24, 0x01	; 1
    9ac6:	09 f4       	brne	.+2      	; 0x9aca <irCommTasks+0x12e4>
    9ac8:	0c c1       	rjmp	.+536    	; 0x9ce2 <irCommTasks+0x14fc>
								currentProx = 0;
								adcSaveDataTo = SKIP_SAMPLE;
								adcSamplingState = 0;
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							}
							irCommState = IRCOMM_RX_IDLE_STATE;	
    9aca:	91 e0       	ldi	r25, 0x01	; 1
    9acc:	90 93 c6 04 	sts	0x04C6, r25

							if(irCommSyncStateIndexTemp>1) {
    9ad0:	80 91 e3 04 	lds	r24, 0x04E3
    9ad4:	82 30       	cpi	r24, 0x02	; 2
    9ad6:	38 f0       	brcs	.+14     	; 0x9ae6 <irCommTasks+0x1300>
								irCommSyncStateIndexTemp = 1;
    9ad8:	90 93 e3 04 	sts	0x04E3, r25
								updateRedLed(0);
    9adc:	80 e0       	ldi	r24, 0x00	; 0
    9ade:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    9ae2:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 12;
    9ae6:	e8 2f       	mov	r30, r24
    9ae8:	f0 e0       	ldi	r31, 0x00	; 0
    9aea:	e7 5b       	subi	r30, 0xB7	; 183
    9aec:	fa 4f       	sbci	r31, 0xFA	; 250
    9aee:	9c e0       	ldi	r25, 0x0C	; 12
    9af0:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9af2:	8f 5f       	subi	r24, 0xFF	; 255
    9af4:	80 93 e3 04 	sts	0x04E3, r24
							//irCommState = IRCOMM_RX_DEBUG;
							//irCommAdcRxState = 12;
							//updateRedLed(0);
							//break;

							resetDebugVariables();				
    9af8:	0e 94 4a 43 	call	0x8694	; 0x8694 <resetDebugVariables>
							break;
    9afc:	0c 94 0e 44 	jmp	0x881c	; 0x881c <irCommTasks+0x36>
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    9b00:	80 91 e3 04 	lds	r24, 0x04E3
    9b04:	82 30       	cpi	r24, 0x02	; 2
    9b06:	38 f0       	brcs	.+14     	; 0x9b16 <irCommTasks+0x1330>
								irCommSyncStateIndexTemp = 1;
    9b08:	90 93 e3 04 	sts	0x04E3, r25
								updateRedLed(0);
    9b0c:	80 e0       	ldi	r24, 0x00	; 0
    9b0e:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    9b12:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 5;
    9b16:	e8 2f       	mov	r30, r24
    9b18:	f0 e0       	ldi	r31, 0x00	; 0
    9b1a:	e7 5b       	subi	r30, 0xB7	; 183
    9b1c:	fa 4f       	sbci	r31, 0xFA	; 250
    9b1e:	95 e0       	ldi	r25, 0x05	; 5
    9b20:	13 cf       	rjmp	.-474    	; 0x9948 <irCommTasks+0x1162>
							resetDebugVariables();				
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    9b22:	80 91 e3 04 	lds	r24, 0x04E3
    9b26:	82 30       	cpi	r24, 0x02	; 2
    9b28:	38 f0       	brcs	.+14     	; 0x9b38 <irCommTasks+0x1352>
								irCommSyncStateIndexTemp = 1;
    9b2a:	90 93 e3 04 	sts	0x04E3, r25
								updateRedLed(0);
    9b2e:	80 e0       	ldi	r24, 0x00	; 0
    9b30:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    9b34:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 3;
    9b38:	e8 2f       	mov	r30, r24
    9b3a:	f0 e0       	ldi	r31, 0x00	; 0
    9b3c:	e7 5b       	subi	r30, 0xB7	; 183
    9b3e:	fa 4f       	sbci	r31, 0xFA	; 250
    9b40:	93 e0       	ldi	r25, 0x03	; 3
    9b42:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9b44:	8f 5f       	subi	r24, 0xFF	; 255
    9b46:	80 93 e3 04 	sts	0x04E3, r24

							irCommShiftCount = IRCOMM_SAMPLING_WINDOW + irCommShiftCount;
    9b4a:	80 91 f1 04 	lds	r24, 0x04F1
    9b4e:	8c 5e       	subi	r24, 0xEC	; 236
    9b50:	80 93 f1 04 	sts	0x04F1, r24
    9b54:	02 cf       	rjmp	.-508    	; 0x995a <irCommTasks+0x1174>
								//break;

								resetDebugVariables();				
								break;
							} else {
								if(irCommSyncStateIndexTemp>1) {
    9b56:	80 91 e3 04 	lds	r24, 0x04E3
    9b5a:	82 30       	cpi	r24, 0x02	; 2
    9b5c:	38 f0       	brcs	.+14     	; 0x9b6c <irCommTasks+0x1386>
									irCommSyncStateIndexTemp = 1;
    9b5e:	90 93 e3 04 	sts	0x04E3, r25
									updateRedLed(0);
    9b62:	80 e0       	ldi	r24, 0x00	; 0
    9b64:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    9b68:	80 91 e3 04 	lds	r24, 0x04E3
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 7;
    9b6c:	e8 2f       	mov	r30, r24
    9b6e:	f0 e0       	ldi	r31, 0x00	; 0
    9b70:	e7 5b       	subi	r30, 0xB7	; 183
    9b72:	fa 4f       	sbci	r31, 0xFA	; 250
    9b74:	97 e0       	ldi	r25, 0x07	; 7
    9b76:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    9b78:	8f 5f       	subi	r24, 0xFF	; 255
    9b7a:	80 93 e3 04 	sts	0x04E3, r24

								irCommShiftCount = IRCOMM_SAMPLING_WINDOW;
    9b7e:	84 e1       	ldi	r24, 0x14	; 20
    9b80:	80 93 f1 04 	sts	0x04F1, r24
    9b84:	ea ce       	rjmp	.-556    	; 0x995a <irCommTasks+0x1174>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {		
							irCommRxStartBitDetected = 1;					
    9b86:	20 93 01 05 	sts	0x0501, r18
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    9b8a:	80 91 03 05 	lds	r24, 0x0503
    9b8e:	8b 30       	cpi	r24, 0x0B	; 11
    9b90:	08 f4       	brcc	.+2      	; 0x9b94 <irCommTasks+0x13ae>
    9b92:	72 c0       	rjmp	.+228    	; 0x9c78 <irCommTasks+0x1492>
								if(irCommSyncStateIndexTemp>1) {
    9b94:	80 91 e3 04 	lds	r24, 0x04E3
    9b98:	82 30       	cpi	r24, 0x02	; 2
    9b9a:	38 f0       	brcs	.+14     	; 0x9baa <irCommTasks+0x13c4>
									irCommSyncStateIndexTemp = 1;
    9b9c:	20 93 e3 04 	sts	0x04E3, r18
									updateRedLed(0);
    9ba0:	80 e0       	ldi	r24, 0x00	; 0
    9ba2:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    9ba6:	80 91 e3 04 	lds	r24, 0x04E3
								}
								irCommSyncStateTemp[irCommSyncStateIndexTemp] = 4;
    9baa:	e8 2f       	mov	r30, r24
    9bac:	f0 e0       	ldi	r31, 0x00	; 0
    9bae:	e7 5b       	subi	r30, 0xB7	; 183
    9bb0:	fa 4f       	sbci	r31, 0xFA	; 250
    9bb2:	94 e0       	ldi	r25, 0x04	; 4
    9bb4:	90 83       	st	Z, r25
								irCommSyncStateIndexTemp++;
    9bb6:	8f 5f       	subi	r24, 0xFF	; 255
    9bb8:	80 93 e3 04 	sts	0x04E3, r24

								//irCommShiftCount = irCommShiftCount;
								irCommRxPeakHighToLow = 0;
    9bbc:	10 92 02 05 	sts	0x0502, r1
								irCommRxStartBitDetected = 0;
    9bc0:	10 92 01 05 	sts	0x0501, r1
								irCommSecondBitSkipped = 0;
    9bc4:	10 92 fa 04 	sts	0x04FA, r1
								irCommShiftCounter = 0;
    9bc8:	10 92 fb 04 	sts	0x04FB, r1
								irCommRxBitCount = 0;	
    9bcc:	10 92 f7 04 	sts	0x04F7, r1
								irCommRxCrc = 0;	
    9bd0:	10 92 e8 04 	sts	0x04E8, r1
								irCommRxByte = 0;
    9bd4:	10 92 f9 04 	sts	0x04F9, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
    9bd8:	90 93 c6 04 	sts	0x04C6, r25
    9bdc:	cf ce       	rjmp	.-610    	; 0x997c <irCommTasks+0x1196>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    9bde:	80 91 e3 04 	lds	r24, 0x04E3
    9be2:	82 30       	cpi	r24, 0x02	; 2
    9be4:	38 f0       	brcs	.+14     	; 0x9bf4 <irCommTasks+0x140e>
								irCommSyncStateIndexTemp = 1;
    9be6:	20 93 e3 04 	sts	0x04E3, r18
								updateRedLed(0);
    9bea:	80 e0       	ldi	r24, 0x00	; 0
    9bec:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    9bf0:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 8;
    9bf4:	e8 2f       	mov	r30, r24
    9bf6:	f0 e0       	ldi	r31, 0x00	; 0
    9bf8:	e7 5b       	subi	r30, 0xB7	; 183
    9bfa:	fa 4f       	sbci	r31, 0xFA	; 250
    9bfc:	98 e0       	ldi	r25, 0x08	; 8
    9bfe:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9c00:	8f 5f       	subi	r24, 0xFF	; 255
    9c02:	80 93 e3 04 	sts	0x04E3, r24

							irCommShiftCount = 0;
    9c06:	10 92 f1 04 	sts	0x04F1, r1
							irCommRxPeakHighToLow = 0;
    9c0a:	10 92 02 05 	sts	0x0502, r1
							irCommRxStartBitDetected = 0;
    9c0e:	10 92 01 05 	sts	0x0501, r1
							irCommSecondBitSkipped = 0;
    9c12:	10 92 fa 04 	sts	0x04FA, r1
							irCommShiftCounter = 0;
    9c16:	10 92 fb 04 	sts	0x04FB, r1
							irCommRxBitCount = 0;	
    9c1a:	10 92 f7 04 	sts	0x04F7, r1
							irCommRxCrc = 0;	
    9c1e:	10 92 e8 04 	sts	0x04E8, r1
							irCommRxByte = 0;
    9c22:	10 92 f9 04 	sts	0x04F9, r1
							irCommState = IRCOMM_RX_WAITING_BIT;
    9c26:	85 e0       	ldi	r24, 0x05	; 5
    9c28:	80 93 c6 04 	sts	0x04C6, r24
    9c2c:	a7 ce       	rjmp	.-690    	; 0x997c <irCommTasks+0x1196>
						} else {
							irCommRxStartBitDetected = 0;
							if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
								currentProx = 0;
    9c2e:	10 92 24 02 	sts	0x0224, r1
								adcSaveDataTo = SKIP_SAMPLE;
    9c32:	85 e0       	ldi	r24, 0x05	; 5
    9c34:	80 93 b9 02 	sts	0x02B9, r24
								adcSamplingState = 0;
    9c38:	10 92 ba 02 	sts	0x02BA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9c3c:	10 92 c5 04 	sts	0x04C5, r1
    9c40:	57 ce       	rjmp	.-850    	; 0x98f0 <irCommTasks+0x110a>

								irCommSyncStateIndexTemp++;
							}							
						} else {							
							if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
								currentProx = 0;
    9c42:	10 92 24 02 	sts	0x0224, r1
								adcSaveDataTo = SKIP_SAMPLE;
    9c46:	85 e0       	ldi	r24, 0x05	; 5
    9c48:	80 93 b9 02 	sts	0x02B9, r24
								adcSamplingState = 0;
    9c4c:	10 92 ba 02 	sts	0x02BA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9c50:	10 92 c5 04 	sts	0x04C5, r1
    9c54:	c6 cd       	rjmp	.-1140   	; 0x97e2 <irCommTasks+0xffc>

				turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
							if(irCommSyncStateIndexTemp>1) {
    9c56:	80 91 e3 04 	lds	r24, 0x04E3
    9c5a:	82 30       	cpi	r24, 0x02	; 2
    9c5c:	38 f0       	brcs	.+14     	; 0x9c6c <irCommTasks+0x1486>
								irCommSyncStateIndexTemp = 1;
    9c5e:	20 93 e3 04 	sts	0x04E3, r18
								updateRedLed(0);
    9c62:	80 e0       	ldi	r24, 0x00	; 0
    9c64:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    9c68:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 6;
    9c6c:	e8 2f       	mov	r30, r24
    9c6e:	f0 e0       	ldi	r31, 0x00	; 0
    9c70:	e7 5b       	subi	r30, 0xB7	; 183
    9c72:	fa 4f       	sbci	r31, 0xFA	; 250
    9c74:	96 e0       	ldi	r25, 0x06	; 6
    9c76:	c3 cf       	rjmp	.-122    	; 0x9bfe <irCommTasks+0x1418>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							} else {
								if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
    9c78:	80 91 c4 04 	lds	r24, 0x04C4
    9c7c:	81 30       	cpi	r24, 0x01	; 1
    9c7e:	49 f4       	brne	.+18     	; 0x9c92 <irCommTasks+0x14ac>
									currentProx = 0;
    9c80:	10 92 24 02 	sts	0x0224, r1
									adcSaveDataTo = SKIP_SAMPLE;
    9c84:	85 e0       	ldi	r24, 0x05	; 5
    9c86:	80 93 b9 02 	sts	0x02B9, r24
									adcSamplingState = 0;
    9c8a:	10 92 ba 02 	sts	0x02BA, r1
									irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9c8e:	10 92 c5 04 	sts	0x04C5, r1
								}
								irCommState = IRCOMM_RX_IDLE_STATE;
    9c92:	81 e0       	ldi	r24, 0x01	; 1
    9c94:	80 93 c6 04 	sts	0x04C6, r24

								irCommSyncStateIndexTemp++;
    9c98:	80 91 e3 04 	lds	r24, 0x04E3
    9c9c:	8f 5f       	subi	r24, 0xFF	; 255
    9c9e:	80 93 e3 04 	sts	0x04E3, r24
    9ca2:	6c ce       	rjmp	.-808    	; 0x997c <irCommTasks+0x1196>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
							if(irCommSyncStateIndexTemp>1) {
    9ca4:	80 91 e3 04 	lds	r24, 0x04E3
    9ca8:	82 30       	cpi	r24, 0x02	; 2
    9caa:	38 f0       	brcs	.+14     	; 0x9cba <irCommTasks+0x14d4>
								irCommSyncStateIndexTemp = 1;
    9cac:	90 93 e3 04 	sts	0x04E3, r25
								updateRedLed(0);
    9cb0:	80 e0       	ldi	r24, 0x00	; 0
    9cb2:	0e 94 c0 3a 	call	0x7580	; 0x7580 <updateRedLed>
    9cb6:	80 91 e3 04 	lds	r24, 0x04E3
							}
							irCommSyncStateTemp[irCommSyncStateIndexTemp] = 2;
    9cba:	e8 2f       	mov	r30, r24
    9cbc:	f0 e0       	ldi	r31, 0x00	; 0
    9cbe:	e7 5b       	subi	r30, 0xB7	; 183
    9cc0:	fa 4f       	sbci	r31, 0xFA	; 250
    9cc2:	92 e0       	ldi	r25, 0x02	; 2
    9cc4:	90 83       	st	Z, r25
							irCommSyncStateIndexTemp++;
    9cc6:	8f 5f       	subi	r24, 0xFF	; 255
    9cc8:	80 93 e3 04 	sts	0x04E3, r24
    9ccc:	46 ce       	rjmp	.-884    	; 0x995a <irCommTasks+0x1174>
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
								if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
									currentProx = 0;
    9cce:	10 92 24 02 	sts	0x0224, r1
									adcSaveDataTo = SKIP_SAMPLE;
    9cd2:	85 e0       	ldi	r24, 0x05	; 5
    9cd4:	80 93 b9 02 	sts	0x02B9, r24
									adcSamplingState = 0;
    9cd8:	10 92 ba 02 	sts	0x02BA, r1
									irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9cdc:	10 92 c5 04 	sts	0x04C5, r1
    9ce0:	be ce       	rjmp	.-644    	; 0x9a5e <irCommTasks+0x1278>
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else {
							irCommRxStartBitDetected = 0;
							if(irCommEnabled == IRCOMM_MODE_RECEIVE) {
								currentProx = 0;
    9ce2:	10 92 24 02 	sts	0x0224, r1
								adcSaveDataTo = SKIP_SAMPLE;
    9ce6:	85 e0       	ldi	r24, 0x05	; 5
    9ce8:	80 93 b9 02 	sts	0x02B9, r24
								adcSamplingState = 0;
    9cec:	10 92 ba 02 	sts	0x02BA, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    9cf0:	10 92 c5 04 	sts	0x04C5, r1
    9cf4:	ea ce       	rjmp	.-556    	; 0x9aca <irCommTasks+0x12e4>

00009cf6 <irCommSendData>:

}


void irCommSendData(unsigned char value, unsigned char sensorMask) {
	irCommTxByte = value;
    9cf6:	80 93 05 05 	sts	0x0505, r24
	irCommTxByteEnqueued = 1;
    9cfa:	81 e0       	ldi	r24, 0x01	; 1
    9cfc:	80 93 06 05 	sts	0x0506, r24
	irCommTxSensorMask = sensorMask;
    9d00:	60 93 13 05 	sts	0x0513, r22
}
    9d04:	08 95       	ret

00009d06 <irCommDataSent>:

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
		return 0;
    9d06:	81 e0       	ldi	r24, 0x01	; 1
    9d08:	90 91 06 05 	lds	r25, 0x0506
    9d0c:	91 30       	cpi	r25, 0x01	; 1
    9d0e:	09 f0       	breq	.+2      	; 0x9d12 <irCommDataSent+0xc>
	} else {
		return 1;
	}
}
    9d10:	08 95       	ret
	irCommTxSensorMask = sensorMask;
}

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
		return 0;
    9d12:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		return 1;
	}
}
    9d14:	08 95       	ret

00009d16 <irCommDataAvailable>:

unsigned char irCommDataAvailable() {
	return irCommRxDataAvailable;
}
    9d16:	80 91 ff 04 	lds	r24, 0x04FF
    9d1a:	08 95       	ret

00009d1c <irCommReadData>:

unsigned char irCommReadData() {
	irCommRxDataAvailable = 0;
    9d1c:	10 92 ff 04 	sts	0x04FF, r1
	return irCommRxLastDataReceived;
}
    9d20:	80 91 fe 04 	lds	r24, 0x04FE
    9d24:	08 95       	ret

00009d26 <irCommReceivingSensor>:

signed char irCommReceivingSensor() {
	return irCommRxReceivingSensor;
}
    9d26:	80 91 18 02 	lds	r24, 0x0218
    9d2a:	08 95       	ret

00009d2c <__subsf3>:
    9d2c:	50 58       	subi	r21, 0x80	; 128

00009d2e <__addsf3>:
    9d2e:	bb 27       	eor	r27, r27
    9d30:	aa 27       	eor	r26, r26
    9d32:	0e d0       	rcall	.+28     	; 0x9d50 <__addsf3x>
    9d34:	27 c2       	rjmp	.+1102   	; 0xa184 <__fp_round>
    9d36:	f0 d1       	rcall	.+992    	; 0xa118 <__fp_pscA>
    9d38:	30 f0       	brcs	.+12     	; 0x9d46 <__addsf3+0x18>
    9d3a:	f5 d1       	rcall	.+1002   	; 0xa126 <__fp_pscB>
    9d3c:	20 f0       	brcs	.+8      	; 0x9d46 <__addsf3+0x18>
    9d3e:	31 f4       	brne	.+12     	; 0x9d4c <__addsf3+0x1e>
    9d40:	9f 3f       	cpi	r25, 0xFF	; 255
    9d42:	11 f4       	brne	.+4      	; 0x9d48 <__addsf3+0x1a>
    9d44:	1e f4       	brtc	.+6      	; 0x9d4c <__addsf3+0x1e>
    9d46:	c0 c1       	rjmp	.+896    	; 0xa0c8 <__fp_nan>
    9d48:	0e f4       	brtc	.+2      	; 0x9d4c <__addsf3+0x1e>
    9d4a:	e0 95       	com	r30
    9d4c:	e7 fb       	bst	r30, 7
    9d4e:	b6 c1       	rjmp	.+876    	; 0xa0bc <__fp_inf>

00009d50 <__addsf3x>:
    9d50:	e9 2f       	mov	r30, r25
    9d52:	3a d2       	rcall	.+1140   	; 0xa1c8 <__fp_split3>
    9d54:	80 f3       	brcs	.-32     	; 0x9d36 <__addsf3+0x8>
    9d56:	ba 17       	cp	r27, r26
    9d58:	62 07       	cpc	r22, r18
    9d5a:	73 07       	cpc	r23, r19
    9d5c:	84 07       	cpc	r24, r20
    9d5e:	95 07       	cpc	r25, r21
    9d60:	18 f0       	brcs	.+6      	; 0x9d68 <__addsf3x+0x18>
    9d62:	71 f4       	brne	.+28     	; 0x9d80 <__addsf3x+0x30>
    9d64:	9e f5       	brtc	.+102    	; 0x9dcc <__addsf3x+0x7c>
    9d66:	52 c2       	rjmp	.+1188   	; 0xa20c <__fp_zero>
    9d68:	0e f4       	brtc	.+2      	; 0x9d6c <__addsf3x+0x1c>
    9d6a:	e0 95       	com	r30
    9d6c:	0b 2e       	mov	r0, r27
    9d6e:	ba 2f       	mov	r27, r26
    9d70:	a0 2d       	mov	r26, r0
    9d72:	0b 01       	movw	r0, r22
    9d74:	b9 01       	movw	r22, r18
    9d76:	90 01       	movw	r18, r0
    9d78:	0c 01       	movw	r0, r24
    9d7a:	ca 01       	movw	r24, r20
    9d7c:	a0 01       	movw	r20, r0
    9d7e:	11 24       	eor	r1, r1
    9d80:	ff 27       	eor	r31, r31
    9d82:	59 1b       	sub	r21, r25
    9d84:	99 f0       	breq	.+38     	; 0x9dac <__addsf3x+0x5c>
    9d86:	59 3f       	cpi	r21, 0xF9	; 249
    9d88:	50 f4       	brcc	.+20     	; 0x9d9e <__addsf3x+0x4e>
    9d8a:	50 3e       	cpi	r21, 0xE0	; 224
    9d8c:	68 f1       	brcs	.+90     	; 0x9de8 <__addsf3x+0x98>
    9d8e:	1a 16       	cp	r1, r26
    9d90:	f0 40       	sbci	r31, 0x00	; 0
    9d92:	a2 2f       	mov	r26, r18
    9d94:	23 2f       	mov	r18, r19
    9d96:	34 2f       	mov	r19, r20
    9d98:	44 27       	eor	r20, r20
    9d9a:	58 5f       	subi	r21, 0xF8	; 248
    9d9c:	f3 cf       	rjmp	.-26     	; 0x9d84 <__addsf3x+0x34>
    9d9e:	46 95       	lsr	r20
    9da0:	37 95       	ror	r19
    9da2:	27 95       	ror	r18
    9da4:	a7 95       	ror	r26
    9da6:	f0 40       	sbci	r31, 0x00	; 0
    9da8:	53 95       	inc	r21
    9daa:	c9 f7       	brne	.-14     	; 0x9d9e <__addsf3x+0x4e>
    9dac:	7e f4       	brtc	.+30     	; 0x9dcc <__addsf3x+0x7c>
    9dae:	1f 16       	cp	r1, r31
    9db0:	ba 0b       	sbc	r27, r26
    9db2:	62 0b       	sbc	r22, r18
    9db4:	73 0b       	sbc	r23, r19
    9db6:	84 0b       	sbc	r24, r20
    9db8:	ba f0       	brmi	.+46     	; 0x9de8 <__addsf3x+0x98>
    9dba:	91 50       	subi	r25, 0x01	; 1
    9dbc:	a1 f0       	breq	.+40     	; 0x9de6 <__addsf3x+0x96>
    9dbe:	ff 0f       	add	r31, r31
    9dc0:	bb 1f       	adc	r27, r27
    9dc2:	66 1f       	adc	r22, r22
    9dc4:	77 1f       	adc	r23, r23
    9dc6:	88 1f       	adc	r24, r24
    9dc8:	c2 f7       	brpl	.-16     	; 0x9dba <__addsf3x+0x6a>
    9dca:	0e c0       	rjmp	.+28     	; 0x9de8 <__addsf3x+0x98>
    9dcc:	ba 0f       	add	r27, r26
    9dce:	62 1f       	adc	r22, r18
    9dd0:	73 1f       	adc	r23, r19
    9dd2:	84 1f       	adc	r24, r20
    9dd4:	48 f4       	brcc	.+18     	; 0x9de8 <__addsf3x+0x98>
    9dd6:	87 95       	ror	r24
    9dd8:	77 95       	ror	r23
    9dda:	67 95       	ror	r22
    9ddc:	b7 95       	ror	r27
    9dde:	f7 95       	ror	r31
    9de0:	9e 3f       	cpi	r25, 0xFE	; 254
    9de2:	08 f0       	brcs	.+2      	; 0x9de6 <__addsf3x+0x96>
    9de4:	b3 cf       	rjmp	.-154    	; 0x9d4c <__addsf3+0x1e>
    9de6:	93 95       	inc	r25
    9de8:	88 0f       	add	r24, r24
    9dea:	08 f0       	brcs	.+2      	; 0x9dee <__addsf3x+0x9e>
    9dec:	99 27       	eor	r25, r25
    9dee:	ee 0f       	add	r30, r30
    9df0:	97 95       	ror	r25
    9df2:	87 95       	ror	r24
    9df4:	08 95       	ret
    9df6:	90 d1       	rcall	.+800    	; 0xa118 <__fp_pscA>
    9df8:	58 f0       	brcs	.+22     	; 0x9e10 <__addsf3x+0xc0>
    9dfa:	80 e8       	ldi	r24, 0x80	; 128
    9dfc:	91 e0       	ldi	r25, 0x01	; 1
    9dfe:	09 f4       	brne	.+2      	; 0x9e02 <__addsf3x+0xb2>
    9e00:	9e ef       	ldi	r25, 0xFE	; 254
    9e02:	91 d1       	rcall	.+802    	; 0xa126 <__fp_pscB>
    9e04:	28 f0       	brcs	.+10     	; 0x9e10 <__addsf3x+0xc0>
    9e06:	40 e8       	ldi	r20, 0x80	; 128
    9e08:	51 e0       	ldi	r21, 0x01	; 1
    9e0a:	59 f4       	brne	.+22     	; 0x9e22 <atan2+0xe>
    9e0c:	5e ef       	ldi	r21, 0xFE	; 254
    9e0e:	09 c0       	rjmp	.+18     	; 0x9e22 <atan2+0xe>
    9e10:	5b c1       	rjmp	.+694    	; 0xa0c8 <__fp_nan>
    9e12:	fc c1       	rjmp	.+1016   	; 0xa20c <__fp_zero>

00009e14 <atan2>:
    9e14:	e9 2f       	mov	r30, r25
    9e16:	e0 78       	andi	r30, 0x80	; 128
    9e18:	d7 d1       	rcall	.+942    	; 0xa1c8 <__fp_split3>
    9e1a:	68 f3       	brcs	.-38     	; 0x9df6 <__addsf3x+0xa6>
    9e1c:	09 2e       	mov	r0, r25
    9e1e:	05 2a       	or	r0, r21
    9e20:	c1 f3       	breq	.-16     	; 0x9e12 <__addsf3x+0xc2>
    9e22:	26 17       	cp	r18, r22
    9e24:	37 07       	cpc	r19, r23
    9e26:	48 07       	cpc	r20, r24
    9e28:	59 07       	cpc	r21, r25
    9e2a:	38 f0       	brcs	.+14     	; 0x9e3a <atan2+0x26>
    9e2c:	0e 2e       	mov	r0, r30
    9e2e:	07 f8       	bld	r0, 7
    9e30:	e0 25       	eor	r30, r0
    9e32:	69 f0       	breq	.+26     	; 0x9e4e <atan2+0x3a>
    9e34:	e0 25       	eor	r30, r0
    9e36:	e0 64       	ori	r30, 0x40	; 64
    9e38:	0a c0       	rjmp	.+20     	; 0x9e4e <atan2+0x3a>
    9e3a:	ef 63       	ori	r30, 0x3F	; 63
    9e3c:	07 f8       	bld	r0, 7
    9e3e:	00 94       	com	r0
    9e40:	07 fa       	bst	r0, 7
    9e42:	db 01       	movw	r26, r22
    9e44:	b9 01       	movw	r22, r18
    9e46:	9d 01       	movw	r18, r26
    9e48:	dc 01       	movw	r26, r24
    9e4a:	ca 01       	movw	r24, r20
    9e4c:	ad 01       	movw	r20, r26
    9e4e:	ef 93       	push	r30
    9e50:	4a d0       	rcall	.+148    	; 0x9ee6 <__divsf3_pse>
    9e52:	98 d1       	rcall	.+816    	; 0xa184 <__fp_round>
    9e54:	0a d0       	rcall	.+20     	; 0x9e6a <atan>
    9e56:	5f 91       	pop	r21
    9e58:	55 23       	and	r21, r21
    9e5a:	31 f0       	breq	.+12     	; 0x9e68 <atan2+0x54>
    9e5c:	2b ed       	ldi	r18, 0xDB	; 219
    9e5e:	3f e0       	ldi	r19, 0x0F	; 15
    9e60:	49 e4       	ldi	r20, 0x49	; 73
    9e62:	50 fd       	sbrc	r21, 0
    9e64:	49 ec       	ldi	r20, 0xC9	; 201
    9e66:	63 cf       	rjmp	.-314    	; 0x9d2e <__addsf3>
    9e68:	08 95       	ret

00009e6a <atan>:
    9e6a:	df 93       	push	r29
    9e6c:	dd 27       	eor	r29, r29
    9e6e:	b9 2f       	mov	r27, r25
    9e70:	bf 77       	andi	r27, 0x7F	; 127
    9e72:	40 e8       	ldi	r20, 0x80	; 128
    9e74:	5f e3       	ldi	r21, 0x3F	; 63
    9e76:	16 16       	cp	r1, r22
    9e78:	17 06       	cpc	r1, r23
    9e7a:	48 07       	cpc	r20, r24
    9e7c:	5b 07       	cpc	r21, r27
    9e7e:	10 f4       	brcc	.+4      	; 0x9e84 <atan+0x1a>
    9e80:	d9 2f       	mov	r29, r25
    9e82:	cb d1       	rcall	.+918    	; 0xa21a <inverse>
    9e84:	9f 93       	push	r25
    9e86:	8f 93       	push	r24
    9e88:	7f 93       	push	r23
    9e8a:	6f 93       	push	r22
    9e8c:	36 d2       	rcall	.+1132   	; 0xa2fa <square>
    9e8e:	ee e4       	ldi	r30, 0x4E	; 78
    9e90:	f1 e0       	ldi	r31, 0x01	; 1
    9e92:	1d d1       	rcall	.+570    	; 0xa0ce <__fp_powser>
    9e94:	77 d1       	rcall	.+750    	; 0xa184 <__fp_round>
    9e96:	2f 91       	pop	r18
    9e98:	3f 91       	pop	r19
    9e9a:	4f 91       	pop	r20
    9e9c:	5f 91       	pop	r21
    9e9e:	d0 d1       	rcall	.+928    	; 0xa240 <__mulsf3x>
    9ea0:	dd 23       	and	r29, r29
    9ea2:	49 f0       	breq	.+18     	; 0x9eb6 <atan+0x4c>
    9ea4:	90 58       	subi	r25, 0x80	; 128
    9ea6:	a2 ea       	ldi	r26, 0xA2	; 162
    9ea8:	2a ed       	ldi	r18, 0xDA	; 218
    9eaa:	3f e0       	ldi	r19, 0x0F	; 15
    9eac:	49 ec       	ldi	r20, 0xC9	; 201
    9eae:	5f e3       	ldi	r21, 0x3F	; 63
    9eb0:	d0 78       	andi	r29, 0x80	; 128
    9eb2:	5d 27       	eor	r21, r29
    9eb4:	4d df       	rcall	.-358    	; 0x9d50 <__addsf3x>
    9eb6:	df 91       	pop	r29
    9eb8:	65 c1       	rjmp	.+714    	; 0xa184 <__fp_round>

00009eba <__cmpsf2>:
    9eba:	dc d0       	rcall	.+440    	; 0xa074 <__fp_cmp>
    9ebc:	08 f4       	brcc	.+2      	; 0x9ec0 <__cmpsf2+0x6>
    9ebe:	81 e0       	ldi	r24, 0x01	; 1
    9ec0:	08 95       	ret

00009ec2 <cos>:
    9ec2:	39 d1       	rcall	.+626    	; 0xa136 <__fp_rempio2>
    9ec4:	e3 95       	inc	r30
    9ec6:	6f c1       	rjmp	.+734    	; 0xa1a6 <__fp_sinus>

00009ec8 <__divsf3>:
    9ec8:	0c d0       	rcall	.+24     	; 0x9ee2 <__divsf3x>
    9eca:	5c c1       	rjmp	.+696    	; 0xa184 <__fp_round>
    9ecc:	2c d1       	rcall	.+600    	; 0xa126 <__fp_pscB>
    9ece:	40 f0       	brcs	.+16     	; 0x9ee0 <__divsf3+0x18>
    9ed0:	23 d1       	rcall	.+582    	; 0xa118 <__fp_pscA>
    9ed2:	30 f0       	brcs	.+12     	; 0x9ee0 <__divsf3+0x18>
    9ed4:	21 f4       	brne	.+8      	; 0x9ede <__divsf3+0x16>
    9ed6:	5f 3f       	cpi	r21, 0xFF	; 255
    9ed8:	19 f0       	breq	.+6      	; 0x9ee0 <__divsf3+0x18>
    9eda:	f0 c0       	rjmp	.+480    	; 0xa0bc <__fp_inf>
    9edc:	51 11       	cpse	r21, r1
    9ede:	97 c1       	rjmp	.+814    	; 0xa20e <__fp_szero>
    9ee0:	f3 c0       	rjmp	.+486    	; 0xa0c8 <__fp_nan>

00009ee2 <__divsf3x>:
    9ee2:	72 d1       	rcall	.+740    	; 0xa1c8 <__fp_split3>
    9ee4:	98 f3       	brcs	.-26     	; 0x9ecc <__divsf3+0x4>

00009ee6 <__divsf3_pse>:
    9ee6:	99 23       	and	r25, r25
    9ee8:	c9 f3       	breq	.-14     	; 0x9edc <__divsf3+0x14>
    9eea:	55 23       	and	r21, r21
    9eec:	b1 f3       	breq	.-20     	; 0x9eda <__divsf3+0x12>
    9eee:	95 1b       	sub	r25, r21
    9ef0:	55 0b       	sbc	r21, r21
    9ef2:	bb 27       	eor	r27, r27
    9ef4:	aa 27       	eor	r26, r26
    9ef6:	62 17       	cp	r22, r18
    9ef8:	73 07       	cpc	r23, r19
    9efa:	84 07       	cpc	r24, r20
    9efc:	38 f0       	brcs	.+14     	; 0x9f0c <__divsf3_pse+0x26>
    9efe:	9f 5f       	subi	r25, 0xFF	; 255
    9f00:	5f 4f       	sbci	r21, 0xFF	; 255
    9f02:	22 0f       	add	r18, r18
    9f04:	33 1f       	adc	r19, r19
    9f06:	44 1f       	adc	r20, r20
    9f08:	aa 1f       	adc	r26, r26
    9f0a:	a9 f3       	breq	.-22     	; 0x9ef6 <__divsf3_pse+0x10>
    9f0c:	33 d0       	rcall	.+102    	; 0x9f74 <__divsf3_pse+0x8e>
    9f0e:	0e 2e       	mov	r0, r30
    9f10:	3a f0       	brmi	.+14     	; 0x9f20 <__divsf3_pse+0x3a>
    9f12:	e0 e8       	ldi	r30, 0x80	; 128
    9f14:	30 d0       	rcall	.+96     	; 0x9f76 <__divsf3_pse+0x90>
    9f16:	91 50       	subi	r25, 0x01	; 1
    9f18:	50 40       	sbci	r21, 0x00	; 0
    9f1a:	e6 95       	lsr	r30
    9f1c:	00 1c       	adc	r0, r0
    9f1e:	ca f7       	brpl	.-14     	; 0x9f12 <__divsf3_pse+0x2c>
    9f20:	29 d0       	rcall	.+82     	; 0x9f74 <__divsf3_pse+0x8e>
    9f22:	fe 2f       	mov	r31, r30
    9f24:	27 d0       	rcall	.+78     	; 0x9f74 <__divsf3_pse+0x8e>
    9f26:	66 0f       	add	r22, r22
    9f28:	77 1f       	adc	r23, r23
    9f2a:	88 1f       	adc	r24, r24
    9f2c:	bb 1f       	adc	r27, r27
    9f2e:	26 17       	cp	r18, r22
    9f30:	37 07       	cpc	r19, r23
    9f32:	48 07       	cpc	r20, r24
    9f34:	ab 07       	cpc	r26, r27
    9f36:	b0 e8       	ldi	r27, 0x80	; 128
    9f38:	09 f0       	breq	.+2      	; 0x9f3c <__divsf3_pse+0x56>
    9f3a:	bb 0b       	sbc	r27, r27
    9f3c:	80 2d       	mov	r24, r0
    9f3e:	bf 01       	movw	r22, r30
    9f40:	ff 27       	eor	r31, r31
    9f42:	93 58       	subi	r25, 0x83	; 131
    9f44:	5f 4f       	sbci	r21, 0xFF	; 255
    9f46:	2a f0       	brmi	.+10     	; 0x9f52 <__divsf3_pse+0x6c>
    9f48:	9e 3f       	cpi	r25, 0xFE	; 254
    9f4a:	51 05       	cpc	r21, r1
    9f4c:	68 f0       	brcs	.+26     	; 0x9f68 <__divsf3_pse+0x82>
    9f4e:	b6 c0       	rjmp	.+364    	; 0xa0bc <__fp_inf>
    9f50:	5e c1       	rjmp	.+700    	; 0xa20e <__fp_szero>
    9f52:	5f 3f       	cpi	r21, 0xFF	; 255
    9f54:	ec f3       	brlt	.-6      	; 0x9f50 <__divsf3_pse+0x6a>
    9f56:	98 3e       	cpi	r25, 0xE8	; 232
    9f58:	dc f3       	brlt	.-10     	; 0x9f50 <__divsf3_pse+0x6a>
    9f5a:	86 95       	lsr	r24
    9f5c:	77 95       	ror	r23
    9f5e:	67 95       	ror	r22
    9f60:	b7 95       	ror	r27
    9f62:	f7 95       	ror	r31
    9f64:	9f 5f       	subi	r25, 0xFF	; 255
    9f66:	c9 f7       	brne	.-14     	; 0x9f5a <__divsf3_pse+0x74>
    9f68:	88 0f       	add	r24, r24
    9f6a:	91 1d       	adc	r25, r1
    9f6c:	96 95       	lsr	r25
    9f6e:	87 95       	ror	r24
    9f70:	97 f9       	bld	r25, 7
    9f72:	08 95       	ret
    9f74:	e1 e0       	ldi	r30, 0x01	; 1
    9f76:	66 0f       	add	r22, r22
    9f78:	77 1f       	adc	r23, r23
    9f7a:	88 1f       	adc	r24, r24
    9f7c:	bb 1f       	adc	r27, r27
    9f7e:	62 17       	cp	r22, r18
    9f80:	73 07       	cpc	r23, r19
    9f82:	84 07       	cpc	r24, r20
    9f84:	ba 07       	cpc	r27, r26
    9f86:	20 f0       	brcs	.+8      	; 0x9f90 <__divsf3_pse+0xaa>
    9f88:	62 1b       	sub	r22, r18
    9f8a:	73 0b       	sbc	r23, r19
    9f8c:	84 0b       	sbc	r24, r20
    9f8e:	ba 0b       	sbc	r27, r26
    9f90:	ee 1f       	adc	r30, r30
    9f92:	88 f7       	brcc	.-30     	; 0x9f76 <__divsf3_pse+0x90>
    9f94:	e0 95       	com	r30
    9f96:	08 95       	ret

00009f98 <__fixsfsi>:
    9f98:	04 d0       	rcall	.+8      	; 0x9fa2 <__fixunssfsi>
    9f9a:	68 94       	set
    9f9c:	b1 11       	cpse	r27, r1
    9f9e:	37 c1       	rjmp	.+622    	; 0xa20e <__fp_szero>
    9fa0:	08 95       	ret

00009fa2 <__fixunssfsi>:
    9fa2:	1a d1       	rcall	.+564    	; 0xa1d8 <__fp_splitA>
    9fa4:	88 f0       	brcs	.+34     	; 0x9fc8 <__fixunssfsi+0x26>
    9fa6:	9f 57       	subi	r25, 0x7F	; 127
    9fa8:	90 f0       	brcs	.+36     	; 0x9fce <__fixunssfsi+0x2c>
    9faa:	b9 2f       	mov	r27, r25
    9fac:	99 27       	eor	r25, r25
    9fae:	b7 51       	subi	r27, 0x17	; 23
    9fb0:	a0 f0       	brcs	.+40     	; 0x9fda <__fixunssfsi+0x38>
    9fb2:	d1 f0       	breq	.+52     	; 0x9fe8 <__fixunssfsi+0x46>
    9fb4:	66 0f       	add	r22, r22
    9fb6:	77 1f       	adc	r23, r23
    9fb8:	88 1f       	adc	r24, r24
    9fba:	99 1f       	adc	r25, r25
    9fbc:	1a f0       	brmi	.+6      	; 0x9fc4 <__fixunssfsi+0x22>
    9fbe:	ba 95       	dec	r27
    9fc0:	c9 f7       	brne	.-14     	; 0x9fb4 <__fixunssfsi+0x12>
    9fc2:	12 c0       	rjmp	.+36     	; 0x9fe8 <__fixunssfsi+0x46>
    9fc4:	b1 30       	cpi	r27, 0x01	; 1
    9fc6:	81 f0       	breq	.+32     	; 0x9fe8 <__fixunssfsi+0x46>
    9fc8:	21 d1       	rcall	.+578    	; 0xa20c <__fp_zero>
    9fca:	b1 e0       	ldi	r27, 0x01	; 1
    9fcc:	08 95       	ret
    9fce:	1e c1       	rjmp	.+572    	; 0xa20c <__fp_zero>
    9fd0:	67 2f       	mov	r22, r23
    9fd2:	78 2f       	mov	r23, r24
    9fd4:	88 27       	eor	r24, r24
    9fd6:	b8 5f       	subi	r27, 0xF8	; 248
    9fd8:	39 f0       	breq	.+14     	; 0x9fe8 <__fixunssfsi+0x46>
    9fda:	b9 3f       	cpi	r27, 0xF9	; 249
    9fdc:	cc f3       	brlt	.-14     	; 0x9fd0 <__fixunssfsi+0x2e>
    9fde:	86 95       	lsr	r24
    9fe0:	77 95       	ror	r23
    9fe2:	67 95       	ror	r22
    9fe4:	b3 95       	inc	r27
    9fe6:	d9 f7       	brne	.-10     	; 0x9fde <__fixunssfsi+0x3c>
    9fe8:	3e f4       	brtc	.+14     	; 0x9ff8 <__fixunssfsi+0x56>
    9fea:	90 95       	com	r25
    9fec:	80 95       	com	r24
    9fee:	70 95       	com	r23
    9ff0:	61 95       	neg	r22
    9ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    9ff4:	8f 4f       	sbci	r24, 0xFF	; 255
    9ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    9ff8:	08 95       	ret

00009ffa <__floatunsisf>:
    9ffa:	e8 94       	clt
    9ffc:	09 c0       	rjmp	.+18     	; 0xa010 <__floatsisf+0x12>

00009ffe <__floatsisf>:
    9ffe:	97 fb       	bst	r25, 7
    a000:	3e f4       	brtc	.+14     	; 0xa010 <__floatsisf+0x12>
    a002:	90 95       	com	r25
    a004:	80 95       	com	r24
    a006:	70 95       	com	r23
    a008:	61 95       	neg	r22
    a00a:	7f 4f       	sbci	r23, 0xFF	; 255
    a00c:	8f 4f       	sbci	r24, 0xFF	; 255
    a00e:	9f 4f       	sbci	r25, 0xFF	; 255
    a010:	99 23       	and	r25, r25
    a012:	a9 f0       	breq	.+42     	; 0xa03e <__floatsisf+0x40>
    a014:	f9 2f       	mov	r31, r25
    a016:	96 e9       	ldi	r25, 0x96	; 150
    a018:	bb 27       	eor	r27, r27
    a01a:	93 95       	inc	r25
    a01c:	f6 95       	lsr	r31
    a01e:	87 95       	ror	r24
    a020:	77 95       	ror	r23
    a022:	67 95       	ror	r22
    a024:	b7 95       	ror	r27
    a026:	f1 11       	cpse	r31, r1
    a028:	f8 cf       	rjmp	.-16     	; 0xa01a <__floatsisf+0x1c>
    a02a:	fa f4       	brpl	.+62     	; 0xa06a <__floatsisf+0x6c>
    a02c:	bb 0f       	add	r27, r27
    a02e:	11 f4       	brne	.+4      	; 0xa034 <__floatsisf+0x36>
    a030:	60 ff       	sbrs	r22, 0
    a032:	1b c0       	rjmp	.+54     	; 0xa06a <__floatsisf+0x6c>
    a034:	6f 5f       	subi	r22, 0xFF	; 255
    a036:	7f 4f       	sbci	r23, 0xFF	; 255
    a038:	8f 4f       	sbci	r24, 0xFF	; 255
    a03a:	9f 4f       	sbci	r25, 0xFF	; 255
    a03c:	16 c0       	rjmp	.+44     	; 0xa06a <__floatsisf+0x6c>
    a03e:	88 23       	and	r24, r24
    a040:	11 f0       	breq	.+4      	; 0xa046 <__floatsisf+0x48>
    a042:	96 e9       	ldi	r25, 0x96	; 150
    a044:	11 c0       	rjmp	.+34     	; 0xa068 <__floatsisf+0x6a>
    a046:	77 23       	and	r23, r23
    a048:	21 f0       	breq	.+8      	; 0xa052 <__floatsisf+0x54>
    a04a:	9e e8       	ldi	r25, 0x8E	; 142
    a04c:	87 2f       	mov	r24, r23
    a04e:	76 2f       	mov	r23, r22
    a050:	05 c0       	rjmp	.+10     	; 0xa05c <__floatsisf+0x5e>
    a052:	66 23       	and	r22, r22
    a054:	71 f0       	breq	.+28     	; 0xa072 <__floatsisf+0x74>
    a056:	96 e8       	ldi	r25, 0x86	; 134
    a058:	86 2f       	mov	r24, r22
    a05a:	70 e0       	ldi	r23, 0x00	; 0
    a05c:	60 e0       	ldi	r22, 0x00	; 0
    a05e:	2a f0       	brmi	.+10     	; 0xa06a <__floatsisf+0x6c>
    a060:	9a 95       	dec	r25
    a062:	66 0f       	add	r22, r22
    a064:	77 1f       	adc	r23, r23
    a066:	88 1f       	adc	r24, r24
    a068:	da f7       	brpl	.-10     	; 0xa060 <__floatsisf+0x62>
    a06a:	88 0f       	add	r24, r24
    a06c:	96 95       	lsr	r25
    a06e:	87 95       	ror	r24
    a070:	97 f9       	bld	r25, 7
    a072:	08 95       	ret

0000a074 <__fp_cmp>:
    a074:	99 0f       	add	r25, r25
    a076:	00 08       	sbc	r0, r0
    a078:	55 0f       	add	r21, r21
    a07a:	aa 0b       	sbc	r26, r26
    a07c:	e0 e8       	ldi	r30, 0x80	; 128
    a07e:	fe ef       	ldi	r31, 0xFE	; 254
    a080:	16 16       	cp	r1, r22
    a082:	17 06       	cpc	r1, r23
    a084:	e8 07       	cpc	r30, r24
    a086:	f9 07       	cpc	r31, r25
    a088:	c0 f0       	brcs	.+48     	; 0xa0ba <__fp_cmp+0x46>
    a08a:	12 16       	cp	r1, r18
    a08c:	13 06       	cpc	r1, r19
    a08e:	e4 07       	cpc	r30, r20
    a090:	f5 07       	cpc	r31, r21
    a092:	98 f0       	brcs	.+38     	; 0xa0ba <__fp_cmp+0x46>
    a094:	62 1b       	sub	r22, r18
    a096:	73 0b       	sbc	r23, r19
    a098:	84 0b       	sbc	r24, r20
    a09a:	95 0b       	sbc	r25, r21
    a09c:	39 f4       	brne	.+14     	; 0xa0ac <__fp_cmp+0x38>
    a09e:	0a 26       	eor	r0, r26
    a0a0:	61 f0       	breq	.+24     	; 0xa0ba <__fp_cmp+0x46>
    a0a2:	23 2b       	or	r18, r19
    a0a4:	24 2b       	or	r18, r20
    a0a6:	25 2b       	or	r18, r21
    a0a8:	21 f4       	brne	.+8      	; 0xa0b2 <__fp_cmp+0x3e>
    a0aa:	08 95       	ret
    a0ac:	0a 26       	eor	r0, r26
    a0ae:	09 f4       	brne	.+2      	; 0xa0b2 <__fp_cmp+0x3e>
    a0b0:	a1 40       	sbci	r26, 0x01	; 1
    a0b2:	a6 95       	lsr	r26
    a0b4:	8f ef       	ldi	r24, 0xFF	; 255
    a0b6:	81 1d       	adc	r24, r1
    a0b8:	81 1d       	adc	r24, r1
    a0ba:	08 95       	ret

0000a0bc <__fp_inf>:
    a0bc:	97 f9       	bld	r25, 7
    a0be:	9f 67       	ori	r25, 0x7F	; 127
    a0c0:	80 e8       	ldi	r24, 0x80	; 128
    a0c2:	70 e0       	ldi	r23, 0x00	; 0
    a0c4:	60 e0       	ldi	r22, 0x00	; 0
    a0c6:	08 95       	ret

0000a0c8 <__fp_nan>:
    a0c8:	9f ef       	ldi	r25, 0xFF	; 255
    a0ca:	80 ec       	ldi	r24, 0xC0	; 192
    a0cc:	08 95       	ret

0000a0ce <__fp_powser>:
    a0ce:	df 93       	push	r29
    a0d0:	cf 93       	push	r28
    a0d2:	1f 93       	push	r17
    a0d4:	0f 93       	push	r16
    a0d6:	ff 92       	push	r15
    a0d8:	ef 92       	push	r14
    a0da:	df 92       	push	r13
    a0dc:	7b 01       	movw	r14, r22
    a0de:	8c 01       	movw	r16, r24
    a0e0:	68 94       	set
    a0e2:	05 c0       	rjmp	.+10     	; 0xa0ee <__fp_powser+0x20>
    a0e4:	da 2e       	mov	r13, r26
    a0e6:	ef 01       	movw	r28, r30
    a0e8:	ab d0       	rcall	.+342    	; 0xa240 <__mulsf3x>
    a0ea:	fe 01       	movw	r30, r28
    a0ec:	e8 94       	clt
    a0ee:	a5 91       	lpm	r26, Z+
    a0f0:	25 91       	lpm	r18, Z+
    a0f2:	35 91       	lpm	r19, Z+
    a0f4:	45 91       	lpm	r20, Z+
    a0f6:	55 91       	lpm	r21, Z+
    a0f8:	ae f3       	brts	.-22     	; 0xa0e4 <__fp_powser+0x16>
    a0fa:	ef 01       	movw	r28, r30
    a0fc:	29 de       	rcall	.-942    	; 0x9d50 <__addsf3x>
    a0fe:	fe 01       	movw	r30, r28
    a100:	97 01       	movw	r18, r14
    a102:	a8 01       	movw	r20, r16
    a104:	da 94       	dec	r13
    a106:	79 f7       	brne	.-34     	; 0xa0e6 <__fp_powser+0x18>
    a108:	df 90       	pop	r13
    a10a:	ef 90       	pop	r14
    a10c:	ff 90       	pop	r15
    a10e:	0f 91       	pop	r16
    a110:	1f 91       	pop	r17
    a112:	cf 91       	pop	r28
    a114:	df 91       	pop	r29
    a116:	08 95       	ret

0000a118 <__fp_pscA>:
    a118:	00 24       	eor	r0, r0
    a11a:	0a 94       	dec	r0
    a11c:	16 16       	cp	r1, r22
    a11e:	17 06       	cpc	r1, r23
    a120:	18 06       	cpc	r1, r24
    a122:	09 06       	cpc	r0, r25
    a124:	08 95       	ret

0000a126 <__fp_pscB>:
    a126:	00 24       	eor	r0, r0
    a128:	0a 94       	dec	r0
    a12a:	12 16       	cp	r1, r18
    a12c:	13 06       	cpc	r1, r19
    a12e:	14 06       	cpc	r1, r20
    a130:	05 06       	cpc	r0, r21
    a132:	08 95       	ret
    a134:	c9 cf       	rjmp	.-110    	; 0xa0c8 <__fp_nan>

0000a136 <__fp_rempio2>:
    a136:	50 d0       	rcall	.+160    	; 0xa1d8 <__fp_splitA>
    a138:	e8 f3       	brcs	.-6      	; 0xa134 <__fp_pscB+0xe>
    a13a:	e8 94       	clt
    a13c:	e0 e0       	ldi	r30, 0x00	; 0
    a13e:	bb 27       	eor	r27, r27
    a140:	9f 57       	subi	r25, 0x7F	; 127
    a142:	f0 f0       	brcs	.+60     	; 0xa180 <__fp_rempio2+0x4a>
    a144:	2a ed       	ldi	r18, 0xDA	; 218
    a146:	3f e0       	ldi	r19, 0x0F	; 15
    a148:	49 ec       	ldi	r20, 0xC9	; 201
    a14a:	06 c0       	rjmp	.+12     	; 0xa158 <__fp_rempio2+0x22>
    a14c:	ee 0f       	add	r30, r30
    a14e:	bb 0f       	add	r27, r27
    a150:	66 1f       	adc	r22, r22
    a152:	77 1f       	adc	r23, r23
    a154:	88 1f       	adc	r24, r24
    a156:	28 f0       	brcs	.+10     	; 0xa162 <__fp_rempio2+0x2c>
    a158:	b2 3a       	cpi	r27, 0xA2	; 162
    a15a:	62 07       	cpc	r22, r18
    a15c:	73 07       	cpc	r23, r19
    a15e:	84 07       	cpc	r24, r20
    a160:	28 f0       	brcs	.+10     	; 0xa16c <__fp_rempio2+0x36>
    a162:	b2 5a       	subi	r27, 0xA2	; 162
    a164:	62 0b       	sbc	r22, r18
    a166:	73 0b       	sbc	r23, r19
    a168:	84 0b       	sbc	r24, r20
    a16a:	e3 95       	inc	r30
    a16c:	9a 95       	dec	r25
    a16e:	72 f7       	brpl	.-36     	; 0xa14c <__fp_rempio2+0x16>
    a170:	80 38       	cpi	r24, 0x80	; 128
    a172:	30 f4       	brcc	.+12     	; 0xa180 <__fp_rempio2+0x4a>
    a174:	9a 95       	dec	r25
    a176:	bb 0f       	add	r27, r27
    a178:	66 1f       	adc	r22, r22
    a17a:	77 1f       	adc	r23, r23
    a17c:	88 1f       	adc	r24, r24
    a17e:	d2 f7       	brpl	.-12     	; 0xa174 <__fp_rempio2+0x3e>
    a180:	90 48       	sbci	r25, 0x80	; 128
    a182:	c0 c0       	rjmp	.+384    	; 0xa304 <__fp_mpack_finite>

0000a184 <__fp_round>:
    a184:	09 2e       	mov	r0, r25
    a186:	03 94       	inc	r0
    a188:	00 0c       	add	r0, r0
    a18a:	11 f4       	brne	.+4      	; 0xa190 <__fp_round+0xc>
    a18c:	88 23       	and	r24, r24
    a18e:	52 f0       	brmi	.+20     	; 0xa1a4 <__fp_round+0x20>
    a190:	bb 0f       	add	r27, r27
    a192:	40 f4       	brcc	.+16     	; 0xa1a4 <__fp_round+0x20>
    a194:	bf 2b       	or	r27, r31
    a196:	11 f4       	brne	.+4      	; 0xa19c <__fp_round+0x18>
    a198:	60 ff       	sbrs	r22, 0
    a19a:	04 c0       	rjmp	.+8      	; 0xa1a4 <__fp_round+0x20>
    a19c:	6f 5f       	subi	r22, 0xFF	; 255
    a19e:	7f 4f       	sbci	r23, 0xFF	; 255
    a1a0:	8f 4f       	sbci	r24, 0xFF	; 255
    a1a2:	9f 4f       	sbci	r25, 0xFF	; 255
    a1a4:	08 95       	ret

0000a1a6 <__fp_sinus>:
    a1a6:	ef 93       	push	r30
    a1a8:	e0 ff       	sbrs	r30, 0
    a1aa:	06 c0       	rjmp	.+12     	; 0xa1b8 <__fp_sinus+0x12>
    a1ac:	a2 ea       	ldi	r26, 0xA2	; 162
    a1ae:	2a ed       	ldi	r18, 0xDA	; 218
    a1b0:	3f e0       	ldi	r19, 0x0F	; 15
    a1b2:	49 ec       	ldi	r20, 0xC9	; 201
    a1b4:	5f eb       	ldi	r21, 0xBF	; 191
    a1b6:	cc dd       	rcall	.-1128   	; 0x9d50 <__addsf3x>
    a1b8:	e5 df       	rcall	.-54     	; 0xa184 <__fp_round>
    a1ba:	0f 90       	pop	r0
    a1bc:	03 94       	inc	r0
    a1be:	01 fc       	sbrc	r0, 1
    a1c0:	90 58       	subi	r25, 0x80	; 128
    a1c2:	eb e7       	ldi	r30, 0x7B	; 123
    a1c4:	f1 e0       	ldi	r31, 0x01	; 1
    a1c6:	aa c0       	rjmp	.+340    	; 0xa31c <__fp_powsodd>

0000a1c8 <__fp_split3>:
    a1c8:	57 fd       	sbrc	r21, 7
    a1ca:	90 58       	subi	r25, 0x80	; 128
    a1cc:	44 0f       	add	r20, r20
    a1ce:	55 1f       	adc	r21, r21
    a1d0:	59 f0       	breq	.+22     	; 0xa1e8 <__fp_splitA+0x10>
    a1d2:	5f 3f       	cpi	r21, 0xFF	; 255
    a1d4:	71 f0       	breq	.+28     	; 0xa1f2 <__fp_splitA+0x1a>
    a1d6:	47 95       	ror	r20

0000a1d8 <__fp_splitA>:
    a1d8:	88 0f       	add	r24, r24
    a1da:	97 fb       	bst	r25, 7
    a1dc:	99 1f       	adc	r25, r25
    a1de:	61 f0       	breq	.+24     	; 0xa1f8 <__fp_splitA+0x20>
    a1e0:	9f 3f       	cpi	r25, 0xFF	; 255
    a1e2:	79 f0       	breq	.+30     	; 0xa202 <__fp_splitA+0x2a>
    a1e4:	87 95       	ror	r24
    a1e6:	08 95       	ret
    a1e8:	12 16       	cp	r1, r18
    a1ea:	13 06       	cpc	r1, r19
    a1ec:	14 06       	cpc	r1, r20
    a1ee:	55 1f       	adc	r21, r21
    a1f0:	f2 cf       	rjmp	.-28     	; 0xa1d6 <__fp_split3+0xe>
    a1f2:	46 95       	lsr	r20
    a1f4:	f1 df       	rcall	.-30     	; 0xa1d8 <__fp_splitA>
    a1f6:	08 c0       	rjmp	.+16     	; 0xa208 <__fp_splitA+0x30>
    a1f8:	16 16       	cp	r1, r22
    a1fa:	17 06       	cpc	r1, r23
    a1fc:	18 06       	cpc	r1, r24
    a1fe:	99 1f       	adc	r25, r25
    a200:	f1 cf       	rjmp	.-30     	; 0xa1e4 <__fp_splitA+0xc>
    a202:	86 95       	lsr	r24
    a204:	71 05       	cpc	r23, r1
    a206:	61 05       	cpc	r22, r1
    a208:	08 94       	sec
    a20a:	08 95       	ret

0000a20c <__fp_zero>:
    a20c:	e8 94       	clt

0000a20e <__fp_szero>:
    a20e:	bb 27       	eor	r27, r27
    a210:	66 27       	eor	r22, r22
    a212:	77 27       	eor	r23, r23
    a214:	cb 01       	movw	r24, r22
    a216:	97 f9       	bld	r25, 7
    a218:	08 95       	ret

0000a21a <inverse>:
    a21a:	9b 01       	movw	r18, r22
    a21c:	ac 01       	movw	r20, r24
    a21e:	60 e0       	ldi	r22, 0x00	; 0
    a220:	70 e0       	ldi	r23, 0x00	; 0
    a222:	80 e8       	ldi	r24, 0x80	; 128
    a224:	9f e3       	ldi	r25, 0x3F	; 63
    a226:	50 ce       	rjmp	.-864    	; 0x9ec8 <__divsf3>

0000a228 <__mulsf3>:
    a228:	0b d0       	rcall	.+22     	; 0xa240 <__mulsf3x>
    a22a:	ac cf       	rjmp	.-168    	; 0xa184 <__fp_round>
    a22c:	75 df       	rcall	.-278    	; 0xa118 <__fp_pscA>
    a22e:	28 f0       	brcs	.+10     	; 0xa23a <__mulsf3+0x12>
    a230:	7a df       	rcall	.-268    	; 0xa126 <__fp_pscB>
    a232:	18 f0       	brcs	.+6      	; 0xa23a <__mulsf3+0x12>
    a234:	95 23       	and	r25, r21
    a236:	09 f0       	breq	.+2      	; 0xa23a <__mulsf3+0x12>
    a238:	41 cf       	rjmp	.-382    	; 0xa0bc <__fp_inf>
    a23a:	46 cf       	rjmp	.-372    	; 0xa0c8 <__fp_nan>
    a23c:	11 24       	eor	r1, r1
    a23e:	e7 cf       	rjmp	.-50     	; 0xa20e <__fp_szero>

0000a240 <__mulsf3x>:
    a240:	c3 df       	rcall	.-122    	; 0xa1c8 <__fp_split3>
    a242:	a0 f3       	brcs	.-24     	; 0xa22c <__mulsf3+0x4>

0000a244 <__mulsf3_pse>:
    a244:	95 9f       	mul	r25, r21
    a246:	d1 f3       	breq	.-12     	; 0xa23c <__mulsf3+0x14>
    a248:	95 0f       	add	r25, r21
    a24a:	50 e0       	ldi	r21, 0x00	; 0
    a24c:	55 1f       	adc	r21, r21
    a24e:	62 9f       	mul	r22, r18
    a250:	f0 01       	movw	r30, r0
    a252:	72 9f       	mul	r23, r18
    a254:	bb 27       	eor	r27, r27
    a256:	f0 0d       	add	r31, r0
    a258:	b1 1d       	adc	r27, r1
    a25a:	63 9f       	mul	r22, r19
    a25c:	aa 27       	eor	r26, r26
    a25e:	f0 0d       	add	r31, r0
    a260:	b1 1d       	adc	r27, r1
    a262:	aa 1f       	adc	r26, r26
    a264:	64 9f       	mul	r22, r20
    a266:	66 27       	eor	r22, r22
    a268:	b0 0d       	add	r27, r0
    a26a:	a1 1d       	adc	r26, r1
    a26c:	66 1f       	adc	r22, r22
    a26e:	82 9f       	mul	r24, r18
    a270:	22 27       	eor	r18, r18
    a272:	b0 0d       	add	r27, r0
    a274:	a1 1d       	adc	r26, r1
    a276:	62 1f       	adc	r22, r18
    a278:	73 9f       	mul	r23, r19
    a27a:	b0 0d       	add	r27, r0
    a27c:	a1 1d       	adc	r26, r1
    a27e:	62 1f       	adc	r22, r18
    a280:	83 9f       	mul	r24, r19
    a282:	a0 0d       	add	r26, r0
    a284:	61 1d       	adc	r22, r1
    a286:	22 1f       	adc	r18, r18
    a288:	74 9f       	mul	r23, r20
    a28a:	33 27       	eor	r19, r19
    a28c:	a0 0d       	add	r26, r0
    a28e:	61 1d       	adc	r22, r1
    a290:	23 1f       	adc	r18, r19
    a292:	84 9f       	mul	r24, r20
    a294:	60 0d       	add	r22, r0
    a296:	21 1d       	adc	r18, r1
    a298:	82 2f       	mov	r24, r18
    a29a:	76 2f       	mov	r23, r22
    a29c:	6a 2f       	mov	r22, r26
    a29e:	11 24       	eor	r1, r1
    a2a0:	9f 57       	subi	r25, 0x7F	; 127
    a2a2:	50 40       	sbci	r21, 0x00	; 0
    a2a4:	8a f0       	brmi	.+34     	; 0xa2c8 <__mulsf3_pse+0x84>
    a2a6:	e1 f0       	breq	.+56     	; 0xa2e0 <__mulsf3_pse+0x9c>
    a2a8:	88 23       	and	r24, r24
    a2aa:	4a f0       	brmi	.+18     	; 0xa2be <__mulsf3_pse+0x7a>
    a2ac:	ee 0f       	add	r30, r30
    a2ae:	ff 1f       	adc	r31, r31
    a2b0:	bb 1f       	adc	r27, r27
    a2b2:	66 1f       	adc	r22, r22
    a2b4:	77 1f       	adc	r23, r23
    a2b6:	88 1f       	adc	r24, r24
    a2b8:	91 50       	subi	r25, 0x01	; 1
    a2ba:	50 40       	sbci	r21, 0x00	; 0
    a2bc:	a9 f7       	brne	.-22     	; 0xa2a8 <__mulsf3_pse+0x64>
    a2be:	9e 3f       	cpi	r25, 0xFE	; 254
    a2c0:	51 05       	cpc	r21, r1
    a2c2:	70 f0       	brcs	.+28     	; 0xa2e0 <__mulsf3_pse+0x9c>
    a2c4:	fb ce       	rjmp	.-522    	; 0xa0bc <__fp_inf>
    a2c6:	a3 cf       	rjmp	.-186    	; 0xa20e <__fp_szero>
    a2c8:	5f 3f       	cpi	r21, 0xFF	; 255
    a2ca:	ec f3       	brlt	.-6      	; 0xa2c6 <__mulsf3_pse+0x82>
    a2cc:	98 3e       	cpi	r25, 0xE8	; 232
    a2ce:	dc f3       	brlt	.-10     	; 0xa2c6 <__mulsf3_pse+0x82>
    a2d0:	86 95       	lsr	r24
    a2d2:	77 95       	ror	r23
    a2d4:	67 95       	ror	r22
    a2d6:	b7 95       	ror	r27
    a2d8:	f7 95       	ror	r31
    a2da:	e7 95       	ror	r30
    a2dc:	9f 5f       	subi	r25, 0xFF	; 255
    a2de:	c1 f7       	brne	.-16     	; 0xa2d0 <__mulsf3_pse+0x8c>
    a2e0:	fe 2b       	or	r31, r30
    a2e2:	88 0f       	add	r24, r24
    a2e4:	91 1d       	adc	r25, r1
    a2e6:	96 95       	lsr	r25
    a2e8:	87 95       	ror	r24
    a2ea:	97 f9       	bld	r25, 7
    a2ec:	08 95       	ret

0000a2ee <sin>:
    a2ee:	9f 93       	push	r25
    a2f0:	22 df       	rcall	.-444    	; 0xa136 <__fp_rempio2>
    a2f2:	0f 90       	pop	r0
    a2f4:	07 fc       	sbrc	r0, 7
    a2f6:	ee 5f       	subi	r30, 0xFE	; 254
    a2f8:	56 cf       	rjmp	.-340    	; 0xa1a6 <__fp_sinus>

0000a2fa <square>:
    a2fa:	9b 01       	movw	r18, r22
    a2fc:	ac 01       	movw	r20, r24
    a2fe:	94 cf       	rjmp	.-216    	; 0xa228 <__mulsf3>

0000a300 <__fp_mpack>:
    a300:	9f 3f       	cpi	r25, 0xFF	; 255
    a302:	31 f0       	breq	.+12     	; 0xa310 <__fp_mpack_finite+0xc>

0000a304 <__fp_mpack_finite>:
    a304:	91 50       	subi	r25, 0x01	; 1
    a306:	20 f4       	brcc	.+8      	; 0xa310 <__fp_mpack_finite+0xc>
    a308:	87 95       	ror	r24
    a30a:	77 95       	ror	r23
    a30c:	67 95       	ror	r22
    a30e:	b7 95       	ror	r27
    a310:	88 0f       	add	r24, r24
    a312:	91 1d       	adc	r25, r1
    a314:	96 95       	lsr	r25
    a316:	87 95       	ror	r24
    a318:	97 f9       	bld	r25, 7
    a31a:	08 95       	ret

0000a31c <__fp_powsodd>:
    a31c:	9f 93       	push	r25
    a31e:	8f 93       	push	r24
    a320:	7f 93       	push	r23
    a322:	6f 93       	push	r22
    a324:	ff 93       	push	r31
    a326:	ef 93       	push	r30
    a328:	9b 01       	movw	r18, r22
    a32a:	ac 01       	movw	r20, r24
    a32c:	7d df       	rcall	.-262    	; 0xa228 <__mulsf3>
    a32e:	ef 91       	pop	r30
    a330:	ff 91       	pop	r31
    a332:	cd de       	rcall	.-614    	; 0xa0ce <__fp_powser>
    a334:	2f 91       	pop	r18
    a336:	3f 91       	pop	r19
    a338:	4f 91       	pop	r20
    a33a:	5f 91       	pop	r21
    a33c:	75 cf       	rjmp	.-278    	; 0xa228 <__mulsf3>

0000a33e <__mulsi3>:
    a33e:	62 9f       	mul	r22, r18
    a340:	d0 01       	movw	r26, r0
    a342:	73 9f       	mul	r23, r19
    a344:	f0 01       	movw	r30, r0
    a346:	82 9f       	mul	r24, r18
    a348:	e0 0d       	add	r30, r0
    a34a:	f1 1d       	adc	r31, r1
    a34c:	64 9f       	mul	r22, r20
    a34e:	e0 0d       	add	r30, r0
    a350:	f1 1d       	adc	r31, r1
    a352:	92 9f       	mul	r25, r18
    a354:	f0 0d       	add	r31, r0
    a356:	83 9f       	mul	r24, r19
    a358:	f0 0d       	add	r31, r0
    a35a:	74 9f       	mul	r23, r20
    a35c:	f0 0d       	add	r31, r0
    a35e:	65 9f       	mul	r22, r21
    a360:	f0 0d       	add	r31, r0
    a362:	99 27       	eor	r25, r25
    a364:	72 9f       	mul	r23, r18
    a366:	b0 0d       	add	r27, r0
    a368:	e1 1d       	adc	r30, r1
    a36a:	f9 1f       	adc	r31, r25
    a36c:	63 9f       	mul	r22, r19
    a36e:	b0 0d       	add	r27, r0
    a370:	e1 1d       	adc	r30, r1
    a372:	f9 1f       	adc	r31, r25
    a374:	bd 01       	movw	r22, r26
    a376:	cf 01       	movw	r24, r30
    a378:	11 24       	eor	r1, r1
    a37a:	08 95       	ret

0000a37c <__udivmodhi4>:
    a37c:	aa 1b       	sub	r26, r26
    a37e:	bb 1b       	sub	r27, r27
    a380:	51 e1       	ldi	r21, 0x11	; 17
    a382:	07 c0       	rjmp	.+14     	; 0xa392 <__udivmodhi4_ep>

0000a384 <__udivmodhi4_loop>:
    a384:	aa 1f       	adc	r26, r26
    a386:	bb 1f       	adc	r27, r27
    a388:	a6 17       	cp	r26, r22
    a38a:	b7 07       	cpc	r27, r23
    a38c:	10 f0       	brcs	.+4      	; 0xa392 <__udivmodhi4_ep>
    a38e:	a6 1b       	sub	r26, r22
    a390:	b7 0b       	sbc	r27, r23

0000a392 <__udivmodhi4_ep>:
    a392:	88 1f       	adc	r24, r24
    a394:	99 1f       	adc	r25, r25
    a396:	5a 95       	dec	r21
    a398:	a9 f7       	brne	.-22     	; 0xa384 <__udivmodhi4_loop>
    a39a:	80 95       	com	r24
    a39c:	90 95       	com	r25
    a39e:	bc 01       	movw	r22, r24
    a3a0:	cd 01       	movw	r24, r26
    a3a2:	08 95       	ret

0000a3a4 <__divmodhi4>:
    a3a4:	97 fb       	bst	r25, 7
    a3a6:	09 2e       	mov	r0, r25
    a3a8:	07 26       	eor	r0, r23
    a3aa:	0a d0       	rcall	.+20     	; 0xa3c0 <__divmodhi4_neg1>
    a3ac:	77 fd       	sbrc	r23, 7
    a3ae:	04 d0       	rcall	.+8      	; 0xa3b8 <__divmodhi4_neg2>
    a3b0:	e5 df       	rcall	.-54     	; 0xa37c <__udivmodhi4>
    a3b2:	06 d0       	rcall	.+12     	; 0xa3c0 <__divmodhi4_neg1>
    a3b4:	00 20       	and	r0, r0
    a3b6:	1a f4       	brpl	.+6      	; 0xa3be <__divmodhi4_exit>

0000a3b8 <__divmodhi4_neg2>:
    a3b8:	70 95       	com	r23
    a3ba:	61 95       	neg	r22
    a3bc:	7f 4f       	sbci	r23, 0xFF	; 255

0000a3be <__divmodhi4_exit>:
    a3be:	08 95       	ret

0000a3c0 <__divmodhi4_neg1>:
    a3c0:	f6 f7       	brtc	.-4      	; 0xa3be <__divmodhi4_exit>
    a3c2:	90 95       	com	r25
    a3c4:	81 95       	neg	r24
    a3c6:	9f 4f       	sbci	r25, 0xFF	; 255
    a3c8:	08 95       	ret

0000a3ca <__divmodsi4>:
    a3ca:	97 fb       	bst	r25, 7
    a3cc:	09 2e       	mov	r0, r25
    a3ce:	05 26       	eor	r0, r21
    a3d0:	0e d0       	rcall	.+28     	; 0xa3ee <__divmodsi4_neg1>
    a3d2:	57 fd       	sbrc	r21, 7
    a3d4:	04 d0       	rcall	.+8      	; 0xa3de <__divmodsi4_neg2>
    a3d6:	14 d0       	rcall	.+40     	; 0xa400 <__udivmodsi4>
    a3d8:	0a d0       	rcall	.+20     	; 0xa3ee <__divmodsi4_neg1>
    a3da:	00 1c       	adc	r0, r0
    a3dc:	38 f4       	brcc	.+14     	; 0xa3ec <__divmodsi4_exit>

0000a3de <__divmodsi4_neg2>:
    a3de:	50 95       	com	r21
    a3e0:	40 95       	com	r20
    a3e2:	30 95       	com	r19
    a3e4:	21 95       	neg	r18
    a3e6:	3f 4f       	sbci	r19, 0xFF	; 255
    a3e8:	4f 4f       	sbci	r20, 0xFF	; 255
    a3ea:	5f 4f       	sbci	r21, 0xFF	; 255

0000a3ec <__divmodsi4_exit>:
    a3ec:	08 95       	ret

0000a3ee <__divmodsi4_neg1>:
    a3ee:	f6 f7       	brtc	.-4      	; 0xa3ec <__divmodsi4_exit>
    a3f0:	90 95       	com	r25
    a3f2:	80 95       	com	r24
    a3f4:	70 95       	com	r23
    a3f6:	61 95       	neg	r22
    a3f8:	7f 4f       	sbci	r23, 0xFF	; 255
    a3fa:	8f 4f       	sbci	r24, 0xFF	; 255
    a3fc:	9f 4f       	sbci	r25, 0xFF	; 255
    a3fe:	08 95       	ret

0000a400 <__udivmodsi4>:
    a400:	a1 e2       	ldi	r26, 0x21	; 33
    a402:	1a 2e       	mov	r1, r26
    a404:	aa 1b       	sub	r26, r26
    a406:	bb 1b       	sub	r27, r27
    a408:	fd 01       	movw	r30, r26
    a40a:	0d c0       	rjmp	.+26     	; 0xa426 <__udivmodsi4_ep>

0000a40c <__udivmodsi4_loop>:
    a40c:	aa 1f       	adc	r26, r26
    a40e:	bb 1f       	adc	r27, r27
    a410:	ee 1f       	adc	r30, r30
    a412:	ff 1f       	adc	r31, r31
    a414:	a2 17       	cp	r26, r18
    a416:	b3 07       	cpc	r27, r19
    a418:	e4 07       	cpc	r30, r20
    a41a:	f5 07       	cpc	r31, r21
    a41c:	20 f0       	brcs	.+8      	; 0xa426 <__udivmodsi4_ep>
    a41e:	a2 1b       	sub	r26, r18
    a420:	b3 0b       	sbc	r27, r19
    a422:	e4 0b       	sbc	r30, r20
    a424:	f5 0b       	sbc	r31, r21

0000a426 <__udivmodsi4_ep>:
    a426:	66 1f       	adc	r22, r22
    a428:	77 1f       	adc	r23, r23
    a42a:	88 1f       	adc	r24, r24
    a42c:	99 1f       	adc	r25, r25
    a42e:	1a 94       	dec	r1
    a430:	69 f7       	brne	.-38     	; 0xa40c <__udivmodsi4_loop>
    a432:	60 95       	com	r22
    a434:	70 95       	com	r23
    a436:	80 95       	com	r24
    a438:	90 95       	com	r25
    a43a:	9b 01       	movw	r18, r22
    a43c:	ac 01       	movw	r20, r24
    a43e:	bd 01       	movw	r22, r26
    a440:	cf 01       	movw	r24, r30
    a442:	08 95       	ret

0000a444 <do_rand>:
    a444:	af 92       	push	r10
    a446:	bf 92       	push	r11
    a448:	cf 92       	push	r12
    a44a:	df 92       	push	r13
    a44c:	ef 92       	push	r14
    a44e:	ff 92       	push	r15
    a450:	0f 93       	push	r16
    a452:	1f 93       	push	r17
    a454:	cf 93       	push	r28
    a456:	df 93       	push	r29
    a458:	ec 01       	movw	r28, r24
    a45a:	68 81       	ld	r22, Y
    a45c:	79 81       	ldd	r23, Y+1	; 0x01
    a45e:	8a 81       	ldd	r24, Y+2	; 0x02
    a460:	9b 81       	ldd	r25, Y+3	; 0x03
    a462:	61 15       	cp	r22, r1
    a464:	71 05       	cpc	r23, r1
    a466:	81 05       	cpc	r24, r1
    a468:	91 05       	cpc	r25, r1
    a46a:	21 f4       	brne	.+8      	; 0xa474 <do_rand+0x30>
    a46c:	64 e2       	ldi	r22, 0x24	; 36
    a46e:	79 ed       	ldi	r23, 0xD9	; 217
    a470:	8b e5       	ldi	r24, 0x5B	; 91
    a472:	97 e0       	ldi	r25, 0x07	; 7
    a474:	2d e1       	ldi	r18, 0x1D	; 29
    a476:	33 ef       	ldi	r19, 0xF3	; 243
    a478:	41 e0       	ldi	r20, 0x01	; 1
    a47a:	50 e0       	ldi	r21, 0x00	; 0
    a47c:	0e 94 e5 51 	call	0xa3ca	; 0xa3ca <__divmodsi4>
    a480:	79 01       	movw	r14, r18
    a482:	8a 01       	movw	r16, r20
    a484:	27 ea       	ldi	r18, 0xA7	; 167
    a486:	31 e4       	ldi	r19, 0x41	; 65
    a488:	40 e0       	ldi	r20, 0x00	; 0
    a48a:	50 e0       	ldi	r21, 0x00	; 0
    a48c:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__mulsi3>
    a490:	5b 01       	movw	r10, r22
    a492:	6c 01       	movw	r12, r24
    a494:	c8 01       	movw	r24, r16
    a496:	b7 01       	movw	r22, r14
    a498:	2c ee       	ldi	r18, 0xEC	; 236
    a49a:	34 ef       	ldi	r19, 0xF4	; 244
    a49c:	4f ef       	ldi	r20, 0xFF	; 255
    a49e:	5f ef       	ldi	r21, 0xFF	; 255
    a4a0:	0e 94 9f 51 	call	0xa33e	; 0xa33e <__mulsi3>
    a4a4:	6a 0d       	add	r22, r10
    a4a6:	7b 1d       	adc	r23, r11
    a4a8:	8c 1d       	adc	r24, r12
    a4aa:	9d 1d       	adc	r25, r13
    a4ac:	97 ff       	sbrs	r25, 7
    a4ae:	04 c0       	rjmp	.+8      	; 0xa4b8 <do_rand+0x74>
    a4b0:	61 50       	subi	r22, 0x01	; 1
    a4b2:	70 40       	sbci	r23, 0x00	; 0
    a4b4:	80 40       	sbci	r24, 0x00	; 0
    a4b6:	90 48       	sbci	r25, 0x80	; 128
    a4b8:	68 83       	st	Y, r22
    a4ba:	79 83       	std	Y+1, r23	; 0x01
    a4bc:	8a 83       	std	Y+2, r24	; 0x02
    a4be:	9b 83       	std	Y+3, r25	; 0x03
    a4c0:	7f 77       	andi	r23, 0x7F	; 127
    a4c2:	cb 01       	movw	r24, r22
    a4c4:	df 91       	pop	r29
    a4c6:	cf 91       	pop	r28
    a4c8:	1f 91       	pop	r17
    a4ca:	0f 91       	pop	r16
    a4cc:	ff 90       	pop	r15
    a4ce:	ef 90       	pop	r14
    a4d0:	df 90       	pop	r13
    a4d2:	cf 90       	pop	r12
    a4d4:	bf 90       	pop	r11
    a4d6:	af 90       	pop	r10
    a4d8:	08 95       	ret

0000a4da <rand_r>:
    a4da:	0e 94 22 52 	call	0xa444	; 0xa444 <do_rand>
    a4de:	08 95       	ret

0000a4e0 <rand>:
    a4e0:	89 e1       	ldi	r24, 0x19	; 25
    a4e2:	92 e0       	ldi	r25, 0x02	; 2
    a4e4:	0e 94 22 52 	call	0xa444	; 0xa444 <do_rand>
    a4e8:	08 95       	ret

0000a4ea <srand>:
    a4ea:	a0 e0       	ldi	r26, 0x00	; 0
    a4ec:	b0 e0       	ldi	r27, 0x00	; 0
    a4ee:	80 93 19 02 	sts	0x0219, r24
    a4f2:	90 93 1a 02 	sts	0x021A, r25
    a4f6:	a0 93 1b 02 	sts	0x021B, r26
    a4fa:	b0 93 1c 02 	sts	0x021C, r27
    a4fe:	08 95       	ret

0000a500 <memset>:
    a500:	dc 01       	movw	r26, r24
    a502:	01 c0       	rjmp	.+2      	; 0xa506 <memset+0x6>
    a504:	6d 93       	st	X+, r22
    a506:	41 50       	subi	r20, 0x01	; 1
    a508:	50 40       	sbci	r21, 0x00	; 0
    a50a:	e0 f7       	brcc	.-8      	; 0xa504 <memset+0x4>
    a50c:	08 95       	ret

0000a50e <__eerd_block_m2560>:
    a50e:	dc 01       	movw	r26, r24
    a510:	cb 01       	movw	r24, r22

0000a512 <__eerd_blraw_m2560>:
    a512:	fc 01       	movw	r30, r24
    a514:	f9 99       	sbic	0x1f, 1	; 31
    a516:	fe cf       	rjmp	.-4      	; 0xa514 <__eerd_blraw_m2560+0x2>
    a518:	06 c0       	rjmp	.+12     	; 0xa526 <__eerd_blraw_m2560+0x14>
    a51a:	f2 bd       	out	0x22, r31	; 34
    a51c:	e1 bd       	out	0x21, r30	; 33
    a51e:	f8 9a       	sbi	0x1f, 0	; 31
    a520:	31 96       	adiw	r30, 0x01	; 1
    a522:	00 b4       	in	r0, 0x20	; 32
    a524:	0d 92       	st	X+, r0
    a526:	41 50       	subi	r20, 0x01	; 1
    a528:	50 40       	sbci	r21, 0x00	; 0
    a52a:	b8 f7       	brcc	.-18     	; 0xa51a <__eerd_blraw_m2560+0x8>
    a52c:	08 95       	ret

0000a52e <__eerd_byte_m2560>:
    a52e:	f9 99       	sbic	0x1f, 1	; 31
    a530:	fe cf       	rjmp	.-4      	; 0xa52e <__eerd_byte_m2560>
    a532:	92 bd       	out	0x22, r25	; 34
    a534:	81 bd       	out	0x21, r24	; 33
    a536:	f8 9a       	sbi	0x1f, 0	; 31
    a538:	99 27       	eor	r25, r25
    a53a:	80 b5       	in	r24, 0x20	; 32
    a53c:	08 95       	ret

0000a53e <__eerd_word_m2560>:
    a53e:	a8 e1       	ldi	r26, 0x18	; 24
    a540:	b0 e0       	ldi	r27, 0x00	; 0
    a542:	42 e0       	ldi	r20, 0x02	; 2
    a544:	50 e0       	ldi	r21, 0x00	; 0
    a546:	0c 94 89 52 	jmp	0xa512	; 0xa512 <__eerd_blraw_m2560>

0000a54a <__eeupd_block_m2560>:
    a54a:	dc 01       	movw	r26, r24
    a54c:	a4 0f       	add	r26, r20
    a54e:	b5 1f       	adc	r27, r21
    a550:	41 50       	subi	r20, 0x01	; 1
    a552:	50 40       	sbci	r21, 0x00	; 0
    a554:	48 f0       	brcs	.+18     	; 0xa568 <__eeupd_block_m2560+0x1e>
    a556:	cb 01       	movw	r24, r22
    a558:	84 0f       	add	r24, r20
    a55a:	95 1f       	adc	r25, r21
    a55c:	2e 91       	ld	r18, -X
    a55e:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__eeupd_r18_m2560>
    a562:	41 50       	subi	r20, 0x01	; 1
    a564:	50 40       	sbci	r21, 0x00	; 0
    a566:	d0 f7       	brcc	.-12     	; 0xa55c <__eeupd_block_m2560+0x12>
    a568:	08 95       	ret

0000a56a <__eeupd_byte_m2560>:
    a56a:	26 2f       	mov	r18, r22

0000a56c <__eeupd_r18_m2560>:
    a56c:	f9 99       	sbic	0x1f, 1	; 31
    a56e:	fe cf       	rjmp	.-4      	; 0xa56c <__eeupd_r18_m2560>
    a570:	92 bd       	out	0x22, r25	; 34
    a572:	81 bd       	out	0x21, r24	; 33
    a574:	f8 9a       	sbi	0x1f, 0	; 31
    a576:	01 97       	sbiw	r24, 0x01	; 1
    a578:	00 b4       	in	r0, 0x20	; 32
    a57a:	02 16       	cp	r0, r18
    a57c:	39 f0       	breq	.+14     	; 0xa58c <__eeupd_r18_m2560+0x20>
    a57e:	1f ba       	out	0x1f, r1	; 31
    a580:	20 bd       	out	0x20, r18	; 32
    a582:	0f b6       	in	r0, 0x3f	; 63
    a584:	f8 94       	cli
    a586:	fa 9a       	sbi	0x1f, 2	; 31
    a588:	f9 9a       	sbi	0x1f, 1	; 31
    a58a:	0f be       	out	0x3f, r0	; 63
    a58c:	08 95       	ret

0000a58e <__eeupd_word_m2560>:
    a58e:	01 96       	adiw	r24, 0x01	; 1
    a590:	27 2f       	mov	r18, r23
    a592:	0e 94 b6 52 	call	0xa56c	; 0xa56c <__eeupd_r18_m2560>
    a596:	0c 94 b5 52 	jmp	0xa56a	; 0xa56a <__eeupd_byte_m2560>

0000a59a <__eewr_byte_m2560>:
    a59a:	26 2f       	mov	r18, r22

0000a59c <__eewr_r18_m2560>:
    a59c:	f9 99       	sbic	0x1f, 1	; 31
    a59e:	fe cf       	rjmp	.-4      	; 0xa59c <__eewr_r18_m2560>
    a5a0:	1f ba       	out	0x1f, r1	; 31
    a5a2:	92 bd       	out	0x22, r25	; 34
    a5a4:	81 bd       	out	0x21, r24	; 33
    a5a6:	20 bd       	out	0x20, r18	; 32
    a5a8:	0f b6       	in	r0, 0x3f	; 63
    a5aa:	f8 94       	cli
    a5ac:	fa 9a       	sbi	0x1f, 2	; 31
    a5ae:	f9 9a       	sbi	0x1f, 1	; 31
    a5b0:	0f be       	out	0x3f, r0	; 63
    a5b2:	01 96       	adiw	r24, 0x01	; 1
    a5b4:	08 95       	ret

0000a5b6 <__eewr_word_m2560>:
    a5b6:	0e 94 cd 52 	call	0xa59a	; 0xa59a <__eewr_byte_m2560>
    a5ba:	27 2f       	mov	r18, r23
    a5bc:	0c 94 ce 52 	jmp	0xa59c	; 0xa59c <__eewr_r18_m2560>

0000a5c0 <_exit>:
    a5c0:	ff cf       	rjmp	.-2      	; 0xa5c0 <_exit>
